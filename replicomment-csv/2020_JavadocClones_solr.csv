Class;Method1;Method2;Type;Param1;Param2;Cloned text;Legit?
org.apache.solr.common.util.ByteUtils;int UTF16toUTF8(CharSequence s, int offset, int len, byte[] result, int resultOffset);int writeUTF16toUTF8(CharSequence s, int offset, int len, OutputStream fos, byte[] scratch);@return;;;the number of bytes written;false
org.apache.solr.common.util.ByteUtils;int UTF16toUTF8(CharSequence s, int offset, int len, byte[] result, int resultOffset);int calcUTF16toUTF8Length(CharSequence s, int offset, int len);@return;;;the number of bytes written;false
org.apache.solr.common.util.ByteUtils;int writeUTF16toUTF8(CharSequence s, int offset, int len, OutputStream fos, byte[] scratch);int calcUTF16toUTF8Length(CharSequence s, int offset, int len);@return;;;the number of bytes written;false
org.apache.solr.common.util.CommandOperation;List parse(Reader rdr, Set singletonCommands);List readCommands(Iterable streams, NamedList resp, Set singletonCommands);@return;;;parsed list of commands;false
org.apache.solr.common.util.JavaBinCodec;void writeVInt(int i, FastOutputStream out);int readVInt(DataInputInputStream in);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.common.util.JsonRecordReader;List getAllRecords(Reader r);void streamRecords(Reader r, Handler handler);@param;Reader r;Reader r;the stream reader;true
org.apache.solr.common.util.NamedList; NamedList(Map.Entry nameValuePairs); NamedList(Map nameValueMap);@param;Map.Entry<String,? extends T>[] nameValuePairs;Map<String,? extends T> nameValueMap;the name value pairs;true
org.apache.solr.common.util.NamedList;T get(String name);T get(String name, int start);@return;;;null if not found or if the value stored was null.;true
org.apache.solr.common.util.NamedList;List getAll(String name);List removeAll(String name);@return;;;List of values;false
org.apache.solr.common.util.NamedList;List getAll(String name);List removeAll(String name);@param;String name;String name;Name;true
org.apache.solr.common.util.NamedList;Boolean removeBooleanArg(String name);Boolean getBooleanArg(String name);@return;;;The boolean value found.;false
org.apache.solr.common.util.NamedList;Boolean removeBooleanArg(String name);Boolean getBooleanArg(String name);@param;String name;String name;The key to look up in the NamedList.;true
org.apache.solr.common.util.NamedList;Boolean removeBooleanArg(String name);Boolean getBooleanArg(String name);@throws;;;If multiple values are found for the name or the value found is not a Boolean or a String.;true
org.apache.solr.common.util.NamedList;Boolean removeBooleanArg(String name);Collection removeConfigArgs(String name);@param;String name;String name;The key to look up in the NamedList.;true
org.apache.solr.common.util.NamedList;Boolean getBooleanArg(String name);Collection removeConfigArgs(String name);@param;String name;String name;The key to look up in the NamedList.;true
org.apache.solr.common.cloud.SolrZkClient;void makePath(String path, boolean retryOnConnLoss);void makePath(String path, byte[] data, CreateMode createMode, boolean retryOnConnLoss);Free text;;;Creates the path in ZooKeeper, creating each node as necessary. e.g. If <code>path=/solr/group/node</code> and none of the nodes, solr, group, node exist, each will be created. ;true
org.apache.solr.common.cloud.SolrZkClient;void makePath(String path, boolean retryOnConnLoss);void makePath(String path, byte[] data, CreateMode createMode, Watcher watcher, boolean retryOnConnLoss);Free text;;;Creates the path in ZooKeeper, creating each node as necessary. e.g. If <code>path=/solr/group/node</code> and none of the nodes, solr, group, node exist, each will be created. ;true
org.apache.solr.common.cloud.SolrZkClient;void makePath(String path, boolean retryOnConnLoss);void makePath(String path, byte[] data, CreateMode createMode, Watcher watcher, boolean failOnExists, boolean retryOnConnLoss);Free text;;;Creates the path in ZooKeeper, creating each node as necessary. e.g. If <code>path=/solr/group/node</code> and none of the nodes, solr, group, node exist, each will be created. ;true
org.apache.solr.common.cloud.SolrZkClient;void makePath(String path, byte[] data, boolean retryOnConnLoss);void makePath(String path, byte[] data, CreateMode createMode, boolean retryOnConnLoss);@param;byte[] data;byte[] data;to set on the last zkNode;true
org.apache.solr.common.cloud.SolrZkClient;void makePath(String path, byte[] data, boolean retryOnConnLoss);void makePath(String path, byte[] data, CreateMode createMode, Watcher watcher, boolean retryOnConnLoss);@param;byte[] data;byte[] data;to set on the last zkNode;true
org.apache.solr.common.cloud.SolrZkClient;void makePath(String path, byte[] data, boolean retryOnConnLoss);void makePath(String path, byte[] data, CreateMode createMode, Watcher watcher, boolean failOnExists, boolean retryOnConnLoss);@param;byte[] data;byte[] data;to set on the last zkNode;true
org.apache.solr.common.cloud.SolrZkClient;void makePath(String path, byte[] data, CreateMode createMode, boolean retryOnConnLoss);void makePath(String path, byte[] data, CreateMode createMode, Watcher watcher, boolean retryOnConnLoss);Whole;;;Creates the path in ZooKeeper, creating each node as necessary. e.g. If <code>path=/solr/group/node</code> and none of the nodes, solr, group, node exist, each will be created.  @param to set on the last zkNode  ;false
org.apache.solr.common.cloud.SolrZkClient;void makePath(String path, byte[] data, CreateMode createMode, boolean retryOnConnLoss);void makePath(String path, byte[] data, CreateMode createMode, Watcher watcher, boolean failOnExists, boolean retryOnConnLoss);Whole;;;Creates the path in ZooKeeper, creating each node as necessary. e.g. If <code>path=/solr/group/node</code> and none of the nodes, solr, group, node exist, each will be created.  @param to set on the last zkNode  ;false
org.apache.solr.common.cloud.SolrZkClient;void makePath(String path, byte[] data, CreateMode createMode, Watcher watcher, boolean retryOnConnLoss);void makePath(String path, byte[] data, CreateMode createMode, Watcher watcher, boolean failOnExists, boolean retryOnConnLoss);Whole;;;Creates the path in ZooKeeper, creating each node as necessary. e.g. If <code>path=/solr/group/node</code> and none of the nodes, solr, group, node exist, each will be created.  @param to set on the last zkNode  ;false
org.apache.solr.common.cloud.ClusterStateUtil;boolean waitForAllActiveAndLiveReplicas(ZkStateReader zkStateReader, int timeoutInMs);boolean waitForAllActiveAndLiveReplicas(ZkStateReader zkStateReader, String collection, int timeoutInMs);Free text;;;Wait to see *all* cores live and active. ;true
org.apache.solr.common.cloud.ClusterStateUtil;boolean waitForAllActiveAndLiveReplicas(ZkStateReader zkStateReader, int timeoutInMs);boolean waitForAllActiveAndLiveReplicas(ZkStateReader zkStateReader, String collection, int timeoutInMs);@return;;;false if timed out;true
org.apache.solr.common.cloud.ClusterStateUtil;boolean waitForAllActiveAndLiveReplicas(ZkStateReader zkStateReader, int timeoutInMs);boolean waitForAllActiveAndLiveReplicas(ZkStateReader zkStateReader, String collection, int timeoutInMs);@param;ZkStateReader zkStateReader;ZkStateReader zkStateReader;to use for ClusterState;true
org.apache.solr.common.cloud.ClusterStateUtil;boolean waitForAllActiveAndLiveReplicas(ZkStateReader zkStateReader, int timeoutInMs);boolean waitForAllActiveAndLiveReplicas(ZkStateReader zkStateReader, String collection, int timeoutInMs);@param;int timeoutInMs;int timeoutInMs;how long to wait before giving up;true
org.apache.solr.common.cloud.ClusterStateUtil;boolean waitForAllActiveAndLiveReplicas(ZkStateReader zkStateReader, int timeoutInMs);boolean waitToSeeLiveReplica(ZkStateReader zkStateReader, String collection, String coreNodeName, String baseUrl, int timeoutInMs);@return;;;false if timed out;false
org.apache.solr.common.cloud.ClusterStateUtil;boolean waitForAllActiveAndLiveReplicas(ZkStateReader zkStateReader, int timeoutInMs);boolean waitToSeeLiveReplica(ZkStateReader zkStateReader, String collection, String coreNodeName, String baseUrl, int timeoutInMs);@param;ZkStateReader zkStateReader;ZkStateReader zkStateReader;to use for ClusterState;true
org.apache.solr.common.cloud.ClusterStateUtil;boolean waitForAllActiveAndLiveReplicas(ZkStateReader zkStateReader, int timeoutInMs);boolean waitToSeeLiveReplica(ZkStateReader zkStateReader, String collection, String coreNodeName, String baseUrl, int timeoutInMs);@param;int timeoutInMs;int timeoutInMs;how long to wait before giving up;true
org.apache.solr.common.cloud.ClusterStateUtil;boolean waitForAllActiveAndLiveReplicas(ZkStateReader zkStateReader, String collection, int timeoutInMs);boolean waitToSeeLiveReplica(ZkStateReader zkStateReader, String collection, String coreNodeName, String baseUrl, int timeoutInMs);@return;;;false if timed out;false
org.apache.solr.common.cloud.ClusterStateUtil;boolean waitForAllActiveAndLiveReplicas(ZkStateReader zkStateReader, String collection, int timeoutInMs);boolean waitToSeeLiveReplica(ZkStateReader zkStateReader, String collection, String coreNodeName, String baseUrl, int timeoutInMs);@param;ZkStateReader zkStateReader;ZkStateReader zkStateReader;to use for ClusterState;true
org.apache.solr.common.cloud.ClusterStateUtil;boolean waitForAllActiveAndLiveReplicas(ZkStateReader zkStateReader, String collection, int timeoutInMs);boolean waitToSeeLiveReplica(ZkStateReader zkStateReader, String collection, String coreNodeName, String baseUrl, int timeoutInMs);@param;int timeoutInMs;int timeoutInMs;how long to wait before giving up;true
org.apache.solr.common.cloud.ZkMaintenanceUtils;String listZnode(SolrZkClient zkClient, String path, Boolean recurse);void zkTransfer(SolrZkClient zkClient, String src, Boolean srcIsZk, String dst, Boolean dstIsZk, Boolean recurse);@throws;;;Could not perform the Zookeeper operation.;true
org.apache.solr.common.cloud.ZkMaintenanceUtils;String listZnode(SolrZkClient zkClient, String path, Boolean recurse);void zkTransfer(SolrZkClient zkClient, String src, Boolean srcIsZk, String dst, Boolean dstIsZk, Boolean recurse);@throws;;;Thread interrupted;true
org.apache.solr.common.cloud.ZkConfigManager;void uploadConfigDir(Path dir, String configName);void uploadConfigDir(Path dir, String configName, Pattern filenameExclusions);@param;Path dir;Path dir;java.nio.file.Path to the files;true
org.apache.solr.common.cloud.ZkConfigManager;void uploadConfigDir(Path dir, String configName);void uploadConfigDir(Path dir, String configName, Pattern filenameExclusions);@param;String configName;String configName;the name to give the config;true
org.apache.solr.common.cloud.ZkConfigManager;void uploadConfigDir(Path dir, String configName);void uploadConfigDir(Path dir, String configName, Pattern filenameExclusions);@throws;;;if an I/O error occurs or the path does not exist;true
org.apache.solr.common.cloud.ZkConfigManager;Boolean configExists(String configName);void deleteConfigDir(String configName);@throws;;;if an I/O error occurs;true
org.apache.solr.common.cloud.ZkConfigManager;Boolean configExists(String configName);void copyConfigDir(String fromConfig, String toConfig);@throws;;;if an I/O error occurs;true
org.apache.solr.common.cloud.ZkConfigManager;Boolean configExists(String configName);void copyConfigDir(String fromConfig, String toConfig, Set copiedToZkPaths);@throws;;;if an I/O error occurs;true
org.apache.solr.common.cloud.ZkConfigManager;void deleteConfigDir(String configName);void copyConfigDir(String fromConfig, String toConfig);@throws;;;if an I/O error occurs;true
org.apache.solr.common.cloud.ZkConfigManager;void deleteConfigDir(String configName);void copyConfigDir(String fromConfig, String toConfig, Set copiedToZkPaths);@throws;;;if an I/O error occurs;true
org.apache.solr.common.cloud.ZkConfigManager;void copyConfigDir(String fromConfig, String toConfig);void copyConfigDir(String fromConfig, String toConfig, Set copiedToZkPaths);Free text;;;Copy a config in ZooKeeper ;true
org.apache.solr.common.cloud.ZkConfigManager;void copyConfigDir(String fromConfig, String toConfig);void copyConfigDir(String fromConfig, String toConfig, Set copiedToZkPaths);@param;String fromConfig;String fromConfig;the config to copy from;true
org.apache.solr.common.cloud.ZkConfigManager;void copyConfigDir(String fromConfig, String toConfig);void copyConfigDir(String fromConfig, String toConfig, Set copiedToZkPaths);@param;String toConfig;String toConfig;the config to copy to;true
org.apache.solr.common.cloud.ZkConfigManager;void copyConfigDir(String fromConfig, String toConfig);void copyConfigDir(String fromConfig, String toConfig, Set copiedToZkPaths);@throws;;;if an I/O error occurs;true
org.apache.solr.common.cloud.ZkStateReader;AutoScalingConfig getAutoScalingConfig();AutoScalingConfig getAutoScalingConfig(Watcher watcher);Free text;;;Get current {@link AutoScalingConfig}. ;true
org.apache.solr.common.cloud.ZkStateReader;AutoScalingConfig getAutoScalingConfig();AutoScalingConfig getAutoScalingConfig(Watcher watcher);@return;;;current configuration from autoscaling.json. NOTE: this data is retrieved from ZK on each call.;true
org.apache.solr.common.cloud.ZkStateReader;Replica getLeaderRetry(String collection, String shard);Replica getLeaderRetry(String collection, String shard, int timeout);Whole;;;Get shard leader properties, with retry if none exist.    ;false
org.apache.solr.common.SolrInputDocument;Object getFieldValue(String name);Collection getFieldValues(String name);@param;String name;String name;name of the field to fetch;true
org.apache.solr.client.solrj.impl.ZkClientClusterStateProvider;void downloadConfig(String configName, Path downloadPath);void uploadConfig(Path configPath, String configName);@param;String configName;String configName;the name of the config;true
org.apache.solr.client.solrj.impl.LBHttpSolrClient; LBHttpSolrClient(HttpSolrClient.Builder httpSolrClientBuilder, HttpClient httpClient, String solrServerUrl); LBHttpSolrClient(HttpClient httpClient, ResponseParser parser, String solrServerUrl);Whole;;;The provided httpClient should use a multi-threaded connection manager @deprecated use {@link LBHttpSolrClient#LBHttpSolrClient(Builder)} instead, as it is a more extension/subclassing-friendly alternative    ;false
org.apache.solr.client.solrj.impl.LBHttpSolrClient;Rsp request(Req req);NamedList request(SolrRequest request, String collection);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.impl.CloudSolrClient;void setSoTimeout(int timeout);void setConnectionTimeout(int timeout);Whole;;;@deprecated since 7.0  Use {@link Builder} methods instead.    ;false
org.apache.solr.client.solrj.impl.CloudSolrClient;void waitForState(String collection, long wait, TimeUnit unit, CollectionStatePredicate predicate);void registerCollectionStateWatcher(String collection, CollectionStateWatcher watcher);@param;String collection;String collection;the collection to watch;true
org.apache.solr.client.solrj.impl.HttpSolrClient;HttpUriRequestResponse httpUriRequest(SolrRequest request);HttpUriRequestResponse httpUriRequest(SolrRequest request, ResponseParser processor);Whole;;;@lucene.experimental    ;false
org.apache.solr.client.solrj.impl.HttpClientUtil;CloseableHttpClient createClient(SolrParams params);CloseableHttpClient createClient(SolrParams params, PoolingHttpClientConnectionManager cm, boolean sharedConnectionManager);Free text;;;Creates new http client by using the provided configuration. ;true
org.apache.solr.client.solrj.response.GroupCommand; GroupCommand(String name, int matches); GroupCommand(String name, int matches, int nGroups);@param;String name;String name;The name of this command;true
org.apache.solr.client.solrj.response.GroupCommand; GroupCommand(String name, int matches); GroupCommand(String name, int matches, int nGroups);@param;int matches;int matches;The total number of documents found for this command;true
org.apache.solr.client.solrj.SolrQuery;SolrQuery setTerms(boolean b);SolrQuery setFacet(boolean b);@return;;;Current reference (this);false
org.apache.solr.client.solrj.SolrQuery;SolrQuery addFacetField(String fields);SolrQuery addFacetPivotField(String fields);@return;;;this;false
org.apache.solr.client.solrj.SolrQuery;SolrQuery addFacetField(String fields);SolrQuery addFacetPivotField(String fields);@param;String fields;String fields;Array of field names from the IndexSchema;true
org.apache.solr.client.solrj.SolrQuery;SolrQuery addFacetField(String fields);SolrQuery addNumericRangeFacet(String field, Number start, Number end, Number gap);@return;;;this;false
org.apache.solr.client.solrj.SolrQuery;SolrQuery addFacetField(String fields);SolrQuery addDateRangeFacet(String field, Date start, Date end, String gap);@return;;;this;false
org.apache.solr.client.solrj.SolrQuery;SolrQuery addFacetField(String fields);SolrQuery addIntervalFacets(String field, String[] intervals);@return;;;this;false
org.apache.solr.client.solrj.SolrQuery;SolrQuery addFacetField(String fields);SolrQuery setFacetMissing(Boolean v);@return;;;this;false
org.apache.solr.client.solrj.SolrQuery;SolrQuery addFacetField(String fields);SolrQuery setFacetSort(String sort);@return;;;this;false
org.apache.solr.client.solrj.SolrQuery;SolrQuery addFacetField(String fields);SolrQuery addMoreLikeThisField(String field);@return;;;this;false
org.apache.solr.client.solrj.SolrQuery;SolrQuery addFacetField(String fields);SolrQuery setMoreLikeThisMinTermFreq(int mintf);@return;;;this;false
org.apache.solr.client.solrj.SolrQuery;SolrQuery addFacetField(String fields);SolrQuery setMoreLikeThisMinDocFreq(int mindf);@return;;;this;false
org.apache.solr.client.solrj.SolrQuery;SolrQuery addFacetField(String fields);SolrQuery setMoreLikeThisMinWordLen(int minwl);@return;;;this;false
org.apache.solr.client.solrj.SolrQuery;SolrQuery addFacetField(String fields);SolrQuery setMoreLikeThisMaxWordLen(int maxwl);@return;;;this;false
org.apache.solr.client.solrj.SolrQuery;SolrQuery addFacetField(String fields);SolrQuery setMoreLikeThisMaxQueryTerms(int maxqt);@return;;;this;false
org.apache.solr.client.solrj.SolrQuery;SolrQuery addFacetField(String fields);SolrQuery setMoreLikeThisMaxTokensParsed(int maxntp);@return;;;this;false
org.apache.solr.client.solrj.SolrQuery;SolrQuery addFacetField(String fields);SolrQuery setMoreLikeThisBoost(boolean b);@return;;;this;false
org.apache.solr.client.solrj.SolrQuery;SolrQuery addFacetField(String fields);SolrQuery setMoreLikeThisQF(String qf);@return;;;this;false
org.apache.solr.client.solrj.SolrQuery;SolrQuery addFacetField(String fields);SolrQuery setMoreLikeThisCount(int count);@return;;;this;false
org.apache.solr.client.solrj.SolrQuery;SolrQuery addFacetField(String fields);SolrQuery setMoreLikeThis(boolean b);@return;;;this;false
org.apache.solr.client.solrj.SolrQuery;SolrQuery addFacetField(String fields);SolrQuery setRequestHandler(String qt);@return;;;this;false
org.apache.solr.client.solrj.SolrQuery;SolrQuery addFacetField(String fields);SolrQuery setParam(String name, String values);@return;;;this;false
org.apache.solr.client.solrj.SolrQuery;SolrQuery addFacetField(String fields);SolrQuery setParam(String name, boolean value);@return;;;this;false
org.apache.solr.client.solrj.SolrQuery;SolrQuery addFacetPivotField(String fields);SolrQuery addNumericRangeFacet(String field, Number start, Number end, Number gap);@return;;;this;false
org.apache.solr.client.solrj.SolrQuery;SolrQuery addFacetPivotField(String fields);SolrQuery addDateRangeFacet(String field, Date start, Date end, String gap);@return;;;this;false
org.apache.solr.client.solrj.SolrQuery;SolrQuery addFacetPivotField(String fields);SolrQuery addIntervalFacets(String field, String[] intervals);@return;;;this;false
org.apache.solr.client.solrj.SolrQuery;SolrQuery addFacetPivotField(String fields);SolrQuery setFacetMissing(Boolean v);@return;;;this;false
org.apache.solr.client.solrj.SolrQuery;SolrQuery addFacetPivotField(String fields);SolrQuery setFacetSort(String sort);@return;;;this;false
org.apache.solr.client.solrj.SolrQuery;SolrQuery addFacetPivotField(String fields);SolrQuery addMoreLikeThisField(String field);@return;;;this;false
org.apache.solr.client.solrj.SolrQuery;SolrQuery addFacetPivotField(String fields);SolrQuery setMoreLikeThisMinTermFreq(int mintf);@return;;;this;false
org.apache.solr.client.solrj.SolrQuery;SolrQuery addFacetPivotField(String fields);SolrQuery setMoreLikeThisMinDocFreq(int mindf);@return;;;this;false
org.apache.solr.client.solrj.SolrQuery;SolrQuery addFacetPivotField(String fields);SolrQuery setMoreLikeThisMinWordLen(int minwl);@return;;;this;false
org.apache.solr.client.solrj.SolrQuery;SolrQuery addFacetPivotField(String fields);SolrQuery setMoreLikeThisMaxWordLen(int maxwl);@return;;;this;false
org.apache.solr.client.solrj.SolrQuery;SolrQuery addFacetPivotField(String fields);SolrQuery setMoreLikeThisMaxQueryTerms(int maxqt);@return;;;this;false
org.apache.solr.client.solrj.SolrQuery;SolrQuery addFacetPivotField(String fields);SolrQuery setMoreLikeThisMaxTokensParsed(int maxntp);@return;;;this;false
org.apache.solr.client.solrj.SolrQuery;SolrQuery addFacetPivotField(String fields);SolrQuery setMoreLikeThisBoost(boolean b);@return;;;this;false
org.apache.solr.client.solrj.SolrQuery;SolrQuery addFacetPivotField(String fields);SolrQuery setMoreLikeThisQF(String qf);@return;;;this;false
org.apache.solr.client.solrj.SolrQuery;SolrQuery addFacetPivotField(String fields);SolrQuery setMoreLikeThisCount(int count);@return;;;this;false
org.apache.solr.client.solrj.SolrQuery;SolrQuery addFacetPivotField(String fields);SolrQuery setMoreLikeThis(boolean b);@return;;;this;false
org.apache.solr.client.solrj.SolrQuery;SolrQuery addFacetPivotField(String fields);SolrQuery setRequestHandler(String qt);@return;;;this;false
org.apache.solr.client.solrj.SolrQuery;SolrQuery addFacetPivotField(String fields);SolrQuery setParam(String name, String values);@return;;;this;false
org.apache.solr.client.solrj.SolrQuery;SolrQuery addFacetPivotField(String fields);SolrQuery setParam(String name, boolean value);@return;;;this;false
org.apache.solr.client.solrj.SolrQuery;SolrQuery addNumericRangeFacet(String field, Number start, Number end, Number gap);SolrQuery addDateRangeFacet(String field, Date start, Date end, String gap);Whole;;;Add a numeric range facet.  @param The field@param The start of range@param The end of the range@param The gap between each count @return this ;false
org.apache.solr.client.solrj.SolrQuery;SolrQuery addNumericRangeFacet(String field, Number start, Number end, Number gap);SolrQuery addIntervalFacets(String field, String[] intervals);@return;;;this;false
org.apache.solr.client.solrj.SolrQuery;SolrQuery addNumericRangeFacet(String field, Number start, Number end, Number gap);SolrQuery setFacetMissing(Boolean v);@return;;;this;false
org.apache.solr.client.solrj.SolrQuery;SolrQuery addNumericRangeFacet(String field, Number start, Number end, Number gap);SolrQuery setFacetSort(String sort);@return;;;this;false
org.apache.solr.client.solrj.SolrQuery;SolrQuery addNumericRangeFacet(String field, Number start, Number end, Number gap);SolrQuery addMoreLikeThisField(String field);@return;;;this;false
org.apache.solr.client.solrj.SolrQuery;SolrQuery addNumericRangeFacet(String field, Number start, Number end, Number gap);SolrQuery setMoreLikeThisMinTermFreq(int mintf);@return;;;this;false
org.apache.solr.client.solrj.SolrQuery;SolrQuery addNumericRangeFacet(String field, Number start, Number end, Number gap);SolrQuery setMoreLikeThisMinDocFreq(int mindf);@return;;;this;false
org.apache.solr.client.solrj.SolrQuery;SolrQuery addNumericRangeFacet(String field, Number start, Number end, Number gap);SolrQuery setMoreLikeThisMinWordLen(int minwl);@return;;;this;false
org.apache.solr.client.solrj.SolrQuery;SolrQuery addNumericRangeFacet(String field, Number start, Number end, Number gap);SolrQuery setMoreLikeThisMaxWordLen(int maxwl);@return;;;this;false
org.apache.solr.client.solrj.SolrQuery;SolrQuery addNumericRangeFacet(String field, Number start, Number end, Number gap);SolrQuery setMoreLikeThisMaxQueryTerms(int maxqt);@return;;;this;false
org.apache.solr.client.solrj.SolrQuery;SolrQuery addNumericRangeFacet(String field, Number start, Number end, Number gap);SolrQuery setMoreLikeThisMaxTokensParsed(int maxntp);@return;;;this;false
org.apache.solr.client.solrj.SolrQuery;SolrQuery addNumericRangeFacet(String field, Number start, Number end, Number gap);SolrQuery setMoreLikeThisBoost(boolean b);@return;;;this;false
org.apache.solr.client.solrj.SolrQuery;SolrQuery addNumericRangeFacet(String field, Number start, Number end, Number gap);SolrQuery setMoreLikeThisQF(String qf);@return;;;this;false
org.apache.solr.client.solrj.SolrQuery;SolrQuery addNumericRangeFacet(String field, Number start, Number end, Number gap);SolrQuery setMoreLikeThisCount(int count);@return;;;this;false
org.apache.solr.client.solrj.SolrQuery;SolrQuery addNumericRangeFacet(String field, Number start, Number end, Number gap);SolrQuery setMoreLikeThis(boolean b);@return;;;this;false
org.apache.solr.client.solrj.SolrQuery;SolrQuery addNumericRangeFacet(String field, Number start, Number end, Number gap);SolrQuery setRequestHandler(String qt);@return;;;this;false
org.apache.solr.client.solrj.SolrQuery;SolrQuery addNumericRangeFacet(String field, Number start, Number end, Number gap);SolrQuery setParam(String name, String values);@return;;;this;false
org.apache.solr.client.solrj.SolrQuery;SolrQuery addNumericRangeFacet(String field, Number start, Number end, Number gap);SolrQuery setParam(String name, boolean value);@return;;;this;false
org.apache.solr.client.solrj.SolrQuery;SolrQuery addDateRangeFacet(String field, Date start, Date end, String gap);SolrQuery addIntervalFacets(String field, String[] intervals);@return;;;this;false
org.apache.solr.client.solrj.SolrQuery;SolrQuery addDateRangeFacet(String field, Date start, Date end, String gap);SolrQuery setFacetMissing(Boolean v);@return;;;this;false
org.apache.solr.client.solrj.SolrQuery;SolrQuery addDateRangeFacet(String field, Date start, Date end, String gap);SolrQuery setFacetSort(String sort);@return;;;this;false
org.apache.solr.client.solrj.SolrQuery;SolrQuery addDateRangeFacet(String field, Date start, Date end, String gap);SolrQuery addMoreLikeThisField(String field);@return;;;this;false
org.apache.solr.client.solrj.SolrQuery;SolrQuery addDateRangeFacet(String field, Date start, Date end, String gap);SolrQuery setMoreLikeThisMinTermFreq(int mintf);@return;;;this;false
org.apache.solr.client.solrj.SolrQuery;SolrQuery addDateRangeFacet(String field, Date start, Date end, String gap);SolrQuery setMoreLikeThisMinDocFreq(int mindf);@return;;;this;false
org.apache.solr.client.solrj.SolrQuery;SolrQuery addDateRangeFacet(String field, Date start, Date end, String gap);SolrQuery setMoreLikeThisMinWordLen(int minwl);@return;;;this;false
org.apache.solr.client.solrj.SolrQuery;SolrQuery addDateRangeFacet(String field, Date start, Date end, String gap);SolrQuery setMoreLikeThisMaxWordLen(int maxwl);@return;;;this;false
org.apache.solr.client.solrj.SolrQuery;SolrQuery addDateRangeFacet(String field, Date start, Date end, String gap);SolrQuery setMoreLikeThisMaxQueryTerms(int maxqt);@return;;;this;false
org.apache.solr.client.solrj.SolrQuery;SolrQuery addDateRangeFacet(String field, Date start, Date end, String gap);SolrQuery setMoreLikeThisMaxTokensParsed(int maxntp);@return;;;this;false
org.apache.solr.client.solrj.SolrQuery;SolrQuery addDateRangeFacet(String field, Date start, Date end, String gap);SolrQuery setMoreLikeThisBoost(boolean b);@return;;;this;false
org.apache.solr.client.solrj.SolrQuery;SolrQuery addDateRangeFacet(String field, Date start, Date end, String gap);SolrQuery setMoreLikeThisQF(String qf);@return;;;this;false
org.apache.solr.client.solrj.SolrQuery;SolrQuery addDateRangeFacet(String field, Date start, Date end, String gap);SolrQuery setMoreLikeThisCount(int count);@return;;;this;false
org.apache.solr.client.solrj.SolrQuery;SolrQuery addDateRangeFacet(String field, Date start, Date end, String gap);SolrQuery setMoreLikeThis(boolean b);@return;;;this;false
org.apache.solr.client.solrj.SolrQuery;SolrQuery addDateRangeFacet(String field, Date start, Date end, String gap);SolrQuery setRequestHandler(String qt);@return;;;this;false
org.apache.solr.client.solrj.SolrQuery;SolrQuery addDateRangeFacet(String field, Date start, Date end, String gap);SolrQuery setParam(String name, String values);@return;;;this;false
org.apache.solr.client.solrj.SolrQuery;SolrQuery addDateRangeFacet(String field, Date start, Date end, String gap);SolrQuery setParam(String name, boolean value);@return;;;this;false
org.apache.solr.client.solrj.SolrQuery;SolrQuery addIntervalFacets(String field, String[] intervals);SolrQuery setFacetMissing(Boolean v);@return;;;this;false
org.apache.solr.client.solrj.SolrQuery;SolrQuery addIntervalFacets(String field, String[] intervals);SolrQuery setFacetSort(String sort);@return;;;this;false
org.apache.solr.client.solrj.SolrQuery;SolrQuery addIntervalFacets(String field, String[] intervals);SolrQuery addMoreLikeThisField(String field);@return;;;this;false
org.apache.solr.client.solrj.SolrQuery;SolrQuery addIntervalFacets(String field, String[] intervals);SolrQuery setMoreLikeThisMinTermFreq(int mintf);@return;;;this;false
org.apache.solr.client.solrj.SolrQuery;SolrQuery addIntervalFacets(String field, String[] intervals);SolrQuery setMoreLikeThisMinDocFreq(int mindf);@return;;;this;false
org.apache.solr.client.solrj.SolrQuery;SolrQuery addIntervalFacets(String field, String[] intervals);SolrQuery setMoreLikeThisMinWordLen(int minwl);@return;;;this;false
org.apache.solr.client.solrj.SolrQuery;SolrQuery addIntervalFacets(String field, String[] intervals);SolrQuery setMoreLikeThisMaxWordLen(int maxwl);@return;;;this;false
org.apache.solr.client.solrj.SolrQuery;SolrQuery addIntervalFacets(String field, String[] intervals);SolrQuery setMoreLikeThisMaxQueryTerms(int maxqt);@return;;;this;false
org.apache.solr.client.solrj.SolrQuery;SolrQuery addIntervalFacets(String field, String[] intervals);SolrQuery setMoreLikeThisMaxTokensParsed(int maxntp);@return;;;this;false
org.apache.solr.client.solrj.SolrQuery;SolrQuery addIntervalFacets(String field, String[] intervals);SolrQuery setMoreLikeThisBoost(boolean b);@return;;;this;false
org.apache.solr.client.solrj.SolrQuery;SolrQuery addIntervalFacets(String field, String[] intervals);SolrQuery setMoreLikeThisQF(String qf);@return;;;this;false
org.apache.solr.client.solrj.SolrQuery;SolrQuery addIntervalFacets(String field, String[] intervals);SolrQuery setMoreLikeThisCount(int count);@return;;;this;false
org.apache.solr.client.solrj.SolrQuery;SolrQuery addIntervalFacets(String field, String[] intervals);SolrQuery setMoreLikeThis(boolean b);@return;;;this;false
org.apache.solr.client.solrj.SolrQuery;SolrQuery addIntervalFacets(String field, String[] intervals);SolrQuery setRequestHandler(String qt);@return;;;this;false
org.apache.solr.client.solrj.SolrQuery;SolrQuery addIntervalFacets(String field, String[] intervals);SolrQuery setParam(String name, String values);@return;;;this;false
org.apache.solr.client.solrj.SolrQuery;SolrQuery addIntervalFacets(String field, String[] intervals);SolrQuery setParam(String name, boolean value);@return;;;this;false
org.apache.solr.client.solrj.SolrQuery;SolrQuery setFacetMissing(Boolean v);SolrQuery setFacetSort(String sort);@return;;;this;false
org.apache.solr.client.solrj.SolrQuery;SolrQuery setFacetMissing(Boolean v);SolrQuery addMoreLikeThisField(String field);@return;;;this;false
org.apache.solr.client.solrj.SolrQuery;SolrQuery setFacetMissing(Boolean v);SolrQuery setMoreLikeThisMinTermFreq(int mintf);@return;;;this;false
org.apache.solr.client.solrj.SolrQuery;SolrQuery setFacetMissing(Boolean v);SolrQuery setMoreLikeThisMinDocFreq(int mindf);@return;;;this;false
org.apache.solr.client.solrj.SolrQuery;SolrQuery setFacetMissing(Boolean v);SolrQuery setMoreLikeThisMinWordLen(int minwl);@return;;;this;false
org.apache.solr.client.solrj.SolrQuery;SolrQuery setFacetMissing(Boolean v);SolrQuery setMoreLikeThisMaxWordLen(int maxwl);@return;;;this;false
org.apache.solr.client.solrj.SolrQuery;SolrQuery setFacetMissing(Boolean v);SolrQuery setMoreLikeThisMaxQueryTerms(int maxqt);@return;;;this;false
org.apache.solr.client.solrj.SolrQuery;SolrQuery setFacetMissing(Boolean v);SolrQuery setMoreLikeThisMaxTokensParsed(int maxntp);@return;;;this;false
org.apache.solr.client.solrj.SolrQuery;SolrQuery setFacetMissing(Boolean v);SolrQuery setMoreLikeThisBoost(boolean b);@return;;;this;false
org.apache.solr.client.solrj.SolrQuery;SolrQuery setFacetMissing(Boolean v);SolrQuery setMoreLikeThisQF(String qf);@return;;;this;false
org.apache.solr.client.solrj.SolrQuery;SolrQuery setFacetMissing(Boolean v);SolrQuery setMoreLikeThisCount(int count);@return;;;this;false
org.apache.solr.client.solrj.SolrQuery;SolrQuery setFacetMissing(Boolean v);SolrQuery setMoreLikeThis(boolean b);@return;;;this;false
org.apache.solr.client.solrj.SolrQuery;SolrQuery setFacetMissing(Boolean v);SolrQuery setRequestHandler(String qt);@return;;;this;false
org.apache.solr.client.solrj.SolrQuery;SolrQuery setFacetMissing(Boolean v);SolrQuery setParam(String name, String values);@return;;;this;false
org.apache.solr.client.solrj.SolrQuery;SolrQuery setFacetMissing(Boolean v);SolrQuery setParam(String name, boolean value);@return;;;this;false
org.apache.solr.client.solrj.SolrQuery;SolrQuery setFacetSort(String sort);SolrQuery addMoreLikeThisField(String field);@return;;;this;false
org.apache.solr.client.solrj.SolrQuery;SolrQuery setFacetSort(String sort);SolrQuery setMoreLikeThisMinTermFreq(int mintf);@return;;;this;false
org.apache.solr.client.solrj.SolrQuery;SolrQuery setFacetSort(String sort);SolrQuery setMoreLikeThisMinDocFreq(int mindf);@return;;;this;false
org.apache.solr.client.solrj.SolrQuery;SolrQuery setFacetSort(String sort);SolrQuery setMoreLikeThisMinWordLen(int minwl);@return;;;this;false
org.apache.solr.client.solrj.SolrQuery;SolrQuery setFacetSort(String sort);SolrQuery setMoreLikeThisMaxWordLen(int maxwl);@return;;;this;false
org.apache.solr.client.solrj.SolrQuery;SolrQuery setFacetSort(String sort);SolrQuery setMoreLikeThisMaxQueryTerms(int maxqt);@return;;;this;false
org.apache.solr.client.solrj.SolrQuery;SolrQuery setFacetSort(String sort);SolrQuery setMoreLikeThisMaxTokensParsed(int maxntp);@return;;;this;false
org.apache.solr.client.solrj.SolrQuery;SolrQuery setFacetSort(String sort);SolrQuery setMoreLikeThisBoost(boolean b);@return;;;this;false
org.apache.solr.client.solrj.SolrQuery;SolrQuery setFacetSort(String sort);SolrQuery setMoreLikeThisQF(String qf);@return;;;this;false
org.apache.solr.client.solrj.SolrQuery;SolrQuery setFacetSort(String sort);SolrQuery setMoreLikeThisCount(int count);@return;;;this;false
org.apache.solr.client.solrj.SolrQuery;SolrQuery setFacetSort(String sort);SolrQuery setMoreLikeThis(boolean b);@return;;;this;false
org.apache.solr.client.solrj.SolrQuery;SolrQuery setFacetSort(String sort);SolrQuery setRequestHandler(String qt);@return;;;this;false
org.apache.solr.client.solrj.SolrQuery;SolrQuery setFacetSort(String sort);SolrQuery setParam(String name, String values);@return;;;this;false
org.apache.solr.client.solrj.SolrQuery;SolrQuery setFacetSort(String sort);SolrQuery setParam(String name, boolean value);@return;;;this;false
org.apache.solr.client.solrj.SolrQuery;SolrQuery clearSorts();SolrQuery setSorts(List value);@return;;;the modified SolrQuery object, for easy chaining;false
org.apache.solr.client.solrj.SolrQuery;SolrQuery clearSorts();SolrQuery setSort(String field, ORDER order);@return;;;the modified SolrQuery object, for easy chaining;false
org.apache.solr.client.solrj.SolrQuery;SolrQuery clearSorts();SolrQuery setSort(SortClause sortClause);@return;;;the modified SolrQuery object, for easy chaining;false
org.apache.solr.client.solrj.SolrQuery;SolrQuery clearSorts();SolrQuery addSort(String field, ORDER order);@return;;;the modified SolrQuery object, for easy chaining;false
org.apache.solr.client.solrj.SolrQuery;SolrQuery clearSorts();SolrQuery addSort(SortClause sortClause);@return;;;the modified SolrQuery object, for easy chaining;false
org.apache.solr.client.solrj.SolrQuery;SolrQuery clearSorts();SolrQuery addOrUpdateSort(String field, ORDER order);@return;;;the modified SolrQuery object, for easy chaining;false
org.apache.solr.client.solrj.SolrQuery;SolrQuery clearSorts();SolrQuery addOrUpdateSort(SortClause sortClause);@return;;;the modified SolrQuery object, for easy chaining;false
org.apache.solr.client.solrj.SolrQuery;SolrQuery clearSorts();SolrQuery removeSort(SortClause sortClause);@return;;;the modified SolrQuery object, for easy chaining;false
org.apache.solr.client.solrj.SolrQuery;SolrQuery clearSorts();SolrQuery removeSort(String itemName);@return;;;the modified SolrQuery object, for easy chaining;false
org.apache.solr.client.solrj.SolrQuery;SolrQuery setSorts(List value);SolrQuery setSort(String field, ORDER order);@return;;;the modified SolrQuery object, for easy chaining;false
org.apache.solr.client.solrj.SolrQuery;SolrQuery setSorts(List value);SolrQuery setSort(SortClause sortClause);@return;;;the modified SolrQuery object, for easy chaining;false
org.apache.solr.client.solrj.SolrQuery;SolrQuery setSorts(List value);SolrQuery addSort(String field, ORDER order);@return;;;the modified SolrQuery object, for easy chaining;false
org.apache.solr.client.solrj.SolrQuery;SolrQuery setSorts(List value);SolrQuery addSort(SortClause sortClause);@return;;;the modified SolrQuery object, for easy chaining;false
org.apache.solr.client.solrj.SolrQuery;SolrQuery setSorts(List value);SolrQuery addOrUpdateSort(String field, ORDER order);@return;;;the modified SolrQuery object, for easy chaining;false
org.apache.solr.client.solrj.SolrQuery;SolrQuery setSorts(List value);SolrQuery addOrUpdateSort(SortClause sortClause);@return;;;the modified SolrQuery object, for easy chaining;false
org.apache.solr.client.solrj.SolrQuery;SolrQuery setSorts(List value);SolrQuery removeSort(SortClause sortClause);@return;;;the modified SolrQuery object, for easy chaining;false
org.apache.solr.client.solrj.SolrQuery;SolrQuery setSorts(List value);SolrQuery removeSort(String itemName);@return;;;the modified SolrQuery object, for easy chaining;false
org.apache.solr.client.solrj.SolrQuery;SolrQuery setSort(String field, ORDER order);SolrQuery setSort(SortClause sortClause);Whole;;;Replaces the current sort information with a single sort clause   @return the modified SolrQuery object, for easy chaining ;false
org.apache.solr.client.solrj.SolrQuery;SolrQuery setSort(String field, ORDER order);SolrQuery addSort(String field, ORDER order);@return;;;the modified SolrQuery object, for easy chaining;false
org.apache.solr.client.solrj.SolrQuery;SolrQuery setSort(String field, ORDER order);SolrQuery addSort(SortClause sortClause);@return;;;the modified SolrQuery object, for easy chaining;false
org.apache.solr.client.solrj.SolrQuery;SolrQuery setSort(String field, ORDER order);SolrQuery addOrUpdateSort(String field, ORDER order);@return;;;the modified SolrQuery object, for easy chaining;false
org.apache.solr.client.solrj.SolrQuery;SolrQuery setSort(String field, ORDER order);SolrQuery addOrUpdateSort(SortClause sortClause);@return;;;the modified SolrQuery object, for easy chaining;false
org.apache.solr.client.solrj.SolrQuery;SolrQuery setSort(String field, ORDER order);SolrQuery removeSort(SortClause sortClause);@return;;;the modified SolrQuery object, for easy chaining;false
org.apache.solr.client.solrj.SolrQuery;SolrQuery setSort(String field, ORDER order);SolrQuery removeSort(String itemName);@return;;;the modified SolrQuery object, for easy chaining;false
org.apache.solr.client.solrj.SolrQuery;SolrQuery setSort(SortClause sortClause);SolrQuery addSort(String field, ORDER order);@return;;;the modified SolrQuery object, for easy chaining;false
org.apache.solr.client.solrj.SolrQuery;SolrQuery setSort(SortClause sortClause);SolrQuery addSort(SortClause sortClause);@return;;;the modified SolrQuery object, for easy chaining;false
org.apache.solr.client.solrj.SolrQuery;SolrQuery setSort(SortClause sortClause);SolrQuery addOrUpdateSort(String field, ORDER order);@return;;;the modified SolrQuery object, for easy chaining;false
org.apache.solr.client.solrj.SolrQuery;SolrQuery setSort(SortClause sortClause);SolrQuery addOrUpdateSort(SortClause sortClause);@return;;;the modified SolrQuery object, for easy chaining;false
org.apache.solr.client.solrj.SolrQuery;SolrQuery setSort(SortClause sortClause);SolrQuery removeSort(SortClause sortClause);@return;;;the modified SolrQuery object, for easy chaining;false
org.apache.solr.client.solrj.SolrQuery;SolrQuery setSort(SortClause sortClause);SolrQuery removeSort(String itemName);@return;;;the modified SolrQuery object, for easy chaining;false
org.apache.solr.client.solrj.SolrQuery;SolrQuery addSort(String field, ORDER order);SolrQuery addSort(SortClause sortClause);@return;;;the modified SolrQuery object, for easy chaining;true
org.apache.solr.client.solrj.SolrQuery;SolrQuery addSort(String field, ORDER order);SolrQuery addOrUpdateSort(String field, ORDER order);@return;;;the modified SolrQuery object, for easy chaining;false
org.apache.solr.client.solrj.SolrQuery;SolrQuery addSort(String field, ORDER order);SolrQuery addOrUpdateSort(SortClause sortClause);@return;;;the modified SolrQuery object, for easy chaining;false
org.apache.solr.client.solrj.SolrQuery;SolrQuery addSort(String field, ORDER order);SolrQuery removeSort(SortClause sortClause);@return;;;the modified SolrQuery object, for easy chaining;false
org.apache.solr.client.solrj.SolrQuery;SolrQuery addSort(String field, ORDER order);SolrQuery removeSort(String itemName);@return;;;the modified SolrQuery object, for easy chaining;false
org.apache.solr.client.solrj.SolrQuery;SolrQuery addSort(SortClause sortClause);SolrQuery addOrUpdateSort(String field, ORDER order);@return;;;the modified SolrQuery object, for easy chaining;false
org.apache.solr.client.solrj.SolrQuery;SolrQuery addSort(SortClause sortClause);SolrQuery addOrUpdateSort(SortClause sortClause);@return;;;the modified SolrQuery object, for easy chaining;false
org.apache.solr.client.solrj.SolrQuery;SolrQuery addSort(SortClause sortClause);SolrQuery removeSort(SortClause sortClause);@return;;;the modified SolrQuery object, for easy chaining;false
org.apache.solr.client.solrj.SolrQuery;SolrQuery addSort(SortClause sortClause);SolrQuery removeSort(String itemName);@return;;;the modified SolrQuery object, for easy chaining;false
org.apache.solr.client.solrj.SolrQuery;SolrQuery addOrUpdateSort(String field, ORDER order);SolrQuery addOrUpdateSort(SortClause sortClause);@return;;;the modified SolrQuery object, for easy chaining;true
org.apache.solr.client.solrj.SolrQuery;SolrQuery addOrUpdateSort(String field, ORDER order);SolrQuery removeSort(SortClause sortClause);@return;;;the modified SolrQuery object, for easy chaining;false
org.apache.solr.client.solrj.SolrQuery;SolrQuery addOrUpdateSort(String field, ORDER order);SolrQuery removeSort(String itemName);@return;;;the modified SolrQuery object, for easy chaining;false
org.apache.solr.client.solrj.SolrQuery;SolrQuery addOrUpdateSort(SortClause sortClause);SolrQuery removeSort(SortClause sortClause);@return;;;the modified SolrQuery object, for easy chaining;false
org.apache.solr.client.solrj.SolrQuery;SolrQuery addOrUpdateSort(SortClause sortClause);SolrQuery removeSort(String itemName);@return;;;the modified SolrQuery object, for easy chaining;false
org.apache.solr.client.solrj.SolrQuery;SolrQuery removeSort(SortClause sortClause);SolrQuery removeSort(String itemName);Whole;;;Removes a single sort field from the current sort information.   @return the modified SolrQuery object, for easy chaining ;false
org.apache.solr.client.solrj.SolrQuery;SolrQuery addMoreLikeThisField(String field);SolrQuery setMoreLikeThisMinTermFreq(int mintf);@return;;;this;false
org.apache.solr.client.solrj.SolrQuery;SolrQuery addMoreLikeThisField(String field);SolrQuery setMoreLikeThisMinDocFreq(int mindf);@return;;;this;false
org.apache.solr.client.solrj.SolrQuery;SolrQuery addMoreLikeThisField(String field);SolrQuery setMoreLikeThisMinWordLen(int minwl);@return;;;this;false
org.apache.solr.client.solrj.SolrQuery;SolrQuery addMoreLikeThisField(String field);SolrQuery setMoreLikeThisMaxWordLen(int maxwl);@return;;;this;false
org.apache.solr.client.solrj.SolrQuery;SolrQuery addMoreLikeThisField(String field);SolrQuery setMoreLikeThisMaxQueryTerms(int maxqt);@return;;;this;false
org.apache.solr.client.solrj.SolrQuery;SolrQuery addMoreLikeThisField(String field);SolrQuery setMoreLikeThisMaxTokensParsed(int maxntp);@return;;;this;false
org.apache.solr.client.solrj.SolrQuery;SolrQuery addMoreLikeThisField(String field);SolrQuery setMoreLikeThisBoost(boolean b);@return;;;this;false
org.apache.solr.client.solrj.SolrQuery;SolrQuery addMoreLikeThisField(String field);SolrQuery setMoreLikeThisQF(String qf);@return;;;this;false
org.apache.solr.client.solrj.SolrQuery;SolrQuery addMoreLikeThisField(String field);SolrQuery setMoreLikeThisCount(int count);@return;;;this;false
org.apache.solr.client.solrj.SolrQuery;SolrQuery addMoreLikeThisField(String field);SolrQuery setMoreLikeThis(boolean b);@return;;;this;false
org.apache.solr.client.solrj.SolrQuery;SolrQuery addMoreLikeThisField(String field);SolrQuery setRequestHandler(String qt);@return;;;this;false
org.apache.solr.client.solrj.SolrQuery;SolrQuery addMoreLikeThisField(String field);SolrQuery setParam(String name, String values);@return;;;this;false
org.apache.solr.client.solrj.SolrQuery;SolrQuery addMoreLikeThisField(String field);SolrQuery setParam(String name, boolean value);@return;;;this;false
org.apache.solr.client.solrj.SolrQuery;SolrQuery setMoreLikeThisMinTermFreq(int mintf);SolrQuery setMoreLikeThisMinDocFreq(int mindf);@return;;;this;false
org.apache.solr.client.solrj.SolrQuery;SolrQuery setMoreLikeThisMinTermFreq(int mintf);SolrQuery setMoreLikeThisMinWordLen(int minwl);@return;;;this;false
org.apache.solr.client.solrj.SolrQuery;SolrQuery setMoreLikeThisMinTermFreq(int mintf);SolrQuery setMoreLikeThisMaxWordLen(int maxwl);@return;;;this;false
org.apache.solr.client.solrj.SolrQuery;SolrQuery setMoreLikeThisMinTermFreq(int mintf);SolrQuery setMoreLikeThisMaxQueryTerms(int maxqt);@return;;;this;false
org.apache.solr.client.solrj.SolrQuery;SolrQuery setMoreLikeThisMinTermFreq(int mintf);SolrQuery setMoreLikeThisMaxTokensParsed(int maxntp);@return;;;this;false
org.apache.solr.client.solrj.SolrQuery;SolrQuery setMoreLikeThisMinTermFreq(int mintf);SolrQuery setMoreLikeThisBoost(boolean b);@return;;;this;false
org.apache.solr.client.solrj.SolrQuery;SolrQuery setMoreLikeThisMinTermFreq(int mintf);SolrQuery setMoreLikeThisQF(String qf);@return;;;this;false
org.apache.solr.client.solrj.SolrQuery;SolrQuery setMoreLikeThisMinTermFreq(int mintf);SolrQuery setMoreLikeThisCount(int count);@return;;;this;false
org.apache.solr.client.solrj.SolrQuery;SolrQuery setMoreLikeThisMinTermFreq(int mintf);SolrQuery setMoreLikeThis(boolean b);@return;;;this;false
org.apache.solr.client.solrj.SolrQuery;SolrQuery setMoreLikeThisMinTermFreq(int mintf);SolrQuery setRequestHandler(String qt);@return;;;this;false
org.apache.solr.client.solrj.SolrQuery;SolrQuery setMoreLikeThisMinTermFreq(int mintf);SolrQuery setParam(String name, String values);@return;;;this;false
org.apache.solr.client.solrj.SolrQuery;SolrQuery setMoreLikeThisMinTermFreq(int mintf);SolrQuery setParam(String name, boolean value);@return;;;this;false
org.apache.solr.client.solrj.SolrQuery;SolrQuery setMoreLikeThisMinDocFreq(int mindf);SolrQuery setMoreLikeThisMinWordLen(int minwl);@return;;;this;false
org.apache.solr.client.solrj.SolrQuery;SolrQuery setMoreLikeThisMinDocFreq(int mindf);SolrQuery setMoreLikeThisMaxWordLen(int maxwl);@return;;;this;false
org.apache.solr.client.solrj.SolrQuery;SolrQuery setMoreLikeThisMinDocFreq(int mindf);SolrQuery setMoreLikeThisMaxQueryTerms(int maxqt);@return;;;this;false
org.apache.solr.client.solrj.SolrQuery;SolrQuery setMoreLikeThisMinDocFreq(int mindf);SolrQuery setMoreLikeThisMaxTokensParsed(int maxntp);@return;;;this;false
org.apache.solr.client.solrj.SolrQuery;SolrQuery setMoreLikeThisMinDocFreq(int mindf);SolrQuery setMoreLikeThisBoost(boolean b);@return;;;this;false
org.apache.solr.client.solrj.SolrQuery;SolrQuery setMoreLikeThisMinDocFreq(int mindf);SolrQuery setMoreLikeThisQF(String qf);@return;;;this;false
org.apache.solr.client.solrj.SolrQuery;SolrQuery setMoreLikeThisMinDocFreq(int mindf);SolrQuery setMoreLikeThisCount(int count);@return;;;this;false
org.apache.solr.client.solrj.SolrQuery;SolrQuery setMoreLikeThisMinDocFreq(int mindf);SolrQuery setMoreLikeThis(boolean b);@return;;;this;false
org.apache.solr.client.solrj.SolrQuery;SolrQuery setMoreLikeThisMinDocFreq(int mindf);SolrQuery setRequestHandler(String qt);@return;;;this;false
org.apache.solr.client.solrj.SolrQuery;SolrQuery setMoreLikeThisMinDocFreq(int mindf);SolrQuery setParam(String name, String values);@return;;;this;false
org.apache.solr.client.solrj.SolrQuery;SolrQuery setMoreLikeThisMinDocFreq(int mindf);SolrQuery setParam(String name, boolean value);@return;;;this;false
org.apache.solr.client.solrj.SolrQuery;SolrQuery setMoreLikeThisMinWordLen(int minwl);SolrQuery setMoreLikeThisMaxWordLen(int maxwl);@return;;;this;false
org.apache.solr.client.solrj.SolrQuery;SolrQuery setMoreLikeThisMinWordLen(int minwl);SolrQuery setMoreLikeThisMaxQueryTerms(int maxqt);@return;;;this;false
org.apache.solr.client.solrj.SolrQuery;SolrQuery setMoreLikeThisMinWordLen(int minwl);SolrQuery setMoreLikeThisMaxTokensParsed(int maxntp);@return;;;this;false
org.apache.solr.client.solrj.SolrQuery;SolrQuery setMoreLikeThisMinWordLen(int minwl);SolrQuery setMoreLikeThisBoost(boolean b);@return;;;this;false
org.apache.solr.client.solrj.SolrQuery;SolrQuery setMoreLikeThisMinWordLen(int minwl);SolrQuery setMoreLikeThisQF(String qf);@return;;;this;false
org.apache.solr.client.solrj.SolrQuery;SolrQuery setMoreLikeThisMinWordLen(int minwl);SolrQuery setMoreLikeThisCount(int count);@return;;;this;false
org.apache.solr.client.solrj.SolrQuery;SolrQuery setMoreLikeThisMinWordLen(int minwl);SolrQuery setMoreLikeThis(boolean b);@return;;;this;false
org.apache.solr.client.solrj.SolrQuery;SolrQuery setMoreLikeThisMinWordLen(int minwl);SolrQuery setRequestHandler(String qt);@return;;;this;false
org.apache.solr.client.solrj.SolrQuery;SolrQuery setMoreLikeThisMinWordLen(int minwl);SolrQuery setParam(String name, String values);@return;;;this;false
org.apache.solr.client.solrj.SolrQuery;SolrQuery setMoreLikeThisMinWordLen(int minwl);SolrQuery setParam(String name, boolean value);@return;;;this;false
org.apache.solr.client.solrj.SolrQuery;SolrQuery setMoreLikeThisMaxWordLen(int maxwl);SolrQuery setMoreLikeThisMaxQueryTerms(int maxqt);@return;;;this;false
org.apache.solr.client.solrj.SolrQuery;SolrQuery setMoreLikeThisMaxWordLen(int maxwl);SolrQuery setMoreLikeThisMaxTokensParsed(int maxntp);@return;;;this;false
org.apache.solr.client.solrj.SolrQuery;SolrQuery setMoreLikeThisMaxWordLen(int maxwl);SolrQuery setMoreLikeThisBoost(boolean b);@return;;;this;false
org.apache.solr.client.solrj.SolrQuery;SolrQuery setMoreLikeThisMaxWordLen(int maxwl);SolrQuery setMoreLikeThisQF(String qf);@return;;;this;false
org.apache.solr.client.solrj.SolrQuery;SolrQuery setMoreLikeThisMaxWordLen(int maxwl);SolrQuery setMoreLikeThisCount(int count);@return;;;this;false
org.apache.solr.client.solrj.SolrQuery;SolrQuery setMoreLikeThisMaxWordLen(int maxwl);SolrQuery setMoreLikeThis(boolean b);@return;;;this;false
org.apache.solr.client.solrj.SolrQuery;SolrQuery setMoreLikeThisMaxWordLen(int maxwl);SolrQuery setRequestHandler(String qt);@return;;;this;false
org.apache.solr.client.solrj.SolrQuery;SolrQuery setMoreLikeThisMaxWordLen(int maxwl);SolrQuery setParam(String name, String values);@return;;;this;false
org.apache.solr.client.solrj.SolrQuery;SolrQuery setMoreLikeThisMaxWordLen(int maxwl);SolrQuery setParam(String name, boolean value);@return;;;this;false
org.apache.solr.client.solrj.SolrQuery;SolrQuery setMoreLikeThisMaxQueryTerms(int maxqt);SolrQuery setMoreLikeThisMaxTokensParsed(int maxntp);@return;;;this;false
org.apache.solr.client.solrj.SolrQuery;SolrQuery setMoreLikeThisMaxQueryTerms(int maxqt);SolrQuery setMoreLikeThisBoost(boolean b);@return;;;this;false
org.apache.solr.client.solrj.SolrQuery;SolrQuery setMoreLikeThisMaxQueryTerms(int maxqt);SolrQuery setMoreLikeThisQF(String qf);@return;;;this;false
org.apache.solr.client.solrj.SolrQuery;SolrQuery setMoreLikeThisMaxQueryTerms(int maxqt);SolrQuery setMoreLikeThisCount(int count);@return;;;this;false
org.apache.solr.client.solrj.SolrQuery;SolrQuery setMoreLikeThisMaxQueryTerms(int maxqt);SolrQuery setMoreLikeThis(boolean b);@return;;;this;false
org.apache.solr.client.solrj.SolrQuery;SolrQuery setMoreLikeThisMaxQueryTerms(int maxqt);SolrQuery setRequestHandler(String qt);@return;;;this;false
org.apache.solr.client.solrj.SolrQuery;SolrQuery setMoreLikeThisMaxQueryTerms(int maxqt);SolrQuery setParam(String name, String values);@return;;;this;false
org.apache.solr.client.solrj.SolrQuery;SolrQuery setMoreLikeThisMaxQueryTerms(int maxqt);SolrQuery setParam(String name, boolean value);@return;;;this;false
org.apache.solr.client.solrj.SolrQuery;SolrQuery setMoreLikeThisMaxTokensParsed(int maxntp);SolrQuery setMoreLikeThisBoost(boolean b);@return;;;this;false
org.apache.solr.client.solrj.SolrQuery;SolrQuery setMoreLikeThisMaxTokensParsed(int maxntp);SolrQuery setMoreLikeThisQF(String qf);@return;;;this;false
org.apache.solr.client.solrj.SolrQuery;SolrQuery setMoreLikeThisMaxTokensParsed(int maxntp);SolrQuery setMoreLikeThisCount(int count);@return;;;this;false
org.apache.solr.client.solrj.SolrQuery;SolrQuery setMoreLikeThisMaxTokensParsed(int maxntp);SolrQuery setMoreLikeThis(boolean b);@return;;;this;false
org.apache.solr.client.solrj.SolrQuery;SolrQuery setMoreLikeThisMaxTokensParsed(int maxntp);SolrQuery setRequestHandler(String qt);@return;;;this;false
org.apache.solr.client.solrj.SolrQuery;SolrQuery setMoreLikeThisMaxTokensParsed(int maxntp);SolrQuery setParam(String name, String values);@return;;;this;false
org.apache.solr.client.solrj.SolrQuery;SolrQuery setMoreLikeThisMaxTokensParsed(int maxntp);SolrQuery setParam(String name, boolean value);@return;;;this;false
org.apache.solr.client.solrj.SolrQuery;SolrQuery setMoreLikeThisBoost(boolean b);SolrQuery setMoreLikeThisQF(String qf);@return;;;this;false
org.apache.solr.client.solrj.SolrQuery;SolrQuery setMoreLikeThisBoost(boolean b);SolrQuery setMoreLikeThisCount(int count);@return;;;this;false
org.apache.solr.client.solrj.SolrQuery;SolrQuery setMoreLikeThisBoost(boolean b);SolrQuery setMoreLikeThis(boolean b);@return;;;this;false
org.apache.solr.client.solrj.SolrQuery;SolrQuery setMoreLikeThisBoost(boolean b);SolrQuery setRequestHandler(String qt);@return;;;this;false
org.apache.solr.client.solrj.SolrQuery;SolrQuery setMoreLikeThisBoost(boolean b);SolrQuery setParam(String name, String values);@return;;;this;false
org.apache.solr.client.solrj.SolrQuery;SolrQuery setMoreLikeThisBoost(boolean b);SolrQuery setParam(String name, boolean value);@return;;;this;false
org.apache.solr.client.solrj.SolrQuery;SolrQuery setMoreLikeThisQF(String qf);SolrQuery setMoreLikeThisCount(int count);@return;;;this;false
org.apache.solr.client.solrj.SolrQuery;SolrQuery setMoreLikeThisQF(String qf);SolrQuery setMoreLikeThis(boolean b);@return;;;this;false
org.apache.solr.client.solrj.SolrQuery;SolrQuery setMoreLikeThisQF(String qf);SolrQuery setRequestHandler(String qt);@return;;;this;false
org.apache.solr.client.solrj.SolrQuery;SolrQuery setMoreLikeThisQF(String qf);SolrQuery setParam(String name, String values);@return;;;this;false
org.apache.solr.client.solrj.SolrQuery;SolrQuery setMoreLikeThisQF(String qf);SolrQuery setParam(String name, boolean value);@return;;;this;false
org.apache.solr.client.solrj.SolrQuery;SolrQuery setMoreLikeThisCount(int count);SolrQuery setMoreLikeThis(boolean b);@return;;;this;false
org.apache.solr.client.solrj.SolrQuery;SolrQuery setMoreLikeThisCount(int count);SolrQuery setRequestHandler(String qt);@return;;;this;false
org.apache.solr.client.solrj.SolrQuery;SolrQuery setMoreLikeThisCount(int count);SolrQuery setParam(String name, String values);@return;;;this;false
org.apache.solr.client.solrj.SolrQuery;SolrQuery setMoreLikeThisCount(int count);SolrQuery setParam(String name, boolean value);@return;;;this;false
org.apache.solr.client.solrj.SolrQuery;SolrQuery setMoreLikeThis(boolean b);SolrQuery setRequestHandler(String qt);@return;;;this;false
org.apache.solr.client.solrj.SolrQuery;SolrQuery setMoreLikeThis(boolean b);SolrQuery setParam(String name, String values);@return;;;this;false
org.apache.solr.client.solrj.SolrQuery;SolrQuery setMoreLikeThis(boolean b);SolrQuery setParam(String name, boolean value);@return;;;this;false
org.apache.solr.client.solrj.SolrQuery;SolrQuery setRequestHandler(String qt);SolrQuery setParam(String name, String values);@return;;;this;false
org.apache.solr.client.solrj.SolrQuery;SolrQuery setRequestHandler(String qt);SolrQuery setParam(String name, boolean value);@return;;;this;false
org.apache.solr.client.solrj.SolrQuery;SolrQuery setParam(String name, String values);SolrQuery setParam(String name, boolean value);Whole;;;  @return this ;false
org.apache.solr.client.solrj.cloud.autoscaling.AutoScalingConfig;AutoScalingConfig withPolicy(Policy policy);AutoScalingConfig withTriggerConfigs(Map configs);@return;;;modified copy of the configuration;false
org.apache.solr.client.solrj.cloud.autoscaling.AutoScalingConfig;AutoScalingConfig withPolicy(Policy policy);AutoScalingConfig withTriggerConfig(TriggerConfig config);@return;;;modified copy of the configuration;false
org.apache.solr.client.solrj.cloud.autoscaling.AutoScalingConfig;AutoScalingConfig withPolicy(Policy policy);AutoScalingConfig withTriggerListenerConfigs(Map configs);@return;;;modified copy of the configuration;false
org.apache.solr.client.solrj.cloud.autoscaling.AutoScalingConfig;AutoScalingConfig withPolicy(Policy policy);AutoScalingConfig withTriggerListenerConfig(TriggerListenerConfig config);@return;;;modified copy of the configuration;false
org.apache.solr.client.solrj.cloud.autoscaling.AutoScalingConfig;AutoScalingConfig withTriggerConfigs(Map configs);AutoScalingConfig withTriggerConfig(TriggerConfig config);@return;;;modified copy of the configuration;false
org.apache.solr.client.solrj.cloud.autoscaling.AutoScalingConfig;AutoScalingConfig withTriggerConfigs(Map configs);AutoScalingConfig withTriggerListenerConfigs(Map configs);@return;;;modified copy of the configuration;false
org.apache.solr.client.solrj.cloud.autoscaling.AutoScalingConfig;AutoScalingConfig withTriggerConfigs(Map configs);AutoScalingConfig withTriggerListenerConfig(TriggerListenerConfig config);@return;;;modified copy of the configuration;false
org.apache.solr.client.solrj.cloud.autoscaling.AutoScalingConfig;AutoScalingConfig withTriggerConfig(TriggerConfig config);AutoScalingConfig withTriggerListenerConfigs(Map configs);@return;;;modified copy of the configuration;false
org.apache.solr.client.solrj.cloud.autoscaling.AutoScalingConfig;AutoScalingConfig withTriggerConfig(TriggerConfig config);AutoScalingConfig withTriggerListenerConfig(TriggerListenerConfig config);@return;;;modified copy of the configuration;false
org.apache.solr.client.solrj.cloud.autoscaling.AutoScalingConfig;AutoScalingConfig withoutTriggerConfig(String name);AutoScalingConfig withoutTriggerListenerConfig(String name);@return;;;modified copy of the configuration, even if the specified config name didn't exist.;false
org.apache.solr.client.solrj.cloud.autoscaling.AutoScalingConfig;AutoScalingConfig withTriggerListenerConfigs(Map configs);AutoScalingConfig withTriggerListenerConfig(TriggerListenerConfig config);@return;;;modified copy of the configuration;false
org.apache.solr.client.solrj.SolrRequest;T process(SolrClient client, String collection);T process(SolrClient client);Free text;;;Send this request to a {@link SolrClient} and return the response ;true
org.apache.solr.client.solrj.SolrRequest;T process(SolrClient client, String collection);T process(SolrClient client);@return;;;the response;true
org.apache.solr.client.solrj.SolrRequest;T process(SolrClient client, String collection);T process(SolrClient client);@param;SolrClient client;SolrClient client;the SolrClient to communicate with;true
org.apache.solr.client.solrj.SolrRequest;T process(SolrClient client, String collection);T process(SolrClient client);@throws;;;if there is an error on the Solr server;true
org.apache.solr.client.solrj.SolrRequest;T process(SolrClient client, String collection);T process(SolrClient client);@throws;;;if there is a communication error;true
org.apache.solr.client.solrj.request.CollectionAdminRequest;Create createCollection(String collection, String config, int numShards, int numNrtReplicas, int numTlogReplicas, int numPullReplicas);Create createCollection(String collection, String config, int numShards, int numReplicas);Free text;;;Returns a SolrRequest for creating a collection ;true
org.apache.solr.client.solrj.request.CollectionAdminRequest;Create createCollection(String collection, String config, int numShards, int numNrtReplicas, int numTlogReplicas, int numPullReplicas);Create createCollection(String collection, String config, int numShards, int numReplicas);@param;String collection;String collection;the collection name;true
org.apache.solr.client.solrj.request.CollectionAdminRequest;Create createCollection(String collection, String config, int numShards, int numNrtReplicas, int numTlogReplicas, int numPullReplicas);Create createCollection(String collection, String config, int numShards, int numReplicas);@param;String config;String config;the collection config;true
org.apache.solr.client.solrj.request.CollectionAdminRequest;Create createCollection(String collection, String config, int numShards, int numNrtReplicas, int numTlogReplicas, int numPullReplicas);Create createCollection(String collection, String config, int numShards, int numReplicas);@param;int numShards;int numShards;the number of shards in the collection;true
org.apache.solr.client.solrj.request.CollectionAdminRequest;Create createCollection(String collection, String config, int numShards, int numNrtReplicas, int numTlogReplicas, int numPullReplicas);Create createCollection(String collection, int numShards, int numReplicas);@param;String collection;String collection;the collection name;true
org.apache.solr.client.solrj.request.CollectionAdminRequest;Create createCollection(String collection, String config, int numShards, int numNrtReplicas, int numTlogReplicas, int numPullReplicas);Create createCollection(String collection, int numShards, int numReplicas);@param;int numShards;int numShards;the number of shards in the collection;true
org.apache.solr.client.solrj.request.CollectionAdminRequest;Create createCollection(String collection, String config, int numShards, int numNrtReplicas, int numTlogReplicas, int numPullReplicas);Create createCollectionWithImplicitRouter(String collection, String config, String shards, int numReplicas);@param;String collection;String collection;the collection name;true
org.apache.solr.client.solrj.request.CollectionAdminRequest;Create createCollection(String collection, String config, int numShards, int numNrtReplicas, int numTlogReplicas, int numPullReplicas);Create createCollectionWithImplicitRouter(String collection, String config, String shards, int numReplicas);@param;String config;String config;the collection config;true
org.apache.solr.client.solrj.request.CollectionAdminRequest;Create createCollection(String collection, String config, int numShards, int numNrtReplicas, int numTlogReplicas, int numPullReplicas);Create createCollectionWithImplicitRouter(String collection, String config, String shards, int numNrtReplicas, int numTlogReplicas, int numPullReplicas);@param;String collection;String collection;the collection name;true
org.apache.solr.client.solrj.request.CollectionAdminRequest;Create createCollection(String collection, String config, int numShards, int numNrtReplicas, int numTlogReplicas, int numPullReplicas);Create createCollectionWithImplicitRouter(String collection, String config, String shards, int numNrtReplicas, int numTlogReplicas, int numPullReplicas);@param;String config;String config;the collection config;true
org.apache.solr.client.solrj.request.CollectionAdminRequest;Create createCollection(String collection, String config, int numShards, int numReplicas);Create createCollection(String collection, int numShards, int numReplicas);@param;String collection;String collection;the collection name;true
org.apache.solr.client.solrj.request.CollectionAdminRequest;Create createCollection(String collection, String config, int numShards, int numReplicas);Create createCollection(String collection, int numShards, int numReplicas);@param;int numShards;int numShards;the number of shards in the collection;true
org.apache.solr.client.solrj.request.CollectionAdminRequest;Create createCollection(String collection, String config, int numShards, int numReplicas);Create createCollectionWithImplicitRouter(String collection, String config, String shards, int numReplicas);@param;String collection;String collection;the collection name;true
org.apache.solr.client.solrj.request.CollectionAdminRequest;Create createCollection(String collection, String config, int numShards, int numReplicas);Create createCollectionWithImplicitRouter(String collection, String config, String shards, int numReplicas);@param;String config;String config;the collection config;true
org.apache.solr.client.solrj.request.CollectionAdminRequest;Create createCollection(String collection, String config, int numShards, int numReplicas);Create createCollectionWithImplicitRouter(String collection, String config, String shards, int numNrtReplicas, int numTlogReplicas, int numPullReplicas);@param;String collection;String collection;the collection name;true
org.apache.solr.client.solrj.request.CollectionAdminRequest;Create createCollection(String collection, String config, int numShards, int numReplicas);Create createCollectionWithImplicitRouter(String collection, String config, String shards, int numNrtReplicas, int numTlogReplicas, int numPullReplicas);@param;String config;String config;the collection config;true
org.apache.solr.client.solrj.request.CollectionAdminRequest;Create createCollection(String collection, int numShards, int numReplicas);Create createCollectionWithImplicitRouter(String collection, String config, String shards, int numReplicas);@param;String collection;String collection;the collection name;true
org.apache.solr.client.solrj.request.CollectionAdminRequest;Create createCollection(String collection, int numShards, int numReplicas);Create createCollectionWithImplicitRouter(String collection, String config, String shards, int numReplicas);@param;int numReplicas;int numReplicas;the replication factor of the collection;true
org.apache.solr.client.solrj.request.CollectionAdminRequest;Create createCollection(String collection, int numShards, int numReplicas);Create createCollectionWithImplicitRouter(String collection, String config, String shards, int numNrtReplicas, int numTlogReplicas, int numPullReplicas);@param;String collection;String collection;the collection name;true
org.apache.solr.client.solrj.request.CollectionAdminRequest;Create createCollectionWithImplicitRouter(String collection, String config, String shards, int numReplicas);Create createCollectionWithImplicitRouter(String collection, String config, String shards, int numNrtReplicas, int numTlogReplicas, int numPullReplicas);@param;String collection;String collection;the collection name;true
org.apache.solr.client.solrj.request.CollectionAdminRequest;Create createCollectionWithImplicitRouter(String collection, String config, String shards, int numReplicas);Create createCollectionWithImplicitRouter(String collection, String config, String shards, int numNrtReplicas, int numTlogReplicas, int numPullReplicas);@param;String config;String config;the collection config;true
org.apache.solr.client.solrj.request.CollectionAdminRequest;Create createCollectionWithImplicitRouter(String collection, String config, String shards, int numReplicas);Create createCollectionWithImplicitRouter(String collection, String config, String shards, int numNrtReplicas, int numTlogReplicas, int numPullReplicas);@param;String shards;String shards;a shard definition string;true
org.apache.solr.client.solrj.request.SolrPing;SolrPing removeAction();SolrPing setActionDisable();@return;;;this;false
org.apache.solr.client.solrj.request.SolrPing;SolrPing removeAction();SolrPing setActionEnable();@return;;;this;false
org.apache.solr.client.solrj.request.SolrPing;SolrPing removeAction();SolrPing setActionPing();@return;;;this;false
org.apache.solr.client.solrj.request.SolrPing;SolrPing setActionDisable();SolrPing setActionEnable();@return;;;this;false
org.apache.solr.client.solrj.request.SolrPing;SolrPing setActionDisable();SolrPing setActionPing();@return;;;this;false
org.apache.solr.client.solrj.request.SolrPing;SolrPing setActionEnable();SolrPing setActionPing();@return;;;this;false
org.apache.solr.client.solrj.request.DocumentAnalysisRequest;DocumentAnalysisRequest addDocument(SolrInputDocument doc);DocumentAnalysisRequest addDocuments(Collection docs);@return;;;This DocumentAnalysisRequest (fluent interface support).;false
org.apache.solr.client.solrj.request.DocumentAnalysisRequest;DocumentAnalysisRequest addDocument(SolrInputDocument doc);DocumentAnalysisRequest setQuery(String query);@return;;;This DocumentAnalysisRequest (fluent interface support).;false
org.apache.solr.client.solrj.request.DocumentAnalysisRequest;DocumentAnalysisRequest addDocument(SolrInputDocument doc);DocumentAnalysisRequest setShowMatch(boolean showMatch);@return;;;This DocumentAnalysisRequest (fluent interface support).;false
org.apache.solr.client.solrj.request.DocumentAnalysisRequest;DocumentAnalysisRequest addDocuments(Collection docs);DocumentAnalysisRequest setQuery(String query);@return;;;This DocumentAnalysisRequest (fluent interface support).;false
org.apache.solr.client.solrj.request.DocumentAnalysisRequest;DocumentAnalysisRequest addDocuments(Collection docs);DocumentAnalysisRequest setShowMatch(boolean showMatch);@return;;;This DocumentAnalysisRequest (fluent interface support).;false
org.apache.solr.client.solrj.request.DocumentAnalysisRequest;DocumentAnalysisRequest setQuery(String query);DocumentAnalysisRequest setShowMatch(boolean showMatch);@return;;;This DocumentAnalysisRequest (fluent interface support).;false
org.apache.solr.client.solrj.request.FieldAnalysisRequest;FieldAnalysisRequest setFieldValue(String fieldValue);FieldAnalysisRequest setQuery(String query);@return;;;This FieldAnalysisRequest (fluent interface support).;false
org.apache.solr.client.solrj.request.FieldAnalysisRequest;FieldAnalysisRequest setFieldValue(String fieldValue);FieldAnalysisRequest setShowMatch(boolean showMatch);@return;;;This FieldAnalysisRequest (fluent interface support).;false
org.apache.solr.client.solrj.request.FieldAnalysisRequest;FieldAnalysisRequest setFieldValue(String fieldValue);FieldAnalysisRequest addFieldType(String fieldTypeName);@return;;;This FieldAnalysisRequest (fluent interface support).;false
org.apache.solr.client.solrj.request.FieldAnalysisRequest;FieldAnalysisRequest setFieldValue(String fieldValue);FieldAnalysisRequest setFieldTypes(List fieldTypes);@return;;;This FieldAnalysisRequest (fluent interface support).;false
org.apache.solr.client.solrj.request.FieldAnalysisRequest;FieldAnalysisRequest setQuery(String query);FieldAnalysisRequest setShowMatch(boolean showMatch);@return;;;This FieldAnalysisRequest (fluent interface support).;false
org.apache.solr.client.solrj.request.FieldAnalysisRequest;FieldAnalysisRequest setQuery(String query);FieldAnalysisRequest addFieldType(String fieldTypeName);@return;;;This FieldAnalysisRequest (fluent interface support).;false
org.apache.solr.client.solrj.request.FieldAnalysisRequest;FieldAnalysisRequest setQuery(String query);FieldAnalysisRequest setFieldTypes(List fieldTypes);@return;;;This FieldAnalysisRequest (fluent interface support).;false
org.apache.solr.client.solrj.request.FieldAnalysisRequest;FieldAnalysisRequest setShowMatch(boolean showMatch);FieldAnalysisRequest addFieldType(String fieldTypeName);@return;;;This FieldAnalysisRequest (fluent interface support).;false
org.apache.solr.client.solrj.request.FieldAnalysisRequest;FieldAnalysisRequest setShowMatch(boolean showMatch);FieldAnalysisRequest setFieldTypes(List fieldTypes);@return;;;This FieldAnalysisRequest (fluent interface support).;false
org.apache.solr.client.solrj.request.FieldAnalysisRequest;FieldAnalysisRequest addFieldName(String fieldName);FieldAnalysisRequest setFieldNames(List fieldNames);@return;;;this FieldAnalysisRequest (fluent interface support).;false
org.apache.solr.client.solrj.request.FieldAnalysisRequest;FieldAnalysisRequest addFieldType(String fieldTypeName);FieldAnalysisRequest setFieldTypes(List fieldTypes);@return;;;This FieldAnalysisRequest (fluent interface support).;false
org.apache.solr.client.solrj.request.UpdateRequest;UpdateRequest add(SolrInputDocument doc);UpdateRequest add(SolrInputDocument doc, Boolean overwrite);Free text;;;Add a SolrInputDocument to this request ;true
org.apache.solr.client.solrj.request.UpdateRequest;UpdateRequest add(SolrInputDocument doc);UpdateRequest add(SolrInputDocument doc, Boolean overwrite);@throws;;;if the document is null;true
org.apache.solr.client.solrj.request.UpdateRequest;UpdateRequest add(SolrInputDocument doc);UpdateRequest add(SolrInputDocument doc, Integer commitWithin);Free text;;;Add a SolrInputDocument to this request ;true
org.apache.solr.client.solrj.request.UpdateRequest;UpdateRequest add(SolrInputDocument doc);UpdateRequest add(SolrInputDocument doc, Integer commitWithin);@throws;;;if the document is null;true
org.apache.solr.client.solrj.request.UpdateRequest;UpdateRequest add(SolrInputDocument doc);UpdateRequest add(SolrInputDocument doc, Integer commitWithin, Boolean overwrite);Free text;;;Add a SolrInputDocument to this request ;true
org.apache.solr.client.solrj.request.UpdateRequest;UpdateRequest add(SolrInputDocument doc);UpdateRequest add(SolrInputDocument doc, Integer commitWithin, Boolean overwrite);@throws;;;if the document is null;true
org.apache.solr.client.solrj.request.UpdateRequest;UpdateRequest add(SolrInputDocument doc, Boolean overwrite);UpdateRequest add(SolrInputDocument doc, Integer commitWithin);Free text;;;Add a SolrInputDocument to this request ;true
org.apache.solr.client.solrj.request.UpdateRequest;UpdateRequest add(SolrInputDocument doc, Boolean overwrite);UpdateRequest add(SolrInputDocument doc, Integer commitWithin);@param;SolrInputDocument doc;SolrInputDocument doc;the document;true
org.apache.solr.client.solrj.request.UpdateRequest;UpdateRequest add(SolrInputDocument doc, Boolean overwrite);UpdateRequest add(SolrInputDocument doc, Integer commitWithin);@throws;;;if the document is null;true
org.apache.solr.client.solrj.request.UpdateRequest;UpdateRequest add(SolrInputDocument doc, Boolean overwrite);UpdateRequest add(SolrInputDocument doc, Integer commitWithin, Boolean overwrite);Free text;;;Add a SolrInputDocument to this request ;true
org.apache.solr.client.solrj.request.UpdateRequest;UpdateRequest add(SolrInputDocument doc, Boolean overwrite);UpdateRequest add(SolrInputDocument doc, Integer commitWithin, Boolean overwrite);@param;SolrInputDocument doc;SolrInputDocument doc;the document;true
org.apache.solr.client.solrj.request.UpdateRequest;UpdateRequest add(SolrInputDocument doc, Boolean overwrite);UpdateRequest add(SolrInputDocument doc, Integer commitWithin, Boolean overwrite);@param;Boolean overwrite;Boolean overwrite;true if the document should overwrite existing docs with the same id;true
org.apache.solr.client.solrj.request.UpdateRequest;UpdateRequest add(SolrInputDocument doc, Boolean overwrite);UpdateRequest add(SolrInputDocument doc, Integer commitWithin, Boolean overwrite);@throws;;;if the document is null;true
org.apache.solr.client.solrj.request.UpdateRequest;UpdateRequest add(SolrInputDocument doc, Integer commitWithin);UpdateRequest add(SolrInputDocument doc, Integer commitWithin, Boolean overwrite);Free text;;;Add a SolrInputDocument to this request ;true
org.apache.solr.client.solrj.request.UpdateRequest;UpdateRequest add(SolrInputDocument doc, Integer commitWithin);UpdateRequest add(SolrInputDocument doc, Integer commitWithin, Boolean overwrite);@param;SolrInputDocument doc;SolrInputDocument doc;the document;true
org.apache.solr.client.solrj.request.UpdateRequest;UpdateRequest add(SolrInputDocument doc, Integer commitWithin);UpdateRequest add(SolrInputDocument doc, Integer commitWithin, Boolean overwrite);@param;Integer commitWithin;Integer commitWithin;the time horizon by which the document should be committed (in ms);true
org.apache.solr.client.solrj.request.UpdateRequest;UpdateRequest add(SolrInputDocument doc, Integer commitWithin);UpdateRequest add(SolrInputDocument doc, Integer commitWithin, Boolean overwrite);@throws;;;if the document is null;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Collection docs);UpdateResponse add(Collection docs);Free text;;;Adds a collection of documents ;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Collection docs);UpdateResponse add(Collection docs);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse from the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Collection docs);UpdateResponse add(Collection docs);@param;Collection<SolrInputDocument> docs;Collection<SolrInputDocument> docs;the collection of documents;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Collection docs);UpdateResponse add(Collection docs);@throws;;;if there is a communication error with the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Collection docs);UpdateResponse add(Collection docs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Collection docs);UpdateResponse add(String collection, Collection docs, int commitWithinMs);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse from the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Collection docs);UpdateResponse add(String collection, Collection docs, int commitWithinMs);@param;String collection;String collection;the Solr collection to add documents to;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Collection docs);UpdateResponse add(String collection, Collection docs, int commitWithinMs);@param;Collection<SolrInputDocument> docs;Collection<SolrInputDocument> docs;the collection of documents;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Collection docs);UpdateResponse add(String collection, Collection docs, int commitWithinMs);@throws;;;if there is a communication error with the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Collection docs);UpdateResponse add(String collection, Collection docs, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Collection docs);UpdateResponse add(Collection docs, int commitWithinMs);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse from the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Collection docs);UpdateResponse add(Collection docs, int commitWithinMs);@param;Collection<SolrInputDocument> docs;Collection<SolrInputDocument> docs;the collection of documents;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Collection docs);UpdateResponse add(Collection docs, int commitWithinMs);@throws;;;if there is a communication error with the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Collection docs);UpdateResponse add(Collection docs, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Collection docs);UpdateResponse add(String collection, SolrInputDocument doc);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse from the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Collection docs);UpdateResponse add(String collection, SolrInputDocument doc);@throws;;;if there is a communication error with the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Collection docs);UpdateResponse add(String collection, SolrInputDocument doc);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Collection docs);UpdateResponse add(SolrInputDocument doc);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse from the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Collection docs);UpdateResponse add(SolrInputDocument doc);@throws;;;if there is a communication error with the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Collection docs);UpdateResponse add(SolrInputDocument doc);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Collection docs);UpdateResponse add(String collection, SolrInputDocument doc, int commitWithinMs);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse from the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Collection docs);UpdateResponse add(String collection, SolrInputDocument doc, int commitWithinMs);@throws;;;if there is a communication error with the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Collection docs);UpdateResponse add(String collection, SolrInputDocument doc, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Collection docs);UpdateResponse add(SolrInputDocument doc, int commitWithinMs);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse from the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Collection docs);UpdateResponse add(SolrInputDocument doc, int commitWithinMs);@throws;;;if there is a communication error with the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Collection docs);UpdateResponse add(SolrInputDocument doc, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Collection docs);UpdateResponse add(String collection, Iterator docIterator);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse from the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Collection docs);UpdateResponse add(String collection, Iterator docIterator);@throws;;;if there is a communication error with the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Collection docs);UpdateResponse add(String collection, Iterator docIterator);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Collection docs);UpdateResponse add(Iterator docIterator);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse from the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Collection docs);UpdateResponse add(Iterator docIterator);@throws;;;if there is a communication error with the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Collection docs);UpdateResponse add(Iterator docIterator);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Collection docs);UpdateResponse addBean(String collection, Object obj);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Collection docs);UpdateResponse addBean(String collection, Object obj);@throws;;;if there is a communication error with the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Collection docs);UpdateResponse addBean(String collection, Object obj);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Collection docs);UpdateResponse addBean(Object obj);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Collection docs);UpdateResponse addBean(Object obj);@throws;;;if there is a communication error with the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Collection docs);UpdateResponse addBean(Object obj);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Collection docs);UpdateResponse addBean(String collection, Object obj, int commitWithinMs);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Collection docs);UpdateResponse addBean(String collection, Object obj, int commitWithinMs);@throws;;;if there is a communication error with the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Collection docs);UpdateResponse addBean(String collection, Object obj, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Collection docs);UpdateResponse addBean(Object obj, int commitWithinMs);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Collection docs);UpdateResponse addBean(Object obj, int commitWithinMs);@throws;;;if there is a communication error with the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Collection docs);UpdateResponse addBean(Object obj, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Collection docs);UpdateResponse addBeans(String collection, Collection beans);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Collection docs);UpdateResponse addBeans(String collection, Collection beans);@param;String collection;String collection;the Solr collection to add documents to;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Collection docs);UpdateResponse addBeans(String collection, Collection beans);@throws;;;if there is a communication error with the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Collection docs);UpdateResponse addBeans(String collection, Collection beans);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Collection docs);UpdateResponse addBeans(Collection beans);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Collection docs);UpdateResponse addBeans(Collection beans);@throws;;;if there is a communication error with the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Collection docs);UpdateResponse addBeans(Collection beans);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Collection docs);UpdateResponse addBeans(String collection, Collection beans, int commitWithinMs);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Collection docs);UpdateResponse addBeans(String collection, Collection beans, int commitWithinMs);@param;String collection;String collection;the Solr collection to add documents to;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Collection docs);UpdateResponse addBeans(String collection, Collection beans, int commitWithinMs);@throws;;;if there is a communication error with the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Collection docs);UpdateResponse addBeans(String collection, Collection beans, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Collection docs);UpdateResponse addBeans(Collection beans, int commitWithinMs);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Collection docs);UpdateResponse addBeans(Collection beans, int commitWithinMs);@throws;;;if there is a communication error with the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Collection docs);UpdateResponse addBeans(Collection beans, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Collection docs);UpdateResponse addBeans(String collection, Iterator beanIterator);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Collection docs);UpdateResponse addBeans(String collection, Iterator beanIterator);@throws;;;if there is a communication error with the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Collection docs);UpdateResponse addBeans(String collection, Iterator beanIterator);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Collection docs);UpdateResponse addBeans(Iterator beanIterator);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Collection docs);UpdateResponse addBeans(Iterator beanIterator);@throws;;;if there is a communication error with the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Collection docs);UpdateResponse addBeans(Iterator beanIterator);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Collection docs);UpdateResponse commit(String collection);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Collection docs);UpdateResponse commit();@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Collection docs);UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Collection docs);UpdateResponse commit(boolean waitFlush, boolean waitSearcher);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Collection docs);UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher, boolean softCommit);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Collection docs);UpdateResponse commit(boolean waitFlush, boolean waitSearcher, boolean softCommit);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Collection docs);UpdateResponse optimize(String collection);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Collection docs);UpdateResponse optimize();@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Collection docs);UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Collection docs);UpdateResponse optimize(boolean waitFlush, boolean waitSearcher);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Collection docs);UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher, int maxSegments);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Collection docs);UpdateResponse optimize(boolean waitFlush, boolean waitSearcher, int maxSegments);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Collection docs);UpdateResponse rollback(String collection);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Collection docs);UpdateResponse rollback();@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Collection docs);UpdateResponse deleteById(String collection, String id);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Collection docs);UpdateResponse deleteById(String id);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Collection docs);UpdateResponse deleteById(String collection, String id, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Collection docs);UpdateResponse deleteById(String id, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Collection docs);UpdateResponse deleteById(String collection, List ids);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Collection docs);UpdateResponse deleteById(List ids);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Collection docs);UpdateResponse deleteById(String collection, List ids, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Collection docs);UpdateResponse deleteById(List ids, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Collection docs);UpdateResponse deleteByQuery(String collection, String query);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Collection docs);UpdateResponse deleteByQuery(String query);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Collection docs);UpdateResponse deleteByQuery(String collection, String query, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Collection docs);UpdateResponse deleteByQuery(String query, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Collection docs);SolrPingResponse ping();@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Collection docs);QueryResponse query(String collection, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Collection docs);QueryResponse query(SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Collection docs);QueryResponse query(String collection, SolrParams params, METHOD method);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Collection docs);QueryResponse query(SolrParams params, METHOD method);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Collection docs);QueryResponse queryAndStreamResponse(String collection, SolrParams params, StreamingResponseCallback callback);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Collection docs);QueryResponse queryAndStreamResponse(SolrParams params, StreamingResponseCallback callback);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Collection docs);SolrDocument getById(String collection, String id);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Collection docs);SolrDocument getById(String id);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Collection docs);SolrDocument getById(String collection, String id, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Collection docs);SolrDocument getById(String id, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Collection docs);SolrDocumentList getById(String collection, Collection ids);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Collection docs);SolrDocumentList getById(Collection ids);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Collection docs);SolrDocumentList getById(String collection, Collection ids, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Collection docs);SolrDocumentList getById(Collection ids, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Collection docs);NamedList request(SolrRequest request, String collection);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Collection docs);NamedList request(SolrRequest request);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Collection docs);UpdateResponse add(String collection, Collection docs, int commitWithinMs);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse from the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Collection docs);UpdateResponse add(String collection, Collection docs, int commitWithinMs);@param;Collection<SolrInputDocument> docs;Collection<SolrInputDocument> docs;the collection of documents;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Collection docs);UpdateResponse add(String collection, Collection docs, int commitWithinMs);@throws;;;if there is a communication error with the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Collection docs);UpdateResponse add(String collection, Collection docs, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Collection docs);UpdateResponse add(Collection docs, int commitWithinMs);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse from the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Collection docs);UpdateResponse add(Collection docs, int commitWithinMs);@param;Collection<SolrInputDocument> docs;Collection<SolrInputDocument> docs;the collection of documents;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Collection docs);UpdateResponse add(Collection docs, int commitWithinMs);@throws;;;if there is a communication error with the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Collection docs);UpdateResponse add(Collection docs, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Collection docs);UpdateResponse add(String collection, SolrInputDocument doc);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse from the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Collection docs);UpdateResponse add(String collection, SolrInputDocument doc);@throws;;;if there is a communication error with the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Collection docs);UpdateResponse add(String collection, SolrInputDocument doc);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Collection docs);UpdateResponse add(SolrInputDocument doc);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse from the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Collection docs);UpdateResponse add(SolrInputDocument doc);@throws;;;if there is a communication error with the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Collection docs);UpdateResponse add(SolrInputDocument doc);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Collection docs);UpdateResponse add(String collection, SolrInputDocument doc, int commitWithinMs);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse from the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Collection docs);UpdateResponse add(String collection, SolrInputDocument doc, int commitWithinMs);@throws;;;if there is a communication error with the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Collection docs);UpdateResponse add(String collection, SolrInputDocument doc, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Collection docs);UpdateResponse add(SolrInputDocument doc, int commitWithinMs);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse from the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Collection docs);UpdateResponse add(SolrInputDocument doc, int commitWithinMs);@throws;;;if there is a communication error with the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Collection docs);UpdateResponse add(SolrInputDocument doc, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Collection docs);UpdateResponse add(String collection, Iterator docIterator);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse from the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Collection docs);UpdateResponse add(String collection, Iterator docIterator);@throws;;;if there is a communication error with the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Collection docs);UpdateResponse add(String collection, Iterator docIterator);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Collection docs);UpdateResponse add(Iterator docIterator);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse from the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Collection docs);UpdateResponse add(Iterator docIterator);@throws;;;if there is a communication error with the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Collection docs);UpdateResponse add(Iterator docIterator);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Collection docs);UpdateResponse addBean(String collection, Object obj);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Collection docs);UpdateResponse addBean(String collection, Object obj);@throws;;;if there is a communication error with the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Collection docs);UpdateResponse addBean(String collection, Object obj);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Collection docs);UpdateResponse addBean(Object obj);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Collection docs);UpdateResponse addBean(Object obj);@throws;;;if there is a communication error with the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Collection docs);UpdateResponse addBean(Object obj);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Collection docs);UpdateResponse addBean(String collection, Object obj, int commitWithinMs);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Collection docs);UpdateResponse addBean(String collection, Object obj, int commitWithinMs);@throws;;;if there is a communication error with the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Collection docs);UpdateResponse addBean(String collection, Object obj, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Collection docs);UpdateResponse addBean(Object obj, int commitWithinMs);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Collection docs);UpdateResponse addBean(Object obj, int commitWithinMs);@throws;;;if there is a communication error with the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Collection docs);UpdateResponse addBean(Object obj, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Collection docs);UpdateResponse addBeans(String collection, Collection beans);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Collection docs);UpdateResponse addBeans(String collection, Collection beans);@throws;;;if there is a communication error with the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Collection docs);UpdateResponse addBeans(String collection, Collection beans);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Collection docs);UpdateResponse addBeans(Collection beans);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Collection docs);UpdateResponse addBeans(Collection beans);@throws;;;if there is a communication error with the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Collection docs);UpdateResponse addBeans(Collection beans);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Collection docs);UpdateResponse addBeans(String collection, Collection beans, int commitWithinMs);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Collection docs);UpdateResponse addBeans(String collection, Collection beans, int commitWithinMs);@throws;;;if there is a communication error with the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Collection docs);UpdateResponse addBeans(String collection, Collection beans, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Collection docs);UpdateResponse addBeans(Collection beans, int commitWithinMs);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Collection docs);UpdateResponse addBeans(Collection beans, int commitWithinMs);@throws;;;if there is a communication error with the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Collection docs);UpdateResponse addBeans(Collection beans, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Collection docs);UpdateResponse addBeans(String collection, Iterator beanIterator);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Collection docs);UpdateResponse addBeans(String collection, Iterator beanIterator);@throws;;;if there is a communication error with the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Collection docs);UpdateResponse addBeans(String collection, Iterator beanIterator);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Collection docs);UpdateResponse addBeans(Iterator beanIterator);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Collection docs);UpdateResponse addBeans(Iterator beanIterator);@throws;;;if there is a communication error with the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Collection docs);UpdateResponse addBeans(Iterator beanIterator);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Collection docs);UpdateResponse commit(String collection);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Collection docs);UpdateResponse commit();@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Collection docs);UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Collection docs);UpdateResponse commit(boolean waitFlush, boolean waitSearcher);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Collection docs);UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher, boolean softCommit);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Collection docs);UpdateResponse commit(boolean waitFlush, boolean waitSearcher, boolean softCommit);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Collection docs);UpdateResponse optimize(String collection);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Collection docs);UpdateResponse optimize();@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Collection docs);UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Collection docs);UpdateResponse optimize(boolean waitFlush, boolean waitSearcher);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Collection docs);UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher, int maxSegments);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Collection docs);UpdateResponse optimize(boolean waitFlush, boolean waitSearcher, int maxSegments);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Collection docs);UpdateResponse rollback(String collection);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Collection docs);UpdateResponse rollback();@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Collection docs);UpdateResponse deleteById(String collection, String id);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Collection docs);UpdateResponse deleteById(String id);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Collection docs);UpdateResponse deleteById(String collection, String id, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Collection docs);UpdateResponse deleteById(String id, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Collection docs);UpdateResponse deleteById(String collection, List ids);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Collection docs);UpdateResponse deleteById(List ids);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Collection docs);UpdateResponse deleteById(String collection, List ids, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Collection docs);UpdateResponse deleteById(List ids, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Collection docs);UpdateResponse deleteByQuery(String collection, String query);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Collection docs);UpdateResponse deleteByQuery(String query);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Collection docs);UpdateResponse deleteByQuery(String collection, String query, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Collection docs);UpdateResponse deleteByQuery(String query, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Collection docs);SolrPingResponse ping();@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Collection docs);QueryResponse query(String collection, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Collection docs);QueryResponse query(SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Collection docs);QueryResponse query(String collection, SolrParams params, METHOD method);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Collection docs);QueryResponse query(SolrParams params, METHOD method);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Collection docs);QueryResponse queryAndStreamResponse(String collection, SolrParams params, StreamingResponseCallback callback);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Collection docs);QueryResponse queryAndStreamResponse(SolrParams params, StreamingResponseCallback callback);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Collection docs);SolrDocument getById(String collection, String id);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Collection docs);SolrDocument getById(String id);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Collection docs);SolrDocument getById(String collection, String id, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Collection docs);SolrDocument getById(String id, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Collection docs);SolrDocumentList getById(String collection, Collection ids);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Collection docs);SolrDocumentList getById(Collection ids);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Collection docs);SolrDocumentList getById(String collection, Collection ids, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Collection docs);SolrDocumentList getById(Collection ids, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Collection docs);NamedList request(SolrRequest request, String collection);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Collection docs);NamedList request(SolrRequest request);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Collection docs, int commitWithinMs);UpdateResponse add(Collection docs, int commitWithinMs);Free text;;;Adds a collection of documents, specifying max time before they become committed ;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Collection docs, int commitWithinMs);UpdateResponse add(Collection docs, int commitWithinMs);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse from the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Collection docs, int commitWithinMs);UpdateResponse add(Collection docs, int commitWithinMs);@param;Collection<SolrInputDocument> docs;Collection<SolrInputDocument> docs;the collection of documents;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Collection docs, int commitWithinMs);UpdateResponse add(Collection docs, int commitWithinMs);@param;int commitWithinMs;int commitWithinMs;max time (in ms) before a commit will happen;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Collection docs, int commitWithinMs);UpdateResponse add(Collection docs, int commitWithinMs);@throws;;;if there is a communication error with the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Collection docs, int commitWithinMs);UpdateResponse add(Collection docs, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Collection docs, int commitWithinMs);UpdateResponse add(String collection, SolrInputDocument doc);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse from the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Collection docs, int commitWithinMs);UpdateResponse add(String collection, SolrInputDocument doc);@throws;;;if there is a communication error with the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Collection docs, int commitWithinMs);UpdateResponse add(String collection, SolrInputDocument doc);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Collection docs, int commitWithinMs);UpdateResponse add(SolrInputDocument doc);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse from the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Collection docs, int commitWithinMs);UpdateResponse add(SolrInputDocument doc);@throws;;;if there is a communication error with the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Collection docs, int commitWithinMs);UpdateResponse add(SolrInputDocument doc);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Collection docs, int commitWithinMs);UpdateResponse add(String collection, SolrInputDocument doc, int commitWithinMs);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse from the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Collection docs, int commitWithinMs);UpdateResponse add(String collection, SolrInputDocument doc, int commitWithinMs);@param;int commitWithinMs;int commitWithinMs;max time (in ms) before a commit will happen;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Collection docs, int commitWithinMs);UpdateResponse add(String collection, SolrInputDocument doc, int commitWithinMs);@throws;;;if there is a communication error with the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Collection docs, int commitWithinMs);UpdateResponse add(String collection, SolrInputDocument doc, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Collection docs, int commitWithinMs);UpdateResponse add(SolrInputDocument doc, int commitWithinMs);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse from the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Collection docs, int commitWithinMs);UpdateResponse add(SolrInputDocument doc, int commitWithinMs);@param;int commitWithinMs;int commitWithinMs;max time (in ms) before a commit will happen;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Collection docs, int commitWithinMs);UpdateResponse add(SolrInputDocument doc, int commitWithinMs);@throws;;;if there is a communication error with the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Collection docs, int commitWithinMs);UpdateResponse add(SolrInputDocument doc, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Collection docs, int commitWithinMs);UpdateResponse add(String collection, Iterator docIterator);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse from the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Collection docs, int commitWithinMs);UpdateResponse add(String collection, Iterator docIterator);@throws;;;if there is a communication error with the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Collection docs, int commitWithinMs);UpdateResponse add(String collection, Iterator docIterator);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Collection docs, int commitWithinMs);UpdateResponse add(Iterator docIterator);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse from the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Collection docs, int commitWithinMs);UpdateResponse add(Iterator docIterator);@throws;;;if there is a communication error with the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Collection docs, int commitWithinMs);UpdateResponse add(Iterator docIterator);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Collection docs, int commitWithinMs);UpdateResponse addBean(String collection, Object obj);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Collection docs, int commitWithinMs);UpdateResponse addBean(String collection, Object obj);@throws;;;if there is a communication error with the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Collection docs, int commitWithinMs);UpdateResponse addBean(String collection, Object obj);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Collection docs, int commitWithinMs);UpdateResponse addBean(Object obj);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Collection docs, int commitWithinMs);UpdateResponse addBean(Object obj);@throws;;;if there is a communication error with the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Collection docs, int commitWithinMs);UpdateResponse addBean(Object obj);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Collection docs, int commitWithinMs);UpdateResponse addBean(String collection, Object obj, int commitWithinMs);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Collection docs, int commitWithinMs);UpdateResponse addBean(String collection, Object obj, int commitWithinMs);@throws;;;if there is a communication error with the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Collection docs, int commitWithinMs);UpdateResponse addBean(String collection, Object obj, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Collection docs, int commitWithinMs);UpdateResponse addBean(Object obj, int commitWithinMs);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Collection docs, int commitWithinMs);UpdateResponse addBean(Object obj, int commitWithinMs);@throws;;;if there is a communication error with the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Collection docs, int commitWithinMs);UpdateResponse addBean(Object obj, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Collection docs, int commitWithinMs);UpdateResponse addBeans(String collection, Collection beans);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Collection docs, int commitWithinMs);UpdateResponse addBeans(String collection, Collection beans);@param;String collection;String collection;the Solr collection to add documents to;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Collection docs, int commitWithinMs);UpdateResponse addBeans(String collection, Collection beans);@throws;;;if there is a communication error with the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Collection docs, int commitWithinMs);UpdateResponse addBeans(String collection, Collection beans);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Collection docs, int commitWithinMs);UpdateResponse addBeans(Collection beans);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Collection docs, int commitWithinMs);UpdateResponse addBeans(Collection beans);@throws;;;if there is a communication error with the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Collection docs, int commitWithinMs);UpdateResponse addBeans(Collection beans);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Collection docs, int commitWithinMs);UpdateResponse addBeans(String collection, Collection beans, int commitWithinMs);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Collection docs, int commitWithinMs);UpdateResponse addBeans(String collection, Collection beans, int commitWithinMs);@param;String collection;String collection;the Solr collection to add documents to;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Collection docs, int commitWithinMs);UpdateResponse addBeans(String collection, Collection beans, int commitWithinMs);@param;int commitWithinMs;int commitWithinMs;max time (in ms) before a commit will happen;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Collection docs, int commitWithinMs);UpdateResponse addBeans(String collection, Collection beans, int commitWithinMs);@throws;;;if there is a communication error with the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Collection docs, int commitWithinMs);UpdateResponse addBeans(String collection, Collection beans, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Collection docs, int commitWithinMs);UpdateResponse addBeans(Collection beans, int commitWithinMs);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Collection docs, int commitWithinMs);UpdateResponse addBeans(Collection beans, int commitWithinMs);@param;int commitWithinMs;int commitWithinMs;max time (in ms) before a commit will happen;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Collection docs, int commitWithinMs);UpdateResponse addBeans(Collection beans, int commitWithinMs);@throws;;;if there is a communication error with the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Collection docs, int commitWithinMs);UpdateResponse addBeans(Collection beans, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Collection docs, int commitWithinMs);UpdateResponse addBeans(String collection, Iterator beanIterator);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Collection docs, int commitWithinMs);UpdateResponse addBeans(String collection, Iterator beanIterator);@throws;;;if there is a communication error with the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Collection docs, int commitWithinMs);UpdateResponse addBeans(String collection, Iterator beanIterator);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Collection docs, int commitWithinMs);UpdateResponse addBeans(Iterator beanIterator);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Collection docs, int commitWithinMs);UpdateResponse addBeans(Iterator beanIterator);@throws;;;if there is a communication error with the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Collection docs, int commitWithinMs);UpdateResponse addBeans(Iterator beanIterator);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Collection docs, int commitWithinMs);UpdateResponse commit(String collection);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Collection docs, int commitWithinMs);UpdateResponse commit();@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Collection docs, int commitWithinMs);UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Collection docs, int commitWithinMs);UpdateResponse commit(boolean waitFlush, boolean waitSearcher);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Collection docs, int commitWithinMs);UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher, boolean softCommit);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Collection docs, int commitWithinMs);UpdateResponse commit(boolean waitFlush, boolean waitSearcher, boolean softCommit);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Collection docs, int commitWithinMs);UpdateResponse optimize(String collection);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Collection docs, int commitWithinMs);UpdateResponse optimize();@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Collection docs, int commitWithinMs);UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Collection docs, int commitWithinMs);UpdateResponse optimize(boolean waitFlush, boolean waitSearcher);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Collection docs, int commitWithinMs);UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher, int maxSegments);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Collection docs, int commitWithinMs);UpdateResponse optimize(boolean waitFlush, boolean waitSearcher, int maxSegments);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Collection docs, int commitWithinMs);UpdateResponse rollback(String collection);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Collection docs, int commitWithinMs);UpdateResponse rollback();@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Collection docs, int commitWithinMs);UpdateResponse deleteById(String collection, String id);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Collection docs, int commitWithinMs);UpdateResponse deleteById(String id);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Collection docs, int commitWithinMs);UpdateResponse deleteById(String collection, String id, int commitWithinMs);@param;int commitWithinMs;int commitWithinMs;max time (in ms) before a commit will happen;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Collection docs, int commitWithinMs);UpdateResponse deleteById(String collection, String id, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Collection docs, int commitWithinMs);UpdateResponse deleteById(String id, int commitWithinMs);@param;int commitWithinMs;int commitWithinMs;max time (in ms) before a commit will happen;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Collection docs, int commitWithinMs);UpdateResponse deleteById(String id, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Collection docs, int commitWithinMs);UpdateResponse deleteById(String collection, List ids);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Collection docs, int commitWithinMs);UpdateResponse deleteById(List ids);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Collection docs, int commitWithinMs);UpdateResponse deleteById(String collection, List ids, int commitWithinMs);@param;int commitWithinMs;int commitWithinMs;max time (in ms) before a commit will happen;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Collection docs, int commitWithinMs);UpdateResponse deleteById(String collection, List ids, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Collection docs, int commitWithinMs);UpdateResponse deleteById(List ids, int commitWithinMs);@param;int commitWithinMs;int commitWithinMs;max time (in ms) before a commit will happen;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Collection docs, int commitWithinMs);UpdateResponse deleteById(List ids, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Collection docs, int commitWithinMs);UpdateResponse deleteByQuery(String collection, String query);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Collection docs, int commitWithinMs);UpdateResponse deleteByQuery(String query);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Collection docs, int commitWithinMs);UpdateResponse deleteByQuery(String collection, String query, int commitWithinMs);@param;int commitWithinMs;int commitWithinMs;max time (in ms) before a commit will happen;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Collection docs, int commitWithinMs);UpdateResponse deleteByQuery(String collection, String query, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Collection docs, int commitWithinMs);UpdateResponse deleteByQuery(String query, int commitWithinMs);@param;int commitWithinMs;int commitWithinMs;max time (in ms) before a commit will happen;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Collection docs, int commitWithinMs);UpdateResponse deleteByQuery(String query, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Collection docs, int commitWithinMs);SolrPingResponse ping();@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Collection docs, int commitWithinMs);QueryResponse query(String collection, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Collection docs, int commitWithinMs);QueryResponse query(SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Collection docs, int commitWithinMs);QueryResponse query(String collection, SolrParams params, METHOD method);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Collection docs, int commitWithinMs);QueryResponse query(SolrParams params, METHOD method);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Collection docs, int commitWithinMs);QueryResponse queryAndStreamResponse(String collection, SolrParams params, StreamingResponseCallback callback);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Collection docs, int commitWithinMs);QueryResponse queryAndStreamResponse(SolrParams params, StreamingResponseCallback callback);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Collection docs, int commitWithinMs);SolrDocument getById(String collection, String id);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Collection docs, int commitWithinMs);SolrDocument getById(String id);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Collection docs, int commitWithinMs);SolrDocument getById(String collection, String id, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Collection docs, int commitWithinMs);SolrDocument getById(String id, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Collection docs, int commitWithinMs);SolrDocumentList getById(String collection, Collection ids);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Collection docs, int commitWithinMs);SolrDocumentList getById(Collection ids);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Collection docs, int commitWithinMs);SolrDocumentList getById(String collection, Collection ids, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Collection docs, int commitWithinMs);SolrDocumentList getById(Collection ids, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Collection docs, int commitWithinMs);NamedList request(SolrRequest request, String collection);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Collection docs, int commitWithinMs);NamedList request(SolrRequest request);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Collection docs, int commitWithinMs);UpdateResponse add(String collection, SolrInputDocument doc);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse from the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Collection docs, int commitWithinMs);UpdateResponse add(String collection, SolrInputDocument doc);@throws;;;if there is a communication error with the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Collection docs, int commitWithinMs);UpdateResponse add(String collection, SolrInputDocument doc);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Collection docs, int commitWithinMs);UpdateResponse add(SolrInputDocument doc);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse from the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Collection docs, int commitWithinMs);UpdateResponse add(SolrInputDocument doc);@throws;;;if there is a communication error with the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Collection docs, int commitWithinMs);UpdateResponse add(SolrInputDocument doc);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Collection docs, int commitWithinMs);UpdateResponse add(String collection, SolrInputDocument doc, int commitWithinMs);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse from the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Collection docs, int commitWithinMs);UpdateResponse add(String collection, SolrInputDocument doc, int commitWithinMs);@param;int commitWithinMs;int commitWithinMs;max time (in ms) before a commit will happen;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Collection docs, int commitWithinMs);UpdateResponse add(String collection, SolrInputDocument doc, int commitWithinMs);@throws;;;if there is a communication error with the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Collection docs, int commitWithinMs);UpdateResponse add(String collection, SolrInputDocument doc, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Collection docs, int commitWithinMs);UpdateResponse add(SolrInputDocument doc, int commitWithinMs);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse from the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Collection docs, int commitWithinMs);UpdateResponse add(SolrInputDocument doc, int commitWithinMs);@param;int commitWithinMs;int commitWithinMs;max time (in ms) before a commit will happen;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Collection docs, int commitWithinMs);UpdateResponse add(SolrInputDocument doc, int commitWithinMs);@throws;;;if there is a communication error with the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Collection docs, int commitWithinMs);UpdateResponse add(SolrInputDocument doc, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Collection docs, int commitWithinMs);UpdateResponse add(String collection, Iterator docIterator);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse from the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Collection docs, int commitWithinMs);UpdateResponse add(String collection, Iterator docIterator);@throws;;;if there is a communication error with the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Collection docs, int commitWithinMs);UpdateResponse add(String collection, Iterator docIterator);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Collection docs, int commitWithinMs);UpdateResponse add(Iterator docIterator);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse from the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Collection docs, int commitWithinMs);UpdateResponse add(Iterator docIterator);@throws;;;if there is a communication error with the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Collection docs, int commitWithinMs);UpdateResponse add(Iterator docIterator);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Collection docs, int commitWithinMs);UpdateResponse addBean(String collection, Object obj);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Collection docs, int commitWithinMs);UpdateResponse addBean(String collection, Object obj);@throws;;;if there is a communication error with the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Collection docs, int commitWithinMs);UpdateResponse addBean(String collection, Object obj);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Collection docs, int commitWithinMs);UpdateResponse addBean(Object obj);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Collection docs, int commitWithinMs);UpdateResponse addBean(Object obj);@throws;;;if there is a communication error with the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Collection docs, int commitWithinMs);UpdateResponse addBean(Object obj);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Collection docs, int commitWithinMs);UpdateResponse addBean(String collection, Object obj, int commitWithinMs);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Collection docs, int commitWithinMs);UpdateResponse addBean(String collection, Object obj, int commitWithinMs);@throws;;;if there is a communication error with the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Collection docs, int commitWithinMs);UpdateResponse addBean(String collection, Object obj, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Collection docs, int commitWithinMs);UpdateResponse addBean(Object obj, int commitWithinMs);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Collection docs, int commitWithinMs);UpdateResponse addBean(Object obj, int commitWithinMs);@throws;;;if there is a communication error with the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Collection docs, int commitWithinMs);UpdateResponse addBean(Object obj, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Collection docs, int commitWithinMs);UpdateResponse addBeans(String collection, Collection beans);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Collection docs, int commitWithinMs);UpdateResponse addBeans(String collection, Collection beans);@throws;;;if there is a communication error with the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Collection docs, int commitWithinMs);UpdateResponse addBeans(String collection, Collection beans);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Collection docs, int commitWithinMs);UpdateResponse addBeans(Collection beans);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Collection docs, int commitWithinMs);UpdateResponse addBeans(Collection beans);@throws;;;if there is a communication error with the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Collection docs, int commitWithinMs);UpdateResponse addBeans(Collection beans);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Collection docs, int commitWithinMs);UpdateResponse addBeans(String collection, Collection beans, int commitWithinMs);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Collection docs, int commitWithinMs);UpdateResponse addBeans(String collection, Collection beans, int commitWithinMs);@param;int commitWithinMs;int commitWithinMs;max time (in ms) before a commit will happen;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Collection docs, int commitWithinMs);UpdateResponse addBeans(String collection, Collection beans, int commitWithinMs);@throws;;;if there is a communication error with the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Collection docs, int commitWithinMs);UpdateResponse addBeans(String collection, Collection beans, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Collection docs, int commitWithinMs);UpdateResponse addBeans(Collection beans, int commitWithinMs);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Collection docs, int commitWithinMs);UpdateResponse addBeans(Collection beans, int commitWithinMs);@param;int commitWithinMs;int commitWithinMs;max time (in ms) before a commit will happen;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Collection docs, int commitWithinMs);UpdateResponse addBeans(Collection beans, int commitWithinMs);@throws;;;if there is a communication error with the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Collection docs, int commitWithinMs);UpdateResponse addBeans(Collection beans, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Collection docs, int commitWithinMs);UpdateResponse addBeans(String collection, Iterator beanIterator);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Collection docs, int commitWithinMs);UpdateResponse addBeans(String collection, Iterator beanIterator);@throws;;;if there is a communication error with the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Collection docs, int commitWithinMs);UpdateResponse addBeans(String collection, Iterator beanIterator);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Collection docs, int commitWithinMs);UpdateResponse addBeans(Iterator beanIterator);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Collection docs, int commitWithinMs);UpdateResponse addBeans(Iterator beanIterator);@throws;;;if there is a communication error with the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Collection docs, int commitWithinMs);UpdateResponse addBeans(Iterator beanIterator);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Collection docs, int commitWithinMs);UpdateResponse commit(String collection);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Collection docs, int commitWithinMs);UpdateResponse commit();@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Collection docs, int commitWithinMs);UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Collection docs, int commitWithinMs);UpdateResponse commit(boolean waitFlush, boolean waitSearcher);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Collection docs, int commitWithinMs);UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher, boolean softCommit);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Collection docs, int commitWithinMs);UpdateResponse commit(boolean waitFlush, boolean waitSearcher, boolean softCommit);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Collection docs, int commitWithinMs);UpdateResponse optimize(String collection);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Collection docs, int commitWithinMs);UpdateResponse optimize();@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Collection docs, int commitWithinMs);UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Collection docs, int commitWithinMs);UpdateResponse optimize(boolean waitFlush, boolean waitSearcher);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Collection docs, int commitWithinMs);UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher, int maxSegments);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Collection docs, int commitWithinMs);UpdateResponse optimize(boolean waitFlush, boolean waitSearcher, int maxSegments);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Collection docs, int commitWithinMs);UpdateResponse rollback(String collection);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Collection docs, int commitWithinMs);UpdateResponse rollback();@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Collection docs, int commitWithinMs);UpdateResponse deleteById(String collection, String id);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Collection docs, int commitWithinMs);UpdateResponse deleteById(String id);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Collection docs, int commitWithinMs);UpdateResponse deleteById(String collection, String id, int commitWithinMs);@param;int commitWithinMs;int commitWithinMs;max time (in ms) before a commit will happen;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Collection docs, int commitWithinMs);UpdateResponse deleteById(String collection, String id, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Collection docs, int commitWithinMs);UpdateResponse deleteById(String id, int commitWithinMs);@param;int commitWithinMs;int commitWithinMs;max time (in ms) before a commit will happen;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Collection docs, int commitWithinMs);UpdateResponse deleteById(String id, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Collection docs, int commitWithinMs);UpdateResponse deleteById(String collection, List ids);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Collection docs, int commitWithinMs);UpdateResponse deleteById(List ids);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Collection docs, int commitWithinMs);UpdateResponse deleteById(String collection, List ids, int commitWithinMs);@param;int commitWithinMs;int commitWithinMs;max time (in ms) before a commit will happen;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Collection docs, int commitWithinMs);UpdateResponse deleteById(String collection, List ids, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Collection docs, int commitWithinMs);UpdateResponse deleteById(List ids, int commitWithinMs);@param;int commitWithinMs;int commitWithinMs;max time (in ms) before a commit will happen;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Collection docs, int commitWithinMs);UpdateResponse deleteById(List ids, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Collection docs, int commitWithinMs);UpdateResponse deleteByQuery(String collection, String query);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Collection docs, int commitWithinMs);UpdateResponse deleteByQuery(String query);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Collection docs, int commitWithinMs);UpdateResponse deleteByQuery(String collection, String query, int commitWithinMs);@param;int commitWithinMs;int commitWithinMs;max time (in ms) before a commit will happen;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Collection docs, int commitWithinMs);UpdateResponse deleteByQuery(String collection, String query, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Collection docs, int commitWithinMs);UpdateResponse deleteByQuery(String query, int commitWithinMs);@param;int commitWithinMs;int commitWithinMs;max time (in ms) before a commit will happen;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Collection docs, int commitWithinMs);UpdateResponse deleteByQuery(String query, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Collection docs, int commitWithinMs);SolrPingResponse ping();@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Collection docs, int commitWithinMs);QueryResponse query(String collection, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Collection docs, int commitWithinMs);QueryResponse query(SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Collection docs, int commitWithinMs);QueryResponse query(String collection, SolrParams params, METHOD method);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Collection docs, int commitWithinMs);QueryResponse query(SolrParams params, METHOD method);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Collection docs, int commitWithinMs);QueryResponse queryAndStreamResponse(String collection, SolrParams params, StreamingResponseCallback callback);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Collection docs, int commitWithinMs);QueryResponse queryAndStreamResponse(SolrParams params, StreamingResponseCallback callback);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Collection docs, int commitWithinMs);SolrDocument getById(String collection, String id);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Collection docs, int commitWithinMs);SolrDocument getById(String id);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Collection docs, int commitWithinMs);SolrDocument getById(String collection, String id, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Collection docs, int commitWithinMs);SolrDocument getById(String id, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Collection docs, int commitWithinMs);SolrDocumentList getById(String collection, Collection ids);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Collection docs, int commitWithinMs);SolrDocumentList getById(Collection ids);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Collection docs, int commitWithinMs);SolrDocumentList getById(String collection, Collection ids, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Collection docs, int commitWithinMs);SolrDocumentList getById(Collection ids, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Collection docs, int commitWithinMs);NamedList request(SolrRequest request, String collection);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Collection docs, int commitWithinMs);NamedList request(SolrRequest request);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, SolrInputDocument doc);UpdateResponse add(SolrInputDocument doc);Free text;;;Adds a single document ;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, SolrInputDocument doc);UpdateResponse add(SolrInputDocument doc);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse from the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, SolrInputDocument doc);UpdateResponse add(SolrInputDocument doc);@param;SolrInputDocument doc;SolrInputDocument doc;the input document;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, SolrInputDocument doc);UpdateResponse add(SolrInputDocument doc);@throws;;;if there is a communication error with the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, SolrInputDocument doc);UpdateResponse add(SolrInputDocument doc);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, SolrInputDocument doc);UpdateResponse add(String collection, SolrInputDocument doc, int commitWithinMs);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse from the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, SolrInputDocument doc);UpdateResponse add(String collection, SolrInputDocument doc, int commitWithinMs);@param;String collection;String collection;the Solr collection to add the document to;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, SolrInputDocument doc);UpdateResponse add(String collection, SolrInputDocument doc, int commitWithinMs);@param;SolrInputDocument doc;SolrInputDocument doc;the input document;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, SolrInputDocument doc);UpdateResponse add(String collection, SolrInputDocument doc, int commitWithinMs);@throws;;;if there is a communication error with the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, SolrInputDocument doc);UpdateResponse add(String collection, SolrInputDocument doc, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, SolrInputDocument doc);UpdateResponse add(SolrInputDocument doc, int commitWithinMs);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse from the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, SolrInputDocument doc);UpdateResponse add(SolrInputDocument doc, int commitWithinMs);@param;SolrInputDocument doc;SolrInputDocument doc;the input document;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, SolrInputDocument doc);UpdateResponse add(SolrInputDocument doc, int commitWithinMs);@throws;;;if there is a communication error with the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, SolrInputDocument doc);UpdateResponse add(SolrInputDocument doc, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, SolrInputDocument doc);UpdateResponse add(String collection, Iterator docIterator);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse from the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, SolrInputDocument doc);UpdateResponse add(String collection, Iterator docIterator);@throws;;;if there is a communication error with the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, SolrInputDocument doc);UpdateResponse add(String collection, Iterator docIterator);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, SolrInputDocument doc);UpdateResponse add(Iterator docIterator);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse from the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, SolrInputDocument doc);UpdateResponse add(Iterator docIterator);@throws;;;if there is a communication error with the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, SolrInputDocument doc);UpdateResponse add(Iterator docIterator);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, SolrInputDocument doc);UpdateResponse addBean(String collection, Object obj);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, SolrInputDocument doc);UpdateResponse addBean(String collection, Object obj);@throws;;;if there is a communication error with the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, SolrInputDocument doc);UpdateResponse addBean(String collection, Object obj);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, SolrInputDocument doc);UpdateResponse addBean(Object obj);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, SolrInputDocument doc);UpdateResponse addBean(Object obj);@throws;;;if there is a communication error with the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, SolrInputDocument doc);UpdateResponse addBean(Object obj);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, SolrInputDocument doc);UpdateResponse addBean(String collection, Object obj, int commitWithinMs);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, SolrInputDocument doc);UpdateResponse addBean(String collection, Object obj, int commitWithinMs);@throws;;;if there is a communication error with the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, SolrInputDocument doc);UpdateResponse addBean(String collection, Object obj, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, SolrInputDocument doc);UpdateResponse addBean(Object obj, int commitWithinMs);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, SolrInputDocument doc);UpdateResponse addBean(Object obj, int commitWithinMs);@throws;;;if there is a communication error with the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, SolrInputDocument doc);UpdateResponse addBean(Object obj, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, SolrInputDocument doc);UpdateResponse addBeans(String collection, Collection beans);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, SolrInputDocument doc);UpdateResponse addBeans(String collection, Collection beans);@throws;;;if there is a communication error with the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, SolrInputDocument doc);UpdateResponse addBeans(String collection, Collection beans);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, SolrInputDocument doc);UpdateResponse addBeans(Collection beans);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, SolrInputDocument doc);UpdateResponse addBeans(Collection beans);@throws;;;if there is a communication error with the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, SolrInputDocument doc);UpdateResponse addBeans(Collection beans);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, SolrInputDocument doc);UpdateResponse addBeans(String collection, Collection beans, int commitWithinMs);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, SolrInputDocument doc);UpdateResponse addBeans(String collection, Collection beans, int commitWithinMs);@throws;;;if there is a communication error with the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, SolrInputDocument doc);UpdateResponse addBeans(String collection, Collection beans, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, SolrInputDocument doc);UpdateResponse addBeans(Collection beans, int commitWithinMs);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, SolrInputDocument doc);UpdateResponse addBeans(Collection beans, int commitWithinMs);@throws;;;if there is a communication error with the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, SolrInputDocument doc);UpdateResponse addBeans(Collection beans, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, SolrInputDocument doc);UpdateResponse addBeans(String collection, Iterator beanIterator);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, SolrInputDocument doc);UpdateResponse addBeans(String collection, Iterator beanIterator);@throws;;;if there is a communication error with the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, SolrInputDocument doc);UpdateResponse addBeans(String collection, Iterator beanIterator);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, SolrInputDocument doc);UpdateResponse addBeans(Iterator beanIterator);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, SolrInputDocument doc);UpdateResponse addBeans(Iterator beanIterator);@throws;;;if there is a communication error with the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, SolrInputDocument doc);UpdateResponse addBeans(Iterator beanIterator);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, SolrInputDocument doc);UpdateResponse commit(String collection);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, SolrInputDocument doc);UpdateResponse commit();@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, SolrInputDocument doc);UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, SolrInputDocument doc);UpdateResponse commit(boolean waitFlush, boolean waitSearcher);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, SolrInputDocument doc);UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher, boolean softCommit);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, SolrInputDocument doc);UpdateResponse commit(boolean waitFlush, boolean waitSearcher, boolean softCommit);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, SolrInputDocument doc);UpdateResponse optimize(String collection);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, SolrInputDocument doc);UpdateResponse optimize();@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, SolrInputDocument doc);UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, SolrInputDocument doc);UpdateResponse optimize(boolean waitFlush, boolean waitSearcher);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, SolrInputDocument doc);UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher, int maxSegments);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, SolrInputDocument doc);UpdateResponse optimize(boolean waitFlush, boolean waitSearcher, int maxSegments);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, SolrInputDocument doc);UpdateResponse rollback(String collection);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, SolrInputDocument doc);UpdateResponse rollback();@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, SolrInputDocument doc);UpdateResponse deleteById(String collection, String id);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, SolrInputDocument doc);UpdateResponse deleteById(String id);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, SolrInputDocument doc);UpdateResponse deleteById(String collection, String id, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, SolrInputDocument doc);UpdateResponse deleteById(String id, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, SolrInputDocument doc);UpdateResponse deleteById(String collection, List ids);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, SolrInputDocument doc);UpdateResponse deleteById(List ids);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, SolrInputDocument doc);UpdateResponse deleteById(String collection, List ids, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, SolrInputDocument doc);UpdateResponse deleteById(List ids, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, SolrInputDocument doc);UpdateResponse deleteByQuery(String collection, String query);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, SolrInputDocument doc);UpdateResponse deleteByQuery(String query);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, SolrInputDocument doc);UpdateResponse deleteByQuery(String collection, String query, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, SolrInputDocument doc);UpdateResponse deleteByQuery(String query, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, SolrInputDocument doc);SolrPingResponse ping();@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, SolrInputDocument doc);QueryResponse query(String collection, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, SolrInputDocument doc);QueryResponse query(SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, SolrInputDocument doc);QueryResponse query(String collection, SolrParams params, METHOD method);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, SolrInputDocument doc);QueryResponse query(SolrParams params, METHOD method);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, SolrInputDocument doc);QueryResponse queryAndStreamResponse(String collection, SolrParams params, StreamingResponseCallback callback);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, SolrInputDocument doc);QueryResponse queryAndStreamResponse(SolrParams params, StreamingResponseCallback callback);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, SolrInputDocument doc);SolrDocument getById(String collection, String id);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, SolrInputDocument doc);SolrDocument getById(String id);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, SolrInputDocument doc);SolrDocument getById(String collection, String id, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, SolrInputDocument doc);SolrDocument getById(String id, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, SolrInputDocument doc);SolrDocumentList getById(String collection, Collection ids);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, SolrInputDocument doc);SolrDocumentList getById(Collection ids);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, SolrInputDocument doc);SolrDocumentList getById(String collection, Collection ids, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, SolrInputDocument doc);SolrDocumentList getById(Collection ids, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, SolrInputDocument doc);NamedList request(SolrRequest request, String collection);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, SolrInputDocument doc);NamedList request(SolrRequest request);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(SolrInputDocument doc);UpdateResponse add(String collection, SolrInputDocument doc, int commitWithinMs);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse from the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(SolrInputDocument doc);UpdateResponse add(String collection, SolrInputDocument doc, int commitWithinMs);@param;SolrInputDocument doc;SolrInputDocument doc;the input document;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(SolrInputDocument doc);UpdateResponse add(String collection, SolrInputDocument doc, int commitWithinMs);@throws;;;if there is a communication error with the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(SolrInputDocument doc);UpdateResponse add(String collection, SolrInputDocument doc, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(SolrInputDocument doc);UpdateResponse add(SolrInputDocument doc, int commitWithinMs);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse from the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(SolrInputDocument doc);UpdateResponse add(SolrInputDocument doc, int commitWithinMs);@param;SolrInputDocument doc;SolrInputDocument doc;the input document;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(SolrInputDocument doc);UpdateResponse add(SolrInputDocument doc, int commitWithinMs);@throws;;;if there is a communication error with the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(SolrInputDocument doc);UpdateResponse add(SolrInputDocument doc, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(SolrInputDocument doc);UpdateResponse add(String collection, Iterator docIterator);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse from the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(SolrInputDocument doc);UpdateResponse add(String collection, Iterator docIterator);@throws;;;if there is a communication error with the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(SolrInputDocument doc);UpdateResponse add(String collection, Iterator docIterator);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(SolrInputDocument doc);UpdateResponse add(Iterator docIterator);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse from the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(SolrInputDocument doc);UpdateResponse add(Iterator docIterator);@throws;;;if there is a communication error with the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(SolrInputDocument doc);UpdateResponse add(Iterator docIterator);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(SolrInputDocument doc);UpdateResponse addBean(String collection, Object obj);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(SolrInputDocument doc);UpdateResponse addBean(String collection, Object obj);@throws;;;if there is a communication error with the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(SolrInputDocument doc);UpdateResponse addBean(String collection, Object obj);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(SolrInputDocument doc);UpdateResponse addBean(Object obj);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(SolrInputDocument doc);UpdateResponse addBean(Object obj);@throws;;;if there is a communication error with the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(SolrInputDocument doc);UpdateResponse addBean(Object obj);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(SolrInputDocument doc);UpdateResponse addBean(String collection, Object obj, int commitWithinMs);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(SolrInputDocument doc);UpdateResponse addBean(String collection, Object obj, int commitWithinMs);@throws;;;if there is a communication error with the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(SolrInputDocument doc);UpdateResponse addBean(String collection, Object obj, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(SolrInputDocument doc);UpdateResponse addBean(Object obj, int commitWithinMs);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(SolrInputDocument doc);UpdateResponse addBean(Object obj, int commitWithinMs);@throws;;;if there is a communication error with the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(SolrInputDocument doc);UpdateResponse addBean(Object obj, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(SolrInputDocument doc);UpdateResponse addBeans(String collection, Collection beans);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(SolrInputDocument doc);UpdateResponse addBeans(String collection, Collection beans);@throws;;;if there is a communication error with the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(SolrInputDocument doc);UpdateResponse addBeans(String collection, Collection beans);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(SolrInputDocument doc);UpdateResponse addBeans(Collection beans);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(SolrInputDocument doc);UpdateResponse addBeans(Collection beans);@throws;;;if there is a communication error with the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(SolrInputDocument doc);UpdateResponse addBeans(Collection beans);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(SolrInputDocument doc);UpdateResponse addBeans(String collection, Collection beans, int commitWithinMs);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(SolrInputDocument doc);UpdateResponse addBeans(String collection, Collection beans, int commitWithinMs);@throws;;;if there is a communication error with the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(SolrInputDocument doc);UpdateResponse addBeans(String collection, Collection beans, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(SolrInputDocument doc);UpdateResponse addBeans(Collection beans, int commitWithinMs);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(SolrInputDocument doc);UpdateResponse addBeans(Collection beans, int commitWithinMs);@throws;;;if there is a communication error with the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(SolrInputDocument doc);UpdateResponse addBeans(Collection beans, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(SolrInputDocument doc);UpdateResponse addBeans(String collection, Iterator beanIterator);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(SolrInputDocument doc);UpdateResponse addBeans(String collection, Iterator beanIterator);@throws;;;if there is a communication error with the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(SolrInputDocument doc);UpdateResponse addBeans(String collection, Iterator beanIterator);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(SolrInputDocument doc);UpdateResponse addBeans(Iterator beanIterator);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(SolrInputDocument doc);UpdateResponse addBeans(Iterator beanIterator);@throws;;;if there is a communication error with the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(SolrInputDocument doc);UpdateResponse addBeans(Iterator beanIterator);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(SolrInputDocument doc);UpdateResponse commit(String collection);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(SolrInputDocument doc);UpdateResponse commit();@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(SolrInputDocument doc);UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(SolrInputDocument doc);UpdateResponse commit(boolean waitFlush, boolean waitSearcher);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(SolrInputDocument doc);UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher, boolean softCommit);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(SolrInputDocument doc);UpdateResponse commit(boolean waitFlush, boolean waitSearcher, boolean softCommit);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(SolrInputDocument doc);UpdateResponse optimize(String collection);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(SolrInputDocument doc);UpdateResponse optimize();@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(SolrInputDocument doc);UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(SolrInputDocument doc);UpdateResponse optimize(boolean waitFlush, boolean waitSearcher);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(SolrInputDocument doc);UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher, int maxSegments);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(SolrInputDocument doc);UpdateResponse optimize(boolean waitFlush, boolean waitSearcher, int maxSegments);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(SolrInputDocument doc);UpdateResponse rollback(String collection);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(SolrInputDocument doc);UpdateResponse rollback();@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(SolrInputDocument doc);UpdateResponse deleteById(String collection, String id);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(SolrInputDocument doc);UpdateResponse deleteById(String id);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(SolrInputDocument doc);UpdateResponse deleteById(String collection, String id, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(SolrInputDocument doc);UpdateResponse deleteById(String id, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(SolrInputDocument doc);UpdateResponse deleteById(String collection, List ids);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(SolrInputDocument doc);UpdateResponse deleteById(List ids);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(SolrInputDocument doc);UpdateResponse deleteById(String collection, List ids, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(SolrInputDocument doc);UpdateResponse deleteById(List ids, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(SolrInputDocument doc);UpdateResponse deleteByQuery(String collection, String query);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(SolrInputDocument doc);UpdateResponse deleteByQuery(String query);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(SolrInputDocument doc);UpdateResponse deleteByQuery(String collection, String query, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(SolrInputDocument doc);UpdateResponse deleteByQuery(String query, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(SolrInputDocument doc);SolrPingResponse ping();@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(SolrInputDocument doc);QueryResponse query(String collection, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(SolrInputDocument doc);QueryResponse query(SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(SolrInputDocument doc);QueryResponse query(String collection, SolrParams params, METHOD method);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(SolrInputDocument doc);QueryResponse query(SolrParams params, METHOD method);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(SolrInputDocument doc);QueryResponse queryAndStreamResponse(String collection, SolrParams params, StreamingResponseCallback callback);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(SolrInputDocument doc);QueryResponse queryAndStreamResponse(SolrParams params, StreamingResponseCallback callback);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(SolrInputDocument doc);SolrDocument getById(String collection, String id);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(SolrInputDocument doc);SolrDocument getById(String id);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(SolrInputDocument doc);SolrDocument getById(String collection, String id, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(SolrInputDocument doc);SolrDocument getById(String id, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(SolrInputDocument doc);SolrDocumentList getById(String collection, Collection ids);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(SolrInputDocument doc);SolrDocumentList getById(Collection ids);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(SolrInputDocument doc);SolrDocumentList getById(String collection, Collection ids, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(SolrInputDocument doc);SolrDocumentList getById(Collection ids, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(SolrInputDocument doc);NamedList request(SolrRequest request, String collection);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(SolrInputDocument doc);NamedList request(SolrRequest request);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, SolrInputDocument doc, int commitWithinMs);UpdateResponse add(SolrInputDocument doc, int commitWithinMs);Free text;;;Adds a single document specifying max time before it becomes committed ;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, SolrInputDocument doc, int commitWithinMs);UpdateResponse add(SolrInputDocument doc, int commitWithinMs);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse from the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, SolrInputDocument doc, int commitWithinMs);UpdateResponse add(SolrInputDocument doc, int commitWithinMs);@param;SolrInputDocument doc;SolrInputDocument doc;the input document;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, SolrInputDocument doc, int commitWithinMs);UpdateResponse add(SolrInputDocument doc, int commitWithinMs);@param;int commitWithinMs;int commitWithinMs;max time (in ms) before a commit will happen;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, SolrInputDocument doc, int commitWithinMs);UpdateResponse add(SolrInputDocument doc, int commitWithinMs);@throws;;;if there is a communication error with the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, SolrInputDocument doc, int commitWithinMs);UpdateResponse add(SolrInputDocument doc, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, SolrInputDocument doc, int commitWithinMs);UpdateResponse add(String collection, Iterator docIterator);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse from the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, SolrInputDocument doc, int commitWithinMs);UpdateResponse add(String collection, Iterator docIterator);@throws;;;if there is a communication error with the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, SolrInputDocument doc, int commitWithinMs);UpdateResponse add(String collection, Iterator docIterator);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, SolrInputDocument doc, int commitWithinMs);UpdateResponse add(Iterator docIterator);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse from the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, SolrInputDocument doc, int commitWithinMs);UpdateResponse add(Iterator docIterator);@throws;;;if there is a communication error with the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, SolrInputDocument doc, int commitWithinMs);UpdateResponse add(Iterator docIterator);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, SolrInputDocument doc, int commitWithinMs);UpdateResponse addBean(String collection, Object obj);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, SolrInputDocument doc, int commitWithinMs);UpdateResponse addBean(String collection, Object obj);@throws;;;if there is a communication error with the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, SolrInputDocument doc, int commitWithinMs);UpdateResponse addBean(String collection, Object obj);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, SolrInputDocument doc, int commitWithinMs);UpdateResponse addBean(Object obj);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, SolrInputDocument doc, int commitWithinMs);UpdateResponse addBean(Object obj);@throws;;;if there is a communication error with the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, SolrInputDocument doc, int commitWithinMs);UpdateResponse addBean(Object obj);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, SolrInputDocument doc, int commitWithinMs);UpdateResponse addBean(String collection, Object obj, int commitWithinMs);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, SolrInputDocument doc, int commitWithinMs);UpdateResponse addBean(String collection, Object obj, int commitWithinMs);@throws;;;if there is a communication error with the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, SolrInputDocument doc, int commitWithinMs);UpdateResponse addBean(String collection, Object obj, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, SolrInputDocument doc, int commitWithinMs);UpdateResponse addBean(Object obj, int commitWithinMs);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, SolrInputDocument doc, int commitWithinMs);UpdateResponse addBean(Object obj, int commitWithinMs);@throws;;;if there is a communication error with the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, SolrInputDocument doc, int commitWithinMs);UpdateResponse addBean(Object obj, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, SolrInputDocument doc, int commitWithinMs);UpdateResponse addBeans(String collection, Collection beans);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, SolrInputDocument doc, int commitWithinMs);UpdateResponse addBeans(String collection, Collection beans);@throws;;;if there is a communication error with the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, SolrInputDocument doc, int commitWithinMs);UpdateResponse addBeans(String collection, Collection beans);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, SolrInputDocument doc, int commitWithinMs);UpdateResponse addBeans(Collection beans);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, SolrInputDocument doc, int commitWithinMs);UpdateResponse addBeans(Collection beans);@throws;;;if there is a communication error with the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, SolrInputDocument doc, int commitWithinMs);UpdateResponse addBeans(Collection beans);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, SolrInputDocument doc, int commitWithinMs);UpdateResponse addBeans(String collection, Collection beans, int commitWithinMs);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, SolrInputDocument doc, int commitWithinMs);UpdateResponse addBeans(String collection, Collection beans, int commitWithinMs);@param;int commitWithinMs;int commitWithinMs;max time (in ms) before a commit will happen;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, SolrInputDocument doc, int commitWithinMs);UpdateResponse addBeans(String collection, Collection beans, int commitWithinMs);@throws;;;if there is a communication error with the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, SolrInputDocument doc, int commitWithinMs);UpdateResponse addBeans(String collection, Collection beans, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, SolrInputDocument doc, int commitWithinMs);UpdateResponse addBeans(Collection beans, int commitWithinMs);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, SolrInputDocument doc, int commitWithinMs);UpdateResponse addBeans(Collection beans, int commitWithinMs);@param;int commitWithinMs;int commitWithinMs;max time (in ms) before a commit will happen;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, SolrInputDocument doc, int commitWithinMs);UpdateResponse addBeans(Collection beans, int commitWithinMs);@throws;;;if there is a communication error with the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, SolrInputDocument doc, int commitWithinMs);UpdateResponse addBeans(Collection beans, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, SolrInputDocument doc, int commitWithinMs);UpdateResponse addBeans(String collection, Iterator beanIterator);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, SolrInputDocument doc, int commitWithinMs);UpdateResponse addBeans(String collection, Iterator beanIterator);@throws;;;if there is a communication error with the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, SolrInputDocument doc, int commitWithinMs);UpdateResponse addBeans(String collection, Iterator beanIterator);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, SolrInputDocument doc, int commitWithinMs);UpdateResponse addBeans(Iterator beanIterator);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, SolrInputDocument doc, int commitWithinMs);UpdateResponse addBeans(Iterator beanIterator);@throws;;;if there is a communication error with the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, SolrInputDocument doc, int commitWithinMs);UpdateResponse addBeans(Iterator beanIterator);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, SolrInputDocument doc, int commitWithinMs);UpdateResponse commit(String collection);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, SolrInputDocument doc, int commitWithinMs);UpdateResponse commit();@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, SolrInputDocument doc, int commitWithinMs);UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, SolrInputDocument doc, int commitWithinMs);UpdateResponse commit(boolean waitFlush, boolean waitSearcher);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, SolrInputDocument doc, int commitWithinMs);UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher, boolean softCommit);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, SolrInputDocument doc, int commitWithinMs);UpdateResponse commit(boolean waitFlush, boolean waitSearcher, boolean softCommit);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, SolrInputDocument doc, int commitWithinMs);UpdateResponse optimize(String collection);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, SolrInputDocument doc, int commitWithinMs);UpdateResponse optimize();@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, SolrInputDocument doc, int commitWithinMs);UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, SolrInputDocument doc, int commitWithinMs);UpdateResponse optimize(boolean waitFlush, boolean waitSearcher);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, SolrInputDocument doc, int commitWithinMs);UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher, int maxSegments);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, SolrInputDocument doc, int commitWithinMs);UpdateResponse optimize(boolean waitFlush, boolean waitSearcher, int maxSegments);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, SolrInputDocument doc, int commitWithinMs);UpdateResponse rollback(String collection);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, SolrInputDocument doc, int commitWithinMs);UpdateResponse rollback();@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, SolrInputDocument doc, int commitWithinMs);UpdateResponse deleteById(String collection, String id);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, SolrInputDocument doc, int commitWithinMs);UpdateResponse deleteById(String id);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, SolrInputDocument doc, int commitWithinMs);UpdateResponse deleteById(String collection, String id, int commitWithinMs);@param;int commitWithinMs;int commitWithinMs;max time (in ms) before a commit will happen;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, SolrInputDocument doc, int commitWithinMs);UpdateResponse deleteById(String collection, String id, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, SolrInputDocument doc, int commitWithinMs);UpdateResponse deleteById(String id, int commitWithinMs);@param;int commitWithinMs;int commitWithinMs;max time (in ms) before a commit will happen;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, SolrInputDocument doc, int commitWithinMs);UpdateResponse deleteById(String id, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, SolrInputDocument doc, int commitWithinMs);UpdateResponse deleteById(String collection, List ids);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, SolrInputDocument doc, int commitWithinMs);UpdateResponse deleteById(List ids);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, SolrInputDocument doc, int commitWithinMs);UpdateResponse deleteById(String collection, List ids, int commitWithinMs);@param;int commitWithinMs;int commitWithinMs;max time (in ms) before a commit will happen;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, SolrInputDocument doc, int commitWithinMs);UpdateResponse deleteById(String collection, List ids, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, SolrInputDocument doc, int commitWithinMs);UpdateResponse deleteById(List ids, int commitWithinMs);@param;int commitWithinMs;int commitWithinMs;max time (in ms) before a commit will happen;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, SolrInputDocument doc, int commitWithinMs);UpdateResponse deleteById(List ids, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, SolrInputDocument doc, int commitWithinMs);UpdateResponse deleteByQuery(String collection, String query);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, SolrInputDocument doc, int commitWithinMs);UpdateResponse deleteByQuery(String query);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, SolrInputDocument doc, int commitWithinMs);UpdateResponse deleteByQuery(String collection, String query, int commitWithinMs);@param;int commitWithinMs;int commitWithinMs;max time (in ms) before a commit will happen;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, SolrInputDocument doc, int commitWithinMs);UpdateResponse deleteByQuery(String collection, String query, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, SolrInputDocument doc, int commitWithinMs);UpdateResponse deleteByQuery(String query, int commitWithinMs);@param;int commitWithinMs;int commitWithinMs;max time (in ms) before a commit will happen;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, SolrInputDocument doc, int commitWithinMs);UpdateResponse deleteByQuery(String query, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, SolrInputDocument doc, int commitWithinMs);SolrPingResponse ping();@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, SolrInputDocument doc, int commitWithinMs);QueryResponse query(String collection, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, SolrInputDocument doc, int commitWithinMs);QueryResponse query(SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, SolrInputDocument doc, int commitWithinMs);QueryResponse query(String collection, SolrParams params, METHOD method);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, SolrInputDocument doc, int commitWithinMs);QueryResponse query(SolrParams params, METHOD method);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, SolrInputDocument doc, int commitWithinMs);QueryResponse queryAndStreamResponse(String collection, SolrParams params, StreamingResponseCallback callback);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, SolrInputDocument doc, int commitWithinMs);QueryResponse queryAndStreamResponse(SolrParams params, StreamingResponseCallback callback);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, SolrInputDocument doc, int commitWithinMs);SolrDocument getById(String collection, String id);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, SolrInputDocument doc, int commitWithinMs);SolrDocument getById(String id);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, SolrInputDocument doc, int commitWithinMs);SolrDocument getById(String collection, String id, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, SolrInputDocument doc, int commitWithinMs);SolrDocument getById(String id, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, SolrInputDocument doc, int commitWithinMs);SolrDocumentList getById(String collection, Collection ids);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, SolrInputDocument doc, int commitWithinMs);SolrDocumentList getById(Collection ids);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, SolrInputDocument doc, int commitWithinMs);SolrDocumentList getById(String collection, Collection ids, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, SolrInputDocument doc, int commitWithinMs);SolrDocumentList getById(Collection ids, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, SolrInputDocument doc, int commitWithinMs);NamedList request(SolrRequest request, String collection);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, SolrInputDocument doc, int commitWithinMs);NamedList request(SolrRequest request);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(SolrInputDocument doc, int commitWithinMs);UpdateResponse add(String collection, Iterator docIterator);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse from the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(SolrInputDocument doc, int commitWithinMs);UpdateResponse add(String collection, Iterator docIterator);@throws;;;if there is a communication error with the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(SolrInputDocument doc, int commitWithinMs);UpdateResponse add(String collection, Iterator docIterator);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(SolrInputDocument doc, int commitWithinMs);UpdateResponse add(Iterator docIterator);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse from the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(SolrInputDocument doc, int commitWithinMs);UpdateResponse add(Iterator docIterator);@throws;;;if there is a communication error with the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(SolrInputDocument doc, int commitWithinMs);UpdateResponse add(Iterator docIterator);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(SolrInputDocument doc, int commitWithinMs);UpdateResponse addBean(String collection, Object obj);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(SolrInputDocument doc, int commitWithinMs);UpdateResponse addBean(String collection, Object obj);@throws;;;if there is a communication error with the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(SolrInputDocument doc, int commitWithinMs);UpdateResponse addBean(String collection, Object obj);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(SolrInputDocument doc, int commitWithinMs);UpdateResponse addBean(Object obj);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(SolrInputDocument doc, int commitWithinMs);UpdateResponse addBean(Object obj);@throws;;;if there is a communication error with the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(SolrInputDocument doc, int commitWithinMs);UpdateResponse addBean(Object obj);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(SolrInputDocument doc, int commitWithinMs);UpdateResponse addBean(String collection, Object obj, int commitWithinMs);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(SolrInputDocument doc, int commitWithinMs);UpdateResponse addBean(String collection, Object obj, int commitWithinMs);@throws;;;if there is a communication error with the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(SolrInputDocument doc, int commitWithinMs);UpdateResponse addBean(String collection, Object obj, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(SolrInputDocument doc, int commitWithinMs);UpdateResponse addBean(Object obj, int commitWithinMs);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(SolrInputDocument doc, int commitWithinMs);UpdateResponse addBean(Object obj, int commitWithinMs);@throws;;;if there is a communication error with the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(SolrInputDocument doc, int commitWithinMs);UpdateResponse addBean(Object obj, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(SolrInputDocument doc, int commitWithinMs);UpdateResponse addBeans(String collection, Collection beans);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(SolrInputDocument doc, int commitWithinMs);UpdateResponse addBeans(String collection, Collection beans);@throws;;;if there is a communication error with the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(SolrInputDocument doc, int commitWithinMs);UpdateResponse addBeans(String collection, Collection beans);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(SolrInputDocument doc, int commitWithinMs);UpdateResponse addBeans(Collection beans);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(SolrInputDocument doc, int commitWithinMs);UpdateResponse addBeans(Collection beans);@throws;;;if there is a communication error with the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(SolrInputDocument doc, int commitWithinMs);UpdateResponse addBeans(Collection beans);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(SolrInputDocument doc, int commitWithinMs);UpdateResponse addBeans(String collection, Collection beans, int commitWithinMs);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(SolrInputDocument doc, int commitWithinMs);UpdateResponse addBeans(String collection, Collection beans, int commitWithinMs);@param;int commitWithinMs;int commitWithinMs;max time (in ms) before a commit will happen;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(SolrInputDocument doc, int commitWithinMs);UpdateResponse addBeans(String collection, Collection beans, int commitWithinMs);@throws;;;if there is a communication error with the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(SolrInputDocument doc, int commitWithinMs);UpdateResponse addBeans(String collection, Collection beans, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(SolrInputDocument doc, int commitWithinMs);UpdateResponse addBeans(Collection beans, int commitWithinMs);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(SolrInputDocument doc, int commitWithinMs);UpdateResponse addBeans(Collection beans, int commitWithinMs);@param;int commitWithinMs;int commitWithinMs;max time (in ms) before a commit will happen;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(SolrInputDocument doc, int commitWithinMs);UpdateResponse addBeans(Collection beans, int commitWithinMs);@throws;;;if there is a communication error with the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(SolrInputDocument doc, int commitWithinMs);UpdateResponse addBeans(Collection beans, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(SolrInputDocument doc, int commitWithinMs);UpdateResponse addBeans(String collection, Iterator beanIterator);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(SolrInputDocument doc, int commitWithinMs);UpdateResponse addBeans(String collection, Iterator beanIterator);@throws;;;if there is a communication error with the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(SolrInputDocument doc, int commitWithinMs);UpdateResponse addBeans(String collection, Iterator beanIterator);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(SolrInputDocument doc, int commitWithinMs);UpdateResponse addBeans(Iterator beanIterator);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(SolrInputDocument doc, int commitWithinMs);UpdateResponse addBeans(Iterator beanIterator);@throws;;;if there is a communication error with the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(SolrInputDocument doc, int commitWithinMs);UpdateResponse addBeans(Iterator beanIterator);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(SolrInputDocument doc, int commitWithinMs);UpdateResponse commit(String collection);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(SolrInputDocument doc, int commitWithinMs);UpdateResponse commit();@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(SolrInputDocument doc, int commitWithinMs);UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(SolrInputDocument doc, int commitWithinMs);UpdateResponse commit(boolean waitFlush, boolean waitSearcher);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(SolrInputDocument doc, int commitWithinMs);UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher, boolean softCommit);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(SolrInputDocument doc, int commitWithinMs);UpdateResponse commit(boolean waitFlush, boolean waitSearcher, boolean softCommit);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(SolrInputDocument doc, int commitWithinMs);UpdateResponse optimize(String collection);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(SolrInputDocument doc, int commitWithinMs);UpdateResponse optimize();@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(SolrInputDocument doc, int commitWithinMs);UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(SolrInputDocument doc, int commitWithinMs);UpdateResponse optimize(boolean waitFlush, boolean waitSearcher);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(SolrInputDocument doc, int commitWithinMs);UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher, int maxSegments);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(SolrInputDocument doc, int commitWithinMs);UpdateResponse optimize(boolean waitFlush, boolean waitSearcher, int maxSegments);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(SolrInputDocument doc, int commitWithinMs);UpdateResponse rollback(String collection);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(SolrInputDocument doc, int commitWithinMs);UpdateResponse rollback();@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(SolrInputDocument doc, int commitWithinMs);UpdateResponse deleteById(String collection, String id);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(SolrInputDocument doc, int commitWithinMs);UpdateResponse deleteById(String id);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(SolrInputDocument doc, int commitWithinMs);UpdateResponse deleteById(String collection, String id, int commitWithinMs);@param;int commitWithinMs;int commitWithinMs;max time (in ms) before a commit will happen;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(SolrInputDocument doc, int commitWithinMs);UpdateResponse deleteById(String collection, String id, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(SolrInputDocument doc, int commitWithinMs);UpdateResponse deleteById(String id, int commitWithinMs);@param;int commitWithinMs;int commitWithinMs;max time (in ms) before a commit will happen;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(SolrInputDocument doc, int commitWithinMs);UpdateResponse deleteById(String id, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(SolrInputDocument doc, int commitWithinMs);UpdateResponse deleteById(String collection, List ids);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(SolrInputDocument doc, int commitWithinMs);UpdateResponse deleteById(List ids);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(SolrInputDocument doc, int commitWithinMs);UpdateResponse deleteById(String collection, List ids, int commitWithinMs);@param;int commitWithinMs;int commitWithinMs;max time (in ms) before a commit will happen;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(SolrInputDocument doc, int commitWithinMs);UpdateResponse deleteById(String collection, List ids, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(SolrInputDocument doc, int commitWithinMs);UpdateResponse deleteById(List ids, int commitWithinMs);@param;int commitWithinMs;int commitWithinMs;max time (in ms) before a commit will happen;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(SolrInputDocument doc, int commitWithinMs);UpdateResponse deleteById(List ids, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(SolrInputDocument doc, int commitWithinMs);UpdateResponse deleteByQuery(String collection, String query);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(SolrInputDocument doc, int commitWithinMs);UpdateResponse deleteByQuery(String query);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(SolrInputDocument doc, int commitWithinMs);UpdateResponse deleteByQuery(String collection, String query, int commitWithinMs);@param;int commitWithinMs;int commitWithinMs;max time (in ms) before a commit will happen;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(SolrInputDocument doc, int commitWithinMs);UpdateResponse deleteByQuery(String collection, String query, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(SolrInputDocument doc, int commitWithinMs);UpdateResponse deleteByQuery(String query, int commitWithinMs);@param;int commitWithinMs;int commitWithinMs;max time (in ms) before a commit will happen;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(SolrInputDocument doc, int commitWithinMs);UpdateResponse deleteByQuery(String query, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(SolrInputDocument doc, int commitWithinMs);SolrPingResponse ping();@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(SolrInputDocument doc, int commitWithinMs);QueryResponse query(String collection, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(SolrInputDocument doc, int commitWithinMs);QueryResponse query(SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(SolrInputDocument doc, int commitWithinMs);QueryResponse query(String collection, SolrParams params, METHOD method);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(SolrInputDocument doc, int commitWithinMs);QueryResponse query(SolrParams params, METHOD method);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(SolrInputDocument doc, int commitWithinMs);QueryResponse queryAndStreamResponse(String collection, SolrParams params, StreamingResponseCallback callback);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(SolrInputDocument doc, int commitWithinMs);QueryResponse queryAndStreamResponse(SolrParams params, StreamingResponseCallback callback);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(SolrInputDocument doc, int commitWithinMs);SolrDocument getById(String collection, String id);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(SolrInputDocument doc, int commitWithinMs);SolrDocument getById(String id);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(SolrInputDocument doc, int commitWithinMs);SolrDocument getById(String collection, String id, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(SolrInputDocument doc, int commitWithinMs);SolrDocument getById(String id, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(SolrInputDocument doc, int commitWithinMs);SolrDocumentList getById(String collection, Collection ids);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(SolrInputDocument doc, int commitWithinMs);SolrDocumentList getById(Collection ids);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(SolrInputDocument doc, int commitWithinMs);SolrDocumentList getById(String collection, Collection ids, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(SolrInputDocument doc, int commitWithinMs);SolrDocumentList getById(Collection ids, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(SolrInputDocument doc, int commitWithinMs);NamedList request(SolrRequest request, String collection);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(SolrInputDocument doc, int commitWithinMs);NamedList request(SolrRequest request);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Iterator docIterator);UpdateResponse add(Iterator docIterator);Free text;;;Adds the documents supplied by the given iterator. ;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Iterator docIterator);UpdateResponse add(Iterator docIterator);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse from the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Iterator docIterator);UpdateResponse add(Iterator docIterator);@param;Iterator<SolrInputDocument> docIterator;Iterator<SolrInputDocument> docIterator;the iterator which returns SolrInputDocument instances;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Iterator docIterator);UpdateResponse add(Iterator docIterator);@throws;;;if there is a communication error with the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Iterator docIterator);UpdateResponse add(Iterator docIterator);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Iterator docIterator);UpdateResponse addBean(String collection, Object obj);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Iterator docIterator);UpdateResponse addBean(String collection, Object obj);@throws;;;if there is a communication error with the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Iterator docIterator);UpdateResponse addBean(String collection, Object obj);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Iterator docIterator);UpdateResponse addBean(Object obj);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Iterator docIterator);UpdateResponse addBean(Object obj);@throws;;;if there is a communication error with the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Iterator docIterator);UpdateResponse addBean(Object obj);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Iterator docIterator);UpdateResponse addBean(String collection, Object obj, int commitWithinMs);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Iterator docIterator);UpdateResponse addBean(String collection, Object obj, int commitWithinMs);@throws;;;if there is a communication error with the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Iterator docIterator);UpdateResponse addBean(String collection, Object obj, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Iterator docIterator);UpdateResponse addBean(Object obj, int commitWithinMs);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Iterator docIterator);UpdateResponse addBean(Object obj, int commitWithinMs);@throws;;;if there is a communication error with the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Iterator docIterator);UpdateResponse addBean(Object obj, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Iterator docIterator);UpdateResponse addBeans(String collection, Collection beans);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Iterator docIterator);UpdateResponse addBeans(String collection, Collection beans);@throws;;;if there is a communication error with the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Iterator docIterator);UpdateResponse addBeans(String collection, Collection beans);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Iterator docIterator);UpdateResponse addBeans(Collection beans);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Iterator docIterator);UpdateResponse addBeans(Collection beans);@throws;;;if there is a communication error with the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Iterator docIterator);UpdateResponse addBeans(Collection beans);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Iterator docIterator);UpdateResponse addBeans(String collection, Collection beans, int commitWithinMs);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Iterator docIterator);UpdateResponse addBeans(String collection, Collection beans, int commitWithinMs);@throws;;;if there is a communication error with the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Iterator docIterator);UpdateResponse addBeans(String collection, Collection beans, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Iterator docIterator);UpdateResponse addBeans(Collection beans, int commitWithinMs);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Iterator docIterator);UpdateResponse addBeans(Collection beans, int commitWithinMs);@throws;;;if there is a communication error with the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Iterator docIterator);UpdateResponse addBeans(Collection beans, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Iterator docIterator);UpdateResponse addBeans(String collection, Iterator beanIterator);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Iterator docIterator);UpdateResponse addBeans(String collection, Iterator beanIterator);@param;String collection;String collection;the Solr collection to add the documents to;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Iterator docIterator);UpdateResponse addBeans(String collection, Iterator beanIterator);@throws;;;if there is a communication error with the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Iterator docIterator);UpdateResponse addBeans(String collection, Iterator beanIterator);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Iterator docIterator);UpdateResponse addBeans(Iterator beanIterator);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Iterator docIterator);UpdateResponse addBeans(Iterator beanIterator);@throws;;;if there is a communication error with the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Iterator docIterator);UpdateResponse addBeans(Iterator beanIterator);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Iterator docIterator);UpdateResponse commit(String collection);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Iterator docIterator);UpdateResponse commit();@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Iterator docIterator);UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Iterator docIterator);UpdateResponse commit(boolean waitFlush, boolean waitSearcher);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Iterator docIterator);UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher, boolean softCommit);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Iterator docIterator);UpdateResponse commit(boolean waitFlush, boolean waitSearcher, boolean softCommit);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Iterator docIterator);UpdateResponse optimize(String collection);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Iterator docIterator);UpdateResponse optimize();@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Iterator docIterator);UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Iterator docIterator);UpdateResponse optimize(boolean waitFlush, boolean waitSearcher);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Iterator docIterator);UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher, int maxSegments);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Iterator docIterator);UpdateResponse optimize(boolean waitFlush, boolean waitSearcher, int maxSegments);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Iterator docIterator);UpdateResponse rollback(String collection);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Iterator docIterator);UpdateResponse rollback();@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Iterator docIterator);UpdateResponse deleteById(String collection, String id);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Iterator docIterator);UpdateResponse deleteById(String id);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Iterator docIterator);UpdateResponse deleteById(String collection, String id, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Iterator docIterator);UpdateResponse deleteById(String id, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Iterator docIterator);UpdateResponse deleteById(String collection, List ids);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Iterator docIterator);UpdateResponse deleteById(List ids);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Iterator docIterator);UpdateResponse deleteById(String collection, List ids, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Iterator docIterator);UpdateResponse deleteById(List ids, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Iterator docIterator);UpdateResponse deleteByQuery(String collection, String query);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Iterator docIterator);UpdateResponse deleteByQuery(String query);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Iterator docIterator);UpdateResponse deleteByQuery(String collection, String query, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Iterator docIterator);UpdateResponse deleteByQuery(String query, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Iterator docIterator);SolrPingResponse ping();@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Iterator docIterator);QueryResponse query(String collection, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Iterator docIterator);QueryResponse query(SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Iterator docIterator);QueryResponse query(String collection, SolrParams params, METHOD method);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Iterator docIterator);QueryResponse query(SolrParams params, METHOD method);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Iterator docIterator);QueryResponse queryAndStreamResponse(String collection, SolrParams params, StreamingResponseCallback callback);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Iterator docIterator);QueryResponse queryAndStreamResponse(SolrParams params, StreamingResponseCallback callback);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Iterator docIterator);SolrDocument getById(String collection, String id);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Iterator docIterator);SolrDocument getById(String id);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Iterator docIterator);SolrDocument getById(String collection, String id, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Iterator docIterator);SolrDocument getById(String id, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Iterator docIterator);SolrDocumentList getById(String collection, Collection ids);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Iterator docIterator);SolrDocumentList getById(Collection ids);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Iterator docIterator);SolrDocumentList getById(String collection, Collection ids, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Iterator docIterator);SolrDocumentList getById(Collection ids, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Iterator docIterator);NamedList request(SolrRequest request, String collection);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(String collection, Iterator docIterator);NamedList request(SolrRequest request);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Iterator docIterator);UpdateResponse addBean(String collection, Object obj);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Iterator docIterator);UpdateResponse addBean(String collection, Object obj);@throws;;;if there is a communication error with the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Iterator docIterator);UpdateResponse addBean(String collection, Object obj);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Iterator docIterator);UpdateResponse addBean(Object obj);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Iterator docIterator);UpdateResponse addBean(Object obj);@throws;;;if there is a communication error with the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Iterator docIterator);UpdateResponse addBean(Object obj);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Iterator docIterator);UpdateResponse addBean(String collection, Object obj, int commitWithinMs);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Iterator docIterator);UpdateResponse addBean(String collection, Object obj, int commitWithinMs);@throws;;;if there is a communication error with the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Iterator docIterator);UpdateResponse addBean(String collection, Object obj, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Iterator docIterator);UpdateResponse addBean(Object obj, int commitWithinMs);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Iterator docIterator);UpdateResponse addBean(Object obj, int commitWithinMs);@throws;;;if there is a communication error with the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Iterator docIterator);UpdateResponse addBean(Object obj, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Iterator docIterator);UpdateResponse addBeans(String collection, Collection beans);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Iterator docIterator);UpdateResponse addBeans(String collection, Collection beans);@throws;;;if there is a communication error with the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Iterator docIterator);UpdateResponse addBeans(String collection, Collection beans);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Iterator docIterator);UpdateResponse addBeans(Collection beans);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Iterator docIterator);UpdateResponse addBeans(Collection beans);@throws;;;if there is a communication error with the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Iterator docIterator);UpdateResponse addBeans(Collection beans);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Iterator docIterator);UpdateResponse addBeans(String collection, Collection beans, int commitWithinMs);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Iterator docIterator);UpdateResponse addBeans(String collection, Collection beans, int commitWithinMs);@throws;;;if there is a communication error with the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Iterator docIterator);UpdateResponse addBeans(String collection, Collection beans, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Iterator docIterator);UpdateResponse addBeans(Collection beans, int commitWithinMs);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Iterator docIterator);UpdateResponse addBeans(Collection beans, int commitWithinMs);@throws;;;if there is a communication error with the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Iterator docIterator);UpdateResponse addBeans(Collection beans, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Iterator docIterator);UpdateResponse addBeans(String collection, Iterator beanIterator);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Iterator docIterator);UpdateResponse addBeans(String collection, Iterator beanIterator);@throws;;;if there is a communication error with the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Iterator docIterator);UpdateResponse addBeans(String collection, Iterator beanIterator);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Iterator docIterator);UpdateResponse addBeans(Iterator beanIterator);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Iterator docIterator);UpdateResponse addBeans(Iterator beanIterator);@throws;;;if there is a communication error with the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Iterator docIterator);UpdateResponse addBeans(Iterator beanIterator);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Iterator docIterator);UpdateResponse commit(String collection);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Iterator docIterator);UpdateResponse commit();@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Iterator docIterator);UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Iterator docIterator);UpdateResponse commit(boolean waitFlush, boolean waitSearcher);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Iterator docIterator);UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher, boolean softCommit);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Iterator docIterator);UpdateResponse commit(boolean waitFlush, boolean waitSearcher, boolean softCommit);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Iterator docIterator);UpdateResponse optimize(String collection);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Iterator docIterator);UpdateResponse optimize();@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Iterator docIterator);UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Iterator docIterator);UpdateResponse optimize(boolean waitFlush, boolean waitSearcher);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Iterator docIterator);UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher, int maxSegments);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Iterator docIterator);UpdateResponse optimize(boolean waitFlush, boolean waitSearcher, int maxSegments);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Iterator docIterator);UpdateResponse rollback(String collection);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Iterator docIterator);UpdateResponse rollback();@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Iterator docIterator);UpdateResponse deleteById(String collection, String id);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Iterator docIterator);UpdateResponse deleteById(String id);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Iterator docIterator);UpdateResponse deleteById(String collection, String id, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Iterator docIterator);UpdateResponse deleteById(String id, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Iterator docIterator);UpdateResponse deleteById(String collection, List ids);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Iterator docIterator);UpdateResponse deleteById(List ids);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Iterator docIterator);UpdateResponse deleteById(String collection, List ids, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Iterator docIterator);UpdateResponse deleteById(List ids, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Iterator docIterator);UpdateResponse deleteByQuery(String collection, String query);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Iterator docIterator);UpdateResponse deleteByQuery(String query);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Iterator docIterator);UpdateResponse deleteByQuery(String collection, String query, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Iterator docIterator);UpdateResponse deleteByQuery(String query, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Iterator docIterator);SolrPingResponse ping();@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Iterator docIterator);QueryResponse query(String collection, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Iterator docIterator);QueryResponse query(SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Iterator docIterator);QueryResponse query(String collection, SolrParams params, METHOD method);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Iterator docIterator);QueryResponse query(SolrParams params, METHOD method);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Iterator docIterator);QueryResponse queryAndStreamResponse(String collection, SolrParams params, StreamingResponseCallback callback);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Iterator docIterator);QueryResponse queryAndStreamResponse(SolrParams params, StreamingResponseCallback callback);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Iterator docIterator);SolrDocument getById(String collection, String id);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Iterator docIterator);SolrDocument getById(String id);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Iterator docIterator);SolrDocument getById(String collection, String id, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Iterator docIterator);SolrDocument getById(String id, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Iterator docIterator);SolrDocumentList getById(String collection, Collection ids);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Iterator docIterator);SolrDocumentList getById(Collection ids);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Iterator docIterator);SolrDocumentList getById(String collection, Collection ids, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Iterator docIterator);SolrDocumentList getById(Collection ids, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Iterator docIterator);NamedList request(SolrRequest request, String collection);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse add(Iterator docIterator);NamedList request(SolrRequest request);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(String collection, Object obj);UpdateResponse addBean(Object obj);Free text;;;Adds a single bean The bean is converted to a {@link SolrInputDocument} by the client's {@link org.apache.solr.client.solrj.beans.DocumentObjectBinder} ;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(String collection, Object obj);UpdateResponse addBean(Object obj);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse from the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(String collection, Object obj);UpdateResponse addBean(Object obj);@param;Object obj;Object obj;the input bean;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(String collection, Object obj);UpdateResponse addBean(Object obj);@throws;;;if there is a communication error with the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(String collection, Object obj);UpdateResponse addBean(Object obj);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(String collection, Object obj);UpdateResponse addBean(String collection, Object obj, int commitWithinMs);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse from the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(String collection, Object obj);UpdateResponse addBean(String collection, Object obj, int commitWithinMs);@param;String collection;String collection;to Solr collection to add documents to;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(String collection, Object obj);UpdateResponse addBean(String collection, Object obj, int commitWithinMs);@param;Object obj;Object obj;the input bean;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(String collection, Object obj);UpdateResponse addBean(String collection, Object obj, int commitWithinMs);@throws;;;if there is a communication error with the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(String collection, Object obj);UpdateResponse addBean(String collection, Object obj, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(String collection, Object obj);UpdateResponse addBean(Object obj, int commitWithinMs);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse from the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(String collection, Object obj);UpdateResponse addBean(Object obj, int commitWithinMs);@param;Object obj;Object obj;the input bean;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(String collection, Object obj);UpdateResponse addBean(Object obj, int commitWithinMs);@throws;;;if there is a communication error with the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(String collection, Object obj);UpdateResponse addBean(Object obj, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(String collection, Object obj);UpdateResponse addBeans(String collection, Collection beans);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(String collection, Object obj);UpdateResponse addBeans(String collection, Collection beans);@throws;;;if there is a communication error with the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(String collection, Object obj);UpdateResponse addBeans(String collection, Collection beans);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(String collection, Object obj);UpdateResponse addBeans(Collection beans);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(String collection, Object obj);UpdateResponse addBeans(Collection beans);@throws;;;if there is a communication error with the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(String collection, Object obj);UpdateResponse addBeans(Collection beans);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(String collection, Object obj);UpdateResponse addBeans(String collection, Collection beans, int commitWithinMs);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(String collection, Object obj);UpdateResponse addBeans(String collection, Collection beans, int commitWithinMs);@throws;;;if there is a communication error with the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(String collection, Object obj);UpdateResponse addBeans(String collection, Collection beans, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(String collection, Object obj);UpdateResponse addBeans(Collection beans, int commitWithinMs);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(String collection, Object obj);UpdateResponse addBeans(Collection beans, int commitWithinMs);@throws;;;if there is a communication error with the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(String collection, Object obj);UpdateResponse addBeans(Collection beans, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(String collection, Object obj);UpdateResponse addBeans(String collection, Iterator beanIterator);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(String collection, Object obj);UpdateResponse addBeans(String collection, Iterator beanIterator);@throws;;;if there is a communication error with the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(String collection, Object obj);UpdateResponse addBeans(String collection, Iterator beanIterator);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(String collection, Object obj);UpdateResponse addBeans(Iterator beanIterator);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(String collection, Object obj);UpdateResponse addBeans(Iterator beanIterator);@throws;;;if there is a communication error with the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(String collection, Object obj);UpdateResponse addBeans(Iterator beanIterator);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(String collection, Object obj);UpdateResponse commit(String collection);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(String collection, Object obj);UpdateResponse commit();@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(String collection, Object obj);UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(String collection, Object obj);UpdateResponse commit(boolean waitFlush, boolean waitSearcher);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(String collection, Object obj);UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher, boolean softCommit);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(String collection, Object obj);UpdateResponse commit(boolean waitFlush, boolean waitSearcher, boolean softCommit);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(String collection, Object obj);UpdateResponse optimize(String collection);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(String collection, Object obj);UpdateResponse optimize();@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(String collection, Object obj);UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(String collection, Object obj);UpdateResponse optimize(boolean waitFlush, boolean waitSearcher);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(String collection, Object obj);UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher, int maxSegments);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(String collection, Object obj);UpdateResponse optimize(boolean waitFlush, boolean waitSearcher, int maxSegments);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(String collection, Object obj);UpdateResponse rollback(String collection);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(String collection, Object obj);UpdateResponse rollback();@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(String collection, Object obj);UpdateResponse deleteById(String collection, String id);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(String collection, Object obj);UpdateResponse deleteById(String id);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(String collection, Object obj);UpdateResponse deleteById(String collection, String id, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(String collection, Object obj);UpdateResponse deleteById(String id, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(String collection, Object obj);UpdateResponse deleteById(String collection, List ids);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(String collection, Object obj);UpdateResponse deleteById(List ids);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(String collection, Object obj);UpdateResponse deleteById(String collection, List ids, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(String collection, Object obj);UpdateResponse deleteById(List ids, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(String collection, Object obj);UpdateResponse deleteByQuery(String collection, String query);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(String collection, Object obj);UpdateResponse deleteByQuery(String query);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(String collection, Object obj);UpdateResponse deleteByQuery(String collection, String query, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(String collection, Object obj);UpdateResponse deleteByQuery(String query, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(String collection, Object obj);SolrPingResponse ping();@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(String collection, Object obj);QueryResponse query(String collection, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(String collection, Object obj);QueryResponse query(SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(String collection, Object obj);QueryResponse query(String collection, SolrParams params, METHOD method);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(String collection, Object obj);QueryResponse query(SolrParams params, METHOD method);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(String collection, Object obj);QueryResponse queryAndStreamResponse(String collection, SolrParams params, StreamingResponseCallback callback);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(String collection, Object obj);QueryResponse queryAndStreamResponse(SolrParams params, StreamingResponseCallback callback);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(String collection, Object obj);SolrDocument getById(String collection, String id);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(String collection, Object obj);SolrDocument getById(String id);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(String collection, Object obj);SolrDocument getById(String collection, String id, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(String collection, Object obj);SolrDocument getById(String id, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(String collection, Object obj);SolrDocumentList getById(String collection, Collection ids);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(String collection, Object obj);SolrDocumentList getById(Collection ids);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(String collection, Object obj);SolrDocumentList getById(String collection, Collection ids, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(String collection, Object obj);SolrDocumentList getById(Collection ids, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(String collection, Object obj);NamedList request(SolrRequest request, String collection);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(String collection, Object obj);NamedList request(SolrRequest request);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(Object obj);UpdateResponse addBean(String collection, Object obj, int commitWithinMs);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse from the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(Object obj);UpdateResponse addBean(String collection, Object obj, int commitWithinMs);@param;Object obj;Object obj;the input bean;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(Object obj);UpdateResponse addBean(String collection, Object obj, int commitWithinMs);@throws;;;if there is a communication error with the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(Object obj);UpdateResponse addBean(String collection, Object obj, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(Object obj);UpdateResponse addBean(Object obj, int commitWithinMs);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse from the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(Object obj);UpdateResponse addBean(Object obj, int commitWithinMs);@param;Object obj;Object obj;the input bean;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(Object obj);UpdateResponse addBean(Object obj, int commitWithinMs);@throws;;;if there is a communication error with the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(Object obj);UpdateResponse addBean(Object obj, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(Object obj);UpdateResponse addBeans(String collection, Collection beans);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(Object obj);UpdateResponse addBeans(String collection, Collection beans);@throws;;;if there is a communication error with the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(Object obj);UpdateResponse addBeans(String collection, Collection beans);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(Object obj);UpdateResponse addBeans(Collection beans);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(Object obj);UpdateResponse addBeans(Collection beans);@throws;;;if there is a communication error with the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(Object obj);UpdateResponse addBeans(Collection beans);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(Object obj);UpdateResponse addBeans(String collection, Collection beans, int commitWithinMs);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(Object obj);UpdateResponse addBeans(String collection, Collection beans, int commitWithinMs);@throws;;;if there is a communication error with the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(Object obj);UpdateResponse addBeans(String collection, Collection beans, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(Object obj);UpdateResponse addBeans(Collection beans, int commitWithinMs);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(Object obj);UpdateResponse addBeans(Collection beans, int commitWithinMs);@throws;;;if there is a communication error with the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(Object obj);UpdateResponse addBeans(Collection beans, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(Object obj);UpdateResponse addBeans(String collection, Iterator beanIterator);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(Object obj);UpdateResponse addBeans(String collection, Iterator beanIterator);@throws;;;if there is a communication error with the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(Object obj);UpdateResponse addBeans(String collection, Iterator beanIterator);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(Object obj);UpdateResponse addBeans(Iterator beanIterator);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(Object obj);UpdateResponse addBeans(Iterator beanIterator);@throws;;;if there is a communication error with the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(Object obj);UpdateResponse addBeans(Iterator beanIterator);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(Object obj);UpdateResponse commit(String collection);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(Object obj);UpdateResponse commit();@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(Object obj);UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(Object obj);UpdateResponse commit(boolean waitFlush, boolean waitSearcher);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(Object obj);UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher, boolean softCommit);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(Object obj);UpdateResponse commit(boolean waitFlush, boolean waitSearcher, boolean softCommit);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(Object obj);UpdateResponse optimize(String collection);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(Object obj);UpdateResponse optimize();@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(Object obj);UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(Object obj);UpdateResponse optimize(boolean waitFlush, boolean waitSearcher);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(Object obj);UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher, int maxSegments);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(Object obj);UpdateResponse optimize(boolean waitFlush, boolean waitSearcher, int maxSegments);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(Object obj);UpdateResponse rollback(String collection);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(Object obj);UpdateResponse rollback();@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(Object obj);UpdateResponse deleteById(String collection, String id);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(Object obj);UpdateResponse deleteById(String id);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(Object obj);UpdateResponse deleteById(String collection, String id, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(Object obj);UpdateResponse deleteById(String id, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(Object obj);UpdateResponse deleteById(String collection, List ids);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(Object obj);UpdateResponse deleteById(List ids);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(Object obj);UpdateResponse deleteById(String collection, List ids, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(Object obj);UpdateResponse deleteById(List ids, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(Object obj);UpdateResponse deleteByQuery(String collection, String query);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(Object obj);UpdateResponse deleteByQuery(String query);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(Object obj);UpdateResponse deleteByQuery(String collection, String query, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(Object obj);UpdateResponse deleteByQuery(String query, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(Object obj);SolrPingResponse ping();@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(Object obj);QueryResponse query(String collection, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(Object obj);QueryResponse query(SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(Object obj);QueryResponse query(String collection, SolrParams params, METHOD method);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(Object obj);QueryResponse query(SolrParams params, METHOD method);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(Object obj);QueryResponse queryAndStreamResponse(String collection, SolrParams params, StreamingResponseCallback callback);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(Object obj);QueryResponse queryAndStreamResponse(SolrParams params, StreamingResponseCallback callback);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(Object obj);SolrDocument getById(String collection, String id);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(Object obj);SolrDocument getById(String id);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(Object obj);SolrDocument getById(String collection, String id, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(Object obj);SolrDocument getById(String id, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(Object obj);SolrDocumentList getById(String collection, Collection ids);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(Object obj);SolrDocumentList getById(Collection ids);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(Object obj);SolrDocumentList getById(String collection, Collection ids, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(Object obj);SolrDocumentList getById(Collection ids, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(Object obj);NamedList request(SolrRequest request, String collection);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(Object obj);NamedList request(SolrRequest request);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(String collection, Object obj, int commitWithinMs);UpdateResponse addBean(Object obj, int commitWithinMs);Free text;;;Adds a single bean specifying max time before it becomes committed The bean is converted to a {@link SolrInputDocument} by the client's {@link org.apache.solr.client.solrj.beans.DocumentObjectBinder} ;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(String collection, Object obj, int commitWithinMs);UpdateResponse addBean(Object obj, int commitWithinMs);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse from the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(String collection, Object obj, int commitWithinMs);UpdateResponse addBean(Object obj, int commitWithinMs);@param;Object obj;Object obj;the input bean;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(String collection, Object obj, int commitWithinMs);UpdateResponse addBean(Object obj, int commitWithinMs);@throws;;;if there is a communication error with the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(String collection, Object obj, int commitWithinMs);UpdateResponse addBean(Object obj, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(String collection, Object obj, int commitWithinMs);UpdateResponse addBeans(String collection, Collection beans);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(String collection, Object obj, int commitWithinMs);UpdateResponse addBeans(String collection, Collection beans);@throws;;;if there is a communication error with the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(String collection, Object obj, int commitWithinMs);UpdateResponse addBeans(String collection, Collection beans);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(String collection, Object obj, int commitWithinMs);UpdateResponse addBeans(Collection beans);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(String collection, Object obj, int commitWithinMs);UpdateResponse addBeans(Collection beans);@throws;;;if there is a communication error with the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(String collection, Object obj, int commitWithinMs);UpdateResponse addBeans(Collection beans);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(String collection, Object obj, int commitWithinMs);UpdateResponse addBeans(String collection, Collection beans, int commitWithinMs);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(String collection, Object obj, int commitWithinMs);UpdateResponse addBeans(String collection, Collection beans, int commitWithinMs);@throws;;;if there is a communication error with the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(String collection, Object obj, int commitWithinMs);UpdateResponse addBeans(String collection, Collection beans, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(String collection, Object obj, int commitWithinMs);UpdateResponse addBeans(Collection beans, int commitWithinMs);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(String collection, Object obj, int commitWithinMs);UpdateResponse addBeans(Collection beans, int commitWithinMs);@throws;;;if there is a communication error with the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(String collection, Object obj, int commitWithinMs);UpdateResponse addBeans(Collection beans, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(String collection, Object obj, int commitWithinMs);UpdateResponse addBeans(String collection, Iterator beanIterator);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(String collection, Object obj, int commitWithinMs);UpdateResponse addBeans(String collection, Iterator beanIterator);@throws;;;if there is a communication error with the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(String collection, Object obj, int commitWithinMs);UpdateResponse addBeans(String collection, Iterator beanIterator);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(String collection, Object obj, int commitWithinMs);UpdateResponse addBeans(Iterator beanIterator);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(String collection, Object obj, int commitWithinMs);UpdateResponse addBeans(Iterator beanIterator);@throws;;;if there is a communication error with the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(String collection, Object obj, int commitWithinMs);UpdateResponse addBeans(Iterator beanIterator);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(String collection, Object obj, int commitWithinMs);UpdateResponse commit(String collection);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(String collection, Object obj, int commitWithinMs);UpdateResponse commit();@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(String collection, Object obj, int commitWithinMs);UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(String collection, Object obj, int commitWithinMs);UpdateResponse commit(boolean waitFlush, boolean waitSearcher);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(String collection, Object obj, int commitWithinMs);UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher, boolean softCommit);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(String collection, Object obj, int commitWithinMs);UpdateResponse commit(boolean waitFlush, boolean waitSearcher, boolean softCommit);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(String collection, Object obj, int commitWithinMs);UpdateResponse optimize(String collection);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(String collection, Object obj, int commitWithinMs);UpdateResponse optimize();@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(String collection, Object obj, int commitWithinMs);UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(String collection, Object obj, int commitWithinMs);UpdateResponse optimize(boolean waitFlush, boolean waitSearcher);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(String collection, Object obj, int commitWithinMs);UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher, int maxSegments);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(String collection, Object obj, int commitWithinMs);UpdateResponse optimize(boolean waitFlush, boolean waitSearcher, int maxSegments);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(String collection, Object obj, int commitWithinMs);UpdateResponse rollback(String collection);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(String collection, Object obj, int commitWithinMs);UpdateResponse rollback();@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(String collection, Object obj, int commitWithinMs);UpdateResponse deleteById(String collection, String id);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(String collection, Object obj, int commitWithinMs);UpdateResponse deleteById(String id);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(String collection, Object obj, int commitWithinMs);UpdateResponse deleteById(String collection, String id, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(String collection, Object obj, int commitWithinMs);UpdateResponse deleteById(String id, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(String collection, Object obj, int commitWithinMs);UpdateResponse deleteById(String collection, List ids);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(String collection, Object obj, int commitWithinMs);UpdateResponse deleteById(List ids);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(String collection, Object obj, int commitWithinMs);UpdateResponse deleteById(String collection, List ids, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(String collection, Object obj, int commitWithinMs);UpdateResponse deleteById(List ids, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(String collection, Object obj, int commitWithinMs);UpdateResponse deleteByQuery(String collection, String query);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(String collection, Object obj, int commitWithinMs);UpdateResponse deleteByQuery(String query);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(String collection, Object obj, int commitWithinMs);UpdateResponse deleteByQuery(String collection, String query, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(String collection, Object obj, int commitWithinMs);UpdateResponse deleteByQuery(String query, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(String collection, Object obj, int commitWithinMs);SolrPingResponse ping();@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(String collection, Object obj, int commitWithinMs);QueryResponse query(String collection, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(String collection, Object obj, int commitWithinMs);QueryResponse query(SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(String collection, Object obj, int commitWithinMs);QueryResponse query(String collection, SolrParams params, METHOD method);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(String collection, Object obj, int commitWithinMs);QueryResponse query(SolrParams params, METHOD method);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(String collection, Object obj, int commitWithinMs);QueryResponse queryAndStreamResponse(String collection, SolrParams params, StreamingResponseCallback callback);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(String collection, Object obj, int commitWithinMs);QueryResponse queryAndStreamResponse(SolrParams params, StreamingResponseCallback callback);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(String collection, Object obj, int commitWithinMs);SolrDocument getById(String collection, String id);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(String collection, Object obj, int commitWithinMs);SolrDocument getById(String id);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(String collection, Object obj, int commitWithinMs);SolrDocument getById(String collection, String id, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(String collection, Object obj, int commitWithinMs);SolrDocument getById(String id, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(String collection, Object obj, int commitWithinMs);SolrDocumentList getById(String collection, Collection ids);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(String collection, Object obj, int commitWithinMs);SolrDocumentList getById(Collection ids);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(String collection, Object obj, int commitWithinMs);SolrDocumentList getById(String collection, Collection ids, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(String collection, Object obj, int commitWithinMs);SolrDocumentList getById(Collection ids, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(String collection, Object obj, int commitWithinMs);NamedList request(SolrRequest request, String collection);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(String collection, Object obj, int commitWithinMs);NamedList request(SolrRequest request);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(Object obj, int commitWithinMs);UpdateResponse addBeans(String collection, Collection beans);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(Object obj, int commitWithinMs);UpdateResponse addBeans(String collection, Collection beans);@throws;;;if there is a communication error with the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(Object obj, int commitWithinMs);UpdateResponse addBeans(String collection, Collection beans);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(Object obj, int commitWithinMs);UpdateResponse addBeans(Collection beans);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(Object obj, int commitWithinMs);UpdateResponse addBeans(Collection beans);@throws;;;if there is a communication error with the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(Object obj, int commitWithinMs);UpdateResponse addBeans(Collection beans);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(Object obj, int commitWithinMs);UpdateResponse addBeans(String collection, Collection beans, int commitWithinMs);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(Object obj, int commitWithinMs);UpdateResponse addBeans(String collection, Collection beans, int commitWithinMs);@throws;;;if there is a communication error with the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(Object obj, int commitWithinMs);UpdateResponse addBeans(String collection, Collection beans, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(Object obj, int commitWithinMs);UpdateResponse addBeans(Collection beans, int commitWithinMs);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(Object obj, int commitWithinMs);UpdateResponse addBeans(Collection beans, int commitWithinMs);@throws;;;if there is a communication error with the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(Object obj, int commitWithinMs);UpdateResponse addBeans(Collection beans, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(Object obj, int commitWithinMs);UpdateResponse addBeans(String collection, Iterator beanIterator);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(Object obj, int commitWithinMs);UpdateResponse addBeans(String collection, Iterator beanIterator);@throws;;;if there is a communication error with the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(Object obj, int commitWithinMs);UpdateResponse addBeans(String collection, Iterator beanIterator);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(Object obj, int commitWithinMs);UpdateResponse addBeans(Iterator beanIterator);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(Object obj, int commitWithinMs);UpdateResponse addBeans(Iterator beanIterator);@throws;;;if there is a communication error with the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(Object obj, int commitWithinMs);UpdateResponse addBeans(Iterator beanIterator);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(Object obj, int commitWithinMs);UpdateResponse commit(String collection);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(Object obj, int commitWithinMs);UpdateResponse commit();@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(Object obj, int commitWithinMs);UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(Object obj, int commitWithinMs);UpdateResponse commit(boolean waitFlush, boolean waitSearcher);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(Object obj, int commitWithinMs);UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher, boolean softCommit);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(Object obj, int commitWithinMs);UpdateResponse commit(boolean waitFlush, boolean waitSearcher, boolean softCommit);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(Object obj, int commitWithinMs);UpdateResponse optimize(String collection);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(Object obj, int commitWithinMs);UpdateResponse optimize();@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(Object obj, int commitWithinMs);UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(Object obj, int commitWithinMs);UpdateResponse optimize(boolean waitFlush, boolean waitSearcher);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(Object obj, int commitWithinMs);UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher, int maxSegments);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(Object obj, int commitWithinMs);UpdateResponse optimize(boolean waitFlush, boolean waitSearcher, int maxSegments);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(Object obj, int commitWithinMs);UpdateResponse rollback(String collection);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(Object obj, int commitWithinMs);UpdateResponse rollback();@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(Object obj, int commitWithinMs);UpdateResponse deleteById(String collection, String id);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(Object obj, int commitWithinMs);UpdateResponse deleteById(String id);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(Object obj, int commitWithinMs);UpdateResponse deleteById(String collection, String id, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(Object obj, int commitWithinMs);UpdateResponse deleteById(String id, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(Object obj, int commitWithinMs);UpdateResponse deleteById(String collection, List ids);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(Object obj, int commitWithinMs);UpdateResponse deleteById(List ids);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(Object obj, int commitWithinMs);UpdateResponse deleteById(String collection, List ids, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(Object obj, int commitWithinMs);UpdateResponse deleteById(List ids, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(Object obj, int commitWithinMs);UpdateResponse deleteByQuery(String collection, String query);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(Object obj, int commitWithinMs);UpdateResponse deleteByQuery(String query);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(Object obj, int commitWithinMs);UpdateResponse deleteByQuery(String collection, String query, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(Object obj, int commitWithinMs);UpdateResponse deleteByQuery(String query, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(Object obj, int commitWithinMs);SolrPingResponse ping();@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(Object obj, int commitWithinMs);QueryResponse query(String collection, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(Object obj, int commitWithinMs);QueryResponse query(SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(Object obj, int commitWithinMs);QueryResponse query(String collection, SolrParams params, METHOD method);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(Object obj, int commitWithinMs);QueryResponse query(SolrParams params, METHOD method);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(Object obj, int commitWithinMs);QueryResponse queryAndStreamResponse(String collection, SolrParams params, StreamingResponseCallback callback);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(Object obj, int commitWithinMs);QueryResponse queryAndStreamResponse(SolrParams params, StreamingResponseCallback callback);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(Object obj, int commitWithinMs);SolrDocument getById(String collection, String id);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(Object obj, int commitWithinMs);SolrDocument getById(String id);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(Object obj, int commitWithinMs);SolrDocument getById(String collection, String id, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(Object obj, int commitWithinMs);SolrDocument getById(String id, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(Object obj, int commitWithinMs);SolrDocumentList getById(String collection, Collection ids);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(Object obj, int commitWithinMs);SolrDocumentList getById(Collection ids);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(Object obj, int commitWithinMs);SolrDocumentList getById(String collection, Collection ids, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(Object obj, int commitWithinMs);SolrDocumentList getById(Collection ids, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(Object obj, int commitWithinMs);NamedList request(SolrRequest request, String collection);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBean(Object obj, int commitWithinMs);NamedList request(SolrRequest request);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(String collection, Collection beans);UpdateResponse addBeans(Collection beans);Free text;;;Adds a collection of beans The beans are converted to {@link SolrInputDocument}s by the client's {@link org.apache.solr.client.solrj.beans.DocumentObjectBinder} ;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(String collection, Collection beans);UpdateResponse addBeans(Collection beans);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse from the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(String collection, Collection beans);UpdateResponse addBeans(Collection beans);@param;Collection<?> beans;Collection<?> beans;the collection of beans;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(String collection, Collection beans);UpdateResponse addBeans(Collection beans);@throws;;;if there is a communication error with the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(String collection, Collection beans);UpdateResponse addBeans(Collection beans);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(String collection, Collection beans);UpdateResponse addBeans(String collection, Collection beans, int commitWithinMs);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse from the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(String collection, Collection beans);UpdateResponse addBeans(String collection, Collection beans, int commitWithinMs);@param;String collection;String collection;the Solr collection to add documents to;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(String collection, Collection beans);UpdateResponse addBeans(String collection, Collection beans, int commitWithinMs);@param;Collection<?> beans;Collection<?> beans;the collection of beans;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(String collection, Collection beans);UpdateResponse addBeans(String collection, Collection beans, int commitWithinMs);@throws;;;if there is a communication error with the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(String collection, Collection beans);UpdateResponse addBeans(String collection, Collection beans, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(String collection, Collection beans);UpdateResponse addBeans(Collection beans, int commitWithinMs);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse from the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(String collection, Collection beans);UpdateResponse addBeans(Collection beans, int commitWithinMs);@param;Collection<?> beans;Collection<?> beans;the collection of beans;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(String collection, Collection beans);UpdateResponse addBeans(Collection beans, int commitWithinMs);@throws;;;if there is a communication error with the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(String collection, Collection beans);UpdateResponse addBeans(Collection beans, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(String collection, Collection beans);UpdateResponse addBeans(String collection, Iterator beanIterator);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse from the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(String collection, Collection beans);UpdateResponse addBeans(String collection, Iterator beanIterator);@throws;;;if there is a communication error with the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(String collection, Collection beans);UpdateResponse addBeans(String collection, Iterator beanIterator);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(String collection, Collection beans);UpdateResponse addBeans(Iterator beanIterator);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse from the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(String collection, Collection beans);UpdateResponse addBeans(Iterator beanIterator);@throws;;;if there is a communication error with the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(String collection, Collection beans);UpdateResponse addBeans(Iterator beanIterator);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(String collection, Collection beans);UpdateResponse commit(String collection);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(String collection, Collection beans);UpdateResponse commit();@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(String collection, Collection beans);UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(String collection, Collection beans);UpdateResponse commit(boolean waitFlush, boolean waitSearcher);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(String collection, Collection beans);UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher, boolean softCommit);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(String collection, Collection beans);UpdateResponse commit(boolean waitFlush, boolean waitSearcher, boolean softCommit);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(String collection, Collection beans);UpdateResponse optimize(String collection);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(String collection, Collection beans);UpdateResponse optimize();@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(String collection, Collection beans);UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(String collection, Collection beans);UpdateResponse optimize(boolean waitFlush, boolean waitSearcher);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(String collection, Collection beans);UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher, int maxSegments);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(String collection, Collection beans);UpdateResponse optimize(boolean waitFlush, boolean waitSearcher, int maxSegments);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(String collection, Collection beans);UpdateResponse rollback(String collection);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(String collection, Collection beans);UpdateResponse rollback();@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(String collection, Collection beans);UpdateResponse deleteById(String collection, String id);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(String collection, Collection beans);UpdateResponse deleteById(String id);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(String collection, Collection beans);UpdateResponse deleteById(String collection, String id, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(String collection, Collection beans);UpdateResponse deleteById(String id, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(String collection, Collection beans);UpdateResponse deleteById(String collection, List ids);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(String collection, Collection beans);UpdateResponse deleteById(List ids);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(String collection, Collection beans);UpdateResponse deleteById(String collection, List ids, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(String collection, Collection beans);UpdateResponse deleteById(List ids, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(String collection, Collection beans);UpdateResponse deleteByQuery(String collection, String query);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(String collection, Collection beans);UpdateResponse deleteByQuery(String query);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(String collection, Collection beans);UpdateResponse deleteByQuery(String collection, String query, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(String collection, Collection beans);UpdateResponse deleteByQuery(String query, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(String collection, Collection beans);SolrPingResponse ping();@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(String collection, Collection beans);QueryResponse query(String collection, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(String collection, Collection beans);QueryResponse query(SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(String collection, Collection beans);QueryResponse query(String collection, SolrParams params, METHOD method);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(String collection, Collection beans);QueryResponse query(SolrParams params, METHOD method);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(String collection, Collection beans);QueryResponse queryAndStreamResponse(String collection, SolrParams params, StreamingResponseCallback callback);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(String collection, Collection beans);QueryResponse queryAndStreamResponse(SolrParams params, StreamingResponseCallback callback);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(String collection, Collection beans);SolrDocument getById(String collection, String id);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(String collection, Collection beans);SolrDocument getById(String id);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(String collection, Collection beans);SolrDocument getById(String collection, String id, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(String collection, Collection beans);SolrDocument getById(String id, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(String collection, Collection beans);SolrDocumentList getById(String collection, Collection ids);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(String collection, Collection beans);SolrDocumentList getById(Collection ids);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(String collection, Collection beans);SolrDocumentList getById(String collection, Collection ids, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(String collection, Collection beans);SolrDocumentList getById(Collection ids, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(String collection, Collection beans);NamedList request(SolrRequest request, String collection);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(String collection, Collection beans);NamedList request(SolrRequest request);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(Collection beans);UpdateResponse addBeans(String collection, Collection beans, int commitWithinMs);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse from the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(Collection beans);UpdateResponse addBeans(String collection, Collection beans, int commitWithinMs);@param;Collection<?> beans;Collection<?> beans;the collection of beans;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(Collection beans);UpdateResponse addBeans(String collection, Collection beans, int commitWithinMs);@throws;;;if there is a communication error with the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(Collection beans);UpdateResponse addBeans(String collection, Collection beans, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(Collection beans);UpdateResponse addBeans(Collection beans, int commitWithinMs);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse from the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(Collection beans);UpdateResponse addBeans(Collection beans, int commitWithinMs);@param;Collection<?> beans;Collection<?> beans;the collection of beans;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(Collection beans);UpdateResponse addBeans(Collection beans, int commitWithinMs);@throws;;;if there is a communication error with the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(Collection beans);UpdateResponse addBeans(Collection beans, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(Collection beans);UpdateResponse addBeans(String collection, Iterator beanIterator);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse from the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(Collection beans);UpdateResponse addBeans(String collection, Iterator beanIterator);@throws;;;if there is a communication error with the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(Collection beans);UpdateResponse addBeans(String collection, Iterator beanIterator);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(Collection beans);UpdateResponse addBeans(Iterator beanIterator);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse from the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(Collection beans);UpdateResponse addBeans(Iterator beanIterator);@throws;;;if there is a communication error with the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(Collection beans);UpdateResponse addBeans(Iterator beanIterator);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(Collection beans);UpdateResponse commit(String collection);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(Collection beans);UpdateResponse commit();@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(Collection beans);UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(Collection beans);UpdateResponse commit(boolean waitFlush, boolean waitSearcher);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(Collection beans);UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher, boolean softCommit);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(Collection beans);UpdateResponse commit(boolean waitFlush, boolean waitSearcher, boolean softCommit);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(Collection beans);UpdateResponse optimize(String collection);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(Collection beans);UpdateResponse optimize();@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(Collection beans);UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(Collection beans);UpdateResponse optimize(boolean waitFlush, boolean waitSearcher);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(Collection beans);UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher, int maxSegments);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(Collection beans);UpdateResponse optimize(boolean waitFlush, boolean waitSearcher, int maxSegments);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(Collection beans);UpdateResponse rollback(String collection);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(Collection beans);UpdateResponse rollback();@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(Collection beans);UpdateResponse deleteById(String collection, String id);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(Collection beans);UpdateResponse deleteById(String id);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(Collection beans);UpdateResponse deleteById(String collection, String id, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(Collection beans);UpdateResponse deleteById(String id, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(Collection beans);UpdateResponse deleteById(String collection, List ids);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(Collection beans);UpdateResponse deleteById(List ids);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(Collection beans);UpdateResponse deleteById(String collection, List ids, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(Collection beans);UpdateResponse deleteById(List ids, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(Collection beans);UpdateResponse deleteByQuery(String collection, String query);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(Collection beans);UpdateResponse deleteByQuery(String query);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(Collection beans);UpdateResponse deleteByQuery(String collection, String query, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(Collection beans);UpdateResponse deleteByQuery(String query, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(Collection beans);SolrPingResponse ping();@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(Collection beans);QueryResponse query(String collection, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(Collection beans);QueryResponse query(SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(Collection beans);QueryResponse query(String collection, SolrParams params, METHOD method);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(Collection beans);QueryResponse query(SolrParams params, METHOD method);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(Collection beans);QueryResponse queryAndStreamResponse(String collection, SolrParams params, StreamingResponseCallback callback);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(Collection beans);QueryResponse queryAndStreamResponse(SolrParams params, StreamingResponseCallback callback);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(Collection beans);SolrDocument getById(String collection, String id);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(Collection beans);SolrDocument getById(String id);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(Collection beans);SolrDocument getById(String collection, String id, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(Collection beans);SolrDocument getById(String id, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(Collection beans);SolrDocumentList getById(String collection, Collection ids);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(Collection beans);SolrDocumentList getById(Collection ids);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(Collection beans);SolrDocumentList getById(String collection, Collection ids, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(Collection beans);SolrDocumentList getById(Collection ids, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(Collection beans);NamedList request(SolrRequest request, String collection);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(Collection beans);NamedList request(SolrRequest request);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(String collection, Collection beans, int commitWithinMs);UpdateResponse addBeans(Collection beans, int commitWithinMs);Free text;;;Adds a collection of beans specifying max time before they become committed The beans are converted to {@link SolrInputDocument}s by the client's {@link org.apache.solr.client.solrj.beans.DocumentObjectBinder} ;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(String collection, Collection beans, int commitWithinMs);UpdateResponse addBeans(Collection beans, int commitWithinMs);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse from the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(String collection, Collection beans, int commitWithinMs);UpdateResponse addBeans(Collection beans, int commitWithinMs);@param;Collection<?> beans;Collection<?> beans;the collection of beans;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(String collection, Collection beans, int commitWithinMs);UpdateResponse addBeans(Collection beans, int commitWithinMs);@param;int commitWithinMs;int commitWithinMs;max time (in ms) before a commit will happen;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(String collection, Collection beans, int commitWithinMs);UpdateResponse addBeans(Collection beans, int commitWithinMs);@throws;;;if there is a communication error with the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(String collection, Collection beans, int commitWithinMs);UpdateResponse addBeans(Collection beans, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(String collection, Collection beans, int commitWithinMs);UpdateResponse addBeans(String collection, Iterator beanIterator);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse from the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(String collection, Collection beans, int commitWithinMs);UpdateResponse addBeans(String collection, Iterator beanIterator);@throws;;;if there is a communication error with the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(String collection, Collection beans, int commitWithinMs);UpdateResponse addBeans(String collection, Iterator beanIterator);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(String collection, Collection beans, int commitWithinMs);UpdateResponse addBeans(Iterator beanIterator);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse from the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(String collection, Collection beans, int commitWithinMs);UpdateResponse addBeans(Iterator beanIterator);@throws;;;if there is a communication error with the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(String collection, Collection beans, int commitWithinMs);UpdateResponse addBeans(Iterator beanIterator);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(String collection, Collection beans, int commitWithinMs);UpdateResponse commit(String collection);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(String collection, Collection beans, int commitWithinMs);UpdateResponse commit();@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(String collection, Collection beans, int commitWithinMs);UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(String collection, Collection beans, int commitWithinMs);UpdateResponse commit(boolean waitFlush, boolean waitSearcher);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(String collection, Collection beans, int commitWithinMs);UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher, boolean softCommit);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(String collection, Collection beans, int commitWithinMs);UpdateResponse commit(boolean waitFlush, boolean waitSearcher, boolean softCommit);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(String collection, Collection beans, int commitWithinMs);UpdateResponse optimize(String collection);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(String collection, Collection beans, int commitWithinMs);UpdateResponse optimize();@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(String collection, Collection beans, int commitWithinMs);UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(String collection, Collection beans, int commitWithinMs);UpdateResponse optimize(boolean waitFlush, boolean waitSearcher);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(String collection, Collection beans, int commitWithinMs);UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher, int maxSegments);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(String collection, Collection beans, int commitWithinMs);UpdateResponse optimize(boolean waitFlush, boolean waitSearcher, int maxSegments);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(String collection, Collection beans, int commitWithinMs);UpdateResponse rollback(String collection);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(String collection, Collection beans, int commitWithinMs);UpdateResponse rollback();@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(String collection, Collection beans, int commitWithinMs);UpdateResponse deleteById(String collection, String id);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(String collection, Collection beans, int commitWithinMs);UpdateResponse deleteById(String id);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(String collection, Collection beans, int commitWithinMs);UpdateResponse deleteById(String collection, String id, int commitWithinMs);@param;int commitWithinMs;int commitWithinMs;max time (in ms) before a commit will happen;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(String collection, Collection beans, int commitWithinMs);UpdateResponse deleteById(String collection, String id, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(String collection, Collection beans, int commitWithinMs);UpdateResponse deleteById(String id, int commitWithinMs);@param;int commitWithinMs;int commitWithinMs;max time (in ms) before a commit will happen;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(String collection, Collection beans, int commitWithinMs);UpdateResponse deleteById(String id, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(String collection, Collection beans, int commitWithinMs);UpdateResponse deleteById(String collection, List ids);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(String collection, Collection beans, int commitWithinMs);UpdateResponse deleteById(List ids);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(String collection, Collection beans, int commitWithinMs);UpdateResponse deleteById(String collection, List ids, int commitWithinMs);@param;int commitWithinMs;int commitWithinMs;max time (in ms) before a commit will happen;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(String collection, Collection beans, int commitWithinMs);UpdateResponse deleteById(String collection, List ids, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(String collection, Collection beans, int commitWithinMs);UpdateResponse deleteById(List ids, int commitWithinMs);@param;int commitWithinMs;int commitWithinMs;max time (in ms) before a commit will happen;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(String collection, Collection beans, int commitWithinMs);UpdateResponse deleteById(List ids, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(String collection, Collection beans, int commitWithinMs);UpdateResponse deleteByQuery(String collection, String query);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(String collection, Collection beans, int commitWithinMs);UpdateResponse deleteByQuery(String query);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(String collection, Collection beans, int commitWithinMs);UpdateResponse deleteByQuery(String collection, String query, int commitWithinMs);@param;int commitWithinMs;int commitWithinMs;max time (in ms) before a commit will happen;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(String collection, Collection beans, int commitWithinMs);UpdateResponse deleteByQuery(String collection, String query, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(String collection, Collection beans, int commitWithinMs);UpdateResponse deleteByQuery(String query, int commitWithinMs);@param;int commitWithinMs;int commitWithinMs;max time (in ms) before a commit will happen;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(String collection, Collection beans, int commitWithinMs);UpdateResponse deleteByQuery(String query, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(String collection, Collection beans, int commitWithinMs);SolrPingResponse ping();@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(String collection, Collection beans, int commitWithinMs);QueryResponse query(String collection, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(String collection, Collection beans, int commitWithinMs);QueryResponse query(SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(String collection, Collection beans, int commitWithinMs);QueryResponse query(String collection, SolrParams params, METHOD method);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(String collection, Collection beans, int commitWithinMs);QueryResponse query(SolrParams params, METHOD method);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(String collection, Collection beans, int commitWithinMs);QueryResponse queryAndStreamResponse(String collection, SolrParams params, StreamingResponseCallback callback);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(String collection, Collection beans, int commitWithinMs);QueryResponse queryAndStreamResponse(SolrParams params, StreamingResponseCallback callback);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(String collection, Collection beans, int commitWithinMs);SolrDocument getById(String collection, String id);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(String collection, Collection beans, int commitWithinMs);SolrDocument getById(String id);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(String collection, Collection beans, int commitWithinMs);SolrDocument getById(String collection, String id, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(String collection, Collection beans, int commitWithinMs);SolrDocument getById(String id, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(String collection, Collection beans, int commitWithinMs);SolrDocumentList getById(String collection, Collection ids);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(String collection, Collection beans, int commitWithinMs);SolrDocumentList getById(Collection ids);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(String collection, Collection beans, int commitWithinMs);SolrDocumentList getById(String collection, Collection ids, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(String collection, Collection beans, int commitWithinMs);SolrDocumentList getById(Collection ids, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(String collection, Collection beans, int commitWithinMs);NamedList request(SolrRequest request, String collection);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(String collection, Collection beans, int commitWithinMs);NamedList request(SolrRequest request);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(Collection beans, int commitWithinMs);UpdateResponse addBeans(String collection, Iterator beanIterator);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse from the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(Collection beans, int commitWithinMs);UpdateResponse addBeans(String collection, Iterator beanIterator);@throws;;;if there is a communication error with the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(Collection beans, int commitWithinMs);UpdateResponse addBeans(String collection, Iterator beanIterator);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(Collection beans, int commitWithinMs);UpdateResponse addBeans(Iterator beanIterator);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse from the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(Collection beans, int commitWithinMs);UpdateResponse addBeans(Iterator beanIterator);@throws;;;if there is a communication error with the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(Collection beans, int commitWithinMs);UpdateResponse addBeans(Iterator beanIterator);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(Collection beans, int commitWithinMs);UpdateResponse commit(String collection);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(Collection beans, int commitWithinMs);UpdateResponse commit();@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(Collection beans, int commitWithinMs);UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(Collection beans, int commitWithinMs);UpdateResponse commit(boolean waitFlush, boolean waitSearcher);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(Collection beans, int commitWithinMs);UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher, boolean softCommit);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(Collection beans, int commitWithinMs);UpdateResponse commit(boolean waitFlush, boolean waitSearcher, boolean softCommit);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(Collection beans, int commitWithinMs);UpdateResponse optimize(String collection);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(Collection beans, int commitWithinMs);UpdateResponse optimize();@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(Collection beans, int commitWithinMs);UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(Collection beans, int commitWithinMs);UpdateResponse optimize(boolean waitFlush, boolean waitSearcher);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(Collection beans, int commitWithinMs);UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher, int maxSegments);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(Collection beans, int commitWithinMs);UpdateResponse optimize(boolean waitFlush, boolean waitSearcher, int maxSegments);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(Collection beans, int commitWithinMs);UpdateResponse rollback(String collection);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(Collection beans, int commitWithinMs);UpdateResponse rollback();@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(Collection beans, int commitWithinMs);UpdateResponse deleteById(String collection, String id);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(Collection beans, int commitWithinMs);UpdateResponse deleteById(String id);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(Collection beans, int commitWithinMs);UpdateResponse deleteById(String collection, String id, int commitWithinMs);@param;int commitWithinMs;int commitWithinMs;max time (in ms) before a commit will happen;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(Collection beans, int commitWithinMs);UpdateResponse deleteById(String collection, String id, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(Collection beans, int commitWithinMs);UpdateResponse deleteById(String id, int commitWithinMs);@param;int commitWithinMs;int commitWithinMs;max time (in ms) before a commit will happen;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(Collection beans, int commitWithinMs);UpdateResponse deleteById(String id, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(Collection beans, int commitWithinMs);UpdateResponse deleteById(String collection, List ids);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(Collection beans, int commitWithinMs);UpdateResponse deleteById(List ids);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(Collection beans, int commitWithinMs);UpdateResponse deleteById(String collection, List ids, int commitWithinMs);@param;int commitWithinMs;int commitWithinMs;max time (in ms) before a commit will happen;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(Collection beans, int commitWithinMs);UpdateResponse deleteById(String collection, List ids, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(Collection beans, int commitWithinMs);UpdateResponse deleteById(List ids, int commitWithinMs);@param;int commitWithinMs;int commitWithinMs;max time (in ms) before a commit will happen;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(Collection beans, int commitWithinMs);UpdateResponse deleteById(List ids, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(Collection beans, int commitWithinMs);UpdateResponse deleteByQuery(String collection, String query);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(Collection beans, int commitWithinMs);UpdateResponse deleteByQuery(String query);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(Collection beans, int commitWithinMs);UpdateResponse deleteByQuery(String collection, String query, int commitWithinMs);@param;int commitWithinMs;int commitWithinMs;max time (in ms) before a commit will happen;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(Collection beans, int commitWithinMs);UpdateResponse deleteByQuery(String collection, String query, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(Collection beans, int commitWithinMs);UpdateResponse deleteByQuery(String query, int commitWithinMs);@param;int commitWithinMs;int commitWithinMs;max time (in ms) before a commit will happen;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(Collection beans, int commitWithinMs);UpdateResponse deleteByQuery(String query, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(Collection beans, int commitWithinMs);SolrPingResponse ping();@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(Collection beans, int commitWithinMs);QueryResponse query(String collection, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(Collection beans, int commitWithinMs);QueryResponse query(SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(Collection beans, int commitWithinMs);QueryResponse query(String collection, SolrParams params, METHOD method);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(Collection beans, int commitWithinMs);QueryResponse query(SolrParams params, METHOD method);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(Collection beans, int commitWithinMs);QueryResponse queryAndStreamResponse(String collection, SolrParams params, StreamingResponseCallback callback);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(Collection beans, int commitWithinMs);QueryResponse queryAndStreamResponse(SolrParams params, StreamingResponseCallback callback);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(Collection beans, int commitWithinMs);SolrDocument getById(String collection, String id);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(Collection beans, int commitWithinMs);SolrDocument getById(String id);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(Collection beans, int commitWithinMs);SolrDocument getById(String collection, String id, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(Collection beans, int commitWithinMs);SolrDocument getById(String id, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(Collection beans, int commitWithinMs);SolrDocumentList getById(String collection, Collection ids);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(Collection beans, int commitWithinMs);SolrDocumentList getById(Collection ids);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(Collection beans, int commitWithinMs);SolrDocumentList getById(String collection, Collection ids, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(Collection beans, int commitWithinMs);SolrDocumentList getById(Collection ids, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(Collection beans, int commitWithinMs);NamedList request(SolrRequest request, String collection);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(Collection beans, int commitWithinMs);NamedList request(SolrRequest request);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(String collection, Iterator beanIterator);UpdateResponse addBeans(Iterator beanIterator);Free text;;;Adds the beans supplied by the given iterator. ;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(String collection, Iterator beanIterator);UpdateResponse addBeans(Iterator beanIterator);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse from the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(String collection, Iterator beanIterator);UpdateResponse addBeans(Iterator beanIterator);@param;Iterator<?> beanIterator;Iterator<?> beanIterator;the iterator which returns Beans;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(String collection, Iterator beanIterator);UpdateResponse addBeans(Iterator beanIterator);@throws;;;if there is a communication error with the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(String collection, Iterator beanIterator);UpdateResponse addBeans(Iterator beanIterator);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(String collection, Iterator beanIterator);UpdateResponse commit(String collection);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(String collection, Iterator beanIterator);UpdateResponse commit();@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(String collection, Iterator beanIterator);UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(String collection, Iterator beanIterator);UpdateResponse commit(boolean waitFlush, boolean waitSearcher);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(String collection, Iterator beanIterator);UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher, boolean softCommit);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(String collection, Iterator beanIterator);UpdateResponse commit(boolean waitFlush, boolean waitSearcher, boolean softCommit);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(String collection, Iterator beanIterator);UpdateResponse optimize(String collection);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(String collection, Iterator beanIterator);UpdateResponse optimize();@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(String collection, Iterator beanIterator);UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(String collection, Iterator beanIterator);UpdateResponse optimize(boolean waitFlush, boolean waitSearcher);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(String collection, Iterator beanIterator);UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher, int maxSegments);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(String collection, Iterator beanIterator);UpdateResponse optimize(boolean waitFlush, boolean waitSearcher, int maxSegments);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(String collection, Iterator beanIterator);UpdateResponse rollback(String collection);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(String collection, Iterator beanIterator);UpdateResponse rollback();@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(String collection, Iterator beanIterator);UpdateResponse deleteById(String collection, String id);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(String collection, Iterator beanIterator);UpdateResponse deleteById(String id);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(String collection, Iterator beanIterator);UpdateResponse deleteById(String collection, String id, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(String collection, Iterator beanIterator);UpdateResponse deleteById(String id, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(String collection, Iterator beanIterator);UpdateResponse deleteById(String collection, List ids);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(String collection, Iterator beanIterator);UpdateResponse deleteById(List ids);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(String collection, Iterator beanIterator);UpdateResponse deleteById(String collection, List ids, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(String collection, Iterator beanIterator);UpdateResponse deleteById(List ids, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(String collection, Iterator beanIterator);UpdateResponse deleteByQuery(String collection, String query);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(String collection, Iterator beanIterator);UpdateResponse deleteByQuery(String query);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(String collection, Iterator beanIterator);UpdateResponse deleteByQuery(String collection, String query, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(String collection, Iterator beanIterator);UpdateResponse deleteByQuery(String query, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(String collection, Iterator beanIterator);SolrPingResponse ping();@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(String collection, Iterator beanIterator);QueryResponse query(String collection, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(String collection, Iterator beanIterator);QueryResponse query(SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(String collection, Iterator beanIterator);QueryResponse query(String collection, SolrParams params, METHOD method);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(String collection, Iterator beanIterator);QueryResponse query(SolrParams params, METHOD method);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(String collection, Iterator beanIterator);QueryResponse queryAndStreamResponse(String collection, SolrParams params, StreamingResponseCallback callback);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(String collection, Iterator beanIterator);QueryResponse queryAndStreamResponse(SolrParams params, StreamingResponseCallback callback);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(String collection, Iterator beanIterator);SolrDocument getById(String collection, String id);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(String collection, Iterator beanIterator);SolrDocument getById(String id);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(String collection, Iterator beanIterator);SolrDocument getById(String collection, String id, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(String collection, Iterator beanIterator);SolrDocument getById(String id, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(String collection, Iterator beanIterator);SolrDocumentList getById(String collection, Collection ids);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(String collection, Iterator beanIterator);SolrDocumentList getById(Collection ids);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(String collection, Iterator beanIterator);SolrDocumentList getById(String collection, Collection ids, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(String collection, Iterator beanIterator);SolrDocumentList getById(Collection ids, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(String collection, Iterator beanIterator);NamedList request(SolrRequest request, String collection);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(String collection, Iterator beanIterator);NamedList request(SolrRequest request);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(Iterator beanIterator);UpdateResponse commit(String collection);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(Iterator beanIterator);UpdateResponse commit();@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(Iterator beanIterator);UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(Iterator beanIterator);UpdateResponse commit(boolean waitFlush, boolean waitSearcher);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(Iterator beanIterator);UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher, boolean softCommit);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(Iterator beanIterator);UpdateResponse commit(boolean waitFlush, boolean waitSearcher, boolean softCommit);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(Iterator beanIterator);UpdateResponse optimize(String collection);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(Iterator beanIterator);UpdateResponse optimize();@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(Iterator beanIterator);UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(Iterator beanIterator);UpdateResponse optimize(boolean waitFlush, boolean waitSearcher);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(Iterator beanIterator);UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher, int maxSegments);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(Iterator beanIterator);UpdateResponse optimize(boolean waitFlush, boolean waitSearcher, int maxSegments);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(Iterator beanIterator);UpdateResponse rollback(String collection);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(Iterator beanIterator);UpdateResponse rollback();@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(Iterator beanIterator);UpdateResponse deleteById(String collection, String id);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(Iterator beanIterator);UpdateResponse deleteById(String id);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(Iterator beanIterator);UpdateResponse deleteById(String collection, String id, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(Iterator beanIterator);UpdateResponse deleteById(String id, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(Iterator beanIterator);UpdateResponse deleteById(String collection, List ids);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(Iterator beanIterator);UpdateResponse deleteById(List ids);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(Iterator beanIterator);UpdateResponse deleteById(String collection, List ids, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(Iterator beanIterator);UpdateResponse deleteById(List ids, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(Iterator beanIterator);UpdateResponse deleteByQuery(String collection, String query);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(Iterator beanIterator);UpdateResponse deleteByQuery(String query);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(Iterator beanIterator);UpdateResponse deleteByQuery(String collection, String query, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(Iterator beanIterator);UpdateResponse deleteByQuery(String query, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(Iterator beanIterator);SolrPingResponse ping();@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(Iterator beanIterator);QueryResponse query(String collection, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(Iterator beanIterator);QueryResponse query(SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(Iterator beanIterator);QueryResponse query(String collection, SolrParams params, METHOD method);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(Iterator beanIterator);QueryResponse query(SolrParams params, METHOD method);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(Iterator beanIterator);QueryResponse queryAndStreamResponse(String collection, SolrParams params, StreamingResponseCallback callback);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(Iterator beanIterator);QueryResponse queryAndStreamResponse(SolrParams params, StreamingResponseCallback callback);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(Iterator beanIterator);SolrDocument getById(String collection, String id);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(Iterator beanIterator);SolrDocument getById(String id);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(Iterator beanIterator);SolrDocument getById(String collection, String id, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(Iterator beanIterator);SolrDocument getById(String id, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(Iterator beanIterator);SolrDocumentList getById(String collection, Collection ids);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(Iterator beanIterator);SolrDocumentList getById(Collection ids);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(Iterator beanIterator);SolrDocumentList getById(String collection, Collection ids, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(Iterator beanIterator);SolrDocumentList getById(Collection ids, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(Iterator beanIterator);NamedList request(SolrRequest request, String collection);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse addBeans(Iterator beanIterator);NamedList request(SolrRequest request);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection);UpdateResponse commit();Free text;;;Performs an explicit commit, causing pending documents to be committed for indexing waitFlush=true and waitSearcher=true to be inline with the defaults for plain HTTP access ;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection);UpdateResponse commit();@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection);UpdateResponse commit();@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection);UpdateResponse commit();@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection);UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection);UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher);@param;String collection;String collection;the Solr collection to send the commit to;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection);UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection);UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection);UpdateResponse commit(boolean waitFlush, boolean waitSearcher);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection);UpdateResponse commit(boolean waitFlush, boolean waitSearcher);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection);UpdateResponse commit(boolean waitFlush, boolean waitSearcher);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection);UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher, boolean softCommit);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection);UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher, boolean softCommit);@param;String collection;String collection;the Solr collection to send the commit to;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection);UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher, boolean softCommit);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection);UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher, boolean softCommit);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection);UpdateResponse commit(boolean waitFlush, boolean waitSearcher, boolean softCommit);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection);UpdateResponse commit(boolean waitFlush, boolean waitSearcher, boolean softCommit);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection);UpdateResponse commit(boolean waitFlush, boolean waitSearcher, boolean softCommit);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection);UpdateResponse optimize(String collection);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection);UpdateResponse optimize(String collection);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection);UpdateResponse optimize(String collection);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection);UpdateResponse optimize();@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection);UpdateResponse optimize();@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection);UpdateResponse optimize();@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection);UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection);UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection);UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection);UpdateResponse optimize(boolean waitFlush, boolean waitSearcher);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection);UpdateResponse optimize(boolean waitFlush, boolean waitSearcher);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection);UpdateResponse optimize(boolean waitFlush, boolean waitSearcher);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection);UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher, int maxSegments);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection);UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher, int maxSegments);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection);UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher, int maxSegments);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection);UpdateResponse optimize(boolean waitFlush, boolean waitSearcher, int maxSegments);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection);UpdateResponse optimize(boolean waitFlush, boolean waitSearcher, int maxSegments);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection);UpdateResponse optimize(boolean waitFlush, boolean waitSearcher, int maxSegments);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection);UpdateResponse rollback(String collection);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection);UpdateResponse rollback(String collection);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection);UpdateResponse rollback(String collection);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection);UpdateResponse rollback();@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection);UpdateResponse rollback();@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection);UpdateResponse rollback();@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection);UpdateResponse deleteById(String collection, String id);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection);UpdateResponse deleteById(String collection, String id);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection);UpdateResponse deleteById(String collection, String id);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection);UpdateResponse deleteById(String id);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection);UpdateResponse deleteById(String id);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection);UpdateResponse deleteById(String id);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection);UpdateResponse deleteById(String collection, String id, int commitWithinMs);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection);UpdateResponse deleteById(String collection, String id, int commitWithinMs);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection);UpdateResponse deleteById(String collection, String id, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection);UpdateResponse deleteById(String id, int commitWithinMs);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection);UpdateResponse deleteById(String id, int commitWithinMs);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection);UpdateResponse deleteById(String id, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection);UpdateResponse deleteById(String collection, List ids);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection);UpdateResponse deleteById(String collection, List ids);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection);UpdateResponse deleteById(String collection, List ids);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection);UpdateResponse deleteById(List ids);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection);UpdateResponse deleteById(List ids);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection);UpdateResponse deleteById(List ids);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection);UpdateResponse deleteById(String collection, List ids, int commitWithinMs);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection);UpdateResponse deleteById(String collection, List ids, int commitWithinMs);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection);UpdateResponse deleteById(String collection, List ids, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection);UpdateResponse deleteById(List ids, int commitWithinMs);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection);UpdateResponse deleteById(List ids, int commitWithinMs);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection);UpdateResponse deleteById(List ids, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection);UpdateResponse deleteByQuery(String collection, String query);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection);UpdateResponse deleteByQuery(String collection, String query);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection);UpdateResponse deleteByQuery(String collection, String query);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection);UpdateResponse deleteByQuery(String query);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection);UpdateResponse deleteByQuery(String query);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection);UpdateResponse deleteByQuery(String query);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection);UpdateResponse deleteByQuery(String collection, String query, int commitWithinMs);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection);UpdateResponse deleteByQuery(String collection, String query, int commitWithinMs);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection);UpdateResponse deleteByQuery(String collection, String query, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection);UpdateResponse deleteByQuery(String query, int commitWithinMs);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection);UpdateResponse deleteByQuery(String query, int commitWithinMs);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection);UpdateResponse deleteByQuery(String query, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection);SolrPingResponse ping();@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection);SolrPingResponse ping();@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection);QueryResponse query(String collection, SolrParams params);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection);QueryResponse query(String collection, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection);QueryResponse query(SolrParams params);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection);QueryResponse query(SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection);QueryResponse query(String collection, SolrParams params, METHOD method);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection);QueryResponse query(String collection, SolrParams params, METHOD method);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection);QueryResponse query(SolrParams params, METHOD method);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection);QueryResponse query(SolrParams params, METHOD method);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection);QueryResponse queryAndStreamResponse(String collection, SolrParams params, StreamingResponseCallback callback);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection);QueryResponse queryAndStreamResponse(String collection, SolrParams params, StreamingResponseCallback callback);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection);QueryResponse queryAndStreamResponse(SolrParams params, StreamingResponseCallback callback);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection);QueryResponse queryAndStreamResponse(SolrParams params, StreamingResponseCallback callback);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection);SolrDocument getById(String collection, String id);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection);SolrDocument getById(String collection, String id);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection);SolrDocument getById(String id);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection);SolrDocument getById(String id);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection);SolrDocument getById(String collection, String id, SolrParams params);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection);SolrDocument getById(String collection, String id, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection);SolrDocument getById(String id, SolrParams params);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection);SolrDocument getById(String id, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection);SolrDocumentList getById(String collection, Collection ids);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection);SolrDocumentList getById(String collection, Collection ids);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection);SolrDocumentList getById(Collection ids);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection);SolrDocumentList getById(Collection ids);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection);SolrDocumentList getById(String collection, Collection ids, SolrParams params);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection);SolrDocumentList getById(String collection, Collection ids, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection);SolrDocumentList getById(Collection ids, SolrParams params);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection);SolrDocumentList getById(Collection ids, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection);NamedList request(SolrRequest request, String collection);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection);NamedList request(SolrRequest request, String collection);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection);NamedList request(SolrRequest request);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection);NamedList request(SolrRequest request);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit();UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit();UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit();UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit();UpdateResponse commit(boolean waitFlush, boolean waitSearcher);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit();UpdateResponse commit(boolean waitFlush, boolean waitSearcher);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit();UpdateResponse commit(boolean waitFlush, boolean waitSearcher);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit();UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher, boolean softCommit);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit();UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher, boolean softCommit);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit();UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher, boolean softCommit);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit();UpdateResponse commit(boolean waitFlush, boolean waitSearcher, boolean softCommit);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit();UpdateResponse commit(boolean waitFlush, boolean waitSearcher, boolean softCommit);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit();UpdateResponse commit(boolean waitFlush, boolean waitSearcher, boolean softCommit);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit();UpdateResponse optimize(String collection);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit();UpdateResponse optimize(String collection);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit();UpdateResponse optimize(String collection);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit();UpdateResponse optimize();@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit();UpdateResponse optimize();@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit();UpdateResponse optimize();@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit();UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit();UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit();UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit();UpdateResponse optimize(boolean waitFlush, boolean waitSearcher);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit();UpdateResponse optimize(boolean waitFlush, boolean waitSearcher);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit();UpdateResponse optimize(boolean waitFlush, boolean waitSearcher);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit();UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher, int maxSegments);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit();UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher, int maxSegments);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit();UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher, int maxSegments);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit();UpdateResponse optimize(boolean waitFlush, boolean waitSearcher, int maxSegments);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit();UpdateResponse optimize(boolean waitFlush, boolean waitSearcher, int maxSegments);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit();UpdateResponse optimize(boolean waitFlush, boolean waitSearcher, int maxSegments);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit();UpdateResponse rollback(String collection);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit();UpdateResponse rollback(String collection);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit();UpdateResponse rollback(String collection);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit();UpdateResponse rollback();@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit();UpdateResponse rollback();@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit();UpdateResponse rollback();@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit();UpdateResponse deleteById(String collection, String id);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit();UpdateResponse deleteById(String collection, String id);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit();UpdateResponse deleteById(String collection, String id);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit();UpdateResponse deleteById(String id);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit();UpdateResponse deleteById(String id);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit();UpdateResponse deleteById(String id);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit();UpdateResponse deleteById(String collection, String id, int commitWithinMs);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit();UpdateResponse deleteById(String collection, String id, int commitWithinMs);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit();UpdateResponse deleteById(String collection, String id, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit();UpdateResponse deleteById(String id, int commitWithinMs);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit();UpdateResponse deleteById(String id, int commitWithinMs);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit();UpdateResponse deleteById(String id, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit();UpdateResponse deleteById(String collection, List ids);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit();UpdateResponse deleteById(String collection, List ids);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit();UpdateResponse deleteById(String collection, List ids);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit();UpdateResponse deleteById(List ids);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit();UpdateResponse deleteById(List ids);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit();UpdateResponse deleteById(List ids);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit();UpdateResponse deleteById(String collection, List ids, int commitWithinMs);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit();UpdateResponse deleteById(String collection, List ids, int commitWithinMs);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit();UpdateResponse deleteById(String collection, List ids, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit();UpdateResponse deleteById(List ids, int commitWithinMs);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit();UpdateResponse deleteById(List ids, int commitWithinMs);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit();UpdateResponse deleteById(List ids, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit();UpdateResponse deleteByQuery(String collection, String query);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit();UpdateResponse deleteByQuery(String collection, String query);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit();UpdateResponse deleteByQuery(String collection, String query);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit();UpdateResponse deleteByQuery(String query);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit();UpdateResponse deleteByQuery(String query);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit();UpdateResponse deleteByQuery(String query);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit();UpdateResponse deleteByQuery(String collection, String query, int commitWithinMs);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit();UpdateResponse deleteByQuery(String collection, String query, int commitWithinMs);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit();UpdateResponse deleteByQuery(String collection, String query, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit();UpdateResponse deleteByQuery(String query, int commitWithinMs);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit();UpdateResponse deleteByQuery(String query, int commitWithinMs);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit();UpdateResponse deleteByQuery(String query, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit();SolrPingResponse ping();@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit();SolrPingResponse ping();@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit();QueryResponse query(String collection, SolrParams params);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit();QueryResponse query(String collection, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit();QueryResponse query(SolrParams params);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit();QueryResponse query(SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit();QueryResponse query(String collection, SolrParams params, METHOD method);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit();QueryResponse query(String collection, SolrParams params, METHOD method);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit();QueryResponse query(SolrParams params, METHOD method);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit();QueryResponse query(SolrParams params, METHOD method);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit();QueryResponse queryAndStreamResponse(String collection, SolrParams params, StreamingResponseCallback callback);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit();QueryResponse queryAndStreamResponse(String collection, SolrParams params, StreamingResponseCallback callback);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit();QueryResponse queryAndStreamResponse(SolrParams params, StreamingResponseCallback callback);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit();QueryResponse queryAndStreamResponse(SolrParams params, StreamingResponseCallback callback);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit();SolrDocument getById(String collection, String id);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit();SolrDocument getById(String collection, String id);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit();SolrDocument getById(String id);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit();SolrDocument getById(String id);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit();SolrDocument getById(String collection, String id, SolrParams params);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit();SolrDocument getById(String collection, String id, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit();SolrDocument getById(String id, SolrParams params);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit();SolrDocument getById(String id, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit();SolrDocumentList getById(String collection, Collection ids);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit();SolrDocumentList getById(String collection, Collection ids);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit();SolrDocumentList getById(Collection ids);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit();SolrDocumentList getById(Collection ids);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit();SolrDocumentList getById(String collection, Collection ids, SolrParams params);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit();SolrDocumentList getById(String collection, Collection ids, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit();SolrDocumentList getById(Collection ids, SolrParams params);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit();SolrDocumentList getById(Collection ids, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit();NamedList request(SolrRequest request, String collection);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit();NamedList request(SolrRequest request, String collection);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit();NamedList request(SolrRequest request);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit();NamedList request(SolrRequest request);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher);UpdateResponse commit(boolean waitFlush, boolean waitSearcher);Free text;;;Performs an explicit commit, causing pending documents to be committed for indexing ;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher);UpdateResponse commit(boolean waitFlush, boolean waitSearcher);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher);UpdateResponse commit(boolean waitFlush, boolean waitSearcher);@param;boolean waitFlush;boolean waitFlush;block until index changes are flushed to disk;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher);UpdateResponse commit(boolean waitFlush, boolean waitSearcher);@param;boolean waitSearcher;boolean waitSearcher;block until a new searcher is opened and registered as the main query searcher, making the changes visible;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher);UpdateResponse commit(boolean waitFlush, boolean waitSearcher);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher);UpdateResponse commit(boolean waitFlush, boolean waitSearcher);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher);UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher, boolean softCommit);Free text;;;Performs an explicit commit, causing pending documents to be committed for indexing ;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher);UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher, boolean softCommit);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher);UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher, boolean softCommit);@param;String collection;String collection;the Solr collection to send the commit to;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher);UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher, boolean softCommit);@param;boolean waitFlush;boolean waitFlush;block until index changes are flushed to disk;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher);UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher, boolean softCommit);@param;boolean waitSearcher;boolean waitSearcher;block until a new searcher is opened and registered as the main query searcher, making the changes visible;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher);UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher, boolean softCommit);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher);UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher, boolean softCommit);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher);UpdateResponse commit(boolean waitFlush, boolean waitSearcher, boolean softCommit);Free text;;;Performs an explicit commit, causing pending documents to be committed for indexing ;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher);UpdateResponse commit(boolean waitFlush, boolean waitSearcher, boolean softCommit);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher);UpdateResponse commit(boolean waitFlush, boolean waitSearcher, boolean softCommit);@param;boolean waitFlush;boolean waitFlush;block until index changes are flushed to disk;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher);UpdateResponse commit(boolean waitFlush, boolean waitSearcher, boolean softCommit);@param;boolean waitSearcher;boolean waitSearcher;block until a new searcher is opened and registered as the main query searcher, making the changes visible;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher);UpdateResponse commit(boolean waitFlush, boolean waitSearcher, boolean softCommit);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher);UpdateResponse commit(boolean waitFlush, boolean waitSearcher, boolean softCommit);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher);UpdateResponse optimize(String collection);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher);UpdateResponse optimize(String collection);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher);UpdateResponse optimize(String collection);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher);UpdateResponse optimize();@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher);UpdateResponse optimize();@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher);UpdateResponse optimize();@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher);UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher);UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher);@param;boolean waitFlush;boolean waitFlush;block until index changes are flushed to disk;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher);UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher);@param;boolean waitSearcher;boolean waitSearcher;block until a new searcher is opened and registered as the main query searcher, making the changes visible;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher);UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher);UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher);UpdateResponse optimize(boolean waitFlush, boolean waitSearcher);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher);UpdateResponse optimize(boolean waitFlush, boolean waitSearcher);@param;boolean waitFlush;boolean waitFlush;block until index changes are flushed to disk;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher);UpdateResponse optimize(boolean waitFlush, boolean waitSearcher);@param;boolean waitSearcher;boolean waitSearcher;block until a new searcher is opened and registered as the main query searcher, making the changes visible;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher);UpdateResponse optimize(boolean waitFlush, boolean waitSearcher);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher);UpdateResponse optimize(boolean waitFlush, boolean waitSearcher);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher);UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher, int maxSegments);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher);UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher, int maxSegments);@param;boolean waitFlush;boolean waitFlush;block until index changes are flushed to disk;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher);UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher, int maxSegments);@param;boolean waitSearcher;boolean waitSearcher;block until a new searcher is opened and registered as the main query searcher, making the changes visible;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher);UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher, int maxSegments);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher);UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher, int maxSegments);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher);UpdateResponse optimize(boolean waitFlush, boolean waitSearcher, int maxSegments);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher);UpdateResponse optimize(boolean waitFlush, boolean waitSearcher, int maxSegments);@param;boolean waitFlush;boolean waitFlush;block until index changes are flushed to disk;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher);UpdateResponse optimize(boolean waitFlush, boolean waitSearcher, int maxSegments);@param;boolean waitSearcher;boolean waitSearcher;block until a new searcher is opened and registered as the main query searcher, making the changes visible;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher);UpdateResponse optimize(boolean waitFlush, boolean waitSearcher, int maxSegments);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher);UpdateResponse optimize(boolean waitFlush, boolean waitSearcher, int maxSegments);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher);UpdateResponse rollback(String collection);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher);UpdateResponse rollback(String collection);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher);UpdateResponse rollback(String collection);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher);UpdateResponse rollback();@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher);UpdateResponse rollback();@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher);UpdateResponse rollback();@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher);UpdateResponse deleteById(String collection, String id);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher);UpdateResponse deleteById(String collection, String id);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher);UpdateResponse deleteById(String collection, String id);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher);UpdateResponse deleteById(String id);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher);UpdateResponse deleteById(String id);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher);UpdateResponse deleteById(String id);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher);UpdateResponse deleteById(String collection, String id, int commitWithinMs);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher);UpdateResponse deleteById(String collection, String id, int commitWithinMs);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher);UpdateResponse deleteById(String collection, String id, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher);UpdateResponse deleteById(String id, int commitWithinMs);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher);UpdateResponse deleteById(String id, int commitWithinMs);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher);UpdateResponse deleteById(String id, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher);UpdateResponse deleteById(String collection, List ids);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher);UpdateResponse deleteById(String collection, List ids);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher);UpdateResponse deleteById(String collection, List ids);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher);UpdateResponse deleteById(List ids);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher);UpdateResponse deleteById(List ids);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher);UpdateResponse deleteById(List ids);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher);UpdateResponse deleteById(String collection, List ids, int commitWithinMs);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher);UpdateResponse deleteById(String collection, List ids, int commitWithinMs);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher);UpdateResponse deleteById(String collection, List ids, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher);UpdateResponse deleteById(List ids, int commitWithinMs);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher);UpdateResponse deleteById(List ids, int commitWithinMs);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher);UpdateResponse deleteById(List ids, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher);UpdateResponse deleteByQuery(String collection, String query);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher);UpdateResponse deleteByQuery(String collection, String query);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher);UpdateResponse deleteByQuery(String collection, String query);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher);UpdateResponse deleteByQuery(String query);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher);UpdateResponse deleteByQuery(String query);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher);UpdateResponse deleteByQuery(String query);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher);UpdateResponse deleteByQuery(String collection, String query, int commitWithinMs);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher);UpdateResponse deleteByQuery(String collection, String query, int commitWithinMs);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher);UpdateResponse deleteByQuery(String collection, String query, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher);UpdateResponse deleteByQuery(String query, int commitWithinMs);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher);UpdateResponse deleteByQuery(String query, int commitWithinMs);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher);UpdateResponse deleteByQuery(String query, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher);SolrPingResponse ping();@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher);SolrPingResponse ping();@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher);QueryResponse query(String collection, SolrParams params);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher);QueryResponse query(String collection, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher);QueryResponse query(SolrParams params);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher);QueryResponse query(SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher);QueryResponse query(String collection, SolrParams params, METHOD method);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher);QueryResponse query(String collection, SolrParams params, METHOD method);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher);QueryResponse query(SolrParams params, METHOD method);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher);QueryResponse query(SolrParams params, METHOD method);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher);QueryResponse queryAndStreamResponse(String collection, SolrParams params, StreamingResponseCallback callback);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher);QueryResponse queryAndStreamResponse(String collection, SolrParams params, StreamingResponseCallback callback);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher);QueryResponse queryAndStreamResponse(SolrParams params, StreamingResponseCallback callback);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher);QueryResponse queryAndStreamResponse(SolrParams params, StreamingResponseCallback callback);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher);SolrDocument getById(String collection, String id);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher);SolrDocument getById(String collection, String id);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher);SolrDocument getById(String id);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher);SolrDocument getById(String id);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher);SolrDocument getById(String collection, String id, SolrParams params);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher);SolrDocument getById(String collection, String id, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher);SolrDocument getById(String id, SolrParams params);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher);SolrDocument getById(String id, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher);SolrDocumentList getById(String collection, Collection ids);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher);SolrDocumentList getById(String collection, Collection ids);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher);SolrDocumentList getById(Collection ids);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher);SolrDocumentList getById(Collection ids);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher);SolrDocumentList getById(String collection, Collection ids, SolrParams params);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher);SolrDocumentList getById(String collection, Collection ids, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher);SolrDocumentList getById(Collection ids, SolrParams params);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher);SolrDocumentList getById(Collection ids, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher);NamedList request(SolrRequest request, String collection);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher);NamedList request(SolrRequest request, String collection);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher);NamedList request(SolrRequest request);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher);NamedList request(SolrRequest request);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(boolean waitFlush, boolean waitSearcher);UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher, boolean softCommit);Free text;;;Performs an explicit commit, causing pending documents to be committed for indexing ;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(boolean waitFlush, boolean waitSearcher);UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher, boolean softCommit);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(boolean waitFlush, boolean waitSearcher);UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher, boolean softCommit);@param;boolean waitFlush;boolean waitFlush;block until index changes are flushed to disk;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(boolean waitFlush, boolean waitSearcher);UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher, boolean softCommit);@param;boolean waitSearcher;boolean waitSearcher;block until a new searcher is opened and registered as the main query searcher, making the changes visible;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(boolean waitFlush, boolean waitSearcher);UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher, boolean softCommit);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(boolean waitFlush, boolean waitSearcher);UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher, boolean softCommit);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(boolean waitFlush, boolean waitSearcher);UpdateResponse commit(boolean waitFlush, boolean waitSearcher, boolean softCommit);Free text;;;Performs an explicit commit, causing pending documents to be committed for indexing ;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(boolean waitFlush, boolean waitSearcher);UpdateResponse commit(boolean waitFlush, boolean waitSearcher, boolean softCommit);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(boolean waitFlush, boolean waitSearcher);UpdateResponse commit(boolean waitFlush, boolean waitSearcher, boolean softCommit);@param;boolean waitFlush;boolean waitFlush;block until index changes are flushed to disk;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(boolean waitFlush, boolean waitSearcher);UpdateResponse commit(boolean waitFlush, boolean waitSearcher, boolean softCommit);@param;boolean waitSearcher;boolean waitSearcher;block until a new searcher is opened and registered as the main query searcher, making the changes visible;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(boolean waitFlush, boolean waitSearcher);UpdateResponse commit(boolean waitFlush, boolean waitSearcher, boolean softCommit);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(boolean waitFlush, boolean waitSearcher);UpdateResponse commit(boolean waitFlush, boolean waitSearcher, boolean softCommit);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(boolean waitFlush, boolean waitSearcher);UpdateResponse optimize(String collection);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(boolean waitFlush, boolean waitSearcher);UpdateResponse optimize(String collection);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(boolean waitFlush, boolean waitSearcher);UpdateResponse optimize(String collection);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(boolean waitFlush, boolean waitSearcher);UpdateResponse optimize();@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(boolean waitFlush, boolean waitSearcher);UpdateResponse optimize();@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(boolean waitFlush, boolean waitSearcher);UpdateResponse optimize();@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(boolean waitFlush, boolean waitSearcher);UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(boolean waitFlush, boolean waitSearcher);UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher);@param;boolean waitFlush;boolean waitFlush;block until index changes are flushed to disk;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(boolean waitFlush, boolean waitSearcher);UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher);@param;boolean waitSearcher;boolean waitSearcher;block until a new searcher is opened and registered as the main query searcher, making the changes visible;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(boolean waitFlush, boolean waitSearcher);UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(boolean waitFlush, boolean waitSearcher);UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(boolean waitFlush, boolean waitSearcher);UpdateResponse optimize(boolean waitFlush, boolean waitSearcher);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(boolean waitFlush, boolean waitSearcher);UpdateResponse optimize(boolean waitFlush, boolean waitSearcher);@param;boolean waitFlush;boolean waitFlush;block until index changes are flushed to disk;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(boolean waitFlush, boolean waitSearcher);UpdateResponse optimize(boolean waitFlush, boolean waitSearcher);@param;boolean waitSearcher;boolean waitSearcher;block until a new searcher is opened and registered as the main query searcher, making the changes visible;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(boolean waitFlush, boolean waitSearcher);UpdateResponse optimize(boolean waitFlush, boolean waitSearcher);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(boolean waitFlush, boolean waitSearcher);UpdateResponse optimize(boolean waitFlush, boolean waitSearcher);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(boolean waitFlush, boolean waitSearcher);UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher, int maxSegments);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(boolean waitFlush, boolean waitSearcher);UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher, int maxSegments);@param;boolean waitFlush;boolean waitFlush;block until index changes are flushed to disk;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(boolean waitFlush, boolean waitSearcher);UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher, int maxSegments);@param;boolean waitSearcher;boolean waitSearcher;block until a new searcher is opened and registered as the main query searcher, making the changes visible;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(boolean waitFlush, boolean waitSearcher);UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher, int maxSegments);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(boolean waitFlush, boolean waitSearcher);UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher, int maxSegments);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(boolean waitFlush, boolean waitSearcher);UpdateResponse optimize(boolean waitFlush, boolean waitSearcher, int maxSegments);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(boolean waitFlush, boolean waitSearcher);UpdateResponse optimize(boolean waitFlush, boolean waitSearcher, int maxSegments);@param;boolean waitFlush;boolean waitFlush;block until index changes are flushed to disk;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(boolean waitFlush, boolean waitSearcher);UpdateResponse optimize(boolean waitFlush, boolean waitSearcher, int maxSegments);@param;boolean waitSearcher;boolean waitSearcher;block until a new searcher is opened and registered as the main query searcher, making the changes visible;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(boolean waitFlush, boolean waitSearcher);UpdateResponse optimize(boolean waitFlush, boolean waitSearcher, int maxSegments);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(boolean waitFlush, boolean waitSearcher);UpdateResponse optimize(boolean waitFlush, boolean waitSearcher, int maxSegments);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(boolean waitFlush, boolean waitSearcher);UpdateResponse rollback(String collection);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(boolean waitFlush, boolean waitSearcher);UpdateResponse rollback(String collection);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(boolean waitFlush, boolean waitSearcher);UpdateResponse rollback(String collection);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(boolean waitFlush, boolean waitSearcher);UpdateResponse rollback();@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(boolean waitFlush, boolean waitSearcher);UpdateResponse rollback();@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(boolean waitFlush, boolean waitSearcher);UpdateResponse rollback();@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(boolean waitFlush, boolean waitSearcher);UpdateResponse deleteById(String collection, String id);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(boolean waitFlush, boolean waitSearcher);UpdateResponse deleteById(String collection, String id);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(boolean waitFlush, boolean waitSearcher);UpdateResponse deleteById(String collection, String id);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(boolean waitFlush, boolean waitSearcher);UpdateResponse deleteById(String id);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(boolean waitFlush, boolean waitSearcher);UpdateResponse deleteById(String id);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(boolean waitFlush, boolean waitSearcher);UpdateResponse deleteById(String id);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(boolean waitFlush, boolean waitSearcher);UpdateResponse deleteById(String collection, String id, int commitWithinMs);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(boolean waitFlush, boolean waitSearcher);UpdateResponse deleteById(String collection, String id, int commitWithinMs);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(boolean waitFlush, boolean waitSearcher);UpdateResponse deleteById(String collection, String id, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(boolean waitFlush, boolean waitSearcher);UpdateResponse deleteById(String id, int commitWithinMs);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(boolean waitFlush, boolean waitSearcher);UpdateResponse deleteById(String id, int commitWithinMs);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(boolean waitFlush, boolean waitSearcher);UpdateResponse deleteById(String id, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(boolean waitFlush, boolean waitSearcher);UpdateResponse deleteById(String collection, List ids);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(boolean waitFlush, boolean waitSearcher);UpdateResponse deleteById(String collection, List ids);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(boolean waitFlush, boolean waitSearcher);UpdateResponse deleteById(String collection, List ids);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(boolean waitFlush, boolean waitSearcher);UpdateResponse deleteById(List ids);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(boolean waitFlush, boolean waitSearcher);UpdateResponse deleteById(List ids);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(boolean waitFlush, boolean waitSearcher);UpdateResponse deleteById(List ids);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(boolean waitFlush, boolean waitSearcher);UpdateResponse deleteById(String collection, List ids, int commitWithinMs);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(boolean waitFlush, boolean waitSearcher);UpdateResponse deleteById(String collection, List ids, int commitWithinMs);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(boolean waitFlush, boolean waitSearcher);UpdateResponse deleteById(String collection, List ids, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(boolean waitFlush, boolean waitSearcher);UpdateResponse deleteById(List ids, int commitWithinMs);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(boolean waitFlush, boolean waitSearcher);UpdateResponse deleteById(List ids, int commitWithinMs);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(boolean waitFlush, boolean waitSearcher);UpdateResponse deleteById(List ids, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(boolean waitFlush, boolean waitSearcher);UpdateResponse deleteByQuery(String collection, String query);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(boolean waitFlush, boolean waitSearcher);UpdateResponse deleteByQuery(String collection, String query);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(boolean waitFlush, boolean waitSearcher);UpdateResponse deleteByQuery(String collection, String query);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(boolean waitFlush, boolean waitSearcher);UpdateResponse deleteByQuery(String query);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(boolean waitFlush, boolean waitSearcher);UpdateResponse deleteByQuery(String query);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(boolean waitFlush, boolean waitSearcher);UpdateResponse deleteByQuery(String query);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(boolean waitFlush, boolean waitSearcher);UpdateResponse deleteByQuery(String collection, String query, int commitWithinMs);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(boolean waitFlush, boolean waitSearcher);UpdateResponse deleteByQuery(String collection, String query, int commitWithinMs);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(boolean waitFlush, boolean waitSearcher);UpdateResponse deleteByQuery(String collection, String query, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(boolean waitFlush, boolean waitSearcher);UpdateResponse deleteByQuery(String query, int commitWithinMs);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(boolean waitFlush, boolean waitSearcher);UpdateResponse deleteByQuery(String query, int commitWithinMs);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(boolean waitFlush, boolean waitSearcher);UpdateResponse deleteByQuery(String query, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(boolean waitFlush, boolean waitSearcher);SolrPingResponse ping();@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(boolean waitFlush, boolean waitSearcher);SolrPingResponse ping();@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(boolean waitFlush, boolean waitSearcher);QueryResponse query(String collection, SolrParams params);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(boolean waitFlush, boolean waitSearcher);QueryResponse query(String collection, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(boolean waitFlush, boolean waitSearcher);QueryResponse query(SolrParams params);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(boolean waitFlush, boolean waitSearcher);QueryResponse query(SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(boolean waitFlush, boolean waitSearcher);QueryResponse query(String collection, SolrParams params, METHOD method);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(boolean waitFlush, boolean waitSearcher);QueryResponse query(String collection, SolrParams params, METHOD method);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(boolean waitFlush, boolean waitSearcher);QueryResponse query(SolrParams params, METHOD method);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(boolean waitFlush, boolean waitSearcher);QueryResponse query(SolrParams params, METHOD method);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(boolean waitFlush, boolean waitSearcher);QueryResponse queryAndStreamResponse(String collection, SolrParams params, StreamingResponseCallback callback);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(boolean waitFlush, boolean waitSearcher);QueryResponse queryAndStreamResponse(String collection, SolrParams params, StreamingResponseCallback callback);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(boolean waitFlush, boolean waitSearcher);QueryResponse queryAndStreamResponse(SolrParams params, StreamingResponseCallback callback);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(boolean waitFlush, boolean waitSearcher);QueryResponse queryAndStreamResponse(SolrParams params, StreamingResponseCallback callback);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(boolean waitFlush, boolean waitSearcher);SolrDocument getById(String collection, String id);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(boolean waitFlush, boolean waitSearcher);SolrDocument getById(String collection, String id);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(boolean waitFlush, boolean waitSearcher);SolrDocument getById(String id);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(boolean waitFlush, boolean waitSearcher);SolrDocument getById(String id);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(boolean waitFlush, boolean waitSearcher);SolrDocument getById(String collection, String id, SolrParams params);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(boolean waitFlush, boolean waitSearcher);SolrDocument getById(String collection, String id, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(boolean waitFlush, boolean waitSearcher);SolrDocument getById(String id, SolrParams params);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(boolean waitFlush, boolean waitSearcher);SolrDocument getById(String id, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(boolean waitFlush, boolean waitSearcher);SolrDocumentList getById(String collection, Collection ids);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(boolean waitFlush, boolean waitSearcher);SolrDocumentList getById(String collection, Collection ids);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(boolean waitFlush, boolean waitSearcher);SolrDocumentList getById(Collection ids);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(boolean waitFlush, boolean waitSearcher);SolrDocumentList getById(Collection ids);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(boolean waitFlush, boolean waitSearcher);SolrDocumentList getById(String collection, Collection ids, SolrParams params);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(boolean waitFlush, boolean waitSearcher);SolrDocumentList getById(String collection, Collection ids, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(boolean waitFlush, boolean waitSearcher);SolrDocumentList getById(Collection ids, SolrParams params);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(boolean waitFlush, boolean waitSearcher);SolrDocumentList getById(Collection ids, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(boolean waitFlush, boolean waitSearcher);NamedList request(SolrRequest request, String collection);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(boolean waitFlush, boolean waitSearcher);NamedList request(SolrRequest request, String collection);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(boolean waitFlush, boolean waitSearcher);NamedList request(SolrRequest request);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(boolean waitFlush, boolean waitSearcher);NamedList request(SolrRequest request);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher, boolean softCommit);UpdateResponse commit(boolean waitFlush, boolean waitSearcher, boolean softCommit);Free text;;;Performs an explicit commit, causing pending documents to be committed for indexing ;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher, boolean softCommit);UpdateResponse commit(boolean waitFlush, boolean waitSearcher, boolean softCommit);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher, boolean softCommit);UpdateResponse commit(boolean waitFlush, boolean waitSearcher, boolean softCommit);@param;boolean waitFlush;boolean waitFlush;block until index changes are flushed to disk;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher, boolean softCommit);UpdateResponse commit(boolean waitFlush, boolean waitSearcher, boolean softCommit);@param;boolean waitSearcher;boolean waitSearcher;block until a new searcher is opened and registered as the main query searcher, making the changes visible;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher, boolean softCommit);UpdateResponse commit(boolean waitFlush, boolean waitSearcher, boolean softCommit);@param;boolean softCommit;boolean softCommit;makes index changes visible while neither fsync-ing index files nor writing a new index descriptor;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher, boolean softCommit);UpdateResponse commit(boolean waitFlush, boolean waitSearcher, boolean softCommit);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher, boolean softCommit);UpdateResponse commit(boolean waitFlush, boolean waitSearcher, boolean softCommit);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher, boolean softCommit);UpdateResponse optimize(String collection);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher, boolean softCommit);UpdateResponse optimize(String collection);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher, boolean softCommit);UpdateResponse optimize(String collection);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher, boolean softCommit);UpdateResponse optimize();@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher, boolean softCommit);UpdateResponse optimize();@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher, boolean softCommit);UpdateResponse optimize();@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher, boolean softCommit);UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher, boolean softCommit);UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher);@param;boolean waitFlush;boolean waitFlush;block until index changes are flushed to disk;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher, boolean softCommit);UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher);@param;boolean waitSearcher;boolean waitSearcher;block until a new searcher is opened and registered as the main query searcher, making the changes visible;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher, boolean softCommit);UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher, boolean softCommit);UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher, boolean softCommit);UpdateResponse optimize(boolean waitFlush, boolean waitSearcher);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher, boolean softCommit);UpdateResponse optimize(boolean waitFlush, boolean waitSearcher);@param;boolean waitFlush;boolean waitFlush;block until index changes are flushed to disk;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher, boolean softCommit);UpdateResponse optimize(boolean waitFlush, boolean waitSearcher);@param;boolean waitSearcher;boolean waitSearcher;block until a new searcher is opened and registered as the main query searcher, making the changes visible;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher, boolean softCommit);UpdateResponse optimize(boolean waitFlush, boolean waitSearcher);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher, boolean softCommit);UpdateResponse optimize(boolean waitFlush, boolean waitSearcher);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher, boolean softCommit);UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher, int maxSegments);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher, boolean softCommit);UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher, int maxSegments);@param;boolean waitFlush;boolean waitFlush;block until index changes are flushed to disk;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher, boolean softCommit);UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher, int maxSegments);@param;boolean waitSearcher;boolean waitSearcher;block until a new searcher is opened and registered as the main query searcher, making the changes visible;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher, boolean softCommit);UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher, int maxSegments);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher, boolean softCommit);UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher, int maxSegments);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher, boolean softCommit);UpdateResponse optimize(boolean waitFlush, boolean waitSearcher, int maxSegments);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher, boolean softCommit);UpdateResponse optimize(boolean waitFlush, boolean waitSearcher, int maxSegments);@param;boolean waitFlush;boolean waitFlush;block until index changes are flushed to disk;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher, boolean softCommit);UpdateResponse optimize(boolean waitFlush, boolean waitSearcher, int maxSegments);@param;boolean waitSearcher;boolean waitSearcher;block until a new searcher is opened and registered as the main query searcher, making the changes visible;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher, boolean softCommit);UpdateResponse optimize(boolean waitFlush, boolean waitSearcher, int maxSegments);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher, boolean softCommit);UpdateResponse optimize(boolean waitFlush, boolean waitSearcher, int maxSegments);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher, boolean softCommit);UpdateResponse rollback(String collection);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher, boolean softCommit);UpdateResponse rollback(String collection);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher, boolean softCommit);UpdateResponse rollback(String collection);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher, boolean softCommit);UpdateResponse rollback();@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher, boolean softCommit);UpdateResponse rollback();@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher, boolean softCommit);UpdateResponse rollback();@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher, boolean softCommit);UpdateResponse deleteById(String collection, String id);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher, boolean softCommit);UpdateResponse deleteById(String collection, String id);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher, boolean softCommit);UpdateResponse deleteById(String collection, String id);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher, boolean softCommit);UpdateResponse deleteById(String id);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher, boolean softCommit);UpdateResponse deleteById(String id);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher, boolean softCommit);UpdateResponse deleteById(String id);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher, boolean softCommit);UpdateResponse deleteById(String collection, String id, int commitWithinMs);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher, boolean softCommit);UpdateResponse deleteById(String collection, String id, int commitWithinMs);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher, boolean softCommit);UpdateResponse deleteById(String collection, String id, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher, boolean softCommit);UpdateResponse deleteById(String id, int commitWithinMs);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher, boolean softCommit);UpdateResponse deleteById(String id, int commitWithinMs);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher, boolean softCommit);UpdateResponse deleteById(String id, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher, boolean softCommit);UpdateResponse deleteById(String collection, List ids);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher, boolean softCommit);UpdateResponse deleteById(String collection, List ids);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher, boolean softCommit);UpdateResponse deleteById(String collection, List ids);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher, boolean softCommit);UpdateResponse deleteById(List ids);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher, boolean softCommit);UpdateResponse deleteById(List ids);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher, boolean softCommit);UpdateResponse deleteById(List ids);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher, boolean softCommit);UpdateResponse deleteById(String collection, List ids, int commitWithinMs);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher, boolean softCommit);UpdateResponse deleteById(String collection, List ids, int commitWithinMs);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher, boolean softCommit);UpdateResponse deleteById(String collection, List ids, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher, boolean softCommit);UpdateResponse deleteById(List ids, int commitWithinMs);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher, boolean softCommit);UpdateResponse deleteById(List ids, int commitWithinMs);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher, boolean softCommit);UpdateResponse deleteById(List ids, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher, boolean softCommit);UpdateResponse deleteByQuery(String collection, String query);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher, boolean softCommit);UpdateResponse deleteByQuery(String collection, String query);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher, boolean softCommit);UpdateResponse deleteByQuery(String collection, String query);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher, boolean softCommit);UpdateResponse deleteByQuery(String query);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher, boolean softCommit);UpdateResponse deleteByQuery(String query);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher, boolean softCommit);UpdateResponse deleteByQuery(String query);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher, boolean softCommit);UpdateResponse deleteByQuery(String collection, String query, int commitWithinMs);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher, boolean softCommit);UpdateResponse deleteByQuery(String collection, String query, int commitWithinMs);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher, boolean softCommit);UpdateResponse deleteByQuery(String collection, String query, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher, boolean softCommit);UpdateResponse deleteByQuery(String query, int commitWithinMs);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher, boolean softCommit);UpdateResponse deleteByQuery(String query, int commitWithinMs);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher, boolean softCommit);UpdateResponse deleteByQuery(String query, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher, boolean softCommit);SolrPingResponse ping();@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher, boolean softCommit);SolrPingResponse ping();@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher, boolean softCommit);QueryResponse query(String collection, SolrParams params);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher, boolean softCommit);QueryResponse query(String collection, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher, boolean softCommit);QueryResponse query(SolrParams params);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher, boolean softCommit);QueryResponse query(SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher, boolean softCommit);QueryResponse query(String collection, SolrParams params, METHOD method);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher, boolean softCommit);QueryResponse query(String collection, SolrParams params, METHOD method);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher, boolean softCommit);QueryResponse query(SolrParams params, METHOD method);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher, boolean softCommit);QueryResponse query(SolrParams params, METHOD method);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher, boolean softCommit);QueryResponse queryAndStreamResponse(String collection, SolrParams params, StreamingResponseCallback callback);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher, boolean softCommit);QueryResponse queryAndStreamResponse(String collection, SolrParams params, StreamingResponseCallback callback);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher, boolean softCommit);QueryResponse queryAndStreamResponse(SolrParams params, StreamingResponseCallback callback);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher, boolean softCommit);QueryResponse queryAndStreamResponse(SolrParams params, StreamingResponseCallback callback);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher, boolean softCommit);SolrDocument getById(String collection, String id);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher, boolean softCommit);SolrDocument getById(String collection, String id);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher, boolean softCommit);SolrDocument getById(String id);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher, boolean softCommit);SolrDocument getById(String id);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher, boolean softCommit);SolrDocument getById(String collection, String id, SolrParams params);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher, boolean softCommit);SolrDocument getById(String collection, String id, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher, boolean softCommit);SolrDocument getById(String id, SolrParams params);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher, boolean softCommit);SolrDocument getById(String id, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher, boolean softCommit);SolrDocumentList getById(String collection, Collection ids);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher, boolean softCommit);SolrDocumentList getById(String collection, Collection ids);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher, boolean softCommit);SolrDocumentList getById(Collection ids);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher, boolean softCommit);SolrDocumentList getById(Collection ids);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher, boolean softCommit);SolrDocumentList getById(String collection, Collection ids, SolrParams params);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher, boolean softCommit);SolrDocumentList getById(String collection, Collection ids, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher, boolean softCommit);SolrDocumentList getById(Collection ids, SolrParams params);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher, boolean softCommit);SolrDocumentList getById(Collection ids, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher, boolean softCommit);NamedList request(SolrRequest request, String collection);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher, boolean softCommit);NamedList request(SolrRequest request, String collection);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher, boolean softCommit);NamedList request(SolrRequest request);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(String collection, boolean waitFlush, boolean waitSearcher, boolean softCommit);NamedList request(SolrRequest request);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(boolean waitFlush, boolean waitSearcher, boolean softCommit);UpdateResponse optimize(String collection);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(boolean waitFlush, boolean waitSearcher, boolean softCommit);UpdateResponse optimize(String collection);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(boolean waitFlush, boolean waitSearcher, boolean softCommit);UpdateResponse optimize(String collection);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(boolean waitFlush, boolean waitSearcher, boolean softCommit);UpdateResponse optimize();@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(boolean waitFlush, boolean waitSearcher, boolean softCommit);UpdateResponse optimize();@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(boolean waitFlush, boolean waitSearcher, boolean softCommit);UpdateResponse optimize();@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(boolean waitFlush, boolean waitSearcher, boolean softCommit);UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(boolean waitFlush, boolean waitSearcher, boolean softCommit);UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher);@param;boolean waitFlush;boolean waitFlush;block until index changes are flushed to disk;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(boolean waitFlush, boolean waitSearcher, boolean softCommit);UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher);@param;boolean waitSearcher;boolean waitSearcher;block until a new searcher is opened and registered as the main query searcher, making the changes visible;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(boolean waitFlush, boolean waitSearcher, boolean softCommit);UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(boolean waitFlush, boolean waitSearcher, boolean softCommit);UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(boolean waitFlush, boolean waitSearcher, boolean softCommit);UpdateResponse optimize(boolean waitFlush, boolean waitSearcher);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(boolean waitFlush, boolean waitSearcher, boolean softCommit);UpdateResponse optimize(boolean waitFlush, boolean waitSearcher);@param;boolean waitFlush;boolean waitFlush;block until index changes are flushed to disk;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(boolean waitFlush, boolean waitSearcher, boolean softCommit);UpdateResponse optimize(boolean waitFlush, boolean waitSearcher);@param;boolean waitSearcher;boolean waitSearcher;block until a new searcher is opened and registered as the main query searcher, making the changes visible;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(boolean waitFlush, boolean waitSearcher, boolean softCommit);UpdateResponse optimize(boolean waitFlush, boolean waitSearcher);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(boolean waitFlush, boolean waitSearcher, boolean softCommit);UpdateResponse optimize(boolean waitFlush, boolean waitSearcher);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(boolean waitFlush, boolean waitSearcher, boolean softCommit);UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher, int maxSegments);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(boolean waitFlush, boolean waitSearcher, boolean softCommit);UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher, int maxSegments);@param;boolean waitFlush;boolean waitFlush;block until index changes are flushed to disk;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(boolean waitFlush, boolean waitSearcher, boolean softCommit);UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher, int maxSegments);@param;boolean waitSearcher;boolean waitSearcher;block until a new searcher is opened and registered as the main query searcher, making the changes visible;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(boolean waitFlush, boolean waitSearcher, boolean softCommit);UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher, int maxSegments);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(boolean waitFlush, boolean waitSearcher, boolean softCommit);UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher, int maxSegments);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(boolean waitFlush, boolean waitSearcher, boolean softCommit);UpdateResponse optimize(boolean waitFlush, boolean waitSearcher, int maxSegments);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(boolean waitFlush, boolean waitSearcher, boolean softCommit);UpdateResponse optimize(boolean waitFlush, boolean waitSearcher, int maxSegments);@param;boolean waitFlush;boolean waitFlush;block until index changes are flushed to disk;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(boolean waitFlush, boolean waitSearcher, boolean softCommit);UpdateResponse optimize(boolean waitFlush, boolean waitSearcher, int maxSegments);@param;boolean waitSearcher;boolean waitSearcher;block until a new searcher is opened and registered as the main query searcher, making the changes visible;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(boolean waitFlush, boolean waitSearcher, boolean softCommit);UpdateResponse optimize(boolean waitFlush, boolean waitSearcher, int maxSegments);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(boolean waitFlush, boolean waitSearcher, boolean softCommit);UpdateResponse optimize(boolean waitFlush, boolean waitSearcher, int maxSegments);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(boolean waitFlush, boolean waitSearcher, boolean softCommit);UpdateResponse rollback(String collection);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(boolean waitFlush, boolean waitSearcher, boolean softCommit);UpdateResponse rollback(String collection);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(boolean waitFlush, boolean waitSearcher, boolean softCommit);UpdateResponse rollback(String collection);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(boolean waitFlush, boolean waitSearcher, boolean softCommit);UpdateResponse rollback();@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(boolean waitFlush, boolean waitSearcher, boolean softCommit);UpdateResponse rollback();@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(boolean waitFlush, boolean waitSearcher, boolean softCommit);UpdateResponse rollback();@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(boolean waitFlush, boolean waitSearcher, boolean softCommit);UpdateResponse deleteById(String collection, String id);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(boolean waitFlush, boolean waitSearcher, boolean softCommit);UpdateResponse deleteById(String collection, String id);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(boolean waitFlush, boolean waitSearcher, boolean softCommit);UpdateResponse deleteById(String collection, String id);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(boolean waitFlush, boolean waitSearcher, boolean softCommit);UpdateResponse deleteById(String id);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(boolean waitFlush, boolean waitSearcher, boolean softCommit);UpdateResponse deleteById(String id);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(boolean waitFlush, boolean waitSearcher, boolean softCommit);UpdateResponse deleteById(String id);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(boolean waitFlush, boolean waitSearcher, boolean softCommit);UpdateResponse deleteById(String collection, String id, int commitWithinMs);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(boolean waitFlush, boolean waitSearcher, boolean softCommit);UpdateResponse deleteById(String collection, String id, int commitWithinMs);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(boolean waitFlush, boolean waitSearcher, boolean softCommit);UpdateResponse deleteById(String collection, String id, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(boolean waitFlush, boolean waitSearcher, boolean softCommit);UpdateResponse deleteById(String id, int commitWithinMs);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(boolean waitFlush, boolean waitSearcher, boolean softCommit);UpdateResponse deleteById(String id, int commitWithinMs);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(boolean waitFlush, boolean waitSearcher, boolean softCommit);UpdateResponse deleteById(String id, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(boolean waitFlush, boolean waitSearcher, boolean softCommit);UpdateResponse deleteById(String collection, List ids);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(boolean waitFlush, boolean waitSearcher, boolean softCommit);UpdateResponse deleteById(String collection, List ids);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(boolean waitFlush, boolean waitSearcher, boolean softCommit);UpdateResponse deleteById(String collection, List ids);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(boolean waitFlush, boolean waitSearcher, boolean softCommit);UpdateResponse deleteById(List ids);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(boolean waitFlush, boolean waitSearcher, boolean softCommit);UpdateResponse deleteById(List ids);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(boolean waitFlush, boolean waitSearcher, boolean softCommit);UpdateResponse deleteById(List ids);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(boolean waitFlush, boolean waitSearcher, boolean softCommit);UpdateResponse deleteById(String collection, List ids, int commitWithinMs);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(boolean waitFlush, boolean waitSearcher, boolean softCommit);UpdateResponse deleteById(String collection, List ids, int commitWithinMs);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(boolean waitFlush, boolean waitSearcher, boolean softCommit);UpdateResponse deleteById(String collection, List ids, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(boolean waitFlush, boolean waitSearcher, boolean softCommit);UpdateResponse deleteById(List ids, int commitWithinMs);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(boolean waitFlush, boolean waitSearcher, boolean softCommit);UpdateResponse deleteById(List ids, int commitWithinMs);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(boolean waitFlush, boolean waitSearcher, boolean softCommit);UpdateResponse deleteById(List ids, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(boolean waitFlush, boolean waitSearcher, boolean softCommit);UpdateResponse deleteByQuery(String collection, String query);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(boolean waitFlush, boolean waitSearcher, boolean softCommit);UpdateResponse deleteByQuery(String collection, String query);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(boolean waitFlush, boolean waitSearcher, boolean softCommit);UpdateResponse deleteByQuery(String collection, String query);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(boolean waitFlush, boolean waitSearcher, boolean softCommit);UpdateResponse deleteByQuery(String query);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(boolean waitFlush, boolean waitSearcher, boolean softCommit);UpdateResponse deleteByQuery(String query);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(boolean waitFlush, boolean waitSearcher, boolean softCommit);UpdateResponse deleteByQuery(String query);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(boolean waitFlush, boolean waitSearcher, boolean softCommit);UpdateResponse deleteByQuery(String collection, String query, int commitWithinMs);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(boolean waitFlush, boolean waitSearcher, boolean softCommit);UpdateResponse deleteByQuery(String collection, String query, int commitWithinMs);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(boolean waitFlush, boolean waitSearcher, boolean softCommit);UpdateResponse deleteByQuery(String collection, String query, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(boolean waitFlush, boolean waitSearcher, boolean softCommit);UpdateResponse deleteByQuery(String query, int commitWithinMs);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(boolean waitFlush, boolean waitSearcher, boolean softCommit);UpdateResponse deleteByQuery(String query, int commitWithinMs);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(boolean waitFlush, boolean waitSearcher, boolean softCommit);UpdateResponse deleteByQuery(String query, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(boolean waitFlush, boolean waitSearcher, boolean softCommit);SolrPingResponse ping();@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(boolean waitFlush, boolean waitSearcher, boolean softCommit);SolrPingResponse ping();@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(boolean waitFlush, boolean waitSearcher, boolean softCommit);QueryResponse query(String collection, SolrParams params);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(boolean waitFlush, boolean waitSearcher, boolean softCommit);QueryResponse query(String collection, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(boolean waitFlush, boolean waitSearcher, boolean softCommit);QueryResponse query(SolrParams params);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(boolean waitFlush, boolean waitSearcher, boolean softCommit);QueryResponse query(SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(boolean waitFlush, boolean waitSearcher, boolean softCommit);QueryResponse query(String collection, SolrParams params, METHOD method);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(boolean waitFlush, boolean waitSearcher, boolean softCommit);QueryResponse query(String collection, SolrParams params, METHOD method);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(boolean waitFlush, boolean waitSearcher, boolean softCommit);QueryResponse query(SolrParams params, METHOD method);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(boolean waitFlush, boolean waitSearcher, boolean softCommit);QueryResponse query(SolrParams params, METHOD method);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(boolean waitFlush, boolean waitSearcher, boolean softCommit);QueryResponse queryAndStreamResponse(String collection, SolrParams params, StreamingResponseCallback callback);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(boolean waitFlush, boolean waitSearcher, boolean softCommit);QueryResponse queryAndStreamResponse(String collection, SolrParams params, StreamingResponseCallback callback);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(boolean waitFlush, boolean waitSearcher, boolean softCommit);QueryResponse queryAndStreamResponse(SolrParams params, StreamingResponseCallback callback);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(boolean waitFlush, boolean waitSearcher, boolean softCommit);QueryResponse queryAndStreamResponse(SolrParams params, StreamingResponseCallback callback);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(boolean waitFlush, boolean waitSearcher, boolean softCommit);SolrDocument getById(String collection, String id);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(boolean waitFlush, boolean waitSearcher, boolean softCommit);SolrDocument getById(String collection, String id);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(boolean waitFlush, boolean waitSearcher, boolean softCommit);SolrDocument getById(String id);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(boolean waitFlush, boolean waitSearcher, boolean softCommit);SolrDocument getById(String id);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(boolean waitFlush, boolean waitSearcher, boolean softCommit);SolrDocument getById(String collection, String id, SolrParams params);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(boolean waitFlush, boolean waitSearcher, boolean softCommit);SolrDocument getById(String collection, String id, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(boolean waitFlush, boolean waitSearcher, boolean softCommit);SolrDocument getById(String id, SolrParams params);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(boolean waitFlush, boolean waitSearcher, boolean softCommit);SolrDocument getById(String id, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(boolean waitFlush, boolean waitSearcher, boolean softCommit);SolrDocumentList getById(String collection, Collection ids);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(boolean waitFlush, boolean waitSearcher, boolean softCommit);SolrDocumentList getById(String collection, Collection ids);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(boolean waitFlush, boolean waitSearcher, boolean softCommit);SolrDocumentList getById(Collection ids);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(boolean waitFlush, boolean waitSearcher, boolean softCommit);SolrDocumentList getById(Collection ids);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(boolean waitFlush, boolean waitSearcher, boolean softCommit);SolrDocumentList getById(String collection, Collection ids, SolrParams params);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(boolean waitFlush, boolean waitSearcher, boolean softCommit);SolrDocumentList getById(String collection, Collection ids, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(boolean waitFlush, boolean waitSearcher, boolean softCommit);SolrDocumentList getById(Collection ids, SolrParams params);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(boolean waitFlush, boolean waitSearcher, boolean softCommit);SolrDocumentList getById(Collection ids, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(boolean waitFlush, boolean waitSearcher, boolean softCommit);NamedList request(SolrRequest request, String collection);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(boolean waitFlush, boolean waitSearcher, boolean softCommit);NamedList request(SolrRequest request, String collection);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(boolean waitFlush, boolean waitSearcher, boolean softCommit);NamedList request(SolrRequest request);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse commit(boolean waitFlush, boolean waitSearcher, boolean softCommit);NamedList request(SolrRequest request);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection);UpdateResponse optimize();Free text;;;Performs an explicit optimize, causing a merge of all segments to one. waitFlush=true and waitSearcher=true to be inline with the defaults for plain HTTP access Note: In most cases it is not required to do explicit optimize ;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection);UpdateResponse optimize();@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection);UpdateResponse optimize();@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection);UpdateResponse optimize();@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection);UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection);UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher);@param;String collection;String collection;the Solr collection to send the optimize to;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection);UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection);UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection);UpdateResponse optimize(boolean waitFlush, boolean waitSearcher);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection);UpdateResponse optimize(boolean waitFlush, boolean waitSearcher);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection);UpdateResponse optimize(boolean waitFlush, boolean waitSearcher);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection);UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher, int maxSegments);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection);UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher, int maxSegments);@param;String collection;String collection;the Solr collection to send the optimize to;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection);UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher, int maxSegments);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection);UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher, int maxSegments);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection);UpdateResponse optimize(boolean waitFlush, boolean waitSearcher, int maxSegments);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection);UpdateResponse optimize(boolean waitFlush, boolean waitSearcher, int maxSegments);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection);UpdateResponse optimize(boolean waitFlush, boolean waitSearcher, int maxSegments);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection);UpdateResponse rollback(String collection);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection);UpdateResponse rollback(String collection);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection);UpdateResponse rollback(String collection);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection);UpdateResponse rollback();@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection);UpdateResponse rollback();@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection);UpdateResponse rollback();@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection);UpdateResponse deleteById(String collection, String id);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection);UpdateResponse deleteById(String collection, String id);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection);UpdateResponse deleteById(String collection, String id);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection);UpdateResponse deleteById(String id);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection);UpdateResponse deleteById(String id);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection);UpdateResponse deleteById(String id);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection);UpdateResponse deleteById(String collection, String id, int commitWithinMs);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection);UpdateResponse deleteById(String collection, String id, int commitWithinMs);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection);UpdateResponse deleteById(String collection, String id, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection);UpdateResponse deleteById(String id, int commitWithinMs);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection);UpdateResponse deleteById(String id, int commitWithinMs);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection);UpdateResponse deleteById(String id, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection);UpdateResponse deleteById(String collection, List ids);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection);UpdateResponse deleteById(String collection, List ids);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection);UpdateResponse deleteById(String collection, List ids);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection);UpdateResponse deleteById(List ids);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection);UpdateResponse deleteById(List ids);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection);UpdateResponse deleteById(List ids);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection);UpdateResponse deleteById(String collection, List ids, int commitWithinMs);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection);UpdateResponse deleteById(String collection, List ids, int commitWithinMs);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection);UpdateResponse deleteById(String collection, List ids, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection);UpdateResponse deleteById(List ids, int commitWithinMs);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection);UpdateResponse deleteById(List ids, int commitWithinMs);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection);UpdateResponse deleteById(List ids, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection);UpdateResponse deleteByQuery(String collection, String query);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection);UpdateResponse deleteByQuery(String collection, String query);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection);UpdateResponse deleteByQuery(String collection, String query);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection);UpdateResponse deleteByQuery(String query);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection);UpdateResponse deleteByQuery(String query);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection);UpdateResponse deleteByQuery(String query);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection);UpdateResponse deleteByQuery(String collection, String query, int commitWithinMs);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection);UpdateResponse deleteByQuery(String collection, String query, int commitWithinMs);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection);UpdateResponse deleteByQuery(String collection, String query, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection);UpdateResponse deleteByQuery(String query, int commitWithinMs);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection);UpdateResponse deleteByQuery(String query, int commitWithinMs);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection);UpdateResponse deleteByQuery(String query, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection);SolrPingResponse ping();@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection);SolrPingResponse ping();@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection);QueryResponse query(String collection, SolrParams params);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection);QueryResponse query(String collection, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection);QueryResponse query(SolrParams params);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection);QueryResponse query(SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection);QueryResponse query(String collection, SolrParams params, METHOD method);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection);QueryResponse query(String collection, SolrParams params, METHOD method);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection);QueryResponse query(SolrParams params, METHOD method);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection);QueryResponse query(SolrParams params, METHOD method);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection);QueryResponse queryAndStreamResponse(String collection, SolrParams params, StreamingResponseCallback callback);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection);QueryResponse queryAndStreamResponse(String collection, SolrParams params, StreamingResponseCallback callback);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection);QueryResponse queryAndStreamResponse(SolrParams params, StreamingResponseCallback callback);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection);QueryResponse queryAndStreamResponse(SolrParams params, StreamingResponseCallback callback);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection);SolrDocument getById(String collection, String id);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection);SolrDocument getById(String collection, String id);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection);SolrDocument getById(String id);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection);SolrDocument getById(String id);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection);SolrDocument getById(String collection, String id, SolrParams params);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection);SolrDocument getById(String collection, String id, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection);SolrDocument getById(String id, SolrParams params);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection);SolrDocument getById(String id, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection);SolrDocumentList getById(String collection, Collection ids);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection);SolrDocumentList getById(String collection, Collection ids);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection);SolrDocumentList getById(Collection ids);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection);SolrDocumentList getById(Collection ids);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection);SolrDocumentList getById(String collection, Collection ids, SolrParams params);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection);SolrDocumentList getById(String collection, Collection ids, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection);SolrDocumentList getById(Collection ids, SolrParams params);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection);SolrDocumentList getById(Collection ids, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection);NamedList request(SolrRequest request, String collection);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection);NamedList request(SolrRequest request, String collection);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection);NamedList request(SolrRequest request);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection);NamedList request(SolrRequest request);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize();UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize();UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize();UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize();UpdateResponse optimize(boolean waitFlush, boolean waitSearcher);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize();UpdateResponse optimize(boolean waitFlush, boolean waitSearcher);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize();UpdateResponse optimize(boolean waitFlush, boolean waitSearcher);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize();UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher, int maxSegments);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize();UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher, int maxSegments);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize();UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher, int maxSegments);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize();UpdateResponse optimize(boolean waitFlush, boolean waitSearcher, int maxSegments);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize();UpdateResponse optimize(boolean waitFlush, boolean waitSearcher, int maxSegments);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize();UpdateResponse optimize(boolean waitFlush, boolean waitSearcher, int maxSegments);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize();UpdateResponse rollback(String collection);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize();UpdateResponse rollback(String collection);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize();UpdateResponse rollback(String collection);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize();UpdateResponse rollback();@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize();UpdateResponse rollback();@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize();UpdateResponse rollback();@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize();UpdateResponse deleteById(String collection, String id);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize();UpdateResponse deleteById(String collection, String id);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize();UpdateResponse deleteById(String collection, String id);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize();UpdateResponse deleteById(String id);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize();UpdateResponse deleteById(String id);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize();UpdateResponse deleteById(String id);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize();UpdateResponse deleteById(String collection, String id, int commitWithinMs);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize();UpdateResponse deleteById(String collection, String id, int commitWithinMs);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize();UpdateResponse deleteById(String collection, String id, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize();UpdateResponse deleteById(String id, int commitWithinMs);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize();UpdateResponse deleteById(String id, int commitWithinMs);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize();UpdateResponse deleteById(String id, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize();UpdateResponse deleteById(String collection, List ids);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize();UpdateResponse deleteById(String collection, List ids);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize();UpdateResponse deleteById(String collection, List ids);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize();UpdateResponse deleteById(List ids);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize();UpdateResponse deleteById(List ids);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize();UpdateResponse deleteById(List ids);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize();UpdateResponse deleteById(String collection, List ids, int commitWithinMs);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize();UpdateResponse deleteById(String collection, List ids, int commitWithinMs);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize();UpdateResponse deleteById(String collection, List ids, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize();UpdateResponse deleteById(List ids, int commitWithinMs);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize();UpdateResponse deleteById(List ids, int commitWithinMs);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize();UpdateResponse deleteById(List ids, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize();UpdateResponse deleteByQuery(String collection, String query);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize();UpdateResponse deleteByQuery(String collection, String query);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize();UpdateResponse deleteByQuery(String collection, String query);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize();UpdateResponse deleteByQuery(String query);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize();UpdateResponse deleteByQuery(String query);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize();UpdateResponse deleteByQuery(String query);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize();UpdateResponse deleteByQuery(String collection, String query, int commitWithinMs);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize();UpdateResponse deleteByQuery(String collection, String query, int commitWithinMs);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize();UpdateResponse deleteByQuery(String collection, String query, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize();UpdateResponse deleteByQuery(String query, int commitWithinMs);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize();UpdateResponse deleteByQuery(String query, int commitWithinMs);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize();UpdateResponse deleteByQuery(String query, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize();SolrPingResponse ping();@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize();SolrPingResponse ping();@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize();QueryResponse query(String collection, SolrParams params);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize();QueryResponse query(String collection, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize();QueryResponse query(SolrParams params);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize();QueryResponse query(SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize();QueryResponse query(String collection, SolrParams params, METHOD method);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize();QueryResponse query(String collection, SolrParams params, METHOD method);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize();QueryResponse query(SolrParams params, METHOD method);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize();QueryResponse query(SolrParams params, METHOD method);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize();QueryResponse queryAndStreamResponse(String collection, SolrParams params, StreamingResponseCallback callback);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize();QueryResponse queryAndStreamResponse(String collection, SolrParams params, StreamingResponseCallback callback);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize();QueryResponse queryAndStreamResponse(SolrParams params, StreamingResponseCallback callback);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize();QueryResponse queryAndStreamResponse(SolrParams params, StreamingResponseCallback callback);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize();SolrDocument getById(String collection, String id);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize();SolrDocument getById(String collection, String id);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize();SolrDocument getById(String id);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize();SolrDocument getById(String id);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize();SolrDocument getById(String collection, String id, SolrParams params);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize();SolrDocument getById(String collection, String id, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize();SolrDocument getById(String id, SolrParams params);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize();SolrDocument getById(String id, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize();SolrDocumentList getById(String collection, Collection ids);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize();SolrDocumentList getById(String collection, Collection ids);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize();SolrDocumentList getById(Collection ids);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize();SolrDocumentList getById(Collection ids);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize();SolrDocumentList getById(String collection, Collection ids, SolrParams params);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize();SolrDocumentList getById(String collection, Collection ids, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize();SolrDocumentList getById(Collection ids, SolrParams params);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize();SolrDocumentList getById(Collection ids, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize();NamedList request(SolrRequest request, String collection);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize();NamedList request(SolrRequest request, String collection);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize();NamedList request(SolrRequest request);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize();NamedList request(SolrRequest request);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher);UpdateResponse optimize(boolean waitFlush, boolean waitSearcher);Free text;;;Performs an explicit optimize, causing a merge of all segments to one. <p> Note: In most cases it is not required to do explicit optimize ;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher);UpdateResponse optimize(boolean waitFlush, boolean waitSearcher);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher);UpdateResponse optimize(boolean waitFlush, boolean waitSearcher);@param;boolean waitFlush;boolean waitFlush;block until index changes are flushed to disk;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher);UpdateResponse optimize(boolean waitFlush, boolean waitSearcher);@param;boolean waitSearcher;boolean waitSearcher;block until a new searcher is opened and registered as the main query searcher, making the changes visible;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher);UpdateResponse optimize(boolean waitFlush, boolean waitSearcher);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher);UpdateResponse optimize(boolean waitFlush, boolean waitSearcher);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher);UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher, int maxSegments);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher);UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher, int maxSegments);@param;String collection;String collection;the Solr collection to send the optimize to;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher);UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher, int maxSegments);@param;boolean waitFlush;boolean waitFlush;block until index changes are flushed to disk;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher);UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher, int maxSegments);@param;boolean waitSearcher;boolean waitSearcher;block until a new searcher is opened and registered as the main query searcher, making the changes visible;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher);UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher, int maxSegments);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher);UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher, int maxSegments);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher);UpdateResponse optimize(boolean waitFlush, boolean waitSearcher, int maxSegments);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher);UpdateResponse optimize(boolean waitFlush, boolean waitSearcher, int maxSegments);@param;boolean waitFlush;boolean waitFlush;block until index changes are flushed to disk;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher);UpdateResponse optimize(boolean waitFlush, boolean waitSearcher, int maxSegments);@param;boolean waitSearcher;boolean waitSearcher;block until a new searcher is opened and registered as the main query searcher, making the changes visible;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher);UpdateResponse optimize(boolean waitFlush, boolean waitSearcher, int maxSegments);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher);UpdateResponse optimize(boolean waitFlush, boolean waitSearcher, int maxSegments);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher);UpdateResponse rollback(String collection);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher);UpdateResponse rollback(String collection);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher);UpdateResponse rollback(String collection);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher);UpdateResponse rollback();@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher);UpdateResponse rollback();@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher);UpdateResponse rollback();@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher);UpdateResponse deleteById(String collection, String id);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher);UpdateResponse deleteById(String collection, String id);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher);UpdateResponse deleteById(String collection, String id);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher);UpdateResponse deleteById(String id);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher);UpdateResponse deleteById(String id);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher);UpdateResponse deleteById(String id);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher);UpdateResponse deleteById(String collection, String id, int commitWithinMs);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher);UpdateResponse deleteById(String collection, String id, int commitWithinMs);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher);UpdateResponse deleteById(String collection, String id, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher);UpdateResponse deleteById(String id, int commitWithinMs);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher);UpdateResponse deleteById(String id, int commitWithinMs);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher);UpdateResponse deleteById(String id, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher);UpdateResponse deleteById(String collection, List ids);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher);UpdateResponse deleteById(String collection, List ids);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher);UpdateResponse deleteById(String collection, List ids);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher);UpdateResponse deleteById(List ids);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher);UpdateResponse deleteById(List ids);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher);UpdateResponse deleteById(List ids);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher);UpdateResponse deleteById(String collection, List ids, int commitWithinMs);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher);UpdateResponse deleteById(String collection, List ids, int commitWithinMs);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher);UpdateResponse deleteById(String collection, List ids, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher);UpdateResponse deleteById(List ids, int commitWithinMs);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher);UpdateResponse deleteById(List ids, int commitWithinMs);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher);UpdateResponse deleteById(List ids, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher);UpdateResponse deleteByQuery(String collection, String query);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher);UpdateResponse deleteByQuery(String collection, String query);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher);UpdateResponse deleteByQuery(String collection, String query);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher);UpdateResponse deleteByQuery(String query);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher);UpdateResponse deleteByQuery(String query);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher);UpdateResponse deleteByQuery(String query);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher);UpdateResponse deleteByQuery(String collection, String query, int commitWithinMs);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher);UpdateResponse deleteByQuery(String collection, String query, int commitWithinMs);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher);UpdateResponse deleteByQuery(String collection, String query, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher);UpdateResponse deleteByQuery(String query, int commitWithinMs);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher);UpdateResponse deleteByQuery(String query, int commitWithinMs);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher);UpdateResponse deleteByQuery(String query, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher);SolrPingResponse ping();@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher);SolrPingResponse ping();@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher);QueryResponse query(String collection, SolrParams params);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher);QueryResponse query(String collection, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher);QueryResponse query(SolrParams params);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher);QueryResponse query(SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher);QueryResponse query(String collection, SolrParams params, METHOD method);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher);QueryResponse query(String collection, SolrParams params, METHOD method);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher);QueryResponse query(SolrParams params, METHOD method);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher);QueryResponse query(SolrParams params, METHOD method);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher);QueryResponse queryAndStreamResponse(String collection, SolrParams params, StreamingResponseCallback callback);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher);QueryResponse queryAndStreamResponse(String collection, SolrParams params, StreamingResponseCallback callback);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher);QueryResponse queryAndStreamResponse(SolrParams params, StreamingResponseCallback callback);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher);QueryResponse queryAndStreamResponse(SolrParams params, StreamingResponseCallback callback);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher);SolrDocument getById(String collection, String id);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher);SolrDocument getById(String collection, String id);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher);SolrDocument getById(String id);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher);SolrDocument getById(String id);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher);SolrDocument getById(String collection, String id, SolrParams params);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher);SolrDocument getById(String collection, String id, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher);SolrDocument getById(String id, SolrParams params);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher);SolrDocument getById(String id, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher);SolrDocumentList getById(String collection, Collection ids);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher);SolrDocumentList getById(String collection, Collection ids);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher);SolrDocumentList getById(Collection ids);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher);SolrDocumentList getById(Collection ids);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher);SolrDocumentList getById(String collection, Collection ids, SolrParams params);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher);SolrDocumentList getById(String collection, Collection ids, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher);SolrDocumentList getById(Collection ids, SolrParams params);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher);SolrDocumentList getById(Collection ids, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher);NamedList request(SolrRequest request, String collection);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher);NamedList request(SolrRequest request, String collection);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher);NamedList request(SolrRequest request);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher);NamedList request(SolrRequest request);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(boolean waitFlush, boolean waitSearcher);UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher, int maxSegments);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(boolean waitFlush, boolean waitSearcher);UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher, int maxSegments);@param;boolean waitFlush;boolean waitFlush;block until index changes are flushed to disk;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(boolean waitFlush, boolean waitSearcher);UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher, int maxSegments);@param;boolean waitSearcher;boolean waitSearcher;block until a new searcher is opened and registered as the main query searcher, making the changes visible;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(boolean waitFlush, boolean waitSearcher);UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher, int maxSegments);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(boolean waitFlush, boolean waitSearcher);UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher, int maxSegments);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(boolean waitFlush, boolean waitSearcher);UpdateResponse optimize(boolean waitFlush, boolean waitSearcher, int maxSegments);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(boolean waitFlush, boolean waitSearcher);UpdateResponse optimize(boolean waitFlush, boolean waitSearcher, int maxSegments);@param;boolean waitFlush;boolean waitFlush;block until index changes are flushed to disk;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(boolean waitFlush, boolean waitSearcher);UpdateResponse optimize(boolean waitFlush, boolean waitSearcher, int maxSegments);@param;boolean waitSearcher;boolean waitSearcher;block until a new searcher is opened and registered as the main query searcher, making the changes visible;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(boolean waitFlush, boolean waitSearcher);UpdateResponse optimize(boolean waitFlush, boolean waitSearcher, int maxSegments);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(boolean waitFlush, boolean waitSearcher);UpdateResponse optimize(boolean waitFlush, boolean waitSearcher, int maxSegments);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(boolean waitFlush, boolean waitSearcher);UpdateResponse rollback(String collection);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(boolean waitFlush, boolean waitSearcher);UpdateResponse rollback(String collection);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(boolean waitFlush, boolean waitSearcher);UpdateResponse rollback(String collection);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(boolean waitFlush, boolean waitSearcher);UpdateResponse rollback();@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(boolean waitFlush, boolean waitSearcher);UpdateResponse rollback();@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(boolean waitFlush, boolean waitSearcher);UpdateResponse rollback();@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(boolean waitFlush, boolean waitSearcher);UpdateResponse deleteById(String collection, String id);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(boolean waitFlush, boolean waitSearcher);UpdateResponse deleteById(String collection, String id);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(boolean waitFlush, boolean waitSearcher);UpdateResponse deleteById(String collection, String id);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(boolean waitFlush, boolean waitSearcher);UpdateResponse deleteById(String id);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(boolean waitFlush, boolean waitSearcher);UpdateResponse deleteById(String id);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(boolean waitFlush, boolean waitSearcher);UpdateResponse deleteById(String id);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(boolean waitFlush, boolean waitSearcher);UpdateResponse deleteById(String collection, String id, int commitWithinMs);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(boolean waitFlush, boolean waitSearcher);UpdateResponse deleteById(String collection, String id, int commitWithinMs);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(boolean waitFlush, boolean waitSearcher);UpdateResponse deleteById(String collection, String id, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(boolean waitFlush, boolean waitSearcher);UpdateResponse deleteById(String id, int commitWithinMs);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(boolean waitFlush, boolean waitSearcher);UpdateResponse deleteById(String id, int commitWithinMs);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(boolean waitFlush, boolean waitSearcher);UpdateResponse deleteById(String id, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(boolean waitFlush, boolean waitSearcher);UpdateResponse deleteById(String collection, List ids);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(boolean waitFlush, boolean waitSearcher);UpdateResponse deleteById(String collection, List ids);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(boolean waitFlush, boolean waitSearcher);UpdateResponse deleteById(String collection, List ids);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(boolean waitFlush, boolean waitSearcher);UpdateResponse deleteById(List ids);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(boolean waitFlush, boolean waitSearcher);UpdateResponse deleteById(List ids);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(boolean waitFlush, boolean waitSearcher);UpdateResponse deleteById(List ids);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(boolean waitFlush, boolean waitSearcher);UpdateResponse deleteById(String collection, List ids, int commitWithinMs);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(boolean waitFlush, boolean waitSearcher);UpdateResponse deleteById(String collection, List ids, int commitWithinMs);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(boolean waitFlush, boolean waitSearcher);UpdateResponse deleteById(String collection, List ids, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(boolean waitFlush, boolean waitSearcher);UpdateResponse deleteById(List ids, int commitWithinMs);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(boolean waitFlush, boolean waitSearcher);UpdateResponse deleteById(List ids, int commitWithinMs);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(boolean waitFlush, boolean waitSearcher);UpdateResponse deleteById(List ids, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(boolean waitFlush, boolean waitSearcher);UpdateResponse deleteByQuery(String collection, String query);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(boolean waitFlush, boolean waitSearcher);UpdateResponse deleteByQuery(String collection, String query);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(boolean waitFlush, boolean waitSearcher);UpdateResponse deleteByQuery(String collection, String query);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(boolean waitFlush, boolean waitSearcher);UpdateResponse deleteByQuery(String query);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(boolean waitFlush, boolean waitSearcher);UpdateResponse deleteByQuery(String query);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(boolean waitFlush, boolean waitSearcher);UpdateResponse deleteByQuery(String query);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(boolean waitFlush, boolean waitSearcher);UpdateResponse deleteByQuery(String collection, String query, int commitWithinMs);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(boolean waitFlush, boolean waitSearcher);UpdateResponse deleteByQuery(String collection, String query, int commitWithinMs);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(boolean waitFlush, boolean waitSearcher);UpdateResponse deleteByQuery(String collection, String query, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(boolean waitFlush, boolean waitSearcher);UpdateResponse deleteByQuery(String query, int commitWithinMs);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(boolean waitFlush, boolean waitSearcher);UpdateResponse deleteByQuery(String query, int commitWithinMs);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(boolean waitFlush, boolean waitSearcher);UpdateResponse deleteByQuery(String query, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(boolean waitFlush, boolean waitSearcher);SolrPingResponse ping();@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(boolean waitFlush, boolean waitSearcher);SolrPingResponse ping();@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(boolean waitFlush, boolean waitSearcher);QueryResponse query(String collection, SolrParams params);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(boolean waitFlush, boolean waitSearcher);QueryResponse query(String collection, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(boolean waitFlush, boolean waitSearcher);QueryResponse query(SolrParams params);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(boolean waitFlush, boolean waitSearcher);QueryResponse query(SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(boolean waitFlush, boolean waitSearcher);QueryResponse query(String collection, SolrParams params, METHOD method);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(boolean waitFlush, boolean waitSearcher);QueryResponse query(String collection, SolrParams params, METHOD method);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(boolean waitFlush, boolean waitSearcher);QueryResponse query(SolrParams params, METHOD method);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(boolean waitFlush, boolean waitSearcher);QueryResponse query(SolrParams params, METHOD method);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(boolean waitFlush, boolean waitSearcher);QueryResponse queryAndStreamResponse(String collection, SolrParams params, StreamingResponseCallback callback);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(boolean waitFlush, boolean waitSearcher);QueryResponse queryAndStreamResponse(String collection, SolrParams params, StreamingResponseCallback callback);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(boolean waitFlush, boolean waitSearcher);QueryResponse queryAndStreamResponse(SolrParams params, StreamingResponseCallback callback);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(boolean waitFlush, boolean waitSearcher);QueryResponse queryAndStreamResponse(SolrParams params, StreamingResponseCallback callback);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(boolean waitFlush, boolean waitSearcher);SolrDocument getById(String collection, String id);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(boolean waitFlush, boolean waitSearcher);SolrDocument getById(String collection, String id);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(boolean waitFlush, boolean waitSearcher);SolrDocument getById(String id);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(boolean waitFlush, boolean waitSearcher);SolrDocument getById(String id);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(boolean waitFlush, boolean waitSearcher);SolrDocument getById(String collection, String id, SolrParams params);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(boolean waitFlush, boolean waitSearcher);SolrDocument getById(String collection, String id, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(boolean waitFlush, boolean waitSearcher);SolrDocument getById(String id, SolrParams params);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(boolean waitFlush, boolean waitSearcher);SolrDocument getById(String id, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(boolean waitFlush, boolean waitSearcher);SolrDocumentList getById(String collection, Collection ids);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(boolean waitFlush, boolean waitSearcher);SolrDocumentList getById(String collection, Collection ids);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(boolean waitFlush, boolean waitSearcher);SolrDocumentList getById(Collection ids);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(boolean waitFlush, boolean waitSearcher);SolrDocumentList getById(Collection ids);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(boolean waitFlush, boolean waitSearcher);SolrDocumentList getById(String collection, Collection ids, SolrParams params);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(boolean waitFlush, boolean waitSearcher);SolrDocumentList getById(String collection, Collection ids, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(boolean waitFlush, boolean waitSearcher);SolrDocumentList getById(Collection ids, SolrParams params);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(boolean waitFlush, boolean waitSearcher);SolrDocumentList getById(Collection ids, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(boolean waitFlush, boolean waitSearcher);NamedList request(SolrRequest request, String collection);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(boolean waitFlush, boolean waitSearcher);NamedList request(SolrRequest request, String collection);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(boolean waitFlush, boolean waitSearcher);NamedList request(SolrRequest request);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(boolean waitFlush, boolean waitSearcher);NamedList request(SolrRequest request);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher, int maxSegments);UpdateResponse optimize(boolean waitFlush, boolean waitSearcher, int maxSegments);Free text;;;Performs an explicit optimize, causing a merge of all segments to one. Note: In most cases it is not required to do explicit optimize ;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher, int maxSegments);UpdateResponse optimize(boolean waitFlush, boolean waitSearcher, int maxSegments);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher, int maxSegments);UpdateResponse optimize(boolean waitFlush, boolean waitSearcher, int maxSegments);@param;boolean waitFlush;boolean waitFlush;block until index changes are flushed to disk;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher, int maxSegments);UpdateResponse optimize(boolean waitFlush, boolean waitSearcher, int maxSegments);@param;boolean waitSearcher;boolean waitSearcher;block until a new searcher is opened and registered as the main query searcher, making the changes visible;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher, int maxSegments);UpdateResponse optimize(boolean waitFlush, boolean waitSearcher, int maxSegments);@param;int maxSegments;int maxSegments;optimizes down to at most this number of segments;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher, int maxSegments);UpdateResponse optimize(boolean waitFlush, boolean waitSearcher, int maxSegments);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher, int maxSegments);UpdateResponse optimize(boolean waitFlush, boolean waitSearcher, int maxSegments);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher, int maxSegments);UpdateResponse rollback(String collection);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher, int maxSegments);UpdateResponse rollback(String collection);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher, int maxSegments);UpdateResponse rollback(String collection);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher, int maxSegments);UpdateResponse rollback();@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher, int maxSegments);UpdateResponse rollback();@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher, int maxSegments);UpdateResponse rollback();@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher, int maxSegments);UpdateResponse deleteById(String collection, String id);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher, int maxSegments);UpdateResponse deleteById(String collection, String id);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher, int maxSegments);UpdateResponse deleteById(String collection, String id);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher, int maxSegments);UpdateResponse deleteById(String id);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher, int maxSegments);UpdateResponse deleteById(String id);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher, int maxSegments);UpdateResponse deleteById(String id);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher, int maxSegments);UpdateResponse deleteById(String collection, String id, int commitWithinMs);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher, int maxSegments);UpdateResponse deleteById(String collection, String id, int commitWithinMs);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher, int maxSegments);UpdateResponse deleteById(String collection, String id, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher, int maxSegments);UpdateResponse deleteById(String id, int commitWithinMs);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher, int maxSegments);UpdateResponse deleteById(String id, int commitWithinMs);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher, int maxSegments);UpdateResponse deleteById(String id, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher, int maxSegments);UpdateResponse deleteById(String collection, List ids);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher, int maxSegments);UpdateResponse deleteById(String collection, List ids);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher, int maxSegments);UpdateResponse deleteById(String collection, List ids);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher, int maxSegments);UpdateResponse deleteById(List ids);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher, int maxSegments);UpdateResponse deleteById(List ids);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher, int maxSegments);UpdateResponse deleteById(List ids);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher, int maxSegments);UpdateResponse deleteById(String collection, List ids, int commitWithinMs);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher, int maxSegments);UpdateResponse deleteById(String collection, List ids, int commitWithinMs);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher, int maxSegments);UpdateResponse deleteById(String collection, List ids, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher, int maxSegments);UpdateResponse deleteById(List ids, int commitWithinMs);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher, int maxSegments);UpdateResponse deleteById(List ids, int commitWithinMs);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher, int maxSegments);UpdateResponse deleteById(List ids, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher, int maxSegments);UpdateResponse deleteByQuery(String collection, String query);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher, int maxSegments);UpdateResponse deleteByQuery(String collection, String query);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher, int maxSegments);UpdateResponse deleteByQuery(String collection, String query);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher, int maxSegments);UpdateResponse deleteByQuery(String query);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher, int maxSegments);UpdateResponse deleteByQuery(String query);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher, int maxSegments);UpdateResponse deleteByQuery(String query);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher, int maxSegments);UpdateResponse deleteByQuery(String collection, String query, int commitWithinMs);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher, int maxSegments);UpdateResponse deleteByQuery(String collection, String query, int commitWithinMs);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher, int maxSegments);UpdateResponse deleteByQuery(String collection, String query, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher, int maxSegments);UpdateResponse deleteByQuery(String query, int commitWithinMs);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher, int maxSegments);UpdateResponse deleteByQuery(String query, int commitWithinMs);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher, int maxSegments);UpdateResponse deleteByQuery(String query, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher, int maxSegments);SolrPingResponse ping();@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher, int maxSegments);SolrPingResponse ping();@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher, int maxSegments);QueryResponse query(String collection, SolrParams params);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher, int maxSegments);QueryResponse query(String collection, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher, int maxSegments);QueryResponse query(SolrParams params);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher, int maxSegments);QueryResponse query(SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher, int maxSegments);QueryResponse query(String collection, SolrParams params, METHOD method);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher, int maxSegments);QueryResponse query(String collection, SolrParams params, METHOD method);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher, int maxSegments);QueryResponse query(SolrParams params, METHOD method);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher, int maxSegments);QueryResponse query(SolrParams params, METHOD method);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher, int maxSegments);QueryResponse queryAndStreamResponse(String collection, SolrParams params, StreamingResponseCallback callback);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher, int maxSegments);QueryResponse queryAndStreamResponse(String collection, SolrParams params, StreamingResponseCallback callback);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher, int maxSegments);QueryResponse queryAndStreamResponse(SolrParams params, StreamingResponseCallback callback);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher, int maxSegments);QueryResponse queryAndStreamResponse(SolrParams params, StreamingResponseCallback callback);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher, int maxSegments);SolrDocument getById(String collection, String id);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher, int maxSegments);SolrDocument getById(String collection, String id);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher, int maxSegments);SolrDocument getById(String id);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher, int maxSegments);SolrDocument getById(String id);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher, int maxSegments);SolrDocument getById(String collection, String id, SolrParams params);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher, int maxSegments);SolrDocument getById(String collection, String id, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher, int maxSegments);SolrDocument getById(String id, SolrParams params);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher, int maxSegments);SolrDocument getById(String id, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher, int maxSegments);SolrDocumentList getById(String collection, Collection ids);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher, int maxSegments);SolrDocumentList getById(String collection, Collection ids);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher, int maxSegments);SolrDocumentList getById(Collection ids);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher, int maxSegments);SolrDocumentList getById(Collection ids);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher, int maxSegments);SolrDocumentList getById(String collection, Collection ids, SolrParams params);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher, int maxSegments);SolrDocumentList getById(String collection, Collection ids, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher, int maxSegments);SolrDocumentList getById(Collection ids, SolrParams params);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher, int maxSegments);SolrDocumentList getById(Collection ids, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher, int maxSegments);NamedList request(SolrRequest request, String collection);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher, int maxSegments);NamedList request(SolrRequest request, String collection);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher, int maxSegments);NamedList request(SolrRequest request);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(String collection, boolean waitFlush, boolean waitSearcher, int maxSegments);NamedList request(SolrRequest request);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(boolean waitFlush, boolean waitSearcher, int maxSegments);UpdateResponse rollback(String collection);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(boolean waitFlush, boolean waitSearcher, int maxSegments);UpdateResponse rollback(String collection);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(boolean waitFlush, boolean waitSearcher, int maxSegments);UpdateResponse rollback(String collection);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(boolean waitFlush, boolean waitSearcher, int maxSegments);UpdateResponse rollback();@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(boolean waitFlush, boolean waitSearcher, int maxSegments);UpdateResponse rollback();@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(boolean waitFlush, boolean waitSearcher, int maxSegments);UpdateResponse rollback();@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(boolean waitFlush, boolean waitSearcher, int maxSegments);UpdateResponse deleteById(String collection, String id);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(boolean waitFlush, boolean waitSearcher, int maxSegments);UpdateResponse deleteById(String collection, String id);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(boolean waitFlush, boolean waitSearcher, int maxSegments);UpdateResponse deleteById(String collection, String id);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(boolean waitFlush, boolean waitSearcher, int maxSegments);UpdateResponse deleteById(String id);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(boolean waitFlush, boolean waitSearcher, int maxSegments);UpdateResponse deleteById(String id);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(boolean waitFlush, boolean waitSearcher, int maxSegments);UpdateResponse deleteById(String id);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(boolean waitFlush, boolean waitSearcher, int maxSegments);UpdateResponse deleteById(String collection, String id, int commitWithinMs);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(boolean waitFlush, boolean waitSearcher, int maxSegments);UpdateResponse deleteById(String collection, String id, int commitWithinMs);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(boolean waitFlush, boolean waitSearcher, int maxSegments);UpdateResponse deleteById(String collection, String id, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(boolean waitFlush, boolean waitSearcher, int maxSegments);UpdateResponse deleteById(String id, int commitWithinMs);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(boolean waitFlush, boolean waitSearcher, int maxSegments);UpdateResponse deleteById(String id, int commitWithinMs);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(boolean waitFlush, boolean waitSearcher, int maxSegments);UpdateResponse deleteById(String id, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(boolean waitFlush, boolean waitSearcher, int maxSegments);UpdateResponse deleteById(String collection, List ids);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(boolean waitFlush, boolean waitSearcher, int maxSegments);UpdateResponse deleteById(String collection, List ids);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(boolean waitFlush, boolean waitSearcher, int maxSegments);UpdateResponse deleteById(String collection, List ids);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(boolean waitFlush, boolean waitSearcher, int maxSegments);UpdateResponse deleteById(List ids);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(boolean waitFlush, boolean waitSearcher, int maxSegments);UpdateResponse deleteById(List ids);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(boolean waitFlush, boolean waitSearcher, int maxSegments);UpdateResponse deleteById(List ids);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(boolean waitFlush, boolean waitSearcher, int maxSegments);UpdateResponse deleteById(String collection, List ids, int commitWithinMs);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(boolean waitFlush, boolean waitSearcher, int maxSegments);UpdateResponse deleteById(String collection, List ids, int commitWithinMs);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(boolean waitFlush, boolean waitSearcher, int maxSegments);UpdateResponse deleteById(String collection, List ids, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(boolean waitFlush, boolean waitSearcher, int maxSegments);UpdateResponse deleteById(List ids, int commitWithinMs);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(boolean waitFlush, boolean waitSearcher, int maxSegments);UpdateResponse deleteById(List ids, int commitWithinMs);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(boolean waitFlush, boolean waitSearcher, int maxSegments);UpdateResponse deleteById(List ids, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(boolean waitFlush, boolean waitSearcher, int maxSegments);UpdateResponse deleteByQuery(String collection, String query);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(boolean waitFlush, boolean waitSearcher, int maxSegments);UpdateResponse deleteByQuery(String collection, String query);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(boolean waitFlush, boolean waitSearcher, int maxSegments);UpdateResponse deleteByQuery(String collection, String query);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(boolean waitFlush, boolean waitSearcher, int maxSegments);UpdateResponse deleteByQuery(String query);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(boolean waitFlush, boolean waitSearcher, int maxSegments);UpdateResponse deleteByQuery(String query);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(boolean waitFlush, boolean waitSearcher, int maxSegments);UpdateResponse deleteByQuery(String query);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(boolean waitFlush, boolean waitSearcher, int maxSegments);UpdateResponse deleteByQuery(String collection, String query, int commitWithinMs);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(boolean waitFlush, boolean waitSearcher, int maxSegments);UpdateResponse deleteByQuery(String collection, String query, int commitWithinMs);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(boolean waitFlush, boolean waitSearcher, int maxSegments);UpdateResponse deleteByQuery(String collection, String query, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(boolean waitFlush, boolean waitSearcher, int maxSegments);UpdateResponse deleteByQuery(String query, int commitWithinMs);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(boolean waitFlush, boolean waitSearcher, int maxSegments);UpdateResponse deleteByQuery(String query, int commitWithinMs);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(boolean waitFlush, boolean waitSearcher, int maxSegments);UpdateResponse deleteByQuery(String query, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(boolean waitFlush, boolean waitSearcher, int maxSegments);SolrPingResponse ping();@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(boolean waitFlush, boolean waitSearcher, int maxSegments);SolrPingResponse ping();@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(boolean waitFlush, boolean waitSearcher, int maxSegments);QueryResponse query(String collection, SolrParams params);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(boolean waitFlush, boolean waitSearcher, int maxSegments);QueryResponse query(String collection, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(boolean waitFlush, boolean waitSearcher, int maxSegments);QueryResponse query(SolrParams params);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(boolean waitFlush, boolean waitSearcher, int maxSegments);QueryResponse query(SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(boolean waitFlush, boolean waitSearcher, int maxSegments);QueryResponse query(String collection, SolrParams params, METHOD method);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(boolean waitFlush, boolean waitSearcher, int maxSegments);QueryResponse query(String collection, SolrParams params, METHOD method);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(boolean waitFlush, boolean waitSearcher, int maxSegments);QueryResponse query(SolrParams params, METHOD method);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(boolean waitFlush, boolean waitSearcher, int maxSegments);QueryResponse query(SolrParams params, METHOD method);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(boolean waitFlush, boolean waitSearcher, int maxSegments);QueryResponse queryAndStreamResponse(String collection, SolrParams params, StreamingResponseCallback callback);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(boolean waitFlush, boolean waitSearcher, int maxSegments);QueryResponse queryAndStreamResponse(String collection, SolrParams params, StreamingResponseCallback callback);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(boolean waitFlush, boolean waitSearcher, int maxSegments);QueryResponse queryAndStreamResponse(SolrParams params, StreamingResponseCallback callback);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(boolean waitFlush, boolean waitSearcher, int maxSegments);QueryResponse queryAndStreamResponse(SolrParams params, StreamingResponseCallback callback);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(boolean waitFlush, boolean waitSearcher, int maxSegments);SolrDocument getById(String collection, String id);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(boolean waitFlush, boolean waitSearcher, int maxSegments);SolrDocument getById(String collection, String id);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(boolean waitFlush, boolean waitSearcher, int maxSegments);SolrDocument getById(String id);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(boolean waitFlush, boolean waitSearcher, int maxSegments);SolrDocument getById(String id);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(boolean waitFlush, boolean waitSearcher, int maxSegments);SolrDocument getById(String collection, String id, SolrParams params);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(boolean waitFlush, boolean waitSearcher, int maxSegments);SolrDocument getById(String collection, String id, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(boolean waitFlush, boolean waitSearcher, int maxSegments);SolrDocument getById(String id, SolrParams params);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(boolean waitFlush, boolean waitSearcher, int maxSegments);SolrDocument getById(String id, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(boolean waitFlush, boolean waitSearcher, int maxSegments);SolrDocumentList getById(String collection, Collection ids);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(boolean waitFlush, boolean waitSearcher, int maxSegments);SolrDocumentList getById(String collection, Collection ids);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(boolean waitFlush, boolean waitSearcher, int maxSegments);SolrDocumentList getById(Collection ids);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(boolean waitFlush, boolean waitSearcher, int maxSegments);SolrDocumentList getById(Collection ids);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(boolean waitFlush, boolean waitSearcher, int maxSegments);SolrDocumentList getById(String collection, Collection ids, SolrParams params);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(boolean waitFlush, boolean waitSearcher, int maxSegments);SolrDocumentList getById(String collection, Collection ids, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(boolean waitFlush, boolean waitSearcher, int maxSegments);SolrDocumentList getById(Collection ids, SolrParams params);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(boolean waitFlush, boolean waitSearcher, int maxSegments);SolrDocumentList getById(Collection ids, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(boolean waitFlush, boolean waitSearcher, int maxSegments);NamedList request(SolrRequest request, String collection);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(boolean waitFlush, boolean waitSearcher, int maxSegments);NamedList request(SolrRequest request, String collection);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(boolean waitFlush, boolean waitSearcher, int maxSegments);NamedList request(SolrRequest request);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse optimize(boolean waitFlush, boolean waitSearcher, int maxSegments);NamedList request(SolrRequest request);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse rollback(String collection);UpdateResponse rollback();Free text;;;Performs a rollback of all non-committed documents pending. Note that this is not a true rollback as in databases. Content you have previously added may have been committed due to autoCommit, buffer full, other client performing a commit etc. ;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse rollback(String collection);UpdateResponse rollback();@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse rollback(String collection);UpdateResponse rollback();@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse rollback(String collection);UpdateResponse rollback();@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse rollback(String collection);UpdateResponse deleteById(String collection, String id);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse rollback(String collection);UpdateResponse deleteById(String collection, String id);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse rollback(String collection);UpdateResponse deleteById(String collection, String id);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse rollback(String collection);UpdateResponse deleteById(String id);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse rollback(String collection);UpdateResponse deleteById(String id);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse rollback(String collection);UpdateResponse deleteById(String id);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse rollback(String collection);UpdateResponse deleteById(String collection, String id, int commitWithinMs);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse rollback(String collection);UpdateResponse deleteById(String collection, String id, int commitWithinMs);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse rollback(String collection);UpdateResponse deleteById(String collection, String id, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse rollback(String collection);UpdateResponse deleteById(String id, int commitWithinMs);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse rollback(String collection);UpdateResponse deleteById(String id, int commitWithinMs);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse rollback(String collection);UpdateResponse deleteById(String id, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse rollback(String collection);UpdateResponse deleteById(String collection, List ids);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse rollback(String collection);UpdateResponse deleteById(String collection, List ids);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse rollback(String collection);UpdateResponse deleteById(String collection, List ids);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse rollback(String collection);UpdateResponse deleteById(List ids);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse rollback(String collection);UpdateResponse deleteById(List ids);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse rollback(String collection);UpdateResponse deleteById(List ids);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse rollback(String collection);UpdateResponse deleteById(String collection, List ids, int commitWithinMs);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse rollback(String collection);UpdateResponse deleteById(String collection, List ids, int commitWithinMs);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse rollback(String collection);UpdateResponse deleteById(String collection, List ids, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse rollback(String collection);UpdateResponse deleteById(List ids, int commitWithinMs);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse rollback(String collection);UpdateResponse deleteById(List ids, int commitWithinMs);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse rollback(String collection);UpdateResponse deleteById(List ids, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse rollback(String collection);UpdateResponse deleteByQuery(String collection, String query);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse rollback(String collection);UpdateResponse deleteByQuery(String collection, String query);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse rollback(String collection);UpdateResponse deleteByQuery(String collection, String query);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse rollback(String collection);UpdateResponse deleteByQuery(String query);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse rollback(String collection);UpdateResponse deleteByQuery(String query);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse rollback(String collection);UpdateResponse deleteByQuery(String query);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse rollback(String collection);UpdateResponse deleteByQuery(String collection, String query, int commitWithinMs);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse rollback(String collection);UpdateResponse deleteByQuery(String collection, String query, int commitWithinMs);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse rollback(String collection);UpdateResponse deleteByQuery(String collection, String query, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse rollback(String collection);UpdateResponse deleteByQuery(String query, int commitWithinMs);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse rollback(String collection);UpdateResponse deleteByQuery(String query, int commitWithinMs);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse rollback(String collection);UpdateResponse deleteByQuery(String query, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse rollback(String collection);SolrPingResponse ping();@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse rollback(String collection);SolrPingResponse ping();@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse rollback(String collection);QueryResponse query(String collection, SolrParams params);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse rollback(String collection);QueryResponse query(String collection, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse rollback(String collection);QueryResponse query(SolrParams params);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse rollback(String collection);QueryResponse query(SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse rollback(String collection);QueryResponse query(String collection, SolrParams params, METHOD method);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse rollback(String collection);QueryResponse query(String collection, SolrParams params, METHOD method);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse rollback(String collection);QueryResponse query(SolrParams params, METHOD method);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse rollback(String collection);QueryResponse query(SolrParams params, METHOD method);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse rollback(String collection);QueryResponse queryAndStreamResponse(String collection, SolrParams params, StreamingResponseCallback callback);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse rollback(String collection);QueryResponse queryAndStreamResponse(String collection, SolrParams params, StreamingResponseCallback callback);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse rollback(String collection);QueryResponse queryAndStreamResponse(SolrParams params, StreamingResponseCallback callback);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse rollback(String collection);QueryResponse queryAndStreamResponse(SolrParams params, StreamingResponseCallback callback);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse rollback(String collection);SolrDocument getById(String collection, String id);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse rollback(String collection);SolrDocument getById(String collection, String id);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse rollback(String collection);SolrDocument getById(String id);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse rollback(String collection);SolrDocument getById(String id);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse rollback(String collection);SolrDocument getById(String collection, String id, SolrParams params);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse rollback(String collection);SolrDocument getById(String collection, String id, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse rollback(String collection);SolrDocument getById(String id, SolrParams params);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse rollback(String collection);SolrDocument getById(String id, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse rollback(String collection);SolrDocumentList getById(String collection, Collection ids);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse rollback(String collection);SolrDocumentList getById(String collection, Collection ids);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse rollback(String collection);SolrDocumentList getById(Collection ids);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse rollback(String collection);SolrDocumentList getById(Collection ids);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse rollback(String collection);SolrDocumentList getById(String collection, Collection ids, SolrParams params);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse rollback(String collection);SolrDocumentList getById(String collection, Collection ids, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse rollback(String collection);SolrDocumentList getById(Collection ids, SolrParams params);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse rollback(String collection);SolrDocumentList getById(Collection ids, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse rollback(String collection);NamedList request(SolrRequest request, String collection);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse rollback(String collection);NamedList request(SolrRequest request, String collection);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse rollback(String collection);NamedList request(SolrRequest request);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse rollback(String collection);NamedList request(SolrRequest request);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse rollback();UpdateResponse deleteById(String collection, String id);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse rollback();UpdateResponse deleteById(String collection, String id);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse rollback();UpdateResponse deleteById(String collection, String id);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse rollback();UpdateResponse deleteById(String id);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse rollback();UpdateResponse deleteById(String id);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse rollback();UpdateResponse deleteById(String id);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse rollback();UpdateResponse deleteById(String collection, String id, int commitWithinMs);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse rollback();UpdateResponse deleteById(String collection, String id, int commitWithinMs);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse rollback();UpdateResponse deleteById(String collection, String id, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse rollback();UpdateResponse deleteById(String id, int commitWithinMs);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse rollback();UpdateResponse deleteById(String id, int commitWithinMs);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse rollback();UpdateResponse deleteById(String id, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse rollback();UpdateResponse deleteById(String collection, List ids);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse rollback();UpdateResponse deleteById(String collection, List ids);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse rollback();UpdateResponse deleteById(String collection, List ids);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse rollback();UpdateResponse deleteById(List ids);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse rollback();UpdateResponse deleteById(List ids);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse rollback();UpdateResponse deleteById(List ids);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse rollback();UpdateResponse deleteById(String collection, List ids, int commitWithinMs);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse rollback();UpdateResponse deleteById(String collection, List ids, int commitWithinMs);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse rollback();UpdateResponse deleteById(String collection, List ids, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse rollback();UpdateResponse deleteById(List ids, int commitWithinMs);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse rollback();UpdateResponse deleteById(List ids, int commitWithinMs);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse rollback();UpdateResponse deleteById(List ids, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse rollback();UpdateResponse deleteByQuery(String collection, String query);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse rollback();UpdateResponse deleteByQuery(String collection, String query);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse rollback();UpdateResponse deleteByQuery(String collection, String query);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse rollback();UpdateResponse deleteByQuery(String query);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse rollback();UpdateResponse deleteByQuery(String query);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse rollback();UpdateResponse deleteByQuery(String query);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse rollback();UpdateResponse deleteByQuery(String collection, String query, int commitWithinMs);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse rollback();UpdateResponse deleteByQuery(String collection, String query, int commitWithinMs);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse rollback();UpdateResponse deleteByQuery(String collection, String query, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse rollback();UpdateResponse deleteByQuery(String query, int commitWithinMs);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse rollback();UpdateResponse deleteByQuery(String query, int commitWithinMs);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse rollback();UpdateResponse deleteByQuery(String query, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse rollback();SolrPingResponse ping();@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse rollback();SolrPingResponse ping();@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse rollback();QueryResponse query(String collection, SolrParams params);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse rollback();QueryResponse query(String collection, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse rollback();QueryResponse query(SolrParams params);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse rollback();QueryResponse query(SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse rollback();QueryResponse query(String collection, SolrParams params, METHOD method);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse rollback();QueryResponse query(String collection, SolrParams params, METHOD method);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse rollback();QueryResponse query(SolrParams params, METHOD method);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse rollback();QueryResponse query(SolrParams params, METHOD method);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse rollback();QueryResponse queryAndStreamResponse(String collection, SolrParams params, StreamingResponseCallback callback);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse rollback();QueryResponse queryAndStreamResponse(String collection, SolrParams params, StreamingResponseCallback callback);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse rollback();QueryResponse queryAndStreamResponse(SolrParams params, StreamingResponseCallback callback);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse rollback();QueryResponse queryAndStreamResponse(SolrParams params, StreamingResponseCallback callback);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse rollback();SolrDocument getById(String collection, String id);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse rollback();SolrDocument getById(String collection, String id);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse rollback();SolrDocument getById(String id);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse rollback();SolrDocument getById(String id);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse rollback();SolrDocument getById(String collection, String id, SolrParams params);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse rollback();SolrDocument getById(String collection, String id, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse rollback();SolrDocument getById(String id, SolrParams params);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse rollback();SolrDocument getById(String id, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse rollback();SolrDocumentList getById(String collection, Collection ids);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse rollback();SolrDocumentList getById(String collection, Collection ids);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse rollback();SolrDocumentList getById(Collection ids);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse rollback();SolrDocumentList getById(Collection ids);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse rollback();SolrDocumentList getById(String collection, Collection ids, SolrParams params);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse rollback();SolrDocumentList getById(String collection, Collection ids, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse rollback();SolrDocumentList getById(Collection ids, SolrParams params);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse rollback();SolrDocumentList getById(Collection ids, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse rollback();NamedList request(SolrRequest request, String collection);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse rollback();NamedList request(SolrRequest request, String collection);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse rollback();NamedList request(SolrRequest request);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse rollback();NamedList request(SolrRequest request);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String collection, String id);UpdateResponse deleteById(String id);Free text;;;Deletes a single document by unique ID ;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String collection, String id);UpdateResponse deleteById(String id);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String collection, String id);UpdateResponse deleteById(String id);@param;String id;String id;the ID of the document to delete;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String collection, String id);UpdateResponse deleteById(String id);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String collection, String id);UpdateResponse deleteById(String id);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String collection, String id);UpdateResponse deleteById(String collection, String id, int commitWithinMs);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String collection, String id);UpdateResponse deleteById(String collection, String id, int commitWithinMs);@param;String collection;String collection;the Solr collection to delete the document from;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String collection, String id);UpdateResponse deleteById(String collection, String id, int commitWithinMs);@param;String id;String id;the ID of the document to delete;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String collection, String id);UpdateResponse deleteById(String collection, String id, int commitWithinMs);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String collection, String id);UpdateResponse deleteById(String collection, String id, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String collection, String id);UpdateResponse deleteById(String id, int commitWithinMs);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String collection, String id);UpdateResponse deleteById(String id, int commitWithinMs);@param;String id;String id;the ID of the document to delete;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String collection, String id);UpdateResponse deleteById(String id, int commitWithinMs);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String collection, String id);UpdateResponse deleteById(String id, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String collection, String id);UpdateResponse deleteById(String collection, List ids);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String collection, String id);UpdateResponse deleteById(String collection, List ids);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String collection, String id);UpdateResponse deleteById(String collection, List ids);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String collection, String id);UpdateResponse deleteById(List ids);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String collection, String id);UpdateResponse deleteById(List ids);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String collection, String id);UpdateResponse deleteById(List ids);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String collection, String id);UpdateResponse deleteById(String collection, List ids, int commitWithinMs);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String collection, String id);UpdateResponse deleteById(String collection, List ids, int commitWithinMs);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String collection, String id);UpdateResponse deleteById(String collection, List ids, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String collection, String id);UpdateResponse deleteById(List ids, int commitWithinMs);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String collection, String id);UpdateResponse deleteById(List ids, int commitWithinMs);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String collection, String id);UpdateResponse deleteById(List ids, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String collection, String id);UpdateResponse deleteByQuery(String collection, String query);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String collection, String id);UpdateResponse deleteByQuery(String collection, String query);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String collection, String id);UpdateResponse deleteByQuery(String collection, String query);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String collection, String id);UpdateResponse deleteByQuery(String query);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String collection, String id);UpdateResponse deleteByQuery(String query);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String collection, String id);UpdateResponse deleteByQuery(String query);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String collection, String id);UpdateResponse deleteByQuery(String collection, String query, int commitWithinMs);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String collection, String id);UpdateResponse deleteByQuery(String collection, String query, int commitWithinMs);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String collection, String id);UpdateResponse deleteByQuery(String collection, String query, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String collection, String id);UpdateResponse deleteByQuery(String query, int commitWithinMs);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String collection, String id);UpdateResponse deleteByQuery(String query, int commitWithinMs);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String collection, String id);UpdateResponse deleteByQuery(String query, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String collection, String id);SolrPingResponse ping();@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String collection, String id);SolrPingResponse ping();@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String collection, String id);QueryResponse query(String collection, SolrParams params);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String collection, String id);QueryResponse query(String collection, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String collection, String id);QueryResponse query(SolrParams params);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String collection, String id);QueryResponse query(SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String collection, String id);QueryResponse query(String collection, SolrParams params, METHOD method);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String collection, String id);QueryResponse query(String collection, SolrParams params, METHOD method);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String collection, String id);QueryResponse query(SolrParams params, METHOD method);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String collection, String id);QueryResponse query(SolrParams params, METHOD method);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String collection, String id);QueryResponse queryAndStreamResponse(String collection, SolrParams params, StreamingResponseCallback callback);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String collection, String id);QueryResponse queryAndStreamResponse(String collection, SolrParams params, StreamingResponseCallback callback);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String collection, String id);QueryResponse queryAndStreamResponse(SolrParams params, StreamingResponseCallback callback);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String collection, String id);QueryResponse queryAndStreamResponse(SolrParams params, StreamingResponseCallback callback);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String collection, String id);SolrDocument getById(String collection, String id);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String collection, String id);SolrDocument getById(String collection, String id);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String collection, String id);SolrDocument getById(String id);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String collection, String id);SolrDocument getById(String id);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String collection, String id);SolrDocument getById(String collection, String id, SolrParams params);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String collection, String id);SolrDocument getById(String collection, String id, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String collection, String id);SolrDocument getById(String id, SolrParams params);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String collection, String id);SolrDocument getById(String id, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String collection, String id);SolrDocumentList getById(String collection, Collection ids);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String collection, String id);SolrDocumentList getById(String collection, Collection ids);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String collection, String id);SolrDocumentList getById(Collection ids);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String collection, String id);SolrDocumentList getById(Collection ids);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String collection, String id);SolrDocumentList getById(String collection, Collection ids, SolrParams params);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String collection, String id);SolrDocumentList getById(String collection, Collection ids, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String collection, String id);SolrDocumentList getById(Collection ids, SolrParams params);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String collection, String id);SolrDocumentList getById(Collection ids, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String collection, String id);NamedList request(SolrRequest request, String collection);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String collection, String id);NamedList request(SolrRequest request, String collection);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String collection, String id);NamedList request(SolrRequest request);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String collection, String id);NamedList request(SolrRequest request);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String id);UpdateResponse deleteById(String collection, String id, int commitWithinMs);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String id);UpdateResponse deleteById(String collection, String id, int commitWithinMs);@param;String id;String id;the ID of the document to delete;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String id);UpdateResponse deleteById(String collection, String id, int commitWithinMs);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String id);UpdateResponse deleteById(String collection, String id, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String id);UpdateResponse deleteById(String id, int commitWithinMs);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String id);UpdateResponse deleteById(String id, int commitWithinMs);@param;String id;String id;the ID of the document to delete;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String id);UpdateResponse deleteById(String id, int commitWithinMs);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String id);UpdateResponse deleteById(String id, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String id);UpdateResponse deleteById(String collection, List ids);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String id);UpdateResponse deleteById(String collection, List ids);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String id);UpdateResponse deleteById(String collection, List ids);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String id);UpdateResponse deleteById(List ids);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String id);UpdateResponse deleteById(List ids);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String id);UpdateResponse deleteById(List ids);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String id);UpdateResponse deleteById(String collection, List ids, int commitWithinMs);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String id);UpdateResponse deleteById(String collection, List ids, int commitWithinMs);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String id);UpdateResponse deleteById(String collection, List ids, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String id);UpdateResponse deleteById(List ids, int commitWithinMs);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String id);UpdateResponse deleteById(List ids, int commitWithinMs);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String id);UpdateResponse deleteById(List ids, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String id);UpdateResponse deleteByQuery(String collection, String query);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String id);UpdateResponse deleteByQuery(String collection, String query);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String id);UpdateResponse deleteByQuery(String collection, String query);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String id);UpdateResponse deleteByQuery(String query);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String id);UpdateResponse deleteByQuery(String query);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String id);UpdateResponse deleteByQuery(String query);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String id);UpdateResponse deleteByQuery(String collection, String query, int commitWithinMs);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String id);UpdateResponse deleteByQuery(String collection, String query, int commitWithinMs);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String id);UpdateResponse deleteByQuery(String collection, String query, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String id);UpdateResponse deleteByQuery(String query, int commitWithinMs);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String id);UpdateResponse deleteByQuery(String query, int commitWithinMs);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String id);UpdateResponse deleteByQuery(String query, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String id);SolrPingResponse ping();@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String id);SolrPingResponse ping();@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String id);QueryResponse query(String collection, SolrParams params);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String id);QueryResponse query(String collection, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String id);QueryResponse query(SolrParams params);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String id);QueryResponse query(SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String id);QueryResponse query(String collection, SolrParams params, METHOD method);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String id);QueryResponse query(String collection, SolrParams params, METHOD method);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String id);QueryResponse query(SolrParams params, METHOD method);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String id);QueryResponse query(SolrParams params, METHOD method);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String id);QueryResponse queryAndStreamResponse(String collection, SolrParams params, StreamingResponseCallback callback);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String id);QueryResponse queryAndStreamResponse(String collection, SolrParams params, StreamingResponseCallback callback);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String id);QueryResponse queryAndStreamResponse(SolrParams params, StreamingResponseCallback callback);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String id);QueryResponse queryAndStreamResponse(SolrParams params, StreamingResponseCallback callback);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String id);SolrDocument getById(String collection, String id);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String id);SolrDocument getById(String collection, String id);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String id);SolrDocument getById(String id);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String id);SolrDocument getById(String id);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String id);SolrDocument getById(String collection, String id, SolrParams params);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String id);SolrDocument getById(String collection, String id, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String id);SolrDocument getById(String id, SolrParams params);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String id);SolrDocument getById(String id, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String id);SolrDocumentList getById(String collection, Collection ids);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String id);SolrDocumentList getById(String collection, Collection ids);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String id);SolrDocumentList getById(Collection ids);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String id);SolrDocumentList getById(Collection ids);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String id);SolrDocumentList getById(String collection, Collection ids, SolrParams params);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String id);SolrDocumentList getById(String collection, Collection ids, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String id);SolrDocumentList getById(Collection ids, SolrParams params);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String id);SolrDocumentList getById(Collection ids, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String id);NamedList request(SolrRequest request, String collection);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String id);NamedList request(SolrRequest request, String collection);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String id);NamedList request(SolrRequest request);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String id);NamedList request(SolrRequest request);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String collection, String id, int commitWithinMs);UpdateResponse deleteById(String id, int commitWithinMs);Free text;;;Deletes a single document by unique ID, specifying max time before commit ;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String collection, String id, int commitWithinMs);UpdateResponse deleteById(String id, int commitWithinMs);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String collection, String id, int commitWithinMs);UpdateResponse deleteById(String id, int commitWithinMs);@param;String id;String id;the ID of the document to delete;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String collection, String id, int commitWithinMs);UpdateResponse deleteById(String id, int commitWithinMs);@param;int commitWithinMs;int commitWithinMs;max time (in ms) before a commit will happen;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String collection, String id, int commitWithinMs);UpdateResponse deleteById(String id, int commitWithinMs);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String collection, String id, int commitWithinMs);UpdateResponse deleteById(String id, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String collection, String id, int commitWithinMs);UpdateResponse deleteById(String collection, List ids);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String collection, String id, int commitWithinMs);UpdateResponse deleteById(String collection, List ids);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String collection, String id, int commitWithinMs);UpdateResponse deleteById(String collection, List ids);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String collection, String id, int commitWithinMs);UpdateResponse deleteById(List ids);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String collection, String id, int commitWithinMs);UpdateResponse deleteById(List ids);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String collection, String id, int commitWithinMs);UpdateResponse deleteById(List ids);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String collection, String id, int commitWithinMs);UpdateResponse deleteById(String collection, List ids, int commitWithinMs);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String collection, String id, int commitWithinMs);UpdateResponse deleteById(String collection, List ids, int commitWithinMs);@param;int commitWithinMs;int commitWithinMs;max time (in ms) before a commit will happen;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String collection, String id, int commitWithinMs);UpdateResponse deleteById(String collection, List ids, int commitWithinMs);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String collection, String id, int commitWithinMs);UpdateResponse deleteById(String collection, List ids, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String collection, String id, int commitWithinMs);UpdateResponse deleteById(List ids, int commitWithinMs);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String collection, String id, int commitWithinMs);UpdateResponse deleteById(List ids, int commitWithinMs);@param;int commitWithinMs;int commitWithinMs;max time (in ms) before a commit will happen;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String collection, String id, int commitWithinMs);UpdateResponse deleteById(List ids, int commitWithinMs);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String collection, String id, int commitWithinMs);UpdateResponse deleteById(List ids, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String collection, String id, int commitWithinMs);UpdateResponse deleteByQuery(String collection, String query);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String collection, String id, int commitWithinMs);UpdateResponse deleteByQuery(String collection, String query);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String collection, String id, int commitWithinMs);UpdateResponse deleteByQuery(String collection, String query);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String collection, String id, int commitWithinMs);UpdateResponse deleteByQuery(String query);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String collection, String id, int commitWithinMs);UpdateResponse deleteByQuery(String query);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String collection, String id, int commitWithinMs);UpdateResponse deleteByQuery(String query);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String collection, String id, int commitWithinMs);UpdateResponse deleteByQuery(String collection, String query, int commitWithinMs);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String collection, String id, int commitWithinMs);UpdateResponse deleteByQuery(String collection, String query, int commitWithinMs);@param;int commitWithinMs;int commitWithinMs;max time (in ms) before a commit will happen;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String collection, String id, int commitWithinMs);UpdateResponse deleteByQuery(String collection, String query, int commitWithinMs);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String collection, String id, int commitWithinMs);UpdateResponse deleteByQuery(String collection, String query, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String collection, String id, int commitWithinMs);UpdateResponse deleteByQuery(String query, int commitWithinMs);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String collection, String id, int commitWithinMs);UpdateResponse deleteByQuery(String query, int commitWithinMs);@param;int commitWithinMs;int commitWithinMs;max time (in ms) before a commit will happen;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String collection, String id, int commitWithinMs);UpdateResponse deleteByQuery(String query, int commitWithinMs);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String collection, String id, int commitWithinMs);UpdateResponse deleteByQuery(String query, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String collection, String id, int commitWithinMs);SolrPingResponse ping();@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String collection, String id, int commitWithinMs);SolrPingResponse ping();@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String collection, String id, int commitWithinMs);QueryResponse query(String collection, SolrParams params);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String collection, String id, int commitWithinMs);QueryResponse query(String collection, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String collection, String id, int commitWithinMs);QueryResponse query(SolrParams params);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String collection, String id, int commitWithinMs);QueryResponse query(SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String collection, String id, int commitWithinMs);QueryResponse query(String collection, SolrParams params, METHOD method);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String collection, String id, int commitWithinMs);QueryResponse query(String collection, SolrParams params, METHOD method);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String collection, String id, int commitWithinMs);QueryResponse query(SolrParams params, METHOD method);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String collection, String id, int commitWithinMs);QueryResponse query(SolrParams params, METHOD method);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String collection, String id, int commitWithinMs);QueryResponse queryAndStreamResponse(String collection, SolrParams params, StreamingResponseCallback callback);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String collection, String id, int commitWithinMs);QueryResponse queryAndStreamResponse(String collection, SolrParams params, StreamingResponseCallback callback);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String collection, String id, int commitWithinMs);QueryResponse queryAndStreamResponse(SolrParams params, StreamingResponseCallback callback);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String collection, String id, int commitWithinMs);QueryResponse queryAndStreamResponse(SolrParams params, StreamingResponseCallback callback);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String collection, String id, int commitWithinMs);SolrDocument getById(String collection, String id);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String collection, String id, int commitWithinMs);SolrDocument getById(String collection, String id);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String collection, String id, int commitWithinMs);SolrDocument getById(String id);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String collection, String id, int commitWithinMs);SolrDocument getById(String id);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String collection, String id, int commitWithinMs);SolrDocument getById(String collection, String id, SolrParams params);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String collection, String id, int commitWithinMs);SolrDocument getById(String collection, String id, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String collection, String id, int commitWithinMs);SolrDocument getById(String id, SolrParams params);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String collection, String id, int commitWithinMs);SolrDocument getById(String id, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String collection, String id, int commitWithinMs);SolrDocumentList getById(String collection, Collection ids);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String collection, String id, int commitWithinMs);SolrDocumentList getById(String collection, Collection ids);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String collection, String id, int commitWithinMs);SolrDocumentList getById(Collection ids);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String collection, String id, int commitWithinMs);SolrDocumentList getById(Collection ids);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String collection, String id, int commitWithinMs);SolrDocumentList getById(String collection, Collection ids, SolrParams params);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String collection, String id, int commitWithinMs);SolrDocumentList getById(String collection, Collection ids, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String collection, String id, int commitWithinMs);SolrDocumentList getById(Collection ids, SolrParams params);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String collection, String id, int commitWithinMs);SolrDocumentList getById(Collection ids, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String collection, String id, int commitWithinMs);NamedList request(SolrRequest request, String collection);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String collection, String id, int commitWithinMs);NamedList request(SolrRequest request, String collection);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String collection, String id, int commitWithinMs);NamedList request(SolrRequest request);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String collection, String id, int commitWithinMs);NamedList request(SolrRequest request);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String id, int commitWithinMs);UpdateResponse deleteById(String collection, List ids);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String id, int commitWithinMs);UpdateResponse deleteById(String collection, List ids);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String id, int commitWithinMs);UpdateResponse deleteById(String collection, List ids);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String id, int commitWithinMs);UpdateResponse deleteById(List ids);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String id, int commitWithinMs);UpdateResponse deleteById(List ids);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String id, int commitWithinMs);UpdateResponse deleteById(List ids);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String id, int commitWithinMs);UpdateResponse deleteById(String collection, List ids, int commitWithinMs);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String id, int commitWithinMs);UpdateResponse deleteById(String collection, List ids, int commitWithinMs);@param;int commitWithinMs;int commitWithinMs;max time (in ms) before a commit will happen;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String id, int commitWithinMs);UpdateResponse deleteById(String collection, List ids, int commitWithinMs);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String id, int commitWithinMs);UpdateResponse deleteById(String collection, List ids, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String id, int commitWithinMs);UpdateResponse deleteById(List ids, int commitWithinMs);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String id, int commitWithinMs);UpdateResponse deleteById(List ids, int commitWithinMs);@param;int commitWithinMs;int commitWithinMs;max time (in ms) before a commit will happen;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String id, int commitWithinMs);UpdateResponse deleteById(List ids, int commitWithinMs);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String id, int commitWithinMs);UpdateResponse deleteById(List ids, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String id, int commitWithinMs);UpdateResponse deleteByQuery(String collection, String query);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String id, int commitWithinMs);UpdateResponse deleteByQuery(String collection, String query);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String id, int commitWithinMs);UpdateResponse deleteByQuery(String collection, String query);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String id, int commitWithinMs);UpdateResponse deleteByQuery(String query);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String id, int commitWithinMs);UpdateResponse deleteByQuery(String query);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String id, int commitWithinMs);UpdateResponse deleteByQuery(String query);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String id, int commitWithinMs);UpdateResponse deleteByQuery(String collection, String query, int commitWithinMs);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String id, int commitWithinMs);UpdateResponse deleteByQuery(String collection, String query, int commitWithinMs);@param;int commitWithinMs;int commitWithinMs;max time (in ms) before a commit will happen;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String id, int commitWithinMs);UpdateResponse deleteByQuery(String collection, String query, int commitWithinMs);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String id, int commitWithinMs);UpdateResponse deleteByQuery(String collection, String query, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String id, int commitWithinMs);UpdateResponse deleteByQuery(String query, int commitWithinMs);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String id, int commitWithinMs);UpdateResponse deleteByQuery(String query, int commitWithinMs);@param;int commitWithinMs;int commitWithinMs;max time (in ms) before a commit will happen;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String id, int commitWithinMs);UpdateResponse deleteByQuery(String query, int commitWithinMs);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String id, int commitWithinMs);UpdateResponse deleteByQuery(String query, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String id, int commitWithinMs);SolrPingResponse ping();@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String id, int commitWithinMs);SolrPingResponse ping();@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String id, int commitWithinMs);QueryResponse query(String collection, SolrParams params);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String id, int commitWithinMs);QueryResponse query(String collection, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String id, int commitWithinMs);QueryResponse query(SolrParams params);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String id, int commitWithinMs);QueryResponse query(SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String id, int commitWithinMs);QueryResponse query(String collection, SolrParams params, METHOD method);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String id, int commitWithinMs);QueryResponse query(String collection, SolrParams params, METHOD method);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String id, int commitWithinMs);QueryResponse query(SolrParams params, METHOD method);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String id, int commitWithinMs);QueryResponse query(SolrParams params, METHOD method);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String id, int commitWithinMs);QueryResponse queryAndStreamResponse(String collection, SolrParams params, StreamingResponseCallback callback);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String id, int commitWithinMs);QueryResponse queryAndStreamResponse(String collection, SolrParams params, StreamingResponseCallback callback);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String id, int commitWithinMs);QueryResponse queryAndStreamResponse(SolrParams params, StreamingResponseCallback callback);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String id, int commitWithinMs);QueryResponse queryAndStreamResponse(SolrParams params, StreamingResponseCallback callback);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String id, int commitWithinMs);SolrDocument getById(String collection, String id);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String id, int commitWithinMs);SolrDocument getById(String collection, String id);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String id, int commitWithinMs);SolrDocument getById(String id);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String id, int commitWithinMs);SolrDocument getById(String id);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String id, int commitWithinMs);SolrDocument getById(String collection, String id, SolrParams params);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String id, int commitWithinMs);SolrDocument getById(String collection, String id, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String id, int commitWithinMs);SolrDocument getById(String id, SolrParams params);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String id, int commitWithinMs);SolrDocument getById(String id, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String id, int commitWithinMs);SolrDocumentList getById(String collection, Collection ids);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String id, int commitWithinMs);SolrDocumentList getById(String collection, Collection ids);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String id, int commitWithinMs);SolrDocumentList getById(Collection ids);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String id, int commitWithinMs);SolrDocumentList getById(Collection ids);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String id, int commitWithinMs);SolrDocumentList getById(String collection, Collection ids, SolrParams params);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String id, int commitWithinMs);SolrDocumentList getById(String collection, Collection ids, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String id, int commitWithinMs);SolrDocumentList getById(Collection ids, SolrParams params);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String id, int commitWithinMs);SolrDocumentList getById(Collection ids, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String id, int commitWithinMs);NamedList request(SolrRequest request, String collection);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String id, int commitWithinMs);NamedList request(SolrRequest request, String collection);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String id, int commitWithinMs);NamedList request(SolrRequest request);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String id, int commitWithinMs);NamedList request(SolrRequest request);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String collection, List ids);UpdateResponse deleteById(List ids);Free text;;;Deletes a list of documents by unique ID ;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String collection, List ids);UpdateResponse deleteById(List ids);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String collection, List ids);UpdateResponse deleteById(List ids);@param;List<String> ids;List<String> ids;the list of document IDs to delete;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String collection, List ids);UpdateResponse deleteById(List ids);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String collection, List ids);UpdateResponse deleteById(List ids);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String collection, List ids);UpdateResponse deleteById(String collection, List ids, int commitWithinMs);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String collection, List ids);UpdateResponse deleteById(String collection, List ids, int commitWithinMs);@param;String collection;String collection;the Solr collection to delete the documents from;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String collection, List ids);UpdateResponse deleteById(String collection, List ids, int commitWithinMs);@param;List<String> ids;List<String> ids;the list of document IDs to delete;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String collection, List ids);UpdateResponse deleteById(String collection, List ids, int commitWithinMs);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String collection, List ids);UpdateResponse deleteById(String collection, List ids, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String collection, List ids);UpdateResponse deleteById(List ids, int commitWithinMs);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String collection, List ids);UpdateResponse deleteById(List ids, int commitWithinMs);@param;List<String> ids;List<String> ids;the list of document IDs to delete;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String collection, List ids);UpdateResponse deleteById(List ids, int commitWithinMs);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String collection, List ids);UpdateResponse deleteById(List ids, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String collection, List ids);UpdateResponse deleteByQuery(String collection, String query);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String collection, List ids);UpdateResponse deleteByQuery(String collection, String query);@param;String collection;String collection;the Solr collection to delete the documents from;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String collection, List ids);UpdateResponse deleteByQuery(String collection, String query);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String collection, List ids);UpdateResponse deleteByQuery(String collection, String query);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String collection, List ids);UpdateResponse deleteByQuery(String query);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String collection, List ids);UpdateResponse deleteByQuery(String query);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String collection, List ids);UpdateResponse deleteByQuery(String query);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String collection, List ids);UpdateResponse deleteByQuery(String collection, String query, int commitWithinMs);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String collection, List ids);UpdateResponse deleteByQuery(String collection, String query, int commitWithinMs);@param;String collection;String collection;the Solr collection to delete the documents from;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String collection, List ids);UpdateResponse deleteByQuery(String collection, String query, int commitWithinMs);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String collection, List ids);UpdateResponse deleteByQuery(String collection, String query, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String collection, List ids);UpdateResponse deleteByQuery(String query, int commitWithinMs);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String collection, List ids);UpdateResponse deleteByQuery(String query, int commitWithinMs);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String collection, List ids);UpdateResponse deleteByQuery(String query, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String collection, List ids);SolrPingResponse ping();@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String collection, List ids);SolrPingResponse ping();@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String collection, List ids);QueryResponse query(String collection, SolrParams params);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String collection, List ids);QueryResponse query(String collection, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String collection, List ids);QueryResponse query(SolrParams params);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String collection, List ids);QueryResponse query(SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String collection, List ids);QueryResponse query(String collection, SolrParams params, METHOD method);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String collection, List ids);QueryResponse query(String collection, SolrParams params, METHOD method);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String collection, List ids);QueryResponse query(SolrParams params, METHOD method);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String collection, List ids);QueryResponse query(SolrParams params, METHOD method);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String collection, List ids);QueryResponse queryAndStreamResponse(String collection, SolrParams params, StreamingResponseCallback callback);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String collection, List ids);QueryResponse queryAndStreamResponse(String collection, SolrParams params, StreamingResponseCallback callback);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String collection, List ids);QueryResponse queryAndStreamResponse(SolrParams params, StreamingResponseCallback callback);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String collection, List ids);QueryResponse queryAndStreamResponse(SolrParams params, StreamingResponseCallback callback);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String collection, List ids);SolrDocument getById(String collection, String id);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String collection, List ids);SolrDocument getById(String collection, String id);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String collection, List ids);SolrDocument getById(String id);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String collection, List ids);SolrDocument getById(String id);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String collection, List ids);SolrDocument getById(String collection, String id, SolrParams params);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String collection, List ids);SolrDocument getById(String collection, String id, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String collection, List ids);SolrDocument getById(String id, SolrParams params);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String collection, List ids);SolrDocument getById(String id, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String collection, List ids);SolrDocumentList getById(String collection, Collection ids);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String collection, List ids);SolrDocumentList getById(String collection, Collection ids);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String collection, List ids);SolrDocumentList getById(Collection ids);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String collection, List ids);SolrDocumentList getById(Collection ids);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String collection, List ids);SolrDocumentList getById(String collection, Collection ids, SolrParams params);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String collection, List ids);SolrDocumentList getById(String collection, Collection ids, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String collection, List ids);SolrDocumentList getById(Collection ids, SolrParams params);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String collection, List ids);SolrDocumentList getById(Collection ids, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String collection, List ids);NamedList request(SolrRequest request, String collection);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String collection, List ids);NamedList request(SolrRequest request, String collection);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String collection, List ids);NamedList request(SolrRequest request);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String collection, List ids);NamedList request(SolrRequest request);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(List ids);UpdateResponse deleteById(String collection, List ids, int commitWithinMs);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(List ids);UpdateResponse deleteById(String collection, List ids, int commitWithinMs);@param;List<String> ids;List<String> ids;the list of document IDs to delete;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(List ids);UpdateResponse deleteById(String collection, List ids, int commitWithinMs);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(List ids);UpdateResponse deleteById(String collection, List ids, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(List ids);UpdateResponse deleteById(List ids, int commitWithinMs);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(List ids);UpdateResponse deleteById(List ids, int commitWithinMs);@param;List<String> ids;List<String> ids;the list of document IDs to delete;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(List ids);UpdateResponse deleteById(List ids, int commitWithinMs);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(List ids);UpdateResponse deleteById(List ids, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(List ids);UpdateResponse deleteByQuery(String collection, String query);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(List ids);UpdateResponse deleteByQuery(String collection, String query);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(List ids);UpdateResponse deleteByQuery(String collection, String query);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(List ids);UpdateResponse deleteByQuery(String query);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(List ids);UpdateResponse deleteByQuery(String query);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(List ids);UpdateResponse deleteByQuery(String query);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(List ids);UpdateResponse deleteByQuery(String collection, String query, int commitWithinMs);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(List ids);UpdateResponse deleteByQuery(String collection, String query, int commitWithinMs);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(List ids);UpdateResponse deleteByQuery(String collection, String query, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(List ids);UpdateResponse deleteByQuery(String query, int commitWithinMs);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(List ids);UpdateResponse deleteByQuery(String query, int commitWithinMs);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(List ids);UpdateResponse deleteByQuery(String query, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(List ids);SolrPingResponse ping();@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(List ids);SolrPingResponse ping();@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(List ids);QueryResponse query(String collection, SolrParams params);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(List ids);QueryResponse query(String collection, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(List ids);QueryResponse query(SolrParams params);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(List ids);QueryResponse query(SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(List ids);QueryResponse query(String collection, SolrParams params, METHOD method);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(List ids);QueryResponse query(String collection, SolrParams params, METHOD method);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(List ids);QueryResponse query(SolrParams params, METHOD method);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(List ids);QueryResponse query(SolrParams params, METHOD method);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(List ids);QueryResponse queryAndStreamResponse(String collection, SolrParams params, StreamingResponseCallback callback);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(List ids);QueryResponse queryAndStreamResponse(String collection, SolrParams params, StreamingResponseCallback callback);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(List ids);QueryResponse queryAndStreamResponse(SolrParams params, StreamingResponseCallback callback);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(List ids);QueryResponse queryAndStreamResponse(SolrParams params, StreamingResponseCallback callback);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(List ids);SolrDocument getById(String collection, String id);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(List ids);SolrDocument getById(String collection, String id);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(List ids);SolrDocument getById(String id);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(List ids);SolrDocument getById(String id);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(List ids);SolrDocument getById(String collection, String id, SolrParams params);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(List ids);SolrDocument getById(String collection, String id, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(List ids);SolrDocument getById(String id, SolrParams params);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(List ids);SolrDocument getById(String id, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(List ids);SolrDocumentList getById(String collection, Collection ids);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(List ids);SolrDocumentList getById(String collection, Collection ids);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(List ids);SolrDocumentList getById(Collection ids);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(List ids);SolrDocumentList getById(Collection ids);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(List ids);SolrDocumentList getById(String collection, Collection ids, SolrParams params);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(List ids);SolrDocumentList getById(String collection, Collection ids, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(List ids);SolrDocumentList getById(Collection ids, SolrParams params);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(List ids);SolrDocumentList getById(Collection ids, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(List ids);NamedList request(SolrRequest request, String collection);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(List ids);NamedList request(SolrRequest request, String collection);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(List ids);NamedList request(SolrRequest request);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(List ids);NamedList request(SolrRequest request);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String collection, List ids, int commitWithinMs);UpdateResponse deleteById(List ids, int commitWithinMs);Free text;;;Deletes a list of documents by unique ID, specifying max time before commit ;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String collection, List ids, int commitWithinMs);UpdateResponse deleteById(List ids, int commitWithinMs);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String collection, List ids, int commitWithinMs);UpdateResponse deleteById(List ids, int commitWithinMs);@param;List<String> ids;List<String> ids;the list of document IDs to delete;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String collection, List ids, int commitWithinMs);UpdateResponse deleteById(List ids, int commitWithinMs);@param;int commitWithinMs;int commitWithinMs;max time (in ms) before a commit will happen;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String collection, List ids, int commitWithinMs);UpdateResponse deleteById(List ids, int commitWithinMs);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String collection, List ids, int commitWithinMs);UpdateResponse deleteById(List ids, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String collection, List ids, int commitWithinMs);UpdateResponse deleteByQuery(String collection, String query);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String collection, List ids, int commitWithinMs);UpdateResponse deleteByQuery(String collection, String query);@param;String collection;String collection;the Solr collection to delete the documents from;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String collection, List ids, int commitWithinMs);UpdateResponse deleteByQuery(String collection, String query);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String collection, List ids, int commitWithinMs);UpdateResponse deleteByQuery(String collection, String query);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String collection, List ids, int commitWithinMs);UpdateResponse deleteByQuery(String query);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String collection, List ids, int commitWithinMs);UpdateResponse deleteByQuery(String query);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String collection, List ids, int commitWithinMs);UpdateResponse deleteByQuery(String query);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String collection, List ids, int commitWithinMs);UpdateResponse deleteByQuery(String collection, String query, int commitWithinMs);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String collection, List ids, int commitWithinMs);UpdateResponse deleteByQuery(String collection, String query, int commitWithinMs);@param;String collection;String collection;the Solr collection to delete the documents from;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String collection, List ids, int commitWithinMs);UpdateResponse deleteByQuery(String collection, String query, int commitWithinMs);@param;int commitWithinMs;int commitWithinMs;max time (in ms) before a commit will happen;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String collection, List ids, int commitWithinMs);UpdateResponse deleteByQuery(String collection, String query, int commitWithinMs);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String collection, List ids, int commitWithinMs);UpdateResponse deleteByQuery(String collection, String query, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String collection, List ids, int commitWithinMs);UpdateResponse deleteByQuery(String query, int commitWithinMs);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String collection, List ids, int commitWithinMs);UpdateResponse deleteByQuery(String query, int commitWithinMs);@param;int commitWithinMs;int commitWithinMs;max time (in ms) before a commit will happen;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String collection, List ids, int commitWithinMs);UpdateResponse deleteByQuery(String query, int commitWithinMs);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String collection, List ids, int commitWithinMs);UpdateResponse deleteByQuery(String query, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String collection, List ids, int commitWithinMs);SolrPingResponse ping();@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String collection, List ids, int commitWithinMs);SolrPingResponse ping();@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String collection, List ids, int commitWithinMs);QueryResponse query(String collection, SolrParams params);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String collection, List ids, int commitWithinMs);QueryResponse query(String collection, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String collection, List ids, int commitWithinMs);QueryResponse query(SolrParams params);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String collection, List ids, int commitWithinMs);QueryResponse query(SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String collection, List ids, int commitWithinMs);QueryResponse query(String collection, SolrParams params, METHOD method);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String collection, List ids, int commitWithinMs);QueryResponse query(String collection, SolrParams params, METHOD method);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String collection, List ids, int commitWithinMs);QueryResponse query(SolrParams params, METHOD method);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String collection, List ids, int commitWithinMs);QueryResponse query(SolrParams params, METHOD method);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String collection, List ids, int commitWithinMs);QueryResponse queryAndStreamResponse(String collection, SolrParams params, StreamingResponseCallback callback);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String collection, List ids, int commitWithinMs);QueryResponse queryAndStreamResponse(String collection, SolrParams params, StreamingResponseCallback callback);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String collection, List ids, int commitWithinMs);QueryResponse queryAndStreamResponse(SolrParams params, StreamingResponseCallback callback);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String collection, List ids, int commitWithinMs);QueryResponse queryAndStreamResponse(SolrParams params, StreamingResponseCallback callback);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String collection, List ids, int commitWithinMs);SolrDocument getById(String collection, String id);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String collection, List ids, int commitWithinMs);SolrDocument getById(String collection, String id);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String collection, List ids, int commitWithinMs);SolrDocument getById(String id);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String collection, List ids, int commitWithinMs);SolrDocument getById(String id);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String collection, List ids, int commitWithinMs);SolrDocument getById(String collection, String id, SolrParams params);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String collection, List ids, int commitWithinMs);SolrDocument getById(String collection, String id, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String collection, List ids, int commitWithinMs);SolrDocument getById(String id, SolrParams params);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String collection, List ids, int commitWithinMs);SolrDocument getById(String id, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String collection, List ids, int commitWithinMs);SolrDocumentList getById(String collection, Collection ids);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String collection, List ids, int commitWithinMs);SolrDocumentList getById(String collection, Collection ids);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String collection, List ids, int commitWithinMs);SolrDocumentList getById(Collection ids);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String collection, List ids, int commitWithinMs);SolrDocumentList getById(Collection ids);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String collection, List ids, int commitWithinMs);SolrDocumentList getById(String collection, Collection ids, SolrParams params);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String collection, List ids, int commitWithinMs);SolrDocumentList getById(String collection, Collection ids, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String collection, List ids, int commitWithinMs);SolrDocumentList getById(Collection ids, SolrParams params);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String collection, List ids, int commitWithinMs);SolrDocumentList getById(Collection ids, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String collection, List ids, int commitWithinMs);NamedList request(SolrRequest request, String collection);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String collection, List ids, int commitWithinMs);NamedList request(SolrRequest request, String collection);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String collection, List ids, int commitWithinMs);NamedList request(SolrRequest request);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(String collection, List ids, int commitWithinMs);NamedList request(SolrRequest request);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(List ids, int commitWithinMs);UpdateResponse deleteByQuery(String collection, String query);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(List ids, int commitWithinMs);UpdateResponse deleteByQuery(String collection, String query);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(List ids, int commitWithinMs);UpdateResponse deleteByQuery(String collection, String query);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(List ids, int commitWithinMs);UpdateResponse deleteByQuery(String query);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(List ids, int commitWithinMs);UpdateResponse deleteByQuery(String query);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(List ids, int commitWithinMs);UpdateResponse deleteByQuery(String query);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(List ids, int commitWithinMs);UpdateResponse deleteByQuery(String collection, String query, int commitWithinMs);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(List ids, int commitWithinMs);UpdateResponse deleteByQuery(String collection, String query, int commitWithinMs);@param;int commitWithinMs;int commitWithinMs;max time (in ms) before a commit will happen;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(List ids, int commitWithinMs);UpdateResponse deleteByQuery(String collection, String query, int commitWithinMs);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(List ids, int commitWithinMs);UpdateResponse deleteByQuery(String collection, String query, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(List ids, int commitWithinMs);UpdateResponse deleteByQuery(String query, int commitWithinMs);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(List ids, int commitWithinMs);UpdateResponse deleteByQuery(String query, int commitWithinMs);@param;int commitWithinMs;int commitWithinMs;max time (in ms) before a commit will happen;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(List ids, int commitWithinMs);UpdateResponse deleteByQuery(String query, int commitWithinMs);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(List ids, int commitWithinMs);UpdateResponse deleteByQuery(String query, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(List ids, int commitWithinMs);SolrPingResponse ping();@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(List ids, int commitWithinMs);SolrPingResponse ping();@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(List ids, int commitWithinMs);QueryResponse query(String collection, SolrParams params);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(List ids, int commitWithinMs);QueryResponse query(String collection, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(List ids, int commitWithinMs);QueryResponse query(SolrParams params);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(List ids, int commitWithinMs);QueryResponse query(SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(List ids, int commitWithinMs);QueryResponse query(String collection, SolrParams params, METHOD method);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(List ids, int commitWithinMs);QueryResponse query(String collection, SolrParams params, METHOD method);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(List ids, int commitWithinMs);QueryResponse query(SolrParams params, METHOD method);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(List ids, int commitWithinMs);QueryResponse query(SolrParams params, METHOD method);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(List ids, int commitWithinMs);QueryResponse queryAndStreamResponse(String collection, SolrParams params, StreamingResponseCallback callback);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(List ids, int commitWithinMs);QueryResponse queryAndStreamResponse(String collection, SolrParams params, StreamingResponseCallback callback);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(List ids, int commitWithinMs);QueryResponse queryAndStreamResponse(SolrParams params, StreamingResponseCallback callback);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(List ids, int commitWithinMs);QueryResponse queryAndStreamResponse(SolrParams params, StreamingResponseCallback callback);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(List ids, int commitWithinMs);SolrDocument getById(String collection, String id);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(List ids, int commitWithinMs);SolrDocument getById(String collection, String id);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(List ids, int commitWithinMs);SolrDocument getById(String id);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(List ids, int commitWithinMs);SolrDocument getById(String id);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(List ids, int commitWithinMs);SolrDocument getById(String collection, String id, SolrParams params);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(List ids, int commitWithinMs);SolrDocument getById(String collection, String id, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(List ids, int commitWithinMs);SolrDocument getById(String id, SolrParams params);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(List ids, int commitWithinMs);SolrDocument getById(String id, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(List ids, int commitWithinMs);SolrDocumentList getById(String collection, Collection ids);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(List ids, int commitWithinMs);SolrDocumentList getById(String collection, Collection ids);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(List ids, int commitWithinMs);SolrDocumentList getById(Collection ids);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(List ids, int commitWithinMs);SolrDocumentList getById(Collection ids);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(List ids, int commitWithinMs);SolrDocumentList getById(String collection, Collection ids, SolrParams params);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(List ids, int commitWithinMs);SolrDocumentList getById(String collection, Collection ids, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(List ids, int commitWithinMs);SolrDocumentList getById(Collection ids, SolrParams params);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(List ids, int commitWithinMs);SolrDocumentList getById(Collection ids, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(List ids, int commitWithinMs);NamedList request(SolrRequest request, String collection);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(List ids, int commitWithinMs);NamedList request(SolrRequest request, String collection);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(List ids, int commitWithinMs);NamedList request(SolrRequest request);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteById(List ids, int commitWithinMs);NamedList request(SolrRequest request);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteByQuery(String collection, String query);UpdateResponse deleteByQuery(String query);Free text;;;Deletes documents from the index based on a query ;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteByQuery(String collection, String query);UpdateResponse deleteByQuery(String query);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteByQuery(String collection, String query);UpdateResponse deleteByQuery(String query);@param;String query;String query;the query expressing what documents to delete;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteByQuery(String collection, String query);UpdateResponse deleteByQuery(String query);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteByQuery(String collection, String query);UpdateResponse deleteByQuery(String query);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteByQuery(String collection, String query);UpdateResponse deleteByQuery(String collection, String query, int commitWithinMs);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteByQuery(String collection, String query);UpdateResponse deleteByQuery(String collection, String query, int commitWithinMs);@param;String collection;String collection;the Solr collection to delete the documents from;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteByQuery(String collection, String query);UpdateResponse deleteByQuery(String collection, String query, int commitWithinMs);@param;String query;String query;the query expressing what documents to delete;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteByQuery(String collection, String query);UpdateResponse deleteByQuery(String collection, String query, int commitWithinMs);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteByQuery(String collection, String query);UpdateResponse deleteByQuery(String collection, String query, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteByQuery(String collection, String query);UpdateResponse deleteByQuery(String query, int commitWithinMs);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteByQuery(String collection, String query);UpdateResponse deleteByQuery(String query, int commitWithinMs);@param;String query;String query;the query expressing what documents to delete;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteByQuery(String collection, String query);UpdateResponse deleteByQuery(String query, int commitWithinMs);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteByQuery(String collection, String query);UpdateResponse deleteByQuery(String query, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteByQuery(String collection, String query);SolrPingResponse ping();@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteByQuery(String collection, String query);SolrPingResponse ping();@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteByQuery(String collection, String query);QueryResponse query(String collection, SolrParams params);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteByQuery(String collection, String query);QueryResponse query(String collection, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteByQuery(String collection, String query);QueryResponse query(SolrParams params);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteByQuery(String collection, String query);QueryResponse query(SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteByQuery(String collection, String query);QueryResponse query(String collection, SolrParams params, METHOD method);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteByQuery(String collection, String query);QueryResponse query(String collection, SolrParams params, METHOD method);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteByQuery(String collection, String query);QueryResponse query(SolrParams params, METHOD method);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteByQuery(String collection, String query);QueryResponse query(SolrParams params, METHOD method);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteByQuery(String collection, String query);QueryResponse queryAndStreamResponse(String collection, SolrParams params, StreamingResponseCallback callback);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteByQuery(String collection, String query);QueryResponse queryAndStreamResponse(String collection, SolrParams params, StreamingResponseCallback callback);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteByQuery(String collection, String query);QueryResponse queryAndStreamResponse(SolrParams params, StreamingResponseCallback callback);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteByQuery(String collection, String query);QueryResponse queryAndStreamResponse(SolrParams params, StreamingResponseCallback callback);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteByQuery(String collection, String query);SolrDocument getById(String collection, String id);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteByQuery(String collection, String query);SolrDocument getById(String collection, String id);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteByQuery(String collection, String query);SolrDocument getById(String id);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteByQuery(String collection, String query);SolrDocument getById(String id);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteByQuery(String collection, String query);SolrDocument getById(String collection, String id, SolrParams params);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteByQuery(String collection, String query);SolrDocument getById(String collection, String id, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteByQuery(String collection, String query);SolrDocument getById(String id, SolrParams params);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteByQuery(String collection, String query);SolrDocument getById(String id, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteByQuery(String collection, String query);SolrDocumentList getById(String collection, Collection ids);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteByQuery(String collection, String query);SolrDocumentList getById(String collection, Collection ids);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteByQuery(String collection, String query);SolrDocumentList getById(Collection ids);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteByQuery(String collection, String query);SolrDocumentList getById(Collection ids);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteByQuery(String collection, String query);SolrDocumentList getById(String collection, Collection ids, SolrParams params);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteByQuery(String collection, String query);SolrDocumentList getById(String collection, Collection ids, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteByQuery(String collection, String query);SolrDocumentList getById(Collection ids, SolrParams params);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteByQuery(String collection, String query);SolrDocumentList getById(Collection ids, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteByQuery(String collection, String query);NamedList request(SolrRequest request, String collection);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteByQuery(String collection, String query);NamedList request(SolrRequest request, String collection);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteByQuery(String collection, String query);NamedList request(SolrRequest request);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteByQuery(String collection, String query);NamedList request(SolrRequest request);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteByQuery(String query);UpdateResponse deleteByQuery(String collection, String query, int commitWithinMs);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteByQuery(String query);UpdateResponse deleteByQuery(String collection, String query, int commitWithinMs);@param;String query;String query;the query expressing what documents to delete;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteByQuery(String query);UpdateResponse deleteByQuery(String collection, String query, int commitWithinMs);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteByQuery(String query);UpdateResponse deleteByQuery(String collection, String query, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteByQuery(String query);UpdateResponse deleteByQuery(String query, int commitWithinMs);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteByQuery(String query);UpdateResponse deleteByQuery(String query, int commitWithinMs);@param;String query;String query;the query expressing what documents to delete;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteByQuery(String query);UpdateResponse deleteByQuery(String query, int commitWithinMs);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteByQuery(String query);UpdateResponse deleteByQuery(String query, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteByQuery(String query);SolrPingResponse ping();@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteByQuery(String query);SolrPingResponse ping();@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteByQuery(String query);QueryResponse query(String collection, SolrParams params);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteByQuery(String query);QueryResponse query(String collection, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteByQuery(String query);QueryResponse query(SolrParams params);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteByQuery(String query);QueryResponse query(SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteByQuery(String query);QueryResponse query(String collection, SolrParams params, METHOD method);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteByQuery(String query);QueryResponse query(String collection, SolrParams params, METHOD method);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteByQuery(String query);QueryResponse query(SolrParams params, METHOD method);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteByQuery(String query);QueryResponse query(SolrParams params, METHOD method);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteByQuery(String query);QueryResponse queryAndStreamResponse(String collection, SolrParams params, StreamingResponseCallback callback);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteByQuery(String query);QueryResponse queryAndStreamResponse(String collection, SolrParams params, StreamingResponseCallback callback);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteByQuery(String query);QueryResponse queryAndStreamResponse(SolrParams params, StreamingResponseCallback callback);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteByQuery(String query);QueryResponse queryAndStreamResponse(SolrParams params, StreamingResponseCallback callback);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteByQuery(String query);SolrDocument getById(String collection, String id);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteByQuery(String query);SolrDocument getById(String collection, String id);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteByQuery(String query);SolrDocument getById(String id);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteByQuery(String query);SolrDocument getById(String id);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteByQuery(String query);SolrDocument getById(String collection, String id, SolrParams params);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteByQuery(String query);SolrDocument getById(String collection, String id, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteByQuery(String query);SolrDocument getById(String id, SolrParams params);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteByQuery(String query);SolrDocument getById(String id, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteByQuery(String query);SolrDocumentList getById(String collection, Collection ids);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteByQuery(String query);SolrDocumentList getById(String collection, Collection ids);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteByQuery(String query);SolrDocumentList getById(Collection ids);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteByQuery(String query);SolrDocumentList getById(Collection ids);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteByQuery(String query);SolrDocumentList getById(String collection, Collection ids, SolrParams params);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteByQuery(String query);SolrDocumentList getById(String collection, Collection ids, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteByQuery(String query);SolrDocumentList getById(Collection ids, SolrParams params);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteByQuery(String query);SolrDocumentList getById(Collection ids, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteByQuery(String query);NamedList request(SolrRequest request, String collection);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteByQuery(String query);NamedList request(SolrRequest request, String collection);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteByQuery(String query);NamedList request(SolrRequest request);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteByQuery(String query);NamedList request(SolrRequest request);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteByQuery(String collection, String query, int commitWithinMs);UpdateResponse deleteByQuery(String query, int commitWithinMs);Free text;;;Deletes documents from the index based on a query, specifying max time before commit ;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteByQuery(String collection, String query, int commitWithinMs);UpdateResponse deleteByQuery(String query, int commitWithinMs);@return;;;an org.apache.solr.client.solrj.response.UpdateResponse containing the response from the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteByQuery(String collection, String query, int commitWithinMs);UpdateResponse deleteByQuery(String query, int commitWithinMs);@param;String query;String query;the query expressing what documents to delete;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteByQuery(String collection, String query, int commitWithinMs);UpdateResponse deleteByQuery(String query, int commitWithinMs);@param;int commitWithinMs;int commitWithinMs;max time (in ms) before a commit will happen;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteByQuery(String collection, String query, int commitWithinMs);UpdateResponse deleteByQuery(String query, int commitWithinMs);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteByQuery(String collection, String query, int commitWithinMs);UpdateResponse deleteByQuery(String query, int commitWithinMs);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteByQuery(String collection, String query, int commitWithinMs);SolrPingResponse ping();@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteByQuery(String collection, String query, int commitWithinMs);SolrPingResponse ping();@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteByQuery(String collection, String query, int commitWithinMs);QueryResponse query(String collection, SolrParams params);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteByQuery(String collection, String query, int commitWithinMs);QueryResponse query(String collection, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteByQuery(String collection, String query, int commitWithinMs);QueryResponse query(SolrParams params);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteByQuery(String collection, String query, int commitWithinMs);QueryResponse query(SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteByQuery(String collection, String query, int commitWithinMs);QueryResponse query(String collection, SolrParams params, METHOD method);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteByQuery(String collection, String query, int commitWithinMs);QueryResponse query(String collection, SolrParams params, METHOD method);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteByQuery(String collection, String query, int commitWithinMs);QueryResponse query(SolrParams params, METHOD method);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteByQuery(String collection, String query, int commitWithinMs);QueryResponse query(SolrParams params, METHOD method);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteByQuery(String collection, String query, int commitWithinMs);QueryResponse queryAndStreamResponse(String collection, SolrParams params, StreamingResponseCallback callback);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteByQuery(String collection, String query, int commitWithinMs);QueryResponse queryAndStreamResponse(String collection, SolrParams params, StreamingResponseCallback callback);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteByQuery(String collection, String query, int commitWithinMs);QueryResponse queryAndStreamResponse(SolrParams params, StreamingResponseCallback callback);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteByQuery(String collection, String query, int commitWithinMs);QueryResponse queryAndStreamResponse(SolrParams params, StreamingResponseCallback callback);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteByQuery(String collection, String query, int commitWithinMs);SolrDocument getById(String collection, String id);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteByQuery(String collection, String query, int commitWithinMs);SolrDocument getById(String collection, String id);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteByQuery(String collection, String query, int commitWithinMs);SolrDocument getById(String id);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteByQuery(String collection, String query, int commitWithinMs);SolrDocument getById(String id);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteByQuery(String collection, String query, int commitWithinMs);SolrDocument getById(String collection, String id, SolrParams params);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteByQuery(String collection, String query, int commitWithinMs);SolrDocument getById(String collection, String id, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteByQuery(String collection, String query, int commitWithinMs);SolrDocument getById(String id, SolrParams params);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteByQuery(String collection, String query, int commitWithinMs);SolrDocument getById(String id, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteByQuery(String collection, String query, int commitWithinMs);SolrDocumentList getById(String collection, Collection ids);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteByQuery(String collection, String query, int commitWithinMs);SolrDocumentList getById(String collection, Collection ids);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteByQuery(String collection, String query, int commitWithinMs);SolrDocumentList getById(Collection ids);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteByQuery(String collection, String query, int commitWithinMs);SolrDocumentList getById(Collection ids);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteByQuery(String collection, String query, int commitWithinMs);SolrDocumentList getById(String collection, Collection ids, SolrParams params);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteByQuery(String collection, String query, int commitWithinMs);SolrDocumentList getById(String collection, Collection ids, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteByQuery(String collection, String query, int commitWithinMs);SolrDocumentList getById(Collection ids, SolrParams params);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteByQuery(String collection, String query, int commitWithinMs);SolrDocumentList getById(Collection ids, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteByQuery(String collection, String query, int commitWithinMs);NamedList request(SolrRequest request, String collection);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteByQuery(String collection, String query, int commitWithinMs);NamedList request(SolrRequest request, String collection);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteByQuery(String collection, String query, int commitWithinMs);NamedList request(SolrRequest request);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteByQuery(String collection, String query, int commitWithinMs);NamedList request(SolrRequest request);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteByQuery(String query, int commitWithinMs);SolrPingResponse ping();@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteByQuery(String query, int commitWithinMs);SolrPingResponse ping();@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteByQuery(String query, int commitWithinMs);QueryResponse query(String collection, SolrParams params);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteByQuery(String query, int commitWithinMs);QueryResponse query(String collection, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteByQuery(String query, int commitWithinMs);QueryResponse query(SolrParams params);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteByQuery(String query, int commitWithinMs);QueryResponse query(SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteByQuery(String query, int commitWithinMs);QueryResponse query(String collection, SolrParams params, METHOD method);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteByQuery(String query, int commitWithinMs);QueryResponse query(String collection, SolrParams params, METHOD method);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteByQuery(String query, int commitWithinMs);QueryResponse query(SolrParams params, METHOD method);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteByQuery(String query, int commitWithinMs);QueryResponse query(SolrParams params, METHOD method);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteByQuery(String query, int commitWithinMs);QueryResponse queryAndStreamResponse(String collection, SolrParams params, StreamingResponseCallback callback);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteByQuery(String query, int commitWithinMs);QueryResponse queryAndStreamResponse(String collection, SolrParams params, StreamingResponseCallback callback);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteByQuery(String query, int commitWithinMs);QueryResponse queryAndStreamResponse(SolrParams params, StreamingResponseCallback callback);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteByQuery(String query, int commitWithinMs);QueryResponse queryAndStreamResponse(SolrParams params, StreamingResponseCallback callback);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteByQuery(String query, int commitWithinMs);SolrDocument getById(String collection, String id);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteByQuery(String query, int commitWithinMs);SolrDocument getById(String collection, String id);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteByQuery(String query, int commitWithinMs);SolrDocument getById(String id);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteByQuery(String query, int commitWithinMs);SolrDocument getById(String id);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteByQuery(String query, int commitWithinMs);SolrDocument getById(String collection, String id, SolrParams params);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteByQuery(String query, int commitWithinMs);SolrDocument getById(String collection, String id, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteByQuery(String query, int commitWithinMs);SolrDocument getById(String id, SolrParams params);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteByQuery(String query, int commitWithinMs);SolrDocument getById(String id, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteByQuery(String query, int commitWithinMs);SolrDocumentList getById(String collection, Collection ids);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteByQuery(String query, int commitWithinMs);SolrDocumentList getById(String collection, Collection ids);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteByQuery(String query, int commitWithinMs);SolrDocumentList getById(Collection ids);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteByQuery(String query, int commitWithinMs);SolrDocumentList getById(Collection ids);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteByQuery(String query, int commitWithinMs);SolrDocumentList getById(String collection, Collection ids, SolrParams params);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteByQuery(String query, int commitWithinMs);SolrDocumentList getById(String collection, Collection ids, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteByQuery(String query, int commitWithinMs);SolrDocumentList getById(Collection ids, SolrParams params);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteByQuery(String query, int commitWithinMs);SolrDocumentList getById(Collection ids, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteByQuery(String query, int commitWithinMs);NamedList request(SolrRequest request, String collection);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteByQuery(String query, int commitWithinMs);NamedList request(SolrRequest request, String collection);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteByQuery(String query, int commitWithinMs);NamedList request(SolrRequest request);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;UpdateResponse deleteByQuery(String query, int commitWithinMs);NamedList request(SolrRequest request);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;SolrPingResponse ping();QueryResponse query(String collection, SolrParams params);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;SolrPingResponse ping();QueryResponse query(String collection, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;SolrPingResponse ping();QueryResponse query(SolrParams params);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;SolrPingResponse ping();QueryResponse query(SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;SolrPingResponse ping();QueryResponse query(String collection, SolrParams params, METHOD method);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;SolrPingResponse ping();QueryResponse query(String collection, SolrParams params, METHOD method);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;SolrPingResponse ping();QueryResponse query(SolrParams params, METHOD method);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;SolrPingResponse ping();QueryResponse query(SolrParams params, METHOD method);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;SolrPingResponse ping();QueryResponse queryAndStreamResponse(String collection, SolrParams params, StreamingResponseCallback callback);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;SolrPingResponse ping();QueryResponse queryAndStreamResponse(String collection, SolrParams params, StreamingResponseCallback callback);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;SolrPingResponse ping();QueryResponse queryAndStreamResponse(SolrParams params, StreamingResponseCallback callback);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;SolrPingResponse ping();QueryResponse queryAndStreamResponse(SolrParams params, StreamingResponseCallback callback);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;SolrPingResponse ping();SolrDocument getById(String collection, String id);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;SolrPingResponse ping();SolrDocument getById(String collection, String id);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;SolrPingResponse ping();SolrDocument getById(String id);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;SolrPingResponse ping();SolrDocument getById(String id);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;SolrPingResponse ping();SolrDocument getById(String collection, String id, SolrParams params);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;SolrPingResponse ping();SolrDocument getById(String collection, String id, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;SolrPingResponse ping();SolrDocument getById(String id, SolrParams params);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;SolrPingResponse ping();SolrDocument getById(String id, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;SolrPingResponse ping();SolrDocumentList getById(String collection, Collection ids);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;SolrPingResponse ping();SolrDocumentList getById(String collection, Collection ids);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;SolrPingResponse ping();SolrDocumentList getById(Collection ids);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;SolrPingResponse ping();SolrDocumentList getById(Collection ids);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;SolrPingResponse ping();SolrDocumentList getById(String collection, Collection ids, SolrParams params);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;SolrPingResponse ping();SolrDocumentList getById(String collection, Collection ids, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;SolrPingResponse ping();SolrDocumentList getById(Collection ids, SolrParams params);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;SolrPingResponse ping();SolrDocumentList getById(Collection ids, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;SolrPingResponse ping();NamedList request(SolrRequest request, String collection);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;SolrPingResponse ping();NamedList request(SolrRequest request, String collection);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;SolrPingResponse ping();NamedList request(SolrRequest request);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;SolrPingResponse ping();NamedList request(SolrRequest request);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;QueryResponse query(String collection, SolrParams params);QueryResponse query(SolrParams params);Free text;;;Performs a query to the Solr server ;true
org.apache.solr.client.solrj.SolrClient;QueryResponse query(String collection, SolrParams params);QueryResponse query(SolrParams params);@return;;;a org.apache.solr.client.solrj.response.QueryResponse containing the response from the server;true
org.apache.solr.client.solrj.SolrClient;QueryResponse query(String collection, SolrParams params);QueryResponse query(SolrParams params);@param;SolrParams params;SolrParams params;an object holding all key/value parameters to send along the request;true
org.apache.solr.client.solrj.SolrClient;QueryResponse query(String collection, SolrParams params);QueryResponse query(SolrParams params);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;QueryResponse query(String collection, SolrParams params);QueryResponse query(SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;QueryResponse query(String collection, SolrParams params);QueryResponse query(String collection, SolrParams params, METHOD method);Free text;;;Performs a query to the Solr server ;true
org.apache.solr.client.solrj.SolrClient;QueryResponse query(String collection, SolrParams params);QueryResponse query(String collection, SolrParams params, METHOD method);@return;;;a org.apache.solr.client.solrj.response.QueryResponse containing the response from the server;true
org.apache.solr.client.solrj.SolrClient;QueryResponse query(String collection, SolrParams params);QueryResponse query(String collection, SolrParams params, METHOD method);@param;String collection;String collection;the Solr collection to query;true
org.apache.solr.client.solrj.SolrClient;QueryResponse query(String collection, SolrParams params);QueryResponse query(String collection, SolrParams params, METHOD method);@param;SolrParams params;SolrParams params;an object holding all key/value parameters to send along the request;true
org.apache.solr.client.solrj.SolrClient;QueryResponse query(String collection, SolrParams params);QueryResponse query(String collection, SolrParams params, METHOD method);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;QueryResponse query(String collection, SolrParams params);QueryResponse query(String collection, SolrParams params, METHOD method);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;QueryResponse query(String collection, SolrParams params);QueryResponse query(SolrParams params, METHOD method);Free text;;;Performs a query to the Solr server ;true
org.apache.solr.client.solrj.SolrClient;QueryResponse query(String collection, SolrParams params);QueryResponse query(SolrParams params, METHOD method);@return;;;a org.apache.solr.client.solrj.response.QueryResponse containing the response from the server;true
org.apache.solr.client.solrj.SolrClient;QueryResponse query(String collection, SolrParams params);QueryResponse query(SolrParams params, METHOD method);@param;SolrParams params;SolrParams params;an object holding all key/value parameters to send along the request;true
org.apache.solr.client.solrj.SolrClient;QueryResponse query(String collection, SolrParams params);QueryResponse query(SolrParams params, METHOD method);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;QueryResponse query(String collection, SolrParams params);QueryResponse query(SolrParams params, METHOD method);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;QueryResponse query(String collection, SolrParams params);QueryResponse queryAndStreamResponse(String collection, SolrParams params, StreamingResponseCallback callback);@return;;;a org.apache.solr.client.solrj.response.QueryResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;QueryResponse query(String collection, SolrParams params);QueryResponse queryAndStreamResponse(String collection, SolrParams params, StreamingResponseCallback callback);@param;String collection;String collection;the Solr collection to query;true
org.apache.solr.client.solrj.SolrClient;QueryResponse query(String collection, SolrParams params);QueryResponse queryAndStreamResponse(String collection, SolrParams params, StreamingResponseCallback callback);@param;SolrParams params;SolrParams params;an object holding all key/value parameters to send along the request;true
org.apache.solr.client.solrj.SolrClient;QueryResponse query(String collection, SolrParams params);QueryResponse queryAndStreamResponse(String collection, SolrParams params, StreamingResponseCallback callback);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;QueryResponse query(String collection, SolrParams params);QueryResponse queryAndStreamResponse(String collection, SolrParams params, StreamingResponseCallback callback);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;QueryResponse query(String collection, SolrParams params);QueryResponse queryAndStreamResponse(SolrParams params, StreamingResponseCallback callback);@return;;;a org.apache.solr.client.solrj.response.QueryResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;QueryResponse query(String collection, SolrParams params);QueryResponse queryAndStreamResponse(SolrParams params, StreamingResponseCallback callback);@param;SolrParams params;SolrParams params;an object holding all key/value parameters to send along the request;true
org.apache.solr.client.solrj.SolrClient;QueryResponse query(String collection, SolrParams params);QueryResponse queryAndStreamResponse(SolrParams params, StreamingResponseCallback callback);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;QueryResponse query(String collection, SolrParams params);QueryResponse queryAndStreamResponse(SolrParams params, StreamingResponseCallback callback);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;QueryResponse query(String collection, SolrParams params);SolrDocument getById(String collection, String id);@param;String collection;String collection;the Solr collection to query;true
org.apache.solr.client.solrj.SolrClient;QueryResponse query(String collection, SolrParams params);SolrDocument getById(String collection, String id);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;QueryResponse query(String collection, SolrParams params);SolrDocument getById(String collection, String id);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;QueryResponse query(String collection, SolrParams params);SolrDocument getById(String id);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;QueryResponse query(String collection, SolrParams params);SolrDocument getById(String id);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;QueryResponse query(String collection, SolrParams params);SolrDocument getById(String collection, String id, SolrParams params);@param;String collection;String collection;the Solr collection to query;true
org.apache.solr.client.solrj.SolrClient;QueryResponse query(String collection, SolrParams params);SolrDocument getById(String collection, String id, SolrParams params);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;QueryResponse query(String collection, SolrParams params);SolrDocument getById(String collection, String id, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;QueryResponse query(String collection, SolrParams params);SolrDocument getById(String id, SolrParams params);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;QueryResponse query(String collection, SolrParams params);SolrDocument getById(String id, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;QueryResponse query(String collection, SolrParams params);SolrDocumentList getById(String collection, Collection ids);@param;String collection;String collection;the Solr collection to query;true
org.apache.solr.client.solrj.SolrClient;QueryResponse query(String collection, SolrParams params);SolrDocumentList getById(String collection, Collection ids);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;QueryResponse query(String collection, SolrParams params);SolrDocumentList getById(String collection, Collection ids);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;QueryResponse query(String collection, SolrParams params);SolrDocumentList getById(Collection ids);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;QueryResponse query(String collection, SolrParams params);SolrDocumentList getById(Collection ids);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;QueryResponse query(String collection, SolrParams params);SolrDocumentList getById(String collection, Collection ids, SolrParams params);@param;String collection;String collection;the Solr collection to query;true
org.apache.solr.client.solrj.SolrClient;QueryResponse query(String collection, SolrParams params);SolrDocumentList getById(String collection, Collection ids, SolrParams params);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;QueryResponse query(String collection, SolrParams params);SolrDocumentList getById(String collection, Collection ids, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;QueryResponse query(String collection, SolrParams params);SolrDocumentList getById(Collection ids, SolrParams params);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;QueryResponse query(String collection, SolrParams params);SolrDocumentList getById(Collection ids, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;QueryResponse query(String collection, SolrParams params);NamedList request(SolrRequest request, String collection);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;QueryResponse query(String collection, SolrParams params);NamedList request(SolrRequest request, String collection);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;QueryResponse query(String collection, SolrParams params);NamedList request(SolrRequest request);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;QueryResponse query(String collection, SolrParams params);NamedList request(SolrRequest request);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;QueryResponse query(SolrParams params);QueryResponse query(String collection, SolrParams params, METHOD method);Free text;;;Performs a query to the Solr server ;true
org.apache.solr.client.solrj.SolrClient;QueryResponse query(SolrParams params);QueryResponse query(String collection, SolrParams params, METHOD method);@return;;;a org.apache.solr.client.solrj.response.QueryResponse containing the response from the server;true
org.apache.solr.client.solrj.SolrClient;QueryResponse query(SolrParams params);QueryResponse query(String collection, SolrParams params, METHOD method);@param;SolrParams params;SolrParams params;an object holding all key/value parameters to send along the request;true
org.apache.solr.client.solrj.SolrClient;QueryResponse query(SolrParams params);QueryResponse query(String collection, SolrParams params, METHOD method);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;QueryResponse query(SolrParams params);QueryResponse query(String collection, SolrParams params, METHOD method);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;QueryResponse query(SolrParams params);QueryResponse query(SolrParams params, METHOD method);Free text;;;Performs a query to the Solr server ;true
org.apache.solr.client.solrj.SolrClient;QueryResponse query(SolrParams params);QueryResponse query(SolrParams params, METHOD method);@return;;;a org.apache.solr.client.solrj.response.QueryResponse containing the response from the server;true
org.apache.solr.client.solrj.SolrClient;QueryResponse query(SolrParams params);QueryResponse query(SolrParams params, METHOD method);@param;SolrParams params;SolrParams params;an object holding all key/value parameters to send along the request;true
org.apache.solr.client.solrj.SolrClient;QueryResponse query(SolrParams params);QueryResponse query(SolrParams params, METHOD method);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;QueryResponse query(SolrParams params);QueryResponse query(SolrParams params, METHOD method);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;QueryResponse query(SolrParams params);QueryResponse queryAndStreamResponse(String collection, SolrParams params, StreamingResponseCallback callback);@return;;;a org.apache.solr.client.solrj.response.QueryResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;QueryResponse query(SolrParams params);QueryResponse queryAndStreamResponse(String collection, SolrParams params, StreamingResponseCallback callback);@param;SolrParams params;SolrParams params;an object holding all key/value parameters to send along the request;true
org.apache.solr.client.solrj.SolrClient;QueryResponse query(SolrParams params);QueryResponse queryAndStreamResponse(String collection, SolrParams params, StreamingResponseCallback callback);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;QueryResponse query(SolrParams params);QueryResponse queryAndStreamResponse(String collection, SolrParams params, StreamingResponseCallback callback);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;QueryResponse query(SolrParams params);QueryResponse queryAndStreamResponse(SolrParams params, StreamingResponseCallback callback);@return;;;a org.apache.solr.client.solrj.response.QueryResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;QueryResponse query(SolrParams params);QueryResponse queryAndStreamResponse(SolrParams params, StreamingResponseCallback callback);@param;SolrParams params;SolrParams params;an object holding all key/value parameters to send along the request;true
org.apache.solr.client.solrj.SolrClient;QueryResponse query(SolrParams params);QueryResponse queryAndStreamResponse(SolrParams params, StreamingResponseCallback callback);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;QueryResponse query(SolrParams params);QueryResponse queryAndStreamResponse(SolrParams params, StreamingResponseCallback callback);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;QueryResponse query(SolrParams params);SolrDocument getById(String collection, String id);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;QueryResponse query(SolrParams params);SolrDocument getById(String collection, String id);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;QueryResponse query(SolrParams params);SolrDocument getById(String id);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;QueryResponse query(SolrParams params);SolrDocument getById(String id);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;QueryResponse query(SolrParams params);SolrDocument getById(String collection, String id, SolrParams params);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;QueryResponse query(SolrParams params);SolrDocument getById(String collection, String id, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;QueryResponse query(SolrParams params);SolrDocument getById(String id, SolrParams params);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;QueryResponse query(SolrParams params);SolrDocument getById(String id, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;QueryResponse query(SolrParams params);SolrDocumentList getById(String collection, Collection ids);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;QueryResponse query(SolrParams params);SolrDocumentList getById(String collection, Collection ids);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;QueryResponse query(SolrParams params);SolrDocumentList getById(Collection ids);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;QueryResponse query(SolrParams params);SolrDocumentList getById(Collection ids);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;QueryResponse query(SolrParams params);SolrDocumentList getById(String collection, Collection ids, SolrParams params);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;QueryResponse query(SolrParams params);SolrDocumentList getById(String collection, Collection ids, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;QueryResponse query(SolrParams params);SolrDocumentList getById(Collection ids, SolrParams params);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;QueryResponse query(SolrParams params);SolrDocumentList getById(Collection ids, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;QueryResponse query(SolrParams params);NamedList request(SolrRequest request, String collection);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;QueryResponse query(SolrParams params);NamedList request(SolrRequest request, String collection);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;QueryResponse query(SolrParams params);NamedList request(SolrRequest request);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;QueryResponse query(SolrParams params);NamedList request(SolrRequest request);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;QueryResponse query(String collection, SolrParams params, METHOD method);QueryResponse query(SolrParams params, METHOD method);Free text;;;Performs a query to the Solr server ;true
org.apache.solr.client.solrj.SolrClient;QueryResponse query(String collection, SolrParams params, METHOD method);QueryResponse query(SolrParams params, METHOD method);@return;;;a org.apache.solr.client.solrj.response.QueryResponse containing the response from the server;true
org.apache.solr.client.solrj.SolrClient;QueryResponse query(String collection, SolrParams params, METHOD method);QueryResponse query(SolrParams params, METHOD method);@param;SolrParams params;SolrParams params;an object holding all key/value parameters to send along the request;true
org.apache.solr.client.solrj.SolrClient;QueryResponse query(String collection, SolrParams params, METHOD method);QueryResponse query(SolrParams params, METHOD method);@param;METHOD method;METHOD method;specifies the HTTP method to use for the request, such as GET or POST;true
org.apache.solr.client.solrj.SolrClient;QueryResponse query(String collection, SolrParams params, METHOD method);QueryResponse query(SolrParams params, METHOD method);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;QueryResponse query(String collection, SolrParams params, METHOD method);QueryResponse query(SolrParams params, METHOD method);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;QueryResponse query(String collection, SolrParams params, METHOD method);QueryResponse queryAndStreamResponse(String collection, SolrParams params, StreamingResponseCallback callback);@return;;;a org.apache.solr.client.solrj.response.QueryResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;QueryResponse query(String collection, SolrParams params, METHOD method);QueryResponse queryAndStreamResponse(String collection, SolrParams params, StreamingResponseCallback callback);@param;String collection;String collection;the Solr collection to query;true
org.apache.solr.client.solrj.SolrClient;QueryResponse query(String collection, SolrParams params, METHOD method);QueryResponse queryAndStreamResponse(String collection, SolrParams params, StreamingResponseCallback callback);@param;SolrParams params;SolrParams params;an object holding all key/value parameters to send along the request;true
org.apache.solr.client.solrj.SolrClient;QueryResponse query(String collection, SolrParams params, METHOD method);QueryResponse queryAndStreamResponse(String collection, SolrParams params, StreamingResponseCallback callback);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;QueryResponse query(String collection, SolrParams params, METHOD method);QueryResponse queryAndStreamResponse(String collection, SolrParams params, StreamingResponseCallback callback);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;QueryResponse query(String collection, SolrParams params, METHOD method);QueryResponse queryAndStreamResponse(SolrParams params, StreamingResponseCallback callback);@return;;;a org.apache.solr.client.solrj.response.QueryResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;QueryResponse query(String collection, SolrParams params, METHOD method);QueryResponse queryAndStreamResponse(SolrParams params, StreamingResponseCallback callback);@param;SolrParams params;SolrParams params;an object holding all key/value parameters to send along the request;true
org.apache.solr.client.solrj.SolrClient;QueryResponse query(String collection, SolrParams params, METHOD method);QueryResponse queryAndStreamResponse(SolrParams params, StreamingResponseCallback callback);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;QueryResponse query(String collection, SolrParams params, METHOD method);QueryResponse queryAndStreamResponse(SolrParams params, StreamingResponseCallback callback);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;QueryResponse query(String collection, SolrParams params, METHOD method);SolrDocument getById(String collection, String id);@param;String collection;String collection;the Solr collection to query;true
org.apache.solr.client.solrj.SolrClient;QueryResponse query(String collection, SolrParams params, METHOD method);SolrDocument getById(String collection, String id);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;QueryResponse query(String collection, SolrParams params, METHOD method);SolrDocument getById(String collection, String id);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;QueryResponse query(String collection, SolrParams params, METHOD method);SolrDocument getById(String id);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;QueryResponse query(String collection, SolrParams params, METHOD method);SolrDocument getById(String id);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;QueryResponse query(String collection, SolrParams params, METHOD method);SolrDocument getById(String collection, String id, SolrParams params);@param;String collection;String collection;the Solr collection to query;true
org.apache.solr.client.solrj.SolrClient;QueryResponse query(String collection, SolrParams params, METHOD method);SolrDocument getById(String collection, String id, SolrParams params);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;QueryResponse query(String collection, SolrParams params, METHOD method);SolrDocument getById(String collection, String id, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;QueryResponse query(String collection, SolrParams params, METHOD method);SolrDocument getById(String id, SolrParams params);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;QueryResponse query(String collection, SolrParams params, METHOD method);SolrDocument getById(String id, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;QueryResponse query(String collection, SolrParams params, METHOD method);SolrDocumentList getById(String collection, Collection ids);@param;String collection;String collection;the Solr collection to query;true
org.apache.solr.client.solrj.SolrClient;QueryResponse query(String collection, SolrParams params, METHOD method);SolrDocumentList getById(String collection, Collection ids);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;QueryResponse query(String collection, SolrParams params, METHOD method);SolrDocumentList getById(String collection, Collection ids);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;QueryResponse query(String collection, SolrParams params, METHOD method);SolrDocumentList getById(Collection ids);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;QueryResponse query(String collection, SolrParams params, METHOD method);SolrDocumentList getById(Collection ids);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;QueryResponse query(String collection, SolrParams params, METHOD method);SolrDocumentList getById(String collection, Collection ids, SolrParams params);@param;String collection;String collection;the Solr collection to query;true
org.apache.solr.client.solrj.SolrClient;QueryResponse query(String collection, SolrParams params, METHOD method);SolrDocumentList getById(String collection, Collection ids, SolrParams params);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;QueryResponse query(String collection, SolrParams params, METHOD method);SolrDocumentList getById(String collection, Collection ids, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;QueryResponse query(String collection, SolrParams params, METHOD method);SolrDocumentList getById(Collection ids, SolrParams params);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;QueryResponse query(String collection, SolrParams params, METHOD method);SolrDocumentList getById(Collection ids, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;QueryResponse query(String collection, SolrParams params, METHOD method);NamedList request(SolrRequest request, String collection);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;QueryResponse query(String collection, SolrParams params, METHOD method);NamedList request(SolrRequest request, String collection);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;QueryResponse query(String collection, SolrParams params, METHOD method);NamedList request(SolrRequest request);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;QueryResponse query(String collection, SolrParams params, METHOD method);NamedList request(SolrRequest request);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;QueryResponse query(SolrParams params, METHOD method);QueryResponse queryAndStreamResponse(String collection, SolrParams params, StreamingResponseCallback callback);@return;;;a org.apache.solr.client.solrj.response.QueryResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;QueryResponse query(SolrParams params, METHOD method);QueryResponse queryAndStreamResponse(String collection, SolrParams params, StreamingResponseCallback callback);@param;SolrParams params;SolrParams params;an object holding all key/value parameters to send along the request;true
org.apache.solr.client.solrj.SolrClient;QueryResponse query(SolrParams params, METHOD method);QueryResponse queryAndStreamResponse(String collection, SolrParams params, StreamingResponseCallback callback);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;QueryResponse query(SolrParams params, METHOD method);QueryResponse queryAndStreamResponse(String collection, SolrParams params, StreamingResponseCallback callback);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;QueryResponse query(SolrParams params, METHOD method);QueryResponse queryAndStreamResponse(SolrParams params, StreamingResponseCallback callback);@return;;;a org.apache.solr.client.solrj.response.QueryResponse containing the response from the server;false
org.apache.solr.client.solrj.SolrClient;QueryResponse query(SolrParams params, METHOD method);QueryResponse queryAndStreamResponse(SolrParams params, StreamingResponseCallback callback);@param;SolrParams params;SolrParams params;an object holding all key/value parameters to send along the request;true
org.apache.solr.client.solrj.SolrClient;QueryResponse query(SolrParams params, METHOD method);QueryResponse queryAndStreamResponse(SolrParams params, StreamingResponseCallback callback);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;QueryResponse query(SolrParams params, METHOD method);QueryResponse queryAndStreamResponse(SolrParams params, StreamingResponseCallback callback);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;QueryResponse query(SolrParams params, METHOD method);SolrDocument getById(String collection, String id);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;QueryResponse query(SolrParams params, METHOD method);SolrDocument getById(String collection, String id);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;QueryResponse query(SolrParams params, METHOD method);SolrDocument getById(String id);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;QueryResponse query(SolrParams params, METHOD method);SolrDocument getById(String id);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;QueryResponse query(SolrParams params, METHOD method);SolrDocument getById(String collection, String id, SolrParams params);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;QueryResponse query(SolrParams params, METHOD method);SolrDocument getById(String collection, String id, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;QueryResponse query(SolrParams params, METHOD method);SolrDocument getById(String id, SolrParams params);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;QueryResponse query(SolrParams params, METHOD method);SolrDocument getById(String id, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;QueryResponse query(SolrParams params, METHOD method);SolrDocumentList getById(String collection, Collection ids);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;QueryResponse query(SolrParams params, METHOD method);SolrDocumentList getById(String collection, Collection ids);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;QueryResponse query(SolrParams params, METHOD method);SolrDocumentList getById(Collection ids);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;QueryResponse query(SolrParams params, METHOD method);SolrDocumentList getById(Collection ids);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;QueryResponse query(SolrParams params, METHOD method);SolrDocumentList getById(String collection, Collection ids, SolrParams params);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;QueryResponse query(SolrParams params, METHOD method);SolrDocumentList getById(String collection, Collection ids, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;QueryResponse query(SolrParams params, METHOD method);SolrDocumentList getById(Collection ids, SolrParams params);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;QueryResponse query(SolrParams params, METHOD method);SolrDocumentList getById(Collection ids, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;QueryResponse query(SolrParams params, METHOD method);NamedList request(SolrRequest request, String collection);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;QueryResponse query(SolrParams params, METHOD method);NamedList request(SolrRequest request, String collection);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;QueryResponse query(SolrParams params, METHOD method);NamedList request(SolrRequest request);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;QueryResponse query(SolrParams params, METHOD method);NamedList request(SolrRequest request);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;QueryResponse queryAndStreamResponse(String collection, SolrParams params, StreamingResponseCallback callback);QueryResponse queryAndStreamResponse(SolrParams params, StreamingResponseCallback callback);Free text;;;Query solr, and stream the results.  Unlike the standard query, this will send events for each Document rather then add them to the QueryResponse. Although this function returns a 'QueryResponse' it should be used with care since it excludes anything that was passed to callback.  Also note that future version may pass even more info to the callback and may not return the results in the QueryResponse. ;true
org.apache.solr.client.solrj.SolrClient;QueryResponse queryAndStreamResponse(String collection, SolrParams params, StreamingResponseCallback callback);QueryResponse queryAndStreamResponse(SolrParams params, StreamingResponseCallback callback);@return;;;a org.apache.solr.client.solrj.response.QueryResponse containing the response from the server;true
org.apache.solr.client.solrj.SolrClient;QueryResponse queryAndStreamResponse(String collection, SolrParams params, StreamingResponseCallback callback);QueryResponse queryAndStreamResponse(SolrParams params, StreamingResponseCallback callback);@param;SolrParams params;SolrParams params;an object holding all key/value parameters to send along the request;true
org.apache.solr.client.solrj.SolrClient;QueryResponse queryAndStreamResponse(String collection, SolrParams params, StreamingResponseCallback callback);QueryResponse queryAndStreamResponse(SolrParams params, StreamingResponseCallback callback);@param;StreamingResponseCallback callback;StreamingResponseCallback callback;the callback to stream results to;true
org.apache.solr.client.solrj.SolrClient;QueryResponse queryAndStreamResponse(String collection, SolrParams params, StreamingResponseCallback callback);QueryResponse queryAndStreamResponse(SolrParams params, StreamingResponseCallback callback);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;QueryResponse queryAndStreamResponse(String collection, SolrParams params, StreamingResponseCallback callback);QueryResponse queryAndStreamResponse(SolrParams params, StreamingResponseCallback callback);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;QueryResponse queryAndStreamResponse(String collection, SolrParams params, StreamingResponseCallback callback);SolrDocument getById(String collection, String id);@param;String collection;String collection;the Solr collection to query;true
org.apache.solr.client.solrj.SolrClient;QueryResponse queryAndStreamResponse(String collection, SolrParams params, StreamingResponseCallback callback);SolrDocument getById(String collection, String id);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;QueryResponse queryAndStreamResponse(String collection, SolrParams params, StreamingResponseCallback callback);SolrDocument getById(String collection, String id);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;QueryResponse queryAndStreamResponse(String collection, SolrParams params, StreamingResponseCallback callback);SolrDocument getById(String id);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;QueryResponse queryAndStreamResponse(String collection, SolrParams params, StreamingResponseCallback callback);SolrDocument getById(String id);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;QueryResponse queryAndStreamResponse(String collection, SolrParams params, StreamingResponseCallback callback);SolrDocument getById(String collection, String id, SolrParams params);@param;String collection;String collection;the Solr collection to query;true
org.apache.solr.client.solrj.SolrClient;QueryResponse queryAndStreamResponse(String collection, SolrParams params, StreamingResponseCallback callback);SolrDocument getById(String collection, String id, SolrParams params);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;QueryResponse queryAndStreamResponse(String collection, SolrParams params, StreamingResponseCallback callback);SolrDocument getById(String collection, String id, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;QueryResponse queryAndStreamResponse(String collection, SolrParams params, StreamingResponseCallback callback);SolrDocument getById(String id, SolrParams params);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;QueryResponse queryAndStreamResponse(String collection, SolrParams params, StreamingResponseCallback callback);SolrDocument getById(String id, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;QueryResponse queryAndStreamResponse(String collection, SolrParams params, StreamingResponseCallback callback);SolrDocumentList getById(String collection, Collection ids);@param;String collection;String collection;the Solr collection to query;true
org.apache.solr.client.solrj.SolrClient;QueryResponse queryAndStreamResponse(String collection, SolrParams params, StreamingResponseCallback callback);SolrDocumentList getById(String collection, Collection ids);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;QueryResponse queryAndStreamResponse(String collection, SolrParams params, StreamingResponseCallback callback);SolrDocumentList getById(String collection, Collection ids);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;QueryResponse queryAndStreamResponse(String collection, SolrParams params, StreamingResponseCallback callback);SolrDocumentList getById(Collection ids);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;QueryResponse queryAndStreamResponse(String collection, SolrParams params, StreamingResponseCallback callback);SolrDocumentList getById(Collection ids);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;QueryResponse queryAndStreamResponse(String collection, SolrParams params, StreamingResponseCallback callback);SolrDocumentList getById(String collection, Collection ids, SolrParams params);@param;String collection;String collection;the Solr collection to query;true
org.apache.solr.client.solrj.SolrClient;QueryResponse queryAndStreamResponse(String collection, SolrParams params, StreamingResponseCallback callback);SolrDocumentList getById(String collection, Collection ids, SolrParams params);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;QueryResponse queryAndStreamResponse(String collection, SolrParams params, StreamingResponseCallback callback);SolrDocumentList getById(String collection, Collection ids, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;QueryResponse queryAndStreamResponse(String collection, SolrParams params, StreamingResponseCallback callback);SolrDocumentList getById(Collection ids, SolrParams params);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;QueryResponse queryAndStreamResponse(String collection, SolrParams params, StreamingResponseCallback callback);SolrDocumentList getById(Collection ids, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;QueryResponse queryAndStreamResponse(String collection, SolrParams params, StreamingResponseCallback callback);NamedList request(SolrRequest request, String collection);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;QueryResponse queryAndStreamResponse(String collection, SolrParams params, StreamingResponseCallback callback);NamedList request(SolrRequest request, String collection);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;QueryResponse queryAndStreamResponse(String collection, SolrParams params, StreamingResponseCallback callback);NamedList request(SolrRequest request);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;QueryResponse queryAndStreamResponse(String collection, SolrParams params, StreamingResponseCallback callback);NamedList request(SolrRequest request);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;QueryResponse queryAndStreamResponse(SolrParams params, StreamingResponseCallback callback);SolrDocument getById(String collection, String id);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;QueryResponse queryAndStreamResponse(SolrParams params, StreamingResponseCallback callback);SolrDocument getById(String collection, String id);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;QueryResponse queryAndStreamResponse(SolrParams params, StreamingResponseCallback callback);SolrDocument getById(String id);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;QueryResponse queryAndStreamResponse(SolrParams params, StreamingResponseCallback callback);SolrDocument getById(String id);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;QueryResponse queryAndStreamResponse(SolrParams params, StreamingResponseCallback callback);SolrDocument getById(String collection, String id, SolrParams params);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;QueryResponse queryAndStreamResponse(SolrParams params, StreamingResponseCallback callback);SolrDocument getById(String collection, String id, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;QueryResponse queryAndStreamResponse(SolrParams params, StreamingResponseCallback callback);SolrDocument getById(String id, SolrParams params);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;QueryResponse queryAndStreamResponse(SolrParams params, StreamingResponseCallback callback);SolrDocument getById(String id, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;QueryResponse queryAndStreamResponse(SolrParams params, StreamingResponseCallback callback);SolrDocumentList getById(String collection, Collection ids);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;QueryResponse queryAndStreamResponse(SolrParams params, StreamingResponseCallback callback);SolrDocumentList getById(String collection, Collection ids);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;QueryResponse queryAndStreamResponse(SolrParams params, StreamingResponseCallback callback);SolrDocumentList getById(Collection ids);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;QueryResponse queryAndStreamResponse(SolrParams params, StreamingResponseCallback callback);SolrDocumentList getById(Collection ids);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;QueryResponse queryAndStreamResponse(SolrParams params, StreamingResponseCallback callback);SolrDocumentList getById(String collection, Collection ids, SolrParams params);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;QueryResponse queryAndStreamResponse(SolrParams params, StreamingResponseCallback callback);SolrDocumentList getById(String collection, Collection ids, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;QueryResponse queryAndStreamResponse(SolrParams params, StreamingResponseCallback callback);SolrDocumentList getById(Collection ids, SolrParams params);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;QueryResponse queryAndStreamResponse(SolrParams params, StreamingResponseCallback callback);SolrDocumentList getById(Collection ids, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;QueryResponse queryAndStreamResponse(SolrParams params, StreamingResponseCallback callback);NamedList request(SolrRequest request, String collection);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;QueryResponse queryAndStreamResponse(SolrParams params, StreamingResponseCallback callback);NamedList request(SolrRequest request, String collection);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;QueryResponse queryAndStreamResponse(SolrParams params, StreamingResponseCallback callback);NamedList request(SolrRequest request);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;QueryResponse queryAndStreamResponse(SolrParams params, StreamingResponseCallback callback);NamedList request(SolrRequest request);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;SolrDocument getById(String collection, String id);SolrDocument getById(String id);Free text;;;Retrieves the SolrDocument associated with the given identifier. ;true
org.apache.solr.client.solrj.SolrClient;SolrDocument getById(String collection, String id);SolrDocument getById(String id);@return;;;retrieved SolrDocument, or null if no document is found.;true
org.apache.solr.client.solrj.SolrClient;SolrDocument getById(String collection, String id);SolrDocument getById(String id);@param;String id;String id;the id;true
org.apache.solr.client.solrj.SolrClient;SolrDocument getById(String collection, String id);SolrDocument getById(String id);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;SolrDocument getById(String collection, String id);SolrDocument getById(String id);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;SolrDocument getById(String collection, String id);SolrDocument getById(String collection, String id, SolrParams params);@return;;;retrieved SolrDocument, or null if no document is found.;true
org.apache.solr.client.solrj.SolrClient;SolrDocument getById(String collection, String id);SolrDocument getById(String collection, String id, SolrParams params);@param;String collection;String collection;the Solr collection to query;true
org.apache.solr.client.solrj.SolrClient;SolrDocument getById(String collection, String id);SolrDocument getById(String collection, String id, SolrParams params);@param;String id;String id;the id;true
org.apache.solr.client.solrj.SolrClient;SolrDocument getById(String collection, String id);SolrDocument getById(String collection, String id, SolrParams params);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;SolrDocument getById(String collection, String id);SolrDocument getById(String collection, String id, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;SolrDocument getById(String collection, String id);SolrDocument getById(String id, SolrParams params);@return;;;retrieved SolrDocument, or null if no document is found.;true
org.apache.solr.client.solrj.SolrClient;SolrDocument getById(String collection, String id);SolrDocument getById(String id, SolrParams params);@param;String id;String id;the id;true
org.apache.solr.client.solrj.SolrClient;SolrDocument getById(String collection, String id);SolrDocument getById(String id, SolrParams params);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;SolrDocument getById(String collection, String id);SolrDocument getById(String id, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;SolrDocument getById(String collection, String id);SolrDocumentList getById(String collection, Collection ids);@param;String collection;String collection;the Solr collection to query;true
org.apache.solr.client.solrj.SolrClient;SolrDocument getById(String collection, String id);SolrDocumentList getById(String collection, Collection ids);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;SolrDocument getById(String collection, String id);SolrDocumentList getById(String collection, Collection ids);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;SolrDocument getById(String collection, String id);SolrDocumentList getById(Collection ids);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;SolrDocument getById(String collection, String id);SolrDocumentList getById(Collection ids);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;SolrDocument getById(String collection, String id);SolrDocumentList getById(String collection, Collection ids, SolrParams params);@param;String collection;String collection;the Solr collection to query;true
org.apache.solr.client.solrj.SolrClient;SolrDocument getById(String collection, String id);SolrDocumentList getById(String collection, Collection ids, SolrParams params);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;SolrDocument getById(String collection, String id);SolrDocumentList getById(String collection, Collection ids, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;SolrDocument getById(String collection, String id);SolrDocumentList getById(Collection ids, SolrParams params);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;SolrDocument getById(String collection, String id);SolrDocumentList getById(Collection ids, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;SolrDocument getById(String collection, String id);NamedList request(SolrRequest request, String collection);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;SolrDocument getById(String collection, String id);NamedList request(SolrRequest request, String collection);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;SolrDocument getById(String collection, String id);NamedList request(SolrRequest request);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;SolrDocument getById(String collection, String id);NamedList request(SolrRequest request);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;SolrDocument getById(String id);SolrDocument getById(String collection, String id, SolrParams params);@return;;;retrieved SolrDocument, or null if no document is found.;true
org.apache.solr.client.solrj.SolrClient;SolrDocument getById(String id);SolrDocument getById(String collection, String id, SolrParams params);@param;String id;String id;the id;true
org.apache.solr.client.solrj.SolrClient;SolrDocument getById(String id);SolrDocument getById(String collection, String id, SolrParams params);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;SolrDocument getById(String id);SolrDocument getById(String collection, String id, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;SolrDocument getById(String id);SolrDocument getById(String id, SolrParams params);@return;;;retrieved SolrDocument, or null if no document is found.;true
org.apache.solr.client.solrj.SolrClient;SolrDocument getById(String id);SolrDocument getById(String id, SolrParams params);@param;String id;String id;the id;true
org.apache.solr.client.solrj.SolrClient;SolrDocument getById(String id);SolrDocument getById(String id, SolrParams params);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;SolrDocument getById(String id);SolrDocument getById(String id, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;SolrDocument getById(String id);SolrDocumentList getById(String collection, Collection ids);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;SolrDocument getById(String id);SolrDocumentList getById(String collection, Collection ids);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;SolrDocument getById(String id);SolrDocumentList getById(Collection ids);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;SolrDocument getById(String id);SolrDocumentList getById(Collection ids);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;SolrDocument getById(String id);SolrDocumentList getById(String collection, Collection ids, SolrParams params);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;SolrDocument getById(String id);SolrDocumentList getById(String collection, Collection ids, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;SolrDocument getById(String id);SolrDocumentList getById(Collection ids, SolrParams params);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;SolrDocument getById(String id);SolrDocumentList getById(Collection ids, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;SolrDocument getById(String id);NamedList request(SolrRequest request, String collection);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;SolrDocument getById(String id);NamedList request(SolrRequest request, String collection);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;SolrDocument getById(String id);NamedList request(SolrRequest request);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;SolrDocument getById(String id);NamedList request(SolrRequest request);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;SolrDocument getById(String collection, String id, SolrParams params);SolrDocument getById(String id, SolrParams params);Free text;;;Retrieves the SolrDocument associated with the given identifier and uses the SolrParams to execute the request. ;true
org.apache.solr.client.solrj.SolrClient;SolrDocument getById(String collection, String id, SolrParams params);SolrDocument getById(String id, SolrParams params);@return;;;retrieved SolrDocument, or null if no document is found.;true
org.apache.solr.client.solrj.SolrClient;SolrDocument getById(String collection, String id, SolrParams params);SolrDocument getById(String id, SolrParams params);@param;String id;String id;the id;true
org.apache.solr.client.solrj.SolrClient;SolrDocument getById(String collection, String id, SolrParams params);SolrDocument getById(String id, SolrParams params);@param;SolrParams params;SolrParams params;additional parameters to add to the query;true
org.apache.solr.client.solrj.SolrClient;SolrDocument getById(String collection, String id, SolrParams params);SolrDocument getById(String id, SolrParams params);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;SolrDocument getById(String collection, String id, SolrParams params);SolrDocument getById(String id, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;SolrDocument getById(String collection, String id, SolrParams params);SolrDocumentList getById(String collection, Collection ids);@param;String collection;String collection;the Solr collection to query;true
org.apache.solr.client.solrj.SolrClient;SolrDocument getById(String collection, String id, SolrParams params);SolrDocumentList getById(String collection, Collection ids);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;SolrDocument getById(String collection, String id, SolrParams params);SolrDocumentList getById(String collection, Collection ids);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;SolrDocument getById(String collection, String id, SolrParams params);SolrDocumentList getById(Collection ids);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;SolrDocument getById(String collection, String id, SolrParams params);SolrDocumentList getById(Collection ids);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;SolrDocument getById(String collection, String id, SolrParams params);SolrDocumentList getById(String collection, Collection ids, SolrParams params);@param;String collection;String collection;the Solr collection to query;true
org.apache.solr.client.solrj.SolrClient;SolrDocument getById(String collection, String id, SolrParams params);SolrDocumentList getById(String collection, Collection ids, SolrParams params);@param;SolrParams params;SolrParams params;additional parameters to add to the query;true
org.apache.solr.client.solrj.SolrClient;SolrDocument getById(String collection, String id, SolrParams params);SolrDocumentList getById(String collection, Collection ids, SolrParams params);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;SolrDocument getById(String collection, String id, SolrParams params);SolrDocumentList getById(String collection, Collection ids, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;SolrDocument getById(String collection, String id, SolrParams params);SolrDocumentList getById(Collection ids, SolrParams params);@param;SolrParams params;SolrParams params;additional parameters to add to the query;true
org.apache.solr.client.solrj.SolrClient;SolrDocument getById(String collection, String id, SolrParams params);SolrDocumentList getById(Collection ids, SolrParams params);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;SolrDocument getById(String collection, String id, SolrParams params);SolrDocumentList getById(Collection ids, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;SolrDocument getById(String collection, String id, SolrParams params);NamedList request(SolrRequest request, String collection);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;SolrDocument getById(String collection, String id, SolrParams params);NamedList request(SolrRequest request, String collection);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;SolrDocument getById(String collection, String id, SolrParams params);NamedList request(SolrRequest request);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;SolrDocument getById(String collection, String id, SolrParams params);NamedList request(SolrRequest request);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;SolrDocument getById(String id, SolrParams params);SolrDocumentList getById(String collection, Collection ids);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;SolrDocument getById(String id, SolrParams params);SolrDocumentList getById(String collection, Collection ids);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;SolrDocument getById(String id, SolrParams params);SolrDocumentList getById(Collection ids);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;SolrDocument getById(String id, SolrParams params);SolrDocumentList getById(Collection ids);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;SolrDocument getById(String id, SolrParams params);SolrDocumentList getById(String collection, Collection ids, SolrParams params);@param;SolrParams params;SolrParams params;additional parameters to add to the query;true
org.apache.solr.client.solrj.SolrClient;SolrDocument getById(String id, SolrParams params);SolrDocumentList getById(String collection, Collection ids, SolrParams params);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;SolrDocument getById(String id, SolrParams params);SolrDocumentList getById(String collection, Collection ids, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;SolrDocument getById(String id, SolrParams params);SolrDocumentList getById(Collection ids, SolrParams params);@param;SolrParams params;SolrParams params;additional parameters to add to the query;true
org.apache.solr.client.solrj.SolrClient;SolrDocument getById(String id, SolrParams params);SolrDocumentList getById(Collection ids, SolrParams params);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;SolrDocument getById(String id, SolrParams params);SolrDocumentList getById(Collection ids, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;SolrDocument getById(String id, SolrParams params);NamedList request(SolrRequest request, String collection);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;SolrDocument getById(String id, SolrParams params);NamedList request(SolrRequest request, String collection);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;SolrDocument getById(String id, SolrParams params);NamedList request(SolrRequest request);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;SolrDocument getById(String id, SolrParams params);NamedList request(SolrRequest request);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;SolrDocumentList getById(String collection, Collection ids);SolrDocumentList getById(Collection ids);Free text;;;Retrieves the SolrDocuments associated with the given identifiers. If a document was not found, it will not be added to the SolrDocumentList. ;true
org.apache.solr.client.solrj.SolrClient;SolrDocumentList getById(String collection, Collection ids);SolrDocumentList getById(Collection ids);@return;;;a SolrDocumentList, or null if no documents were found;true
org.apache.solr.client.solrj.SolrClient;SolrDocumentList getById(String collection, Collection ids);SolrDocumentList getById(Collection ids);@param;Collection<String> ids;Collection<String> ids;the ids;true
org.apache.solr.client.solrj.SolrClient;SolrDocumentList getById(String collection, Collection ids);SolrDocumentList getById(Collection ids);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;SolrDocumentList getById(String collection, Collection ids);SolrDocumentList getById(Collection ids);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;SolrDocumentList getById(String collection, Collection ids);SolrDocumentList getById(String collection, Collection ids, SolrParams params);@return;;;a SolrDocumentList, or null if no documents were found;true
org.apache.solr.client.solrj.SolrClient;SolrDocumentList getById(String collection, Collection ids);SolrDocumentList getById(String collection, Collection ids, SolrParams params);@param;String collection;String collection;the Solr collection to query;true
org.apache.solr.client.solrj.SolrClient;SolrDocumentList getById(String collection, Collection ids);SolrDocumentList getById(String collection, Collection ids, SolrParams params);@param;Collection<String> ids;Collection<String> ids;the ids;true
org.apache.solr.client.solrj.SolrClient;SolrDocumentList getById(String collection, Collection ids);SolrDocumentList getById(String collection, Collection ids, SolrParams params);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;SolrDocumentList getById(String collection, Collection ids);SolrDocumentList getById(String collection, Collection ids, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;SolrDocumentList getById(String collection, Collection ids);SolrDocumentList getById(Collection ids, SolrParams params);@return;;;a SolrDocumentList, or null if no documents were found;true
org.apache.solr.client.solrj.SolrClient;SolrDocumentList getById(String collection, Collection ids);SolrDocumentList getById(Collection ids, SolrParams params);@param;Collection<String> ids;Collection<String> ids;the ids;true
org.apache.solr.client.solrj.SolrClient;SolrDocumentList getById(String collection, Collection ids);SolrDocumentList getById(Collection ids, SolrParams params);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;SolrDocumentList getById(String collection, Collection ids);SolrDocumentList getById(Collection ids, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;SolrDocumentList getById(String collection, Collection ids);NamedList request(SolrRequest request, String collection);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;SolrDocumentList getById(String collection, Collection ids);NamedList request(SolrRequest request, String collection);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;SolrDocumentList getById(String collection, Collection ids);NamedList request(SolrRequest request);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;SolrDocumentList getById(String collection, Collection ids);NamedList request(SolrRequest request);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;SolrDocumentList getById(Collection ids);SolrDocumentList getById(String collection, Collection ids, SolrParams params);@return;;;a SolrDocumentList, or null if no documents were found;true
org.apache.solr.client.solrj.SolrClient;SolrDocumentList getById(Collection ids);SolrDocumentList getById(String collection, Collection ids, SolrParams params);@param;Collection<String> ids;Collection<String> ids;the ids;true
org.apache.solr.client.solrj.SolrClient;SolrDocumentList getById(Collection ids);SolrDocumentList getById(String collection, Collection ids, SolrParams params);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;SolrDocumentList getById(Collection ids);SolrDocumentList getById(String collection, Collection ids, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;SolrDocumentList getById(Collection ids);SolrDocumentList getById(Collection ids, SolrParams params);@return;;;a SolrDocumentList, or null if no documents were found;true
org.apache.solr.client.solrj.SolrClient;SolrDocumentList getById(Collection ids);SolrDocumentList getById(Collection ids, SolrParams params);@param;Collection<String> ids;Collection<String> ids;the ids;true
org.apache.solr.client.solrj.SolrClient;SolrDocumentList getById(Collection ids);SolrDocumentList getById(Collection ids, SolrParams params);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;SolrDocumentList getById(Collection ids);SolrDocumentList getById(Collection ids, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;SolrDocumentList getById(Collection ids);NamedList request(SolrRequest request, String collection);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;SolrDocumentList getById(Collection ids);NamedList request(SolrRequest request, String collection);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;SolrDocumentList getById(Collection ids);NamedList request(SolrRequest request);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;SolrDocumentList getById(Collection ids);NamedList request(SolrRequest request);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;SolrDocumentList getById(String collection, Collection ids, SolrParams params);SolrDocumentList getById(Collection ids, SolrParams params);Free text;;;Retrieves the SolrDocuments associated with the given identifiers and uses the SolrParams to execute the request. If a document was not found, it will not be added to the SolrDocumentList. ;true
org.apache.solr.client.solrj.SolrClient;SolrDocumentList getById(String collection, Collection ids, SolrParams params);SolrDocumentList getById(Collection ids, SolrParams params);@return;;;a SolrDocumentList, or null if no documents were found;true
org.apache.solr.client.solrj.SolrClient;SolrDocumentList getById(String collection, Collection ids, SolrParams params);SolrDocumentList getById(Collection ids, SolrParams params);@param;Collection<String> ids;Collection<String> ids;the ids;true
org.apache.solr.client.solrj.SolrClient;SolrDocumentList getById(String collection, Collection ids, SolrParams params);SolrDocumentList getById(Collection ids, SolrParams params);@param;SolrParams params;SolrParams params;additional parameters to add to the query;true
org.apache.solr.client.solrj.SolrClient;SolrDocumentList getById(String collection, Collection ids, SolrParams params);SolrDocumentList getById(Collection ids, SolrParams params);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;SolrDocumentList getById(String collection, Collection ids, SolrParams params);SolrDocumentList getById(Collection ids, SolrParams params);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;SolrDocumentList getById(String collection, Collection ids, SolrParams params);NamedList request(SolrRequest request, String collection);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;SolrDocumentList getById(String collection, Collection ids, SolrParams params);NamedList request(SolrRequest request, String collection);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;SolrDocumentList getById(String collection, Collection ids, SolrParams params);NamedList request(SolrRequest request);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;SolrDocumentList getById(String collection, Collection ids, SolrParams params);NamedList request(SolrRequest request);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;SolrDocumentList getById(Collection ids, SolrParams params);NamedList request(SolrRequest request, String collection);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;SolrDocumentList getById(Collection ids, SolrParams params);NamedList request(SolrRequest request, String collection);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;SolrDocumentList getById(Collection ids, SolrParams params);NamedList request(SolrRequest request);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;SolrDocumentList getById(Collection ids, SolrParams params);NamedList request(SolrRequest request);@throws;;;if there is an error on the server;true
org.apache.solr.client.solrj.SolrClient;NamedList request(SolrRequest request, String collection);NamedList request(SolrRequest request);@return;;;a NamedList containing the response from the server;true
org.apache.solr.client.solrj.SolrClient;NamedList request(SolrRequest request, String collection);NamedList request(SolrRequest request);@param;SolrRequest request;SolrRequest request;the request to execute;true
org.apache.solr.client.solrj.SolrClient;NamedList request(SolrRequest request, String collection);NamedList request(SolrRequest request);@throws;;;If there is a low-level I/O error.;true
org.apache.solr.client.solrj.SolrClient;NamedList request(SolrRequest request, String collection);NamedList request(SolrRequest request);@throws;;;if there is an error on the server;true
