Class;Method1;Method2;Type;Param1;Param2;Cloned text;Legit?
org.joda.time.format.StrictISODateTimeFormat;DateTimeFormatter date();DateTimeFormatter yearMonthDay();@return;;;a formatter for yyyy-MM-dd;false
org.joda.time.format.StrictISODateTimeFormat;DateTimeFormatter weekDate();DateTimeFormatter weekyearWeekDay();@return;;;a formatter for xxxx-'W'ww-e;false
org.joda.time.format.StrictISODateTimeFormat;DateTimeFormatter hourMinuteSecondMillis();DateTimeFormatter hourMinuteSecondFraction();@return;;;a formatter for HH:mm:ss.SSS;false
org.joda.time.format.StrictISODateTimeFormat;DateTimeFormatter dateHourMinuteSecondMillis();DateTimeFormatter dateHourMinuteSecondFraction();@return;;;a formatter for yyyy-MM-dd'T'HH:mm:ss.SSS;false
org.elasticsearch.cluster.ClusterStateObserver; ClusterStateObserver(ClusterService clusterService, TimeValue timeout, Logger logger, ThreadContext contextHolder); ClusterStateObserver(ClusterState initialState, ClusterService clusterService, TimeValue timeout, Logger logger, ThreadContext contextHolder);Whole;;; @param a global timeout for this observer. After it has expired the observer will fail any existing or new #waitForNextChange calls. Set to null to wait indefinitely  ;false
org.elasticsearch.cluster.health.ClusterStateHealth; ClusterStateHealth(ClusterState clusterState); ClusterStateHealth(ClusterState clusterState, String[] concreteIndices);@param;ClusterState clusterState;ClusterState clusterState;The current cluster state. Must not be null.;true
org.elasticsearch.cluster.ClusterStateTaskConfig;ClusterStateTaskConfig build(Priority priority);ClusterStateTaskConfig build(Priority priority, TimeValue timeout);@param;Priority priority;Priority priority;the priority for the associated cluster state update task;true
org.elasticsearch.cluster.DiffableUtils;MapDiff readImmutableOpenMapDiff(StreamInput in, KeySerializer keySerializer, ValueSerializer valueSerializer);MapDiff readImmutableOpenIntMapDiff(StreamInput in, KeySerializer keySerializer, ValueSerializer valueSerializer);Whole;;;Loads an object that represents difference between two ImmutableOpenMaps    ;false
org.elasticsearch.cluster.action.shard.ShardStateAction;void localShardFailed(ShardRouting shardRouting, String message, Exception failure, Listener listener);void localShardFailed(ShardRouting shardRouting, String message, Exception failure, Listener listener, ClusterState currentState);Whole;;;Send a shard failed request to the master node to update the cluster state when a shard on the local node failed.    ;false
org.elasticsearch.cluster.routing.UnassignedInfo; UnassignedInfo(Reason reason, String message); UnassignedInfo(Reason reason, String message, Exception failure, int failedAllocations, long unassignedTimeNanos, long unassignedTimeMillis, boolean delayed, AllocationStatus lastAllocationStatus);@param;Reason reason;Reason reason;the cause for making this shard unassigned. See Reason for more information.;true
org.elasticsearch.cluster.routing.UnassignedInfo; UnassignedInfo(Reason reason, String message); UnassignedInfo(Reason reason, String message, Exception failure, int failedAllocations, long unassignedTimeNanos, long unassignedTimeMillis, boolean delayed, AllocationStatus lastAllocationStatus);@param;String message;String message;more information about cause.;true
org.elasticsearch.cluster.routing.RoutingTable;IndexShardRoutingTable shardRoutingTable(String index, int shardId);IndexShardRoutingTable shardRoutingTable(ShardId shardId);@return;;;All the shard routing entries for the given index and shard id;true
org.elasticsearch.cluster.routing.RoutingTable;IndexShardRoutingTable shardRoutingTable(String index, int shardId);IndexShardRoutingTable shardRoutingTable(ShardId shardId);@throws;;;if provided index does not exist;true
org.elasticsearch.cluster.routing.RoutingTable;IndexShardRoutingTable shardRoutingTable(String index, int shardId);IndexShardRoutingTable shardRoutingTable(ShardId shardId);@throws;;;if provided shard id is unknown;true
org.elasticsearch.cluster.routing.RoutingTable;GroupShardsIterator allActiveShardsGrouped(String[] indices, boolean includeEmpty, boolean includeRelocationTargets);GroupShardsIterator allAssignedShardsGrouped(String[] indices, boolean includeEmpty, boolean includeRelocationTargets);@param;boolean includeEmpty;boolean includeEmpty;if true, a shard iterator will be added for non-assigned shards as well;true
org.elasticsearch.cluster.routing.RoutingTable;GroupShardsIterator allActiveShardsGrouped(String[] indices, boolean includeEmpty, boolean includeRelocationTargets);GroupShardsIterator allAssignedShardsGrouped(String[] indices, boolean includeEmpty, boolean includeRelocationTargets);@param;boolean includeRelocationTargets;boolean includeRelocationTargets;if true, an extra shard iterator will be added for relocating shards. The extra iterator contains a single ShardRouting pointing at the relocating target;true
org.elasticsearch.cluster.routing.IndexShardRoutingTable;ShardId shardId();ShardId getShardId();Whole;;;Returns the shards id   @return id of the shard ;false
org.elasticsearch.cluster.routing.IndexShardRoutingTable;int size();int getSize();Whole;;;Returns the number of this shards instances.    ;false
org.elasticsearch.cluster.routing.IndexShardRoutingTable;List shards();List getShards();Whole;;;Returns a {@link List} of shards   @return a List of shards ;false
org.elasticsearch.cluster.routing.IndexShardRoutingTable;List shards();List activeShards();@return;;;a List of shards;false
org.elasticsearch.cluster.routing.IndexShardRoutingTable;List shards();List getAllInitializingShards();@return;;;a List of shards;false
org.elasticsearch.cluster.routing.IndexShardRoutingTable;List shards();List getActiveShards();@return;;;a List of shards;false
org.elasticsearch.cluster.routing.IndexShardRoutingTable;List shards();List assignedShards();@return;;;a List of shards;false
org.elasticsearch.cluster.routing.IndexShardRoutingTable;List shards();List getAssignedShards();@return;;;a List of shards;false
org.elasticsearch.cluster.routing.IndexShardRoutingTable;List getShards();List activeShards();@return;;;a List of shards;false
org.elasticsearch.cluster.routing.IndexShardRoutingTable;List getShards();List getAllInitializingShards();@return;;;a List of shards;false
org.elasticsearch.cluster.routing.IndexShardRoutingTable;List getShards();List getActiveShards();@return;;;a List of shards;false
org.elasticsearch.cluster.routing.IndexShardRoutingTable;List getShards();List assignedShards();@return;;;a List of shards;false
org.elasticsearch.cluster.routing.IndexShardRoutingTable;List getShards();List getAssignedShards();@return;;;a List of shards;false
org.elasticsearch.cluster.routing.IndexShardRoutingTable;List activeShards();List getAllInitializingShards();@return;;;a List of shards;false
org.elasticsearch.cluster.routing.IndexShardRoutingTable;List activeShards();List getActiveShards();Whole;;;Returns a {@link List} of active shards   @return a List of shards ;false
org.elasticsearch.cluster.routing.IndexShardRoutingTable;List activeShards();List assignedShards();@return;;;a List of shards;false
org.elasticsearch.cluster.routing.IndexShardRoutingTable;List activeShards();List getAssignedShards();@return;;;a List of shards;false
org.elasticsearch.cluster.routing.IndexShardRoutingTable;List getAllInitializingShards();List getActiveShards();@return;;;a List of shards;false
org.elasticsearch.cluster.routing.IndexShardRoutingTable;List getAllInitializingShards();List assignedShards();@return;;;a List of shards;false
org.elasticsearch.cluster.routing.IndexShardRoutingTable;List getAllInitializingShards();List getAssignedShards();@return;;;a List of shards;false
org.elasticsearch.cluster.routing.IndexShardRoutingTable;List getActiveShards();List assignedShards();@return;;;a List of shards;false
org.elasticsearch.cluster.routing.IndexShardRoutingTable;List getActiveShards();List getAssignedShards();@return;;;a List of shards;false
org.elasticsearch.cluster.routing.IndexShardRoutingTable;List assignedShards();List getAssignedShards();Whole;;;Returns a {@link List} of assigned shards   @return a List of shards ;false
org.elasticsearch.cluster.routing.IndexShardRoutingTable;ShardIterator activeInitializingShardsRandomIt();ShardIterator activeInitializingShardsIt(int seed);Whole;;;Returns an iterator over active and initializing shards. Making sure though that its random within the active shards, and initializing shards are the last to iterate through.    ;false
org.elasticsearch.cluster.routing.RecoverySource;void addAdditionalFields(XContentBuilder builder, ToXContent.Params params);void writeAdditionalFields(StreamOutput out);Whole;;;to be overridden by subclasses    ;false
org.elasticsearch.cluster.routing.RoutingNode;List shardsWithState(ShardRoutingState states);List shardsWithState(String index, ShardRoutingState states);@param;ShardRoutingState states;ShardRoutingState states;set of states which should be listed;true
org.elasticsearch.cluster.routing.ShardRouting;int id();int getId();Whole;;;The shard id.    ;false
org.elasticsearch.cluster.routing.ShardRouting;int id();ShardId shardId();Whole;;;The shard id.    ;false
org.elasticsearch.cluster.routing.ShardRouting;int getId();ShardId shardId();Whole;;;The shard id.    ;false
org.elasticsearch.cluster.routing.allocation.AllocationService;ClusterState reroute(ClusterState clusterState, String reason);ClusterState reroute(ClusterState clusterState, String reason, boolean debug);Whole;;;Reroutes the routing table based on the live nodes. <p> If the same instance of ClusterState is returned, then no change has been made.    ;false
org.elasticsearch.cluster.routing.allocation.decider.AllocationDecider;Decision canAllocate(ShardRouting shardRouting, RoutingAllocation allocation);Decision canAllocate(IndexMetaData indexMetaData, RoutingNode node, RoutingAllocation allocation);Whole;;;Returns a {@link Decision} whether the given shard routing can be allocated at all at this state of the {@link RoutingAllocation}. The default is {@link Decision#ALWAYS}.    ;false
org.elasticsearch.cluster.routing.allocation.command.AllocationCommands;AllocationCommands readFrom(StreamInput in);AllocationCommands fromXContent(XContentParser parser);@return;;;AllocationCommands read;false
org.elasticsearch.cluster.routing.allocation.command.AbstractAllocateAllocationCommand;void initializeUnassignedShard(RoutingAllocation allocation, RoutingNodes routingNodes, RoutingNode routingNode, ShardRouting shardRouting);void initializeUnassignedShard(RoutingAllocation allocation, RoutingNodes routingNodes, RoutingNode routingNode, ShardRouting shardRouting, UnassignedInfo unassignedInfo, RecoverySource recoverySource);Free text;;;Initializes an unassigned shard on a node and removes it from the unassigned ;true
org.elasticsearch.cluster.routing.allocation.command.AbstractAllocateAllocationCommand;void initializeUnassignedShard(RoutingAllocation allocation, RoutingNodes routingNodes, RoutingNode routingNode, ShardRouting shardRouting);void initializeUnassignedShard(RoutingAllocation allocation, RoutingNodes routingNodes, RoutingNode routingNode, ShardRouting shardRouting, UnassignedInfo unassignedInfo, RecoverySource recoverySource);@param;RoutingAllocation allocation;RoutingAllocation allocation;the allocation;true
org.elasticsearch.cluster.routing.allocation.command.AbstractAllocateAllocationCommand;void initializeUnassignedShard(RoutingAllocation allocation, RoutingNodes routingNodes, RoutingNode routingNode, ShardRouting shardRouting);void initializeUnassignedShard(RoutingAllocation allocation, RoutingNodes routingNodes, RoutingNode routingNode, ShardRouting shardRouting, UnassignedInfo unassignedInfo, RecoverySource recoverySource);@param;RoutingNodes routingNodes;RoutingNodes routingNodes;the routing nodes;true
org.elasticsearch.cluster.routing.allocation.command.AbstractAllocateAllocationCommand;void initializeUnassignedShard(RoutingAllocation allocation, RoutingNodes routingNodes, RoutingNode routingNode, ShardRouting shardRouting);void initializeUnassignedShard(RoutingAllocation allocation, RoutingNodes routingNodes, RoutingNode routingNode, ShardRouting shardRouting, UnassignedInfo unassignedInfo, RecoverySource recoverySource);@param;RoutingNode routingNode;RoutingNode routingNode;the node to initialize it to;true
org.elasticsearch.cluster.routing.allocation.command.AbstractAllocateAllocationCommand;void initializeUnassignedShard(RoutingAllocation allocation, RoutingNodes routingNodes, RoutingNode routingNode, ShardRouting shardRouting);void initializeUnassignedShard(RoutingAllocation allocation, RoutingNodes routingNodes, RoutingNode routingNode, ShardRouting shardRouting, UnassignedInfo unassignedInfo, RecoverySource recoverySource);@param;ShardRouting shardRouting;ShardRouting shardRouting;the shard routing that is to be matched in unassigned shards;true
org.elasticsearch.cluster.routing.allocation.AllocateUnassignedDecision;AllocateUnassignedDecision no(AllocationStatus allocationStatus, List decisions);AllocateUnassignedDecision no(AllocationStatus allocationStatus, List decisions, boolean reuseStore);Whole;;;Returns a NO decision with the given {@link AllocationStatus}, and the individual node-level decisions that comprised the final NO decision if in explain mode.    ;false
org.elasticsearch.cluster.node.DiscoveryNodes;boolean nodeExists(String nodeId);boolean nodeExists(DiscoveryNode node);@return;;;true if the node exists. Otherwise false;true
org.elasticsearch.cluster.node.DiscoveryNodes;Version getSmallestNonClientNodeVersion();Version getMinNodeVersion();@return;;;the oldest version in the cluster;false
org.elasticsearch.cluster.node.DiscoveryNodes;Version getLargestNonClientNodeVersion();Version getMaxNodeVersion();@return;;;the youngest version in the cluster;false
org.elasticsearch.cluster.node.DiscoveryNode; DiscoveryNode(String id, TransportAddress address, Version version); DiscoveryNode(String id, TransportAddress address, Map attributes, Set roles, Version version);Free text;;;Creates a new {@link DiscoveryNode} <p> <b>Note:</b> if the version of the node is unknown {@link Version#minimumCompatibilityVersion()} should be used for the current version. it corresponds to the minimum version this elasticsearch version can communicate with. If a higher version is used the node might not be able to communicate with the remove node. After initial handshakes node versions will be discovered and updated. </p> ;true
org.elasticsearch.cluster.node.DiscoveryNode; DiscoveryNode(String id, TransportAddress address, Version version); DiscoveryNode(String id, TransportAddress address, Map attributes, Set roles, Version version);@param;String id;String id;the nodes unique (persistent) node id. This constructor will auto generate a random ephemeral id.;true
org.elasticsearch.cluster.node.DiscoveryNode; DiscoveryNode(String id, TransportAddress address, Version version); DiscoveryNode(String id, TransportAddress address, Map attributes, Set roles, Version version);@param;TransportAddress address;TransportAddress address;the nodes transport address;true
org.elasticsearch.cluster.node.DiscoveryNode; DiscoveryNode(String id, TransportAddress address, Version version); DiscoveryNode(String id, TransportAddress address, Map attributes, Set roles, Version version);@param;Version version;Version version;the version of the node;true
org.elasticsearch.cluster.node.DiscoveryNode; DiscoveryNode(String id, TransportAddress address, Version version); DiscoveryNode(String nodeName, String nodeId, TransportAddress address, Map attributes, Set roles, Version version);Free text;;;Creates a new {@link DiscoveryNode} <p> <b>Note:</b> if the version of the node is unknown {@link Version#minimumCompatibilityVersion()} should be used for the current version. it corresponds to the minimum version this elasticsearch version can communicate with. If a higher version is used the node might not be able to communicate with the remove node. After initial handshakes node versions will be discovered and updated. </p> ;true
org.elasticsearch.cluster.node.DiscoveryNode; DiscoveryNode(String id, TransportAddress address, Version version); DiscoveryNode(String nodeName, String nodeId, TransportAddress address, Map attributes, Set roles, Version version);@param;TransportAddress address;TransportAddress address;the nodes transport address;true
org.elasticsearch.cluster.node.DiscoveryNode; DiscoveryNode(String id, TransportAddress address, Version version); DiscoveryNode(String nodeName, String nodeId, TransportAddress address, Map attributes, Set roles, Version version);@param;Version version;Version version;the version of the node;true
org.elasticsearch.cluster.node.DiscoveryNode; DiscoveryNode(String id, TransportAddress address, Version version); DiscoveryNode(String nodeName, String nodeId, String ephemeralId, String hostName, String hostAddress, TransportAddress address, Map attributes, Set roles, Version version);@param;TransportAddress address;TransportAddress address;the nodes transport address;true
org.elasticsearch.cluster.node.DiscoveryNode; DiscoveryNode(String id, TransportAddress address, Version version); DiscoveryNode(String nodeName, String nodeId, String ephemeralId, String hostName, String hostAddress, TransportAddress address, Map attributes, Set roles, Version version);@param;Version version;Version version;the version of the node;true
org.elasticsearch.cluster.node.DiscoveryNode; DiscoveryNode(String id, TransportAddress address, Map attributes, Set roles, Version version); DiscoveryNode(String nodeName, String nodeId, TransportAddress address, Map attributes, Set roles, Version version);Free text;;;Creates a new {@link DiscoveryNode} <p> <b>Note:</b> if the version of the node is unknown {@link Version#minimumCompatibilityVersion()} should be used for the current version. it corresponds to the minimum version this elasticsearch version can communicate with. If a higher version is used the node might not be able to communicate with the remove node. After initial handshakes node versions will be discovered and updated. </p> ;true
org.elasticsearch.cluster.node.DiscoveryNode; DiscoveryNode(String id, TransportAddress address, Map attributes, Set roles, Version version); DiscoveryNode(String nodeName, String nodeId, TransportAddress address, Map attributes, Set roles, Version version);@param;TransportAddress address;TransportAddress address;the nodes transport address;true
org.elasticsearch.cluster.node.DiscoveryNode; DiscoveryNode(String id, TransportAddress address, Map attributes, Set roles, Version version); DiscoveryNode(String nodeName, String nodeId, TransportAddress address, Map attributes, Set roles, Version version);@param;Map<String,String> attributes;Map<String,String> attributes;node attributes;true
org.elasticsearch.cluster.node.DiscoveryNode; DiscoveryNode(String id, TransportAddress address, Map attributes, Set roles, Version version); DiscoveryNode(String nodeName, String nodeId, TransportAddress address, Map attributes, Set roles, Version version);@param;Set<Role> roles;Set<Role> roles;node roles;true
org.elasticsearch.cluster.node.DiscoveryNode; DiscoveryNode(String id, TransportAddress address, Map attributes, Set roles, Version version); DiscoveryNode(String nodeName, String nodeId, TransportAddress address, Map attributes, Set roles, Version version);@param;Version version;Version version;the version of the node;true
org.elasticsearch.cluster.node.DiscoveryNode; DiscoveryNode(String id, TransportAddress address, Map attributes, Set roles, Version version); DiscoveryNode(String nodeName, String nodeId, String ephemeralId, String hostName, String hostAddress, TransportAddress address, Map attributes, Set roles, Version version);@param;TransportAddress address;TransportAddress address;the nodes transport address;true
org.elasticsearch.cluster.node.DiscoveryNode; DiscoveryNode(String id, TransportAddress address, Map attributes, Set roles, Version version); DiscoveryNode(String nodeName, String nodeId, String ephemeralId, String hostName, String hostAddress, TransportAddress address, Map attributes, Set roles, Version version);@param;Map<String,String> attributes;Map<String,String> attributes;node attributes;true
org.elasticsearch.cluster.node.DiscoveryNode; DiscoveryNode(String id, TransportAddress address, Map attributes, Set roles, Version version); DiscoveryNode(String nodeName, String nodeId, String ephemeralId, String hostName, String hostAddress, TransportAddress address, Map attributes, Set roles, Version version);@param;Set<Role> roles;Set<Role> roles;node roles;true
org.elasticsearch.cluster.node.DiscoveryNode; DiscoveryNode(String id, TransportAddress address, Map attributes, Set roles, Version version); DiscoveryNode(String nodeName, String nodeId, String ephemeralId, String hostName, String hostAddress, TransportAddress address, Map attributes, Set roles, Version version);@param;Version version;Version version;the version of the node;true
org.elasticsearch.cluster.node.DiscoveryNode; DiscoveryNode(String nodeName, String nodeId, TransportAddress address, Map attributes, Set roles, Version version); DiscoveryNode(String nodeName, String nodeId, String ephemeralId, String hostName, String hostAddress, TransportAddress address, Map attributes, Set roles, Version version);@param;String nodeName;String nodeName;the nodes name;true
org.elasticsearch.cluster.node.DiscoveryNode; DiscoveryNode(String nodeName, String nodeId, TransportAddress address, Map attributes, Set roles, Version version); DiscoveryNode(String nodeName, String nodeId, String ephemeralId, String hostName, String hostAddress, TransportAddress address, Map attributes, Set roles, Version version);@param;TransportAddress address;TransportAddress address;the nodes transport address;true
org.elasticsearch.cluster.node.DiscoveryNode; DiscoveryNode(String nodeName, String nodeId, TransportAddress address, Map attributes, Set roles, Version version); DiscoveryNode(String nodeName, String nodeId, String ephemeralId, String hostName, String hostAddress, TransportAddress address, Map attributes, Set roles, Version version);@param;Map<String,String> attributes;Map<String,String> attributes;node attributes;true
org.elasticsearch.cluster.node.DiscoveryNode; DiscoveryNode(String nodeName, String nodeId, TransportAddress address, Map attributes, Set roles, Version version); DiscoveryNode(String nodeName, String nodeId, String ephemeralId, String hostName, String hostAddress, TransportAddress address, Map attributes, Set roles, Version version);@param;Set<Role> roles;Set<Role> roles;node roles;true
org.elasticsearch.cluster.node.DiscoveryNode; DiscoveryNode(String nodeName, String nodeId, TransportAddress address, Map attributes, Set roles, Version version); DiscoveryNode(String nodeName, String nodeId, String ephemeralId, String hostName, String hostAddress, TransportAddress address, Map attributes, Set roles, Version version);@param;Version version;Version version;the version of the node;true
org.elasticsearch.cluster.service.MasterService;void submitStateUpdateTask(String source, T updateTask);void submitStateUpdateTask(String source, T task, ClusterStateTaskConfig config, ClusterStateTaskExecutor executor, ClusterStateTaskListener listener);@param;String source;String source;the source of the cluster state update task;true
org.elasticsearch.cluster.service.MasterService;void submitStateUpdateTask(String source, T updateTask);void submitStateUpdateTasks(String source, Map tasks, ClusterStateTaskConfig config, ClusterStateTaskExecutor executor);@param;String source;String source;the source of the cluster state update task;true
org.elasticsearch.cluster.service.MasterService;void submitStateUpdateTask(String source, T task, ClusterStateTaskConfig config, ClusterStateTaskExecutor executor, ClusterStateTaskListener listener);void submitStateUpdateTasks(String source, Map tasks, ClusterStateTaskConfig config, ClusterStateTaskExecutor executor);@param;String source;String source;the source of the cluster state update task;true
org.elasticsearch.cluster.service.MasterService;void submitStateUpdateTask(String source, T task, ClusterStateTaskConfig config, ClusterStateTaskExecutor executor, ClusterStateTaskListener listener);void submitStateUpdateTasks(String source, Map tasks, ClusterStateTaskConfig config, ClusterStateTaskExecutor executor);@param;ClusterStateTaskConfig config;ClusterStateTaskConfig config;the cluster state update task configuration;true
org.elasticsearch.cluster.service.MasterService;void submitStateUpdateTask(String source, T task, ClusterStateTaskConfig config, ClusterStateTaskExecutor executor, ClusterStateTaskListener listener);void submitStateUpdateTasks(String source, Map tasks, ClusterStateTaskConfig config, ClusterStateTaskExecutor executor);@param;ClusterStateTaskExecutor<T> executor;ClusterStateTaskExecutor<T> executor;the cluster state update task executor, tasks that share the same executor will be executed batches on this executor;true
org.elasticsearch.cluster.service.ClusterService;void submitStateUpdateTask(String source, T updateTask);void submitStateUpdateTask(String source, T task, ClusterStateTaskConfig config, ClusterStateTaskExecutor executor, ClusterStateTaskListener listener);@param;String source;String source;the source of the cluster state update task;true
org.elasticsearch.cluster.service.ClusterService;void submitStateUpdateTask(String source, T updateTask);void submitStateUpdateTasks(String source, Map tasks, ClusterStateTaskConfig config, ClusterStateTaskExecutor executor);@param;String source;String source;the source of the cluster state update task;true
org.elasticsearch.cluster.service.ClusterService;void submitStateUpdateTask(String source, T task, ClusterStateTaskConfig config, ClusterStateTaskExecutor executor, ClusterStateTaskListener listener);void submitStateUpdateTasks(String source, Map tasks, ClusterStateTaskConfig config, ClusterStateTaskExecutor executor);@param;String source;String source;the source of the cluster state update task;true
org.elasticsearch.cluster.service.ClusterService;void submitStateUpdateTask(String source, T task, ClusterStateTaskConfig config, ClusterStateTaskExecutor executor, ClusterStateTaskListener listener);void submitStateUpdateTasks(String source, Map tasks, ClusterStateTaskConfig config, ClusterStateTaskExecutor executor);@param;ClusterStateTaskConfig config;ClusterStateTaskConfig config;the cluster state update task configuration;true
org.elasticsearch.cluster.service.ClusterService;void submitStateUpdateTask(String source, T task, ClusterStateTaskConfig config, ClusterStateTaskExecutor executor, ClusterStateTaskListener listener);void submitStateUpdateTasks(String source, Map tasks, ClusterStateTaskConfig config, ClusterStateTaskExecutor executor);@param;ClusterStateTaskExecutor<T> executor;ClusterStateTaskExecutor<T> executor;the cluster state update task executor, tasks that share the same executor will be executed batches on this executor;true
org.elasticsearch.cluster.metadata.IndexMetaData;ShardId selectSplitShard(int shardId, IndexMetaData sourceIndexMetadata, int numTargetShards);Set selectShrinkShards(int shardId, IndexMetaData sourceIndexMetadata, int numTargetShards);@param;IndexMetaData sourceIndexMetadata;IndexMetaData sourceIndexMetadata;the source index metadata;true
org.elasticsearch.cluster.metadata.IndexMetaData;ShardId selectSplitShard(int shardId, IndexMetaData sourceIndexMetadata, int numTargetShards);Set selectShrinkShards(int shardId, IndexMetaData sourceIndexMetadata, int numTargetShards);@param;int numTargetShards;int numTargetShards;the total number of shards in the target index;true
org.elasticsearch.cluster.metadata.IndexMetaData;ShardId selectSplitShard(int shardId, IndexMetaData sourceIndexMetadata, int numTargetShards);int getRoutingFactor(int sourceNumberOfShards, int targetNumberOfShards);@param;int numTargetShards;int targetNumberOfShards;the total number of shards in the target index;false
org.elasticsearch.cluster.metadata.IndexMetaData;Set selectShrinkShards(int shardId, IndexMetaData sourceIndexMetadata, int numTargetShards);int getRoutingFactor(int sourceNumberOfShards, int targetNumberOfShards);@param;int numTargetShards;int targetNumberOfShards;the total number of shards in the target index;false
org.elasticsearch.cluster.metadata.IndexNameExpressionResolver;String[] concreteIndexNames(ClusterState state, IndicesOptions options, String indexExpressions);Index[] concreteIndices(ClusterState state, IndicesOptions options, String indexExpressions);Whole;;;Translates the provided index expression into actual concrete indices, properly deduplicated.  @param the cluster state containing all the data to resolve to expressions to concrete indices@param defines how the aliases or indices need to be resolved to concrete indices@param expressions that can be resolved to alias or index names. @return the resolved concrete indices based on the cluster state, indices options and index expressions @throws if one of the index expressions is pointing to a missing index or alias and the provided indices options in the context don't allow such a case, or if the final result of the indices resolution contains no indices and the indices options in the context don't allow such a case.@throws if one of the aliases resolve to multiple indices and the provided indices options in the context don't allow such a case.;false
org.elasticsearch.cluster.metadata.IndexNameExpressionResolver;String[] concreteIndexNames(ClusterState state, IndicesOptions options, String indexExpressions);Index[] concreteIndices(ClusterState state, IndicesOptions options, long startTime, String indexExpressions);Free text;;;Translates the provided index expression into actual concrete indices, properly deduplicated. ;false
org.elasticsearch.cluster.metadata.IndexNameExpressionResolver;String[] concreteIndexNames(ClusterState state, IndicesOptions options, String indexExpressions);Index[] concreteIndices(ClusterState state, IndicesOptions options, long startTime, String indexExpressions);@param;ClusterState state;ClusterState state;the cluster state containing all the data to resolve to expressions to concrete indices;true
org.elasticsearch.cluster.metadata.IndexNameExpressionResolver;String[] concreteIndexNames(ClusterState state, IndicesOptions options, String indexExpressions);Index[] concreteIndices(ClusterState state, IndicesOptions options, long startTime, String indexExpressions);@param;IndicesOptions options;IndicesOptions options;defines how the aliases or indices need to be resolved to concrete indices;true
org.elasticsearch.cluster.metadata.IndexNameExpressionResolver;String[] concreteIndexNames(ClusterState state, IndicesOptions options, String indexExpressions);Index[] concreteIndices(ClusterState state, IndicesOptions options, long startTime, String indexExpressions);@param;String indexExpressions;String indexExpressions;expressions that can be resolved to alias or index names.;true
org.elasticsearch.cluster.metadata.IndexNameExpressionResolver;String[] concreteIndexNames(ClusterState state, IndicesOptions options, String indexExpressions);Index[] concreteIndices(ClusterState state, IndicesOptions options, long startTime, String indexExpressions);@throws;;;if one of the aliases resolve to multiple indices and the provided indices options in the context don't allow such a case.;true
org.elasticsearch.cluster.metadata.IndexNameExpressionResolver;Index[] concreteIndices(ClusterState state, IndicesOptions options, String indexExpressions);Index[] concreteIndices(ClusterState state, IndicesOptions options, long startTime, String indexExpressions);Free text;;;Translates the provided index expression into actual concrete indices, properly deduplicated. ;true
org.elasticsearch.cluster.metadata.IndexNameExpressionResolver;Index[] concreteIndices(ClusterState state, IndicesOptions options, String indexExpressions);Index[] concreteIndices(ClusterState state, IndicesOptions options, long startTime, String indexExpressions);@param;ClusterState state;ClusterState state;the cluster state containing all the data to resolve to expressions to concrete indices;true
org.elasticsearch.cluster.metadata.IndexNameExpressionResolver;Index[] concreteIndices(ClusterState state, IndicesOptions options, String indexExpressions);Index[] concreteIndices(ClusterState state, IndicesOptions options, long startTime, String indexExpressions);@param;IndicesOptions options;IndicesOptions options;defines how the aliases or indices need to be resolved to concrete indices;true
org.elasticsearch.cluster.metadata.IndexNameExpressionResolver;Index[] concreteIndices(ClusterState state, IndicesOptions options, String indexExpressions);Index[] concreteIndices(ClusterState state, IndicesOptions options, long startTime, String indexExpressions);@param;String indexExpressions;String indexExpressions;expressions that can be resolved to alias or index names.;true
org.elasticsearch.cluster.metadata.IndexNameExpressionResolver;Index[] concreteIndices(ClusterState state, IndicesOptions options, String indexExpressions);Index[] concreteIndices(ClusterState state, IndicesOptions options, long startTime, String indexExpressions);@throws;;;if one of the aliases resolve to multiple indices and the provided indices options in the context don't allow such a case.;true
org.elasticsearch.cluster.metadata.IndexNameExpressionResolver;boolean isAllIndices(List aliasesOrIndices);boolean isExplicitAllPattern(List aliasesOrIndices);@param;List<String> aliasesOrIndices;List<String> aliasesOrIndices;the array containing index names;true
org.elasticsearch.cluster.metadata.IndexNameExpressionResolver;boolean isAllIndices(List aliasesOrIndices);boolean isPatternMatchingAllIndices(MetaData metaData, String[] indicesOrAliases, String[] concreteIndices);@param;List<String> aliasesOrIndices;String[] indicesOrAliases;the array containing index names;false
org.elasticsearch.cluster.metadata.IndexNameExpressionResolver;boolean isExplicitAllPattern(List aliasesOrIndices);boolean isPatternMatchingAllIndices(MetaData metaData, String[] indicesOrAliases, String[] concreteIndices);@param;List<String> aliasesOrIndices;String[] indicesOrAliases;the array containing index names;false
org.elasticsearch.cluster.metadata.MetaData;ImmutableOpenMap findAliases(String[] aliases, String[] concreteIndices);boolean hasAliases(String[] aliases, String[] concreteIndices);@param;String[] aliases;String[] aliases;The names of the index aliases to find;true
org.elasticsearch.cluster.metadata.MetaData;ImmutableOpenMap findAliases(String[] aliases, String[] concreteIndices);boolean hasAliases(String[] aliases, String[] concreteIndices);@param;String[] concreteIndices;String[] concreteIndices;The concrete indexes the index aliases must point to order to be returned.;true
org.elasticsearch.cluster.metadata.AliasValidator;void validateAlias(Alias alias, String index, MetaData metaData);void validateAliasMetaData(AliasMetaData aliasMetaData, String index, MetaData metaData);@throws;;;if the alias is not valid;true
org.elasticsearch.cluster.metadata.AliasValidator;void validateAlias(Alias alias, String index, MetaData metaData);void validateAliasStandalone(Alias alias);@throws;;;if the alias is not valid;true
org.elasticsearch.cluster.metadata.AliasValidator;void validateAliasMetaData(AliasMetaData aliasMetaData, String index, MetaData metaData);void validateAliasStandalone(Alias alias);@throws;;;if the alias is not valid;true
org.elasticsearch.cluster.metadata.AliasValidator;void validateAliasFilter(String alias, String filter, QueryShardContext queryShardContext, NamedXContentRegistry xContentRegistry);void validateAliasFilter(String alias, byte[] filter, QueryShardContext queryShardContext, NamedXContentRegistry xContentRegistry);Whole;;;Validates an alias filter by parsing it using the provided {@link org.elasticsearch.index.query.QueryShardContext}    @throws if the filter is not valid;false
org.elasticsearch.cluster.metadata.MappingMetaData;Map sourceAsMap();Map getSourceAsMap();Whole;;;Converts the serialized compressed form of the mappings into a parsed map.    ;false
org.elasticsearch.tasks.TaskListener;void onResponse(Task task, Response response);void onFailure(Task task, Throwable e);@param;Task task;Task task;the task being executed. May be null if the action doesn't create a task;true
org.elasticsearch.indices.recovery.RecoverySourceHandler;boolean isTranslogReadyForSequenceNumberBasedRecovery();SendSnapshotResult sendSnapshot(long startingSeqNo, long requiredSeqNoRangeStart, long endingSeqNo, Translog.Snapshot snapshot);@throws;;;if an I/O exception occurred reading the translog snapshot;true
org.elasticsearch.indices.IndicesService;void deleteShardStore(String reason, ShardLock lock, IndexSettings indexSettings);void deleteShardStore(String reason, ShardId shardId, ClusterState clusterState);@param;String reason;String reason;the reason for the shard deletion;true
org.elasticsearch.indices.IndicesService;void deleteShardStore(String reason, ShardLock lock, IndexSettings indexSettings);void deleteShardStore(String reason, ShardId shardId, ClusterState clusterState);@throws;;;if an IOException occurs;true
org.elasticsearch.monitor.jvm.JvmInfo;long pid();long getPid();Whole;;;The process id.    ;false
org.elasticsearch.monitor.os.OsProbe;String readSysFsCgroupCpuAcctCpuCfsPeriod(String controlGroup);String readSysFsCgroupCpuAcctCpuAcctCfsQuota(String controlGroup);@param;String controlGroup;String controlGroup;the control group to which the Elasticsearch process belongs for the cpu subsystem;true
org.elasticsearch.monitor.os.OsProbe;String readSysFsCgroupCpuAcctCpuCfsPeriod(String controlGroup);List readSysFsCgroupCpuAcctCpuStat(String controlGroup);@param;String controlGroup;String controlGroup;the control group to which the Elasticsearch process belongs for the cpu subsystem;true
org.elasticsearch.monitor.os.OsProbe;String readSysFsCgroupCpuAcctCpuAcctCfsQuota(String controlGroup);List readSysFsCgroupCpuAcctCpuStat(String controlGroup);@param;String controlGroup;String controlGroup;the control group to which the Elasticsearch process belongs for the cpu subsystem;true
org.elasticsearch.monitor.os.OsProbe;String readSysFsCgroupMemoryLimitInBytes(String controlGroup);String readSysFsCgroupMemoryUsageInBytes(String controlGroup);@param;String controlGroup;String controlGroup;the control group to which the Elasticsearch process belongs for the memory subsystem;true
org.elasticsearch.transport.TcpChannel;void closeChannel(C channel, boolean blocking);void closeChannels(List channels, boolean blocking);@param;C channel;List<C> channels;to close;false
org.elasticsearch.transport.TcpChannel;void closeChannel(C channel, boolean blocking);void closeChannels(List channels, boolean blocking);@param;boolean blocking;boolean blocking;indicates if we should block on channel close;true
org.elasticsearch.transport.TransportService;void connectToNode(DiscoveryNode node, ConnectionProfile connectionProfile);Transport.Connection openConnection(DiscoveryNode node, ConnectionProfile profile);@param;DiscoveryNode node;DiscoveryNode node;the node to connect to;true
org.elasticsearch.transport.TransportService;DiscoveryNode handshake(Transport.Connection connection, long handshakeTimeout);DiscoveryNode handshake(Transport.Connection connection, long handshakeTimeout, Predicate clusterNamePredicate);@return;;;the connected node;true
org.elasticsearch.transport.TransportService;DiscoveryNode handshake(Transport.Connection connection, long handshakeTimeout);DiscoveryNode handshake(Transport.Connection connection, long handshakeTimeout, Predicate clusterNamePredicate);@param;Transport.Connection connection;Transport.Connection connection;the connection to a specific node;true
org.elasticsearch.transport.TransportService;DiscoveryNode handshake(Transport.Connection connection, long handshakeTimeout);DiscoveryNode handshake(Transport.Connection connection, long handshakeTimeout, Predicate clusterNamePredicate);@param;long handshakeTimeout;long handshakeTimeout;handshake timeout;true
org.elasticsearch.transport.TransportService;DiscoveryNode handshake(Transport.Connection connection, long handshakeTimeout);DiscoveryNode handshake(Transport.Connection connection, long handshakeTimeout, Predicate clusterNamePredicate);@throws;;;if the connection failed;true
org.elasticsearch.transport.TransportService;DiscoveryNode handshake(Transport.Connection connection, long handshakeTimeout);DiscoveryNode handshake(Transport.Connection connection, long handshakeTimeout, Predicate clusterNamePredicate);@throws;;;if the handshake failed;true
org.elasticsearch.transport.TransportService;void registerRequestHandler(String action, Supplier requestFactory, String executor, TransportRequestHandler handler);void registerRequestHandler(String action, Supplier request, String executor, boolean forceExecution, boolean canTripCircuitBreaker, TransportRequestHandler handler);Free text;;;Registers a new request handler ;true
org.elasticsearch.transport.TransportService;void registerRequestHandler(String action, Supplier requestFactory, String executor, TransportRequestHandler handler);void registerRequestHandler(String action, Supplier request, String executor, boolean forceExecution, boolean canTripCircuitBreaker, TransportRequestHandler handler);@param;String action;String action;The action the request handler is associated with;true
org.elasticsearch.transport.TransportService;void registerRequestHandler(String action, Supplier requestFactory, String executor, TransportRequestHandler handler);void registerRequestHandler(String action, Supplier request, String executor, boolean forceExecution, boolean canTripCircuitBreaker, TransportRequestHandler handler);@param;String executor;String executor;The executor the request handling will be executed on;true
org.elasticsearch.transport.TransportService;void registerRequestHandler(String action, Supplier requestFactory, String executor, TransportRequestHandler handler);void registerRequestHandler(String action, Supplier request, String executor, boolean forceExecution, boolean canTripCircuitBreaker, TransportRequestHandler handler);@param;TransportRequestHandler<Request> handler;TransportRequestHandler<Request> handler;The handler itself that implements the request handling;true
org.elasticsearch.bootstrap.JarHell;void checkJarHell();void checkJarHell(Set urls);@throws;;;if jar hell was found;true
org.elasticsearch.bootstrap.JarHell;Set parseClassPath();Set parseClassPath(String classPath);@return;;;array of URLs;true
org.elasticsearch.bootstrap.JarHell;Set parseClassPath();Set parseClassPath(String classPath);@throws;;;if the classpath contains empty elements;true
org.elasticsearch.bootstrap.JNAKernel32Library;boolean addConsoleCtrlHandler(ConsoleCtrlHandler handler);boolean SetConsoleCtrlHandler(StdCallLibrary.StdCallCallback handler, boolean add);@return;;;true if the handler is correctly set;false
org.elasticsearch.bootstrap.JNAKernel32Library;boolean addConsoleCtrlHandler(ConsoleCtrlHandler handler);boolean SetConsoleCtrlHandler(StdCallLibrary.StdCallCallback handler, boolean add);@throws;;;if the Kernel32 library is not loaded or if the native function is not found;true
org.elasticsearch.bootstrap.JNAKernel32Library;boolean addConsoleCtrlHandler(ConsoleCtrlHandler handler);boolean SetConsoleCtrlHandler(StdCallLibrary.StdCallCallback handler, boolean add);@throws;;;if the library for native calls is missing;true
org.elasticsearch.bootstrap.JNAKernel32Library;boolean VirtualLock(Pointer address, SizeT size);boolean AssignProcessToJobObject(Pointer job, Pointer process);@return;;;true if the function succeeds;false
org.elasticsearch.bootstrap.JNAKernel32Library;boolean VirtualLock(Pointer address, SizeT size);boolean QueryInformationJobObject(Pointer job, int infoClass, Pointer info, int infoLength, Pointer returnLength);@return;;;true if the function succeeds;false
org.elasticsearch.bootstrap.JNAKernel32Library;boolean VirtualLock(Pointer address, SizeT size);boolean SetInformationJobObject(Pointer job, int infoClass, Pointer info, int infoLength);@return;;;true if the function succeeds;false
org.elasticsearch.bootstrap.JNAKernel32Library;boolean SetProcessWorkingSetSize(Pointer handle, SizeT minSize, SizeT maxSize);boolean CloseHandle(Pointer handle);@return;;;true if the function succeeds.;false
org.elasticsearch.bootstrap.JNAKernel32Library;boolean AssignProcessToJobObject(Pointer job, Pointer process);boolean QueryInformationJobObject(Pointer job, int infoClass, Pointer info, int infoLength, Pointer returnLength);@return;;;true if the function succeeds;false
org.elasticsearch.bootstrap.JNAKernel32Library;boolean AssignProcessToJobObject(Pointer job, Pointer process);boolean QueryInformationJobObject(Pointer job, int infoClass, Pointer info, int infoLength, Pointer returnLength);@param;Pointer job;Pointer job;job handle;true
org.elasticsearch.bootstrap.JNAKernel32Library;boolean AssignProcessToJobObject(Pointer job, Pointer process);boolean SetInformationJobObject(Pointer job, int infoClass, Pointer info, int infoLength);@return;;;true if the function succeeds;false
org.elasticsearch.bootstrap.JNAKernel32Library;boolean AssignProcessToJobObject(Pointer job, Pointer process);boolean SetInformationJobObject(Pointer job, int infoClass, Pointer info, int infoLength);@param;Pointer job;Pointer job;job handle;true
org.elasticsearch.bootstrap.JNAKernel32Library;boolean QueryInformationJobObject(Pointer job, int infoClass, Pointer info, int infoLength, Pointer returnLength);boolean SetInformationJobObject(Pointer job, int infoClass, Pointer info, int infoLength);@return;;;true if the function succeeds;false
org.elasticsearch.bootstrap.JNAKernel32Library;boolean QueryInformationJobObject(Pointer job, int infoClass, Pointer info, int infoLength, Pointer returnLength);boolean SetInformationJobObject(Pointer job, int infoClass, Pointer info, int infoLength);@param;Pointer job;Pointer job;job handle;true
org.elasticsearch.bootstrap.JNAKernel32Library;boolean QueryInformationJobObject(Pointer job, int infoClass, Pointer info, int infoLength, Pointer returnLength);boolean SetInformationJobObject(Pointer job, int infoClass, Pointer info, int infoLength);@param;int infoClass;int infoClass;information class constant;true
org.elasticsearch.bootstrap.JNAKernel32Library;boolean QueryInformationJobObject(Pointer job, int infoClass, Pointer info, int infoLength, Pointer returnLength);boolean SetInformationJobObject(Pointer job, int infoClass, Pointer info, int infoLength);@param;Pointer info;Pointer info;pointer to information structure;true
org.elasticsearch.bootstrap.JNAKernel32Library;boolean QueryInformationJobObject(Pointer job, int infoClass, Pointer info, int infoLength, Pointer returnLength);boolean SetInformationJobObject(Pointer job, int infoClass, Pointer info, int infoLength);@param;int infoLength;int infoLength;size of information structure;true
org.elasticsearch.bootstrap.FilePermissionUtils;void addSingleFilePath(Permissions policy, Path path, String permissions);void addDirectoryPath(Permissions policy, String configurationName, Path path, String permissions);@param;Permissions policy;Permissions policy;current policy to add permissions to;true
org.elasticsearch.bootstrap.FilePermissionUtils;void addSingleFilePath(Permissions policy, Path path, String permissions);void addDirectoryPath(Permissions policy, String configurationName, Path path, String permissions);@param;Path path;Path path;the path itself;true
org.elasticsearch.bootstrap.FilePermissionUtils;void addSingleFilePath(Permissions policy, Path path, String permissions);void addDirectoryPath(Permissions policy, String configurationName, Path path, String permissions);@param;String permissions;String permissions;set of file permissions to grant to the path;true
org.elasticsearch.bootstrap.BootstrapChecks;void check(BootstrapContext context, BoundTransportAddress boundTransportAddress, List additionalChecks);boolean enforceLimits(BoundTransportAddress boundTransportAddress, String discoveryType);@param;BoundTransportAddress boundTransportAddress;BoundTransportAddress boundTransportAddress;the node network bindings;true
org.elasticsearch.bootstrap.BootstrapChecks;void check(BootstrapContext context, boolean enforceLimits, List checks, String nodeName);void check(BootstrapContext context, boolean enforceLimits, List checks, Logger logger);@param;BootstrapContext context;BootstrapContext context;the current node boostrap context;true
org.elasticsearch.bootstrap.BootstrapChecks;void check(BootstrapContext context, boolean enforceLimits, List checks, String nodeName);void check(BootstrapContext context, boolean enforceLimits, List checks, Logger logger);@param;boolean enforceLimits;boolean enforceLimits;true if the checks should be enforced or otherwise warned;true
org.elasticsearch.bootstrap.BootstrapChecks;void check(BootstrapContext context, boolean enforceLimits, List checks, String nodeName);void check(BootstrapContext context, boolean enforceLimits, List checks, Logger logger);@param;List<BootstrapCheck> checks;List<BootstrapCheck> checks;the checks to execute;true
org.elasticsearch.watcher.FileChangesListener;void onFileDeleted(Path file);void onDirectoryDeleted(Path file);Whole;;;Called for every file that disappeared in the watched directory    ;false
org.elasticsearch.snapshots.RestoreInfo;RestoreInfo readRestoreInfo(StreamInput in);RestoreInfo readOptionalRestoreInfo(StreamInput in);@return;;;restore info;false
org.elasticsearch.snapshots.RestoreInfo;RestoreInfo readRestoreInfo(StreamInput in);RestoreInfo readOptionalRestoreInfo(StreamInput in);@param;StreamInput in;StreamInput in;stream input;true
org.elasticsearch.snapshots.SnapshotsService;RepositoryData getRepositoryData(String repositoryName);SnapshotInfo snapshot(String repositoryName, SnapshotId snapshotId);@param;String repositoryName;String repositoryName;repository name;true
org.elasticsearch.snapshots.SnapshotsService;RepositoryData getRepositoryData(String repositoryName);List snapshots(String repositoryName, List snapshotIds, Set incompatibleSnapshotIds, boolean ignoreUnavailable);@param;String repositoryName;String repositoryName;repository name;true
org.elasticsearch.snapshots.SnapshotsService;RepositoryData getRepositoryData(String repositoryName);List currentSnapshots(String repositoryName);@param;String repositoryName;String repositoryName;repository name;true
org.elasticsearch.snapshots.SnapshotsService;RepositoryData getRepositoryData(String repositoryName);Map snapshotShards(String repositoryName, SnapshotInfo snapshotInfo);@param;String repositoryName;String repositoryName;repository name;true
org.elasticsearch.snapshots.SnapshotsService;SnapshotInfo snapshot(String repositoryName, SnapshotId snapshotId);List snapshots(String repositoryName, List snapshotIds, Set incompatibleSnapshotIds, boolean ignoreUnavailable);@param;String repositoryName;String repositoryName;repository name;true
org.elasticsearch.snapshots.SnapshotsService;SnapshotInfo snapshot(String repositoryName, SnapshotId snapshotId);List currentSnapshots(String repositoryName);@param;String repositoryName;String repositoryName;repository name;true
org.elasticsearch.snapshots.SnapshotsService;SnapshotInfo snapshot(String repositoryName, SnapshotId snapshotId);Map snapshotShards(String repositoryName, SnapshotInfo snapshotInfo);@param;String repositoryName;String repositoryName;repository name;true
org.elasticsearch.snapshots.SnapshotsService;List snapshots(String repositoryName, List snapshotIds, Set incompatibleSnapshotIds, boolean ignoreUnavailable);List currentSnapshots(String repositoryName);@return;;;list of snapshots;false
org.elasticsearch.snapshots.SnapshotsService;List snapshots(String repositoryName, List snapshotIds, Set incompatibleSnapshotIds, boolean ignoreUnavailable);List currentSnapshots(String repositoryName);@param;String repositoryName;String repositoryName;repository name;true
org.elasticsearch.snapshots.SnapshotsService;List snapshots(String repositoryName, List snapshotIds, Set incompatibleSnapshotIds, boolean ignoreUnavailable);Map snapshotShards(String repositoryName, SnapshotInfo snapshotInfo);@param;String repositoryName;String repositoryName;repository name;true
org.elasticsearch.snapshots.SnapshotsService;List currentSnapshots(String repositoryName);Map snapshotShards(String repositoryName, SnapshotInfo snapshotInfo);@param;String repositoryName;String repositoryName;repository name;true
org.elasticsearch.snapshots.SnapshotsService;List currentSnapshots(String repository, List snapshots);boolean isRepositoryInUse(ClusterState clusterState, String repository);@param;String repository;String repository;repository id;true
org.elasticsearch.snapshots.SnapshotsService;void deleteSnapshot(String repositoryName, String snapshotName, DeleteSnapshotListener listener, boolean immediatePriority);void addListener(SnapshotCompletionListener listener);@param;DeleteSnapshotListener listener;SnapshotCompletionListener listener;listener;true
org.elasticsearch.snapshots.SnapshotsService;void deleteSnapshot(String repositoryName, String snapshotName, DeleteSnapshotListener listener, boolean immediatePriority);void removeListener(SnapshotCompletionListener listener);@param;DeleteSnapshotListener listener;SnapshotCompletionListener listener;listener;true
org.elasticsearch.snapshots.SnapshotsService;void addListener(SnapshotCompletionListener listener);void removeListener(SnapshotCompletionListener listener);@param;SnapshotCompletionListener listener;SnapshotCompletionListener listener;listener;true
org.elasticsearch.plugins.ClusterPlugin;Collection createAllocationDeciders(Settings settings, ClusterSettings clusterSettings);Map getShardsAllocators(Settings settings, ClusterSettings clusterSettings);@param;Settings settings;Settings settings;Settings for the node;true
org.elasticsearch.plugins.ClusterPlugin;Collection createAllocationDeciders(Settings settings, ClusterSettings clusterSettings);Map getShardsAllocators(Settings settings, ClusterSettings clusterSettings);@param;ClusterSettings clusterSettings;ClusterSettings clusterSettings;Settings for the cluster;true
org.elasticsearch.ingest.IngestDocument;T getFieldValue(String path, Class clazz);T getFieldValue(String path, Class clazz, boolean ignoreMissing);Free text;;;Returns the value contained in the document for the provided path ;true
org.elasticsearch.ingest.IngestDocument;T getFieldValue(String path, Class clazz);T getFieldValue(String path, Class clazz, boolean ignoreMissing);@param;String path;String path;The path within the document in dot-notation;true
org.elasticsearch.ingest.IngestDocument;T getFieldValue(String path, Class clazz);T getFieldValue(String path, Class clazz, boolean ignoreMissing);@param;Class<T> clazz;Class<T> clazz;The expected class of the field value;true
org.elasticsearch.ingest.IngestDocument;T getFieldValue(String path, Class clazz);T getFieldValue(TemplateScript.Factory pathTemplate, Class clazz);@param;String path;TemplateScript.Factory pathTemplate;The path within the document in dot-notation;true
org.elasticsearch.ingest.IngestDocument;T getFieldValue(String path, Class clazz);byte[] getFieldValueAsBytes(String path);@param;String path;String path;The path within the document in dot-notation;true
org.elasticsearch.ingest.IngestDocument;T getFieldValue(String path, Class clazz);byte[] getFieldValueAsBytes(String path);@throws;;;if the path is null, empty, invalid, if the field doesn't exist or if the field that is found at the provided path is not of the expected type.;true
org.elasticsearch.ingest.IngestDocument;T getFieldValue(String path, Class clazz);byte[] getFieldValueAsBytes(String path, boolean ignoreMissing);@param;String path;String path;The path within the document in dot-notation;true
org.elasticsearch.ingest.IngestDocument;T getFieldValue(String path, Class clazz);byte[] getFieldValueAsBytes(String path, boolean ignoreMissing);@throws;;;if the path is null, empty, invalid, if the field doesn't exist or if the field that is found at the provided path is not of the expected type.;true
org.elasticsearch.ingest.IngestDocument;T getFieldValue(String path, Class clazz);boolean hasField(String path);@param;String path;String path;The path within the document in dot-notation;true
org.elasticsearch.ingest.IngestDocument;T getFieldValue(String path, Class clazz);boolean hasField(String path, boolean failOutOfRange);@param;String path;String path;The path within the document in dot-notation;true
org.elasticsearch.ingest.IngestDocument;T getFieldValue(String path, Class clazz);void appendFieldValue(String path, Object value);@param;String path;String path;The path within the document in dot-notation;true
org.elasticsearch.ingest.IngestDocument;T getFieldValue(String path, Class clazz);void setFieldValue(String path, Object value);@param;String path;String path;The path within the document in dot-notation;true
org.elasticsearch.ingest.IngestDocument;T getFieldValue(String path, Class clazz, boolean ignoreMissing);T getFieldValue(TemplateScript.Factory pathTemplate, Class clazz);@param;String path;TemplateScript.Factory pathTemplate;The path within the document in dot-notation;true
org.elasticsearch.ingest.IngestDocument;T getFieldValue(String path, Class clazz, boolean ignoreMissing);byte[] getFieldValueAsBytes(String path);@param;String path;String path;The path within the document in dot-notation;true
org.elasticsearch.ingest.IngestDocument;T getFieldValue(String path, Class clazz, boolean ignoreMissing);byte[] getFieldValueAsBytes(String path, boolean ignoreMissing);@param;String path;String path;The path within the document in dot-notation;true
org.elasticsearch.ingest.IngestDocument;T getFieldValue(String path, Class clazz, boolean ignoreMissing);byte[] getFieldValueAsBytes(String path, boolean ignoreMissing);@param;boolean ignoreMissing;boolean ignoreMissing;The flag to determine whether to throw an exception when `path` is not found in the document.;true
org.elasticsearch.ingest.IngestDocument;T getFieldValue(String path, Class clazz, boolean ignoreMissing);boolean hasField(String path);@param;String path;String path;The path within the document in dot-notation;true
org.elasticsearch.ingest.IngestDocument;T getFieldValue(String path, Class clazz, boolean ignoreMissing);boolean hasField(String path, boolean failOutOfRange);@param;String path;String path;The path within the document in dot-notation;true
org.elasticsearch.ingest.IngestDocument;T getFieldValue(String path, Class clazz, boolean ignoreMissing);void appendFieldValue(String path, Object value);@param;String path;String path;The path within the document in dot-notation;true
org.elasticsearch.ingest.IngestDocument;T getFieldValue(String path, Class clazz, boolean ignoreMissing);void setFieldValue(String path, Object value);@param;String path;String path;The path within the document in dot-notation;true
org.elasticsearch.ingest.IngestDocument;T getFieldValue(TemplateScript.Factory pathTemplate, Class clazz);byte[] getFieldValueAsBytes(String path);@param;TemplateScript.Factory pathTemplate;String path;The path within the document in dot-notation;false
org.elasticsearch.ingest.IngestDocument;T getFieldValue(TemplateScript.Factory pathTemplate, Class clazz);byte[] getFieldValueAsBytes(String path, boolean ignoreMissing);@param;TemplateScript.Factory pathTemplate;String path;The path within the document in dot-notation;false
org.elasticsearch.ingest.IngestDocument;T getFieldValue(TemplateScript.Factory pathTemplate, Class clazz);boolean hasField(String path);@param;TemplateScript.Factory pathTemplate;String path;The path within the document in dot-notation;false
org.elasticsearch.ingest.IngestDocument;T getFieldValue(TemplateScript.Factory pathTemplate, Class clazz);boolean hasField(String path, boolean failOutOfRange);@param;TemplateScript.Factory pathTemplate;String path;The path within the document in dot-notation;false
org.elasticsearch.ingest.IngestDocument;T getFieldValue(TemplateScript.Factory pathTemplate, Class clazz);void appendFieldValue(String path, Object value);@param;TemplateScript.Factory pathTemplate;String path;The path within the document in dot-notation;false
org.elasticsearch.ingest.IngestDocument;T getFieldValue(TemplateScript.Factory pathTemplate, Class clazz);void setFieldValue(String path, Object value);@param;TemplateScript.Factory pathTemplate;String path;The path within the document in dot-notation;false
org.elasticsearch.ingest.IngestDocument;byte[] getFieldValueAsBytes(String path);byte[] getFieldValueAsBytes(String path, boolean ignoreMissing);Free text;;;Returns the value contained in the document for the provided path as a byte array. If the path value is a string, a base64 decode operation will happen. If the path value is a byte array, it is just returned ;true
org.elasticsearch.ingest.IngestDocument;byte[] getFieldValueAsBytes(String path);byte[] getFieldValueAsBytes(String path, boolean ignoreMissing);@return;;;the byte array for the provided path if existing;true
org.elasticsearch.ingest.IngestDocument;byte[] getFieldValueAsBytes(String path);byte[] getFieldValueAsBytes(String path, boolean ignoreMissing);@param;String path;String path;The path within the document in dot-notation;true
org.elasticsearch.ingest.IngestDocument;byte[] getFieldValueAsBytes(String path);byte[] getFieldValueAsBytes(String path, boolean ignoreMissing);@throws;;;if the path is null, empty, invalid, if the field doesn't exist or if the field that is found at the provided path is not of the expected type.;true
org.elasticsearch.ingest.IngestDocument;byte[] getFieldValueAsBytes(String path);boolean hasField(String path);@param;String path;String path;The path within the document in dot-notation;true
org.elasticsearch.ingest.IngestDocument;byte[] getFieldValueAsBytes(String path);boolean hasField(String path, boolean failOutOfRange);@param;String path;String path;The path within the document in dot-notation;true
org.elasticsearch.ingest.IngestDocument;byte[] getFieldValueAsBytes(String path);void appendFieldValue(String path, Object value);@param;String path;String path;The path within the document in dot-notation;true
org.elasticsearch.ingest.IngestDocument;byte[] getFieldValueAsBytes(String path);void setFieldValue(String path, Object value);@param;String path;String path;The path within the document in dot-notation;true
org.elasticsearch.ingest.IngestDocument;byte[] getFieldValueAsBytes(String path, boolean ignoreMissing);boolean hasField(String path);@param;String path;String path;The path within the document in dot-notation;true
org.elasticsearch.ingest.IngestDocument;byte[] getFieldValueAsBytes(String path, boolean ignoreMissing);boolean hasField(String path, boolean failOutOfRange);@param;String path;String path;The path within the document in dot-notation;true
org.elasticsearch.ingest.IngestDocument;byte[] getFieldValueAsBytes(String path, boolean ignoreMissing);void appendFieldValue(String path, Object value);@param;String path;String path;The path within the document in dot-notation;true
org.elasticsearch.ingest.IngestDocument;byte[] getFieldValueAsBytes(String path, boolean ignoreMissing);void setFieldValue(String path, Object value);@param;String path;String path;The path within the document in dot-notation;true
org.elasticsearch.ingest.IngestDocument;boolean hasField(TemplateScript.Factory fieldPathTemplate);boolean hasField(String path);@return;;;true if the document contains a value for the field, false otherwise;true
org.elasticsearch.ingest.IngestDocument;boolean hasField(TemplateScript.Factory fieldPathTemplate);boolean hasField(String path, boolean failOutOfRange);@return;;;true if the document contains a value for the field, false otherwise;true
org.elasticsearch.ingest.IngestDocument;boolean hasField(String path);boolean hasField(String path, boolean failOutOfRange);Free text;;;Checks whether the document contains a value for the provided path ;true
org.elasticsearch.ingest.IngestDocument;boolean hasField(String path);boolean hasField(String path, boolean failOutOfRange);@return;;;true if the document contains a value for the field, false otherwise;true
org.elasticsearch.ingest.IngestDocument;boolean hasField(String path);boolean hasField(String path, boolean failOutOfRange);@param;String path;String path;The path within the document in dot-notation;true
org.elasticsearch.ingest.IngestDocument;boolean hasField(String path);boolean hasField(String path, boolean failOutOfRange);@throws;;;if the path is null, empty or invalid.;true
org.elasticsearch.ingest.IngestDocument;boolean hasField(String path);void appendFieldValue(String path, Object value);@param;String path;String path;The path within the document in dot-notation;true
org.elasticsearch.ingest.IngestDocument;boolean hasField(String path);void appendFieldValue(String path, Object value);@throws;;;if the path is null, empty or invalid.;true
org.elasticsearch.ingest.IngestDocument;boolean hasField(String path);void appendFieldValue(TemplateScript.Factory fieldPathTemplate, ValueSource valueSource);@throws;;;if the path is null, empty or invalid.;true
org.elasticsearch.ingest.IngestDocument;boolean hasField(String path);void setFieldValue(String path, Object value);@param;String path;String path;The path within the document in dot-notation;true
org.elasticsearch.ingest.IngestDocument;boolean hasField(String path, boolean failOutOfRange);void appendFieldValue(String path, Object value);@param;String path;String path;The path within the document in dot-notation;true
org.elasticsearch.ingest.IngestDocument;boolean hasField(String path, boolean failOutOfRange);void appendFieldValue(String path, Object value);@throws;;;if the path is null, empty or invalid.;true
org.elasticsearch.ingest.IngestDocument;boolean hasField(String path, boolean failOutOfRange);void appendFieldValue(TemplateScript.Factory fieldPathTemplate, ValueSource valueSource);@throws;;;if the path is null, empty or invalid.;true
org.elasticsearch.ingest.IngestDocument;boolean hasField(String path, boolean failOutOfRange);void setFieldValue(String path, Object value);@param;String path;String path;The path within the document in dot-notation;true
org.elasticsearch.ingest.IngestDocument;void removeField(TemplateScript.Factory fieldPathTemplate);void removeField(String path);Free text;;;Removes the field identified by the provided path. ;true
org.elasticsearch.ingest.IngestDocument;void removeField(TemplateScript.Factory fieldPathTemplate);void removeField(String path);@throws;;;if the path is null, empty, invalid or if the field doesn't exist.;true
org.elasticsearch.ingest.IngestDocument;void removeField(TemplateScript.Factory fieldPathTemplate);void appendFieldValue(TemplateScript.Factory fieldPathTemplate, ValueSource valueSource);@param;TemplateScript.Factory fieldPathTemplate;TemplateScript.Factory fieldPathTemplate;Resolves to the path with dot-notation within the document;true
org.elasticsearch.ingest.IngestDocument;void removeField(TemplateScript.Factory fieldPathTemplate);void setFieldValue(TemplateScript.Factory fieldPathTemplate, ValueSource valueSource);@param;TemplateScript.Factory fieldPathTemplate;TemplateScript.Factory fieldPathTemplate;Resolves to the path with dot-notation within the document;true
org.elasticsearch.ingest.IngestDocument;void appendFieldValue(String path, Object value);void appendFieldValue(TemplateScript.Factory fieldPathTemplate, ValueSource valueSource);Free text;;;Appends the provided value to the provided path in the document. Any non existing path element will be created. If the path identifies a list, the value will be appended to the existing list. If the path identifies a scalar, the scalar will be converted to a list and the provided value will be added to the newly created list. Supports multiple values too provided in forms of list, in that case all the values will be appended to the existing (or newly created) list. ;true
org.elasticsearch.ingest.IngestDocument;void appendFieldValue(String path, Object value);void appendFieldValue(TemplateScript.Factory fieldPathTemplate, ValueSource valueSource);@throws;;;if the path is null, empty or invalid.;true
org.elasticsearch.ingest.IngestDocument;void appendFieldValue(String path, Object value);void setFieldValue(String path, Object value);@param;String path;String path;The path within the document in dot-notation;true
org.elasticsearch.ingest.IngestDocument;void appendFieldValue(TemplateScript.Factory fieldPathTemplate, ValueSource valueSource);void setFieldValue(TemplateScript.Factory fieldPathTemplate, ValueSource valueSource);@param;TemplateScript.Factory fieldPathTemplate;TemplateScript.Factory fieldPathTemplate;Resolves to the path with dot-notation within the document;true
org.elasticsearch.ingest.IngestDocument;void setFieldValue(String path, Object value);void setFieldValue(TemplateScript.Factory fieldPathTemplate, ValueSource valueSource);@throws;;;if the path is null, empty, invalid or if the value cannot be set to the item identified by the provided path.;true
org.elasticsearch.discovery.BlockingClusterStatePublishResponseHandler;void onResponse(DiscoveryNode node);void onFailure(DiscoveryNode node, Exception e);@param;DiscoveryNode node;DiscoveryNode node;the node that replied to the publish event;true
org.elasticsearch.repositories.blobstore.BlobStoreFormat;T readBlob(BlobContainer blobContainer, String blobName);T read(BlobContainer blobContainer, String name);@return;;;parsed blob object;false
org.elasticsearch.repositories.blobstore.BlobStoreFormat;T readBlob(BlobContainer blobContainer, String blobName);T read(BlobContainer blobContainer, String name);@param;BlobContainer blobContainer;BlobContainer blobContainer;blob container;true
org.elasticsearch.repositories.blobstore.ChecksumBlobStoreFormat; ChecksumBlobStoreFormat(String codec, String blobNameFormat, CheckedFunction reader, NamedXContentRegistry namedXContentRegistry, boolean compress, XContentType xContentType); ChecksumBlobStoreFormat(String codec, String blobNameFormat, CheckedFunction reader, NamedXContentRegistry namedXContentRegistry, boolean compress);@param;String codec;String codec;codec name;true
org.elasticsearch.repositories.blobstore.ChecksumBlobStoreFormat; ChecksumBlobStoreFormat(String codec, String blobNameFormat, CheckedFunction reader, NamedXContentRegistry namedXContentRegistry, boolean compress, XContentType xContentType); ChecksumBlobStoreFormat(String codec, String blobNameFormat, CheckedFunction reader, NamedXContentRegistry namedXContentRegistry, boolean compress);@param;String blobNameFormat;String blobNameFormat;format of the blobname in String#format format;true
org.elasticsearch.repositories.blobstore.ChecksumBlobStoreFormat; ChecksumBlobStoreFormat(String codec, String blobNameFormat, CheckedFunction reader, NamedXContentRegistry namedXContentRegistry, boolean compress, XContentType xContentType); ChecksumBlobStoreFormat(String codec, String blobNameFormat, CheckedFunction reader, NamedXContentRegistry namedXContentRegistry, boolean compress);@param;CheckedFunction<XContentParser,T,IOException> reader;CheckedFunction<XContentParser,T,IOException> reader;prototype object that can deserialize T from XContent;true
org.elasticsearch.repositories.blobstore.ChecksumBlobStoreFormat; ChecksumBlobStoreFormat(String codec, String blobNameFormat, CheckedFunction reader, NamedXContentRegistry namedXContentRegistry, boolean compress, XContentType xContentType); ChecksumBlobStoreFormat(String codec, String blobNameFormat, CheckedFunction reader, NamedXContentRegistry namedXContentRegistry, boolean compress);@param;boolean compress;boolean compress;true if the content should be compressed;true
org.elasticsearch.repositories.blobstore.ChecksumBlobStoreFormat;T readBlob(BlobContainer blobContainer, String blobName);void writeAtomic(T obj, BlobContainer blobContainer, String name);@param;BlobContainer blobContainer;BlobContainer blobContainer;blob container;true
org.elasticsearch.repositories.blobstore.ChecksumBlobStoreFormat;T readBlob(BlobContainer blobContainer, String blobName);void writeAtomic(T obj, BlobContainer blobContainer, String name);@param;String blobName;String name;blob name;false
org.elasticsearch.repositories.blobstore.ChecksumBlobStoreFormat;T readBlob(BlobContainer blobContainer, String blobName);void write(T obj, BlobContainer blobContainer, String name);@param;BlobContainer blobContainer;BlobContainer blobContainer;blob container;true
org.elasticsearch.repositories.blobstore.ChecksumBlobStoreFormat;T readBlob(BlobContainer blobContainer, String blobName);void write(T obj, BlobContainer blobContainer, String name);@param;String blobName;String name;blob name;false
org.elasticsearch.repositories.blobstore.ChecksumBlobStoreFormat;T readBlob(BlobContainer blobContainer, String blobName);void writeBlob(T obj, BlobContainer blobContainer, String blobName);@param;BlobContainer blobContainer;BlobContainer blobContainer;blob container;true
org.elasticsearch.repositories.blobstore.ChecksumBlobStoreFormat;T readBlob(BlobContainer blobContainer, String blobName);void writeBlob(T obj, BlobContainer blobContainer, String blobName);@param;String blobName;String blobName;blob name;true
org.elasticsearch.repositories.blobstore.ChecksumBlobStoreFormat;void writeAtomic(T obj, BlobContainer blobContainer, String name);void write(T obj, BlobContainer blobContainer, String name);@param;T obj;T obj;object to be serialized;true
org.elasticsearch.repositories.blobstore.ChecksumBlobStoreFormat;void writeAtomic(T obj, BlobContainer blobContainer, String name);void write(T obj, BlobContainer blobContainer, String name);@param;BlobContainer blobContainer;BlobContainer blobContainer;blob container;true
org.elasticsearch.repositories.blobstore.ChecksumBlobStoreFormat;void writeAtomic(T obj, BlobContainer blobContainer, String name);void write(T obj, BlobContainer blobContainer, String name);@param;String name;String name;blob name;true
org.elasticsearch.repositories.blobstore.ChecksumBlobStoreFormat;void writeAtomic(T obj, BlobContainer blobContainer, String name);void writeBlob(T obj, BlobContainer blobContainer, String blobName);@param;T obj;T obj;object to be serialized;true
org.elasticsearch.repositories.blobstore.ChecksumBlobStoreFormat;void writeAtomic(T obj, BlobContainer blobContainer, String name);void writeBlob(T obj, BlobContainer blobContainer, String blobName);@param;BlobContainer blobContainer;BlobContainer blobContainer;blob container;true
org.elasticsearch.repositories.blobstore.ChecksumBlobStoreFormat;void writeAtomic(T obj, BlobContainer blobContainer, String name);void writeBlob(T obj, BlobContainer blobContainer, String blobName);@param;String name;String blobName;blob name;false
org.elasticsearch.repositories.blobstore.ChecksumBlobStoreFormat;void write(T obj, BlobContainer blobContainer, String name);void writeBlob(T obj, BlobContainer blobContainer, String blobName);@param;T obj;T obj;object to be serialized;true
org.elasticsearch.repositories.blobstore.ChecksumBlobStoreFormat;void write(T obj, BlobContainer blobContainer, String name);void writeBlob(T obj, BlobContainer blobContainer, String blobName);@param;BlobContainer blobContainer;BlobContainer blobContainer;blob container;true
org.elasticsearch.repositories.blobstore.ChecksumBlobStoreFormat;void write(T obj, BlobContainer blobContainer, String name);void writeBlob(T obj, BlobContainer blobContainer, String blobName);@param;String name;String blobName;blob name;false
org.elasticsearch.repositories.Repository;SnapshotInfo getSnapshotInfo(SnapshotId snapshotId);MetaData getSnapshotMetaData(SnapshotInfo snapshot, List indices);@return;;;information about snapshot;false
org.elasticsearch.repositories.Repository;SnapshotInfo getSnapshotInfo(SnapshotId snapshotId);void initializeSnapshot(SnapshotId snapshotId, List indices, MetaData metaData);@param;SnapshotId snapshotId;SnapshotId snapshotId;snapshot id;true
org.elasticsearch.repositories.Repository;SnapshotInfo getSnapshotInfo(SnapshotId snapshotId);SnapshotInfo finalizeSnapshot(SnapshotId snapshotId, List indices, long startTime, String failure, int totalShards, List shardFailures, long repositoryStateId);@param;SnapshotId snapshotId;SnapshotId snapshotId;snapshot id;true
org.elasticsearch.repositories.Repository;SnapshotInfo getSnapshotInfo(SnapshotId snapshotId);void deleteSnapshot(SnapshotId snapshotId, long repositoryStateId);@param;SnapshotId snapshotId;SnapshotId snapshotId;snapshot id;true
org.elasticsearch.repositories.Repository;SnapshotInfo getSnapshotInfo(SnapshotId snapshotId);void snapshotShard(IndexShard shard, SnapshotId snapshotId, IndexId indexId, IndexCommit snapshotIndexCommit, IndexShardSnapshotStatus snapshotStatus);@param;SnapshotId snapshotId;SnapshotId snapshotId;snapshot id;true
org.elasticsearch.repositories.Repository;SnapshotInfo getSnapshotInfo(SnapshotId snapshotId);void restoreShard(IndexShard shard, SnapshotId snapshotId, Version version, IndexId indexId, ShardId snapshotShardId, RecoveryState recoveryState);@param;SnapshotId snapshotId;SnapshotId snapshotId;snapshot id;true
org.elasticsearch.repositories.Repository;SnapshotInfo getSnapshotInfo(SnapshotId snapshotId);IndexShardSnapshotStatus getShardSnapshotStatus(SnapshotId snapshotId, Version version, IndexId indexId, ShardId shardId);@param;SnapshotId snapshotId;SnapshotId snapshotId;snapshot id;true
org.elasticsearch.repositories.Repository;void initializeSnapshot(SnapshotId snapshotId, List indices, MetaData metaData);SnapshotInfo finalizeSnapshot(SnapshotId snapshotId, List indices, long startTime, String failure, int totalShards, List shardFailures, long repositoryStateId);@param;SnapshotId snapshotId;SnapshotId snapshotId;snapshot id;true
org.elasticsearch.repositories.Repository;void initializeSnapshot(SnapshotId snapshotId, List indices, MetaData metaData);void deleteSnapshot(SnapshotId snapshotId, long repositoryStateId);@param;SnapshotId snapshotId;SnapshotId snapshotId;snapshot id;true
org.elasticsearch.repositories.Repository;void initializeSnapshot(SnapshotId snapshotId, List indices, MetaData metaData);void snapshotShard(IndexShard shard, SnapshotId snapshotId, IndexId indexId, IndexCommit snapshotIndexCommit, IndexShardSnapshotStatus snapshotStatus);@param;SnapshotId snapshotId;SnapshotId snapshotId;snapshot id;true
org.elasticsearch.repositories.Repository;void initializeSnapshot(SnapshotId snapshotId, List indices, MetaData metaData);void restoreShard(IndexShard shard, SnapshotId snapshotId, Version version, IndexId indexId, ShardId snapshotShardId, RecoveryState recoveryState);@param;SnapshotId snapshotId;SnapshotId snapshotId;snapshot id;true
org.elasticsearch.repositories.Repository;void initializeSnapshot(SnapshotId snapshotId, List indices, MetaData metaData);IndexShardSnapshotStatus getShardSnapshotStatus(SnapshotId snapshotId, Version version, IndexId indexId, ShardId shardId);@param;SnapshotId snapshotId;SnapshotId snapshotId;snapshot id;true
org.elasticsearch.repositories.Repository;SnapshotInfo finalizeSnapshot(SnapshotId snapshotId, List indices, long startTime, String failure, int totalShards, List shardFailures, long repositoryStateId);void deleteSnapshot(SnapshotId snapshotId, long repositoryStateId);@param;SnapshotId snapshotId;SnapshotId snapshotId;snapshot id;true
org.elasticsearch.repositories.Repository;SnapshotInfo finalizeSnapshot(SnapshotId snapshotId, List indices, long startTime, String failure, int totalShards, List shardFailures, long repositoryStateId);void snapshotShard(IndexShard shard, SnapshotId snapshotId, IndexId indexId, IndexCommit snapshotIndexCommit, IndexShardSnapshotStatus snapshotStatus);@param;SnapshotId snapshotId;SnapshotId snapshotId;snapshot id;true
org.elasticsearch.repositories.Repository;SnapshotInfo finalizeSnapshot(SnapshotId snapshotId, List indices, long startTime, String failure, int totalShards, List shardFailures, long repositoryStateId);void restoreShard(IndexShard shard, SnapshotId snapshotId, Version version, IndexId indexId, ShardId snapshotShardId, RecoveryState recoveryState);@param;SnapshotId snapshotId;SnapshotId snapshotId;snapshot id;true
org.elasticsearch.repositories.Repository;SnapshotInfo finalizeSnapshot(SnapshotId snapshotId, List indices, long startTime, String failure, int totalShards, List shardFailures, long repositoryStateId);IndexShardSnapshotStatus getShardSnapshotStatus(SnapshotId snapshotId, Version version, IndexId indexId, ShardId shardId);@param;SnapshotId snapshotId;SnapshotId snapshotId;snapshot id;true
org.elasticsearch.repositories.Repository;void deleteSnapshot(SnapshotId snapshotId, long repositoryStateId);void snapshotShard(IndexShard shard, SnapshotId snapshotId, IndexId indexId, IndexCommit snapshotIndexCommit, IndexShardSnapshotStatus snapshotStatus);@param;SnapshotId snapshotId;SnapshotId snapshotId;snapshot id;true
org.elasticsearch.repositories.Repository;void deleteSnapshot(SnapshotId snapshotId, long repositoryStateId);void restoreShard(IndexShard shard, SnapshotId snapshotId, Version version, IndexId indexId, ShardId snapshotShardId, RecoveryState recoveryState);@param;SnapshotId snapshotId;SnapshotId snapshotId;snapshot id;true
org.elasticsearch.repositories.Repository;void deleteSnapshot(SnapshotId snapshotId, long repositoryStateId);IndexShardSnapshotStatus getShardSnapshotStatus(SnapshotId snapshotId, Version version, IndexId indexId, ShardId shardId);@param;SnapshotId snapshotId;SnapshotId snapshotId;snapshot id;true
org.elasticsearch.repositories.Repository;void snapshotShard(IndexShard shard, SnapshotId snapshotId, IndexId indexId, IndexCommit snapshotIndexCommit, IndexShardSnapshotStatus snapshotStatus);void restoreShard(IndexShard shard, SnapshotId snapshotId, Version version, IndexId indexId, ShardId snapshotShardId, RecoveryState recoveryState);@param;SnapshotId snapshotId;SnapshotId snapshotId;snapshot id;true
org.elasticsearch.repositories.Repository;void snapshotShard(IndexShard shard, SnapshotId snapshotId, IndexId indexId, IndexCommit snapshotIndexCommit, IndexShardSnapshotStatus snapshotStatus);IndexShardSnapshotStatus getShardSnapshotStatus(SnapshotId snapshotId, Version version, IndexId indexId, ShardId shardId);@param;SnapshotId snapshotId;SnapshotId snapshotId;snapshot id;true
org.elasticsearch.repositories.Repository;void restoreShard(IndexShard shard, SnapshotId snapshotId, Version version, IndexId indexId, ShardId snapshotShardId, RecoveryState recoveryState);IndexShardSnapshotStatus getShardSnapshotStatus(SnapshotId snapshotId, Version version, IndexId indexId, ShardId shardId);@param;SnapshotId snapshotId;SnapshotId snapshotId;snapshot id;true
org.elasticsearch.repositories.Repository;void restoreShard(IndexShard shard, SnapshotId snapshotId, Version version, IndexId indexId, ShardId snapshotShardId, RecoveryState recoveryState);IndexShardSnapshotStatus getShardSnapshotStatus(SnapshotId snapshotId, Version version, IndexId indexId, ShardId shardId);@param;Version version;Version version;version of elasticsearch that created this snapshot;true
org.elasticsearch.threadpool.FixedExecutorBuilder; FixedExecutorBuilder(Settings settings, String name, int size, int queueSize); FixedExecutorBuilder(Settings settings, String name, int size, int queueSize, String prefix);@param;Settings settings;Settings settings;the node-level settings;true
org.elasticsearch.threadpool.FixedExecutorBuilder; FixedExecutorBuilder(Settings settings, String name, int size, int queueSize); FixedExecutorBuilder(Settings settings, String name, int size, int queueSize, String prefix);@param;String name;String name;the name of the executor;true
org.elasticsearch.threadpool.FixedExecutorBuilder; FixedExecutorBuilder(Settings settings, String name, int size, int queueSize); FixedExecutorBuilder(Settings settings, String name, int size, int queueSize, String prefix);@param;int size;int size;the fixed number of threads;true
org.elasticsearch.threadpool.FixedExecutorBuilder; FixedExecutorBuilder(Settings settings, String name, int size, int queueSize); FixedExecutorBuilder(Settings settings, String name, int size, int queueSize, String prefix);@param;int queueSize;int queueSize;the size of the backing queue, -1 for unbounded;true
org.elasticsearch.threadpool.Scheduler;ScheduledFuture schedule(TimeValue delay, String executor, Runnable command);Cancellable scheduleWithFixedDelay(Runnable command, TimeValue interval, String executor);@param;String executor;String executor;the name of the executor that has to execute this task. Ignored in the default implementation but can be used by subclasses that support multiple executors.;true
org.elasticsearch.threadpool.ScalingExecutorBuilder; ScalingExecutorBuilder(String name, int core, int max, TimeValue keepAlive); ScalingExecutorBuilder(String name, int core, int max, TimeValue keepAlive, String prefix);@param;String name;String name;the name of the executor;true
org.elasticsearch.threadpool.ScalingExecutorBuilder; ScalingExecutorBuilder(String name, int core, int max, TimeValue keepAlive); ScalingExecutorBuilder(String name, int core, int max, TimeValue keepAlive, String prefix);@param;int core;int core;the minimum number of threads in the pool;true
org.elasticsearch.threadpool.ScalingExecutorBuilder; ScalingExecutorBuilder(String name, int core, int max, TimeValue keepAlive); ScalingExecutorBuilder(String name, int core, int max, TimeValue keepAlive, String prefix);@param;int max;int max;the maximum number of threads in the pool;true
org.elasticsearch.threadpool.ScalingExecutorBuilder; ScalingExecutorBuilder(String name, int core, int max, TimeValue keepAlive); ScalingExecutorBuilder(String name, int core, int max, TimeValue keepAlive, String prefix);@param;TimeValue keepAlive;TimeValue keepAlive;the time that spare threads above core threads will be kept alive;true
org.elasticsearch.script.ClassPermission; ClassPermission(String name); ClassPermission(String name, String actions);@param;String name;String name;class to grant permission to;true
org.elasticsearch.script.Script; Script(ScriptType type, String lang, String idOrCode, Map params); Script(ScriptType type, String lang, String idOrCode, Map options, Map params);@param;ScriptType type;ScriptType type;The ScriptType.;true
org.elasticsearch.script.Script; Script(ScriptType type, String lang, String idOrCode, Map params); Script(ScriptType type, String lang, String idOrCode, Map options, Map params);@param;String lang;String lang;The language for this Script if the ScriptType is ScriptType#INLINE. For ScriptType#STORED scripts this should be null, but can be specified to access scripts stored as part of the stored scripts deprecated API.;true
org.elasticsearch.script.Script; Script(ScriptType type, String lang, String idOrCode, Map params); Script(ScriptType type, String lang, String idOrCode, Map options, Map params);@param;String idOrCode;String idOrCode;The id for this Script if the ScriptType is ScriptType#STORED. The code for this Script if the ScriptType is ScriptType#INLINE.;true
org.elasticsearch.script.Script; Script(ScriptType type, String lang, String idOrCode, Map params); Script(ScriptType type, String lang, String idOrCode, Map options, Map params);@param;Map<String,Object> params;Map<String,Object> params;The user-defined params to be bound for script execution.;true
org.elasticsearch.search.suggest.phrase.PhraseSuggestionBuilder;PhraseSuggestionBuilder collateQuery(String collateQuery);PhraseSuggestionBuilder collateQuery(Script collateQueryTemplate);Whole;;;Sets a query used for filtering out suggested phrases (collation).    ;false
org.elasticsearch.search.sort.GeoDistanceSortBuilder; GeoDistanceSortBuilder(String fieldName, GeoPoint points); GeoDistanceSortBuilder(String fieldName, double lat, double lon);Free text;;;Constructs a new distance based sort on a geo point like field. ;true
org.elasticsearch.search.sort.GeoDistanceSortBuilder; GeoDistanceSortBuilder(String fieldName, GeoPoint points); GeoDistanceSortBuilder(String fieldName, double lat, double lon);@param;String fieldName;String fieldName;The geo point like field name.;true
org.elasticsearch.search.sort.GeoDistanceSortBuilder; GeoDistanceSortBuilder(String fieldName, GeoPoint points); GeoDistanceSortBuilder(String fieldName, String geohashes);Whole;;;Constructs a new distance based sort on a geo point like field.  @param The geo point like field name.@param The points to create the range distance facets from.  ;false
org.elasticsearch.search.sort.GeoDistanceSortBuilder; GeoDistanceSortBuilder(String fieldName, double lat, double lon); GeoDistanceSortBuilder(String fieldName, String geohashes);Free text;;;Constructs a new distance based sort on a geo point like field. ;true
org.elasticsearch.search.sort.GeoDistanceSortBuilder; GeoDistanceSortBuilder(String fieldName, double lat, double lon); GeoDistanceSortBuilder(String fieldName, String geohashes);@param;String fieldName;String fieldName;The geo point like field name.;true
org.elasticsearch.search.sort.GeoDistanceSortBuilder;GeoDistanceSortBuilder point(double lat, double lon);GeoDistanceSortBuilder points(GeoPoint points);Free text;;;The point to create the range distance facets from. ;false
org.elasticsearch.search.sort.SortBuilders;GeoDistanceSortBuilder geoDistanceSort(String fieldName, double lat, double lon);GeoDistanceSortBuilder geoDistanceSort(String fieldName, GeoPoint points);@param;String fieldName;String fieldName;The geo point like field name.;true
org.elasticsearch.search.sort.SortBuilders;GeoDistanceSortBuilder geoDistanceSort(String fieldName, double lat, double lon);GeoDistanceSortBuilder geoDistanceSort(String fieldName, String geohashes);@param;String fieldName;String fieldName;The geo point like field name.;true
org.elasticsearch.search.sort.SortBuilders;GeoDistanceSortBuilder geoDistanceSort(String fieldName, GeoPoint points);GeoDistanceSortBuilder geoDistanceSort(String fieldName, String geohashes);Whole;;;Constructs a new distance based sort on a geo point like field.  @param The geo point like field name.@param The points to create the range distance facets from.  ;false
org.elasticsearch.search.rescore.QueryRescorerBuilder;QueryRescorerBuilder setQueryWeight(float queryWeight);QueryRescorerBuilder setRescoreQueryWeight(float rescoreQueryWeight);Whole;;;Sets the original query weight for rescoring. The default is <tt>1.0</tt>    ;false
org.elasticsearch.search.rescore.QueryRescorerBuilder;float getQueryWeight();float getRescoreQueryWeight();Whole;;;Gets the original query weight for rescoring. The default is <tt>1.0</tt>    ;false
org.elasticsearch.search.rescore.Rescorer;TopDocs rescore(TopDocs topDocs, IndexSearcher searcher, RescoreContext rescoreContext);Explanation explain(int topLevelDocId, IndexSearcher searcher, RescoreContext rescoreContext, Explanation sourceExplanation);@param;IndexSearcher searcher;IndexSearcher searcher;the searcher used for this search. This will never be null.;true
org.elasticsearch.search.fetch.subphase.highlight.AbstractHighlighterBuilder;HB boundaryScannerType(String boundaryScannerType);HB boundaryScannerType(BoundaryScannerType boundaryScannerType);Whole;;;When using the highlighterType <tt>fvh</tt> this setting controls which scanner to use for fragment boundaries, and defaults to "simple".    ;false
org.elasticsearch.search.fetch.subphase.highlight.AbstractHighlighterBuilder;HB noMatchSize(Integer noMatchSize);HB phraseLimit(Integer phraseLimit);@return;;;this for chaining;false
org.elasticsearch.search.fetch.subphase.highlight.HighlightBuilder;HighlightBuilder field(String name);HighlightBuilder field(String name, int fragmentSize);@param;String name;String name;The field to highlight;true
org.elasticsearch.search.fetch.subphase.highlight.HighlightBuilder;HighlightBuilder field(String name);HighlightBuilder field(String name, int fragmentSize, int numberOfFragments);@param;String name;String name;The field to highlight;true
org.elasticsearch.search.fetch.subphase.highlight.HighlightBuilder;HighlightBuilder field(String name);HighlightBuilder field(String name, int fragmentSize, int numberOfFragments, int fragmentOffset);@param;String name;String name;The field to highlight;true
org.elasticsearch.search.fetch.subphase.highlight.HighlightBuilder;HighlightBuilder field(String name, int fragmentSize);HighlightBuilder field(String name, int fragmentSize, int numberOfFragments);@param;String name;String name;The field to highlight;true
org.elasticsearch.search.fetch.subphase.highlight.HighlightBuilder;HighlightBuilder field(String name, int fragmentSize);HighlightBuilder field(String name, int fragmentSize, int numberOfFragments);@param;int fragmentSize;int fragmentSize;The size of a fragment in characters;true
org.elasticsearch.search.fetch.subphase.highlight.HighlightBuilder;HighlightBuilder field(String name, int fragmentSize);HighlightBuilder field(String name, int fragmentSize, int numberOfFragments, int fragmentOffset);@param;String name;String name;The field to highlight;true
org.elasticsearch.search.fetch.subphase.highlight.HighlightBuilder;HighlightBuilder field(String name, int fragmentSize);HighlightBuilder field(String name, int fragmentSize, int numberOfFragments, int fragmentOffset);@param;int fragmentSize;int fragmentSize;The size of a fragment in characters;true
org.elasticsearch.search.fetch.subphase.highlight.HighlightBuilder;HighlightBuilder field(String name, int fragmentSize, int numberOfFragments);HighlightBuilder field(String name, int fragmentSize, int numberOfFragments, int fragmentOffset);Free text;;;Adds a field to be highlighted with a provided fragment size (in characters), and a provided (maximum) number of fragments. ;true
org.elasticsearch.search.fetch.subphase.highlight.HighlightBuilder;HighlightBuilder field(String name, int fragmentSize, int numberOfFragments);HighlightBuilder field(String name, int fragmentSize, int numberOfFragments, int fragmentOffset);@param;String name;String name;The field to highlight;true
org.elasticsearch.search.fetch.subphase.highlight.HighlightBuilder;HighlightBuilder field(String name, int fragmentSize, int numberOfFragments);HighlightBuilder field(String name, int fragmentSize, int numberOfFragments, int fragmentOffset);@param;int fragmentSize;int fragmentSize;The size of a fragment in characters;true
org.elasticsearch.search.fetch.subphase.highlight.HighlightBuilder;HighlightBuilder field(String name, int fragmentSize, int numberOfFragments);HighlightBuilder field(String name, int fragmentSize, int numberOfFragments, int fragmentOffset);@param;int numberOfFragments;int numberOfFragments;The (maximum) number of fragments;true
org.elasticsearch.search.fetch.subphase.highlight.HighlightField;String name();String getName();Whole;;;The name of the field highlighted.    ;false
org.elasticsearch.search.fetch.subphase.highlight.HighlightField;Text[] fragments();Text[] getFragments();Whole;;;The highlighted fragments. <tt>null</tt> if failed to highlight (for example, the field is not stored).    ;false
org.elasticsearch.search.query.QueryCollectorContext;Collector createQueryCollector(List collectors);InternalProfileCollector createQueryCollectorWithProfiler(List collectors);@param;List<QueryCollectorContext> collectors;List<QueryCollectorContext> collectors;Ordered list of collector context;true
org.elasticsearch.search.builder.SearchSourceBuilder;SearchSourceBuilder sort(String name, SortOrder order);SearchSourceBuilder scriptField(String name, Script script);@param;String name;String name;The name of the field;true
org.elasticsearch.search.builder.SearchSourceBuilder;SearchSourceBuilder sort(String name, SortOrder order);SearchSourceBuilder scriptField(String name, Script script, boolean ignoreFailure);@param;String name;String name;The name of the field;true
org.elasticsearch.search.builder.SearchSourceBuilder;SearchSourceBuilder aggregation(AggregationBuilder aggregation);SearchSourceBuilder aggregation(PipelineAggregationBuilder aggregation);Whole;;;Add an aggregation to perform as part of the search.    ;false
org.elasticsearch.search.builder.SearchSourceBuilder;SearchSourceBuilder fetchSource(String include, String exclude);SearchSourceBuilder fetchSource(String[] includes, String[] excludes);Free text;;;Indicate that _source should be returned with every hit, with an "include" and/or "exclude" set which can include simple wildcard elements. ;true
org.elasticsearch.search.builder.SearchSourceBuilder;SearchSourceBuilder scriptField(String name, Script script);SearchSourceBuilder scriptField(String name, Script script, boolean ignoreFailure);Whole;;;Adds a script field under the given name with the provided script.  @param The name of the field@param The script  ;false
org.elasticsearch.search.builder.SearchSourceBuilder;SearchSourceBuilder stats(List statsGroups);List stats();Whole;;;The stats groups this request will be aggregated under.    ;false
org.elasticsearch.search.aggregations.metrics.tophits.TopHitsAggregationBuilder;TopHitsAggregationBuilder sort(String name, SortOrder order);TopHitsAggregationBuilder scriptField(String name, Script script);@param;String name;String name;The name of the field;true
org.elasticsearch.search.aggregations.metrics.tophits.TopHitsAggregationBuilder;TopHitsAggregationBuilder sort(String name, SortOrder order);TopHitsAggregationBuilder scriptField(String name, Script script, boolean ignoreFailure);@param;String name;String name;The name of the field;true
org.elasticsearch.search.aggregations.metrics.tophits.TopHitsAggregationBuilder;TopHitsAggregationBuilder sort(SortBuilder sort);TopHitsAggregationBuilder sorts(List sorts);Whole;;;Adds a sort builder.    ;false
org.elasticsearch.search.aggregations.metrics.tophits.TopHitsAggregationBuilder;TopHitsAggregationBuilder fetchSource(String include, String exclude);TopHitsAggregationBuilder fetchSource(String[] includes, String[] excludes);Free text;;;Indicate that _source should be returned with every hit, with an "include" and/or "exclude" set which can include simple wildcard elements. ;true
org.elasticsearch.search.aggregations.metrics.tophits.TopHitsAggregationBuilder;TopHitsAggregationBuilder scriptField(String name, Script script);TopHitsAggregationBuilder scriptField(String name, Script script, boolean ignoreFailure);Whole;;;Adds a script field under the given name with the provided script.  @param The name of the field@param The script  ;false
org.elasticsearch.search.aggregations.AggregationBuilders;FiltersAggregationBuilder filters(String name, KeyedFilter filters);FiltersAggregationBuilder filters(String name, QueryBuilder filters);Whole;;;Create a new {@link Filters} aggregation with the given name.    ;false
org.elasticsearch.search.aggregations.AggregationBuilders;SamplerAggregationBuilder sampler(String name);DiversifiedAggregationBuilder diversifiedSampler(String name);Whole;;;Create a new {@link Sampler} aggregation with the given name.    ;false
org.elasticsearch.search.aggregations.pipeline.movavg.MovAvgPipelineAggregationBuilder;MovAvgPipelineAggregationBuilder modelBuilder(MovAvgModelBuilder model);MovAvgPipelineAggregationBuilder model(MovAvgModel model);Whole;;;Sets a MovAvgModel for the Moving Average. The model is used to define what type of moving average you want to use on the series  @param A MovAvgModel which has been prepopulated with settings  ;false
org.elasticsearch.search.aggregations.pipeline.movavg.models.MovAvgModel;double next(Collection values);double[] predict(Collection values, int numPredictions);@param;Collection<T> values;Collection<T> values;Collection of numerics to movingAvg, usually windowed;true
org.elasticsearch.search.aggregations.pipeline.movavg.models.MovAvgModel;double next(Collection values);double[] doPredict(Collection values, int numPredictions);@param;Collection<T> values;Collection<T> values;Collection of numerics to movingAvg, usually windowed;true
org.elasticsearch.search.aggregations.pipeline.movavg.models.MovAvgModel;double[] predict(Collection values, int numPredictions);double[] doPredict(Collection values, int numPredictions);@return;;;Returns an array of doubles, since most smoothing methods operate on floating points;false
org.elasticsearch.search.aggregations.pipeline.movavg.models.MovAvgModel;double[] predict(Collection values, int numPredictions);double[] doPredict(Collection values, int numPredictions);@param;Collection<T> values;Collection<T> values;Collection of numerics to movingAvg, usually windowed;true
org.elasticsearch.search.aggregations.pipeline.movavg.models.MovAvgModel;double[] predict(Collection values, int numPredictions);double[] doPredict(Collection values, int numPredictions);@param;int numPredictions;int numPredictions;Number of newly generated predictions to return;true
org.elasticsearch.search.aggregations.InternalOrder;boolean isCountDesc(BucketOrder order);boolean isKeyOrder(BucketOrder order);@param;BucketOrder order;BucketOrder order;bucket ordering strategy to check.;true
org.elasticsearch.search.aggregations.InternalOrder;boolean isCountDesc(BucketOrder order);boolean isKeyAsc(BucketOrder order);@param;BucketOrder order;BucketOrder order;bucket ordering strategy to check.;true
org.elasticsearch.search.aggregations.InternalOrder;boolean isCountDesc(BucketOrder order);boolean isKeyDesc(BucketOrder order);@param;BucketOrder order;BucketOrder order;bucket ordering strategy to check.;true
org.elasticsearch.search.aggregations.InternalOrder;boolean isKeyOrder(BucketOrder order);boolean isKeyAsc(BucketOrder order);@param;BucketOrder order;BucketOrder order;bucket ordering strategy to check.;true
org.elasticsearch.search.aggregations.InternalOrder;boolean isKeyOrder(BucketOrder order);boolean isKeyDesc(BucketOrder order);@param;BucketOrder order;BucketOrder order;bucket ordering strategy to check.;true
org.elasticsearch.search.aggregations.InternalOrder;boolean isKeyAsc(BucketOrder order);boolean isKeyDesc(BucketOrder order);@param;BucketOrder order;BucketOrder order;bucket ordering strategy to check.;true
org.elasticsearch.search.aggregations.BucketOrder;BucketOrder count(boolean asc);BucketOrder key(boolean asc);@param;boolean asc;boolean asc;direction to sort by: true for ascending, false for descending.;true
org.elasticsearch.search.aggregations.BucketOrder;BucketOrder count(boolean asc);BucketOrder aggregation(String path, boolean asc);@param;boolean asc;boolean asc;direction to sort by: true for ascending, false for descending.;true
org.elasticsearch.search.aggregations.BucketOrder;BucketOrder count(boolean asc);BucketOrder aggregation(String path, String metricName, boolean asc);@param;boolean asc;boolean asc;direction to sort by: true for ascending, false for descending.;true
org.elasticsearch.search.aggregations.BucketOrder;BucketOrder key(boolean asc);BucketOrder aggregation(String path, boolean asc);@param;boolean asc;boolean asc;direction to sort by: true for ascending, false for descending.;true
org.elasticsearch.search.aggregations.BucketOrder;BucketOrder key(boolean asc);BucketOrder aggregation(String path, String metricName, boolean asc);@param;boolean asc;boolean asc;direction to sort by: true for ascending, false for descending.;true
org.elasticsearch.search.aggregations.BucketOrder;BucketOrder aggregation(String path, boolean asc);BucketOrder aggregation(String path, String metricName, boolean asc);@param;String path;String path;path to the sub-aggregation to sort on.;true
org.elasticsearch.search.aggregations.BucketOrder;BucketOrder aggregation(String path, boolean asc);BucketOrder aggregation(String path, String metricName, boolean asc);@param;boolean asc;boolean asc;direction to sort by: true for ascending, false for descending.;true
org.elasticsearch.search.aggregations.BucketOrder;BucketOrder compound(List orders);BucketOrder compound(BucketOrder orders);Free text;;;Creates a bucket ordering strategy which sorts buckets based on multiple criteria. A tie-breaker may be added to avoid non-deterministic ordering. ;true
org.elasticsearch.search.aggregations.bucket.composite.CompositeValuesSourceBuilder;AB order(String order);AB order(SortOrder order);Whole;;;Sets the {@link SortOrder} to use to sort values produced this source    ;false
org.elasticsearch.search.aggregations.bucket.adjacency.AdjacencyMatrixAggregationBuilder; AdjacencyMatrixAggregationBuilder(String name); AdjacencyMatrixAggregationBuilder(String name, Map filters);@param;String name;String name;the name of this aggregation;true
org.elasticsearch.search.aggregations.bucket.adjacency.AdjacencyMatrixAggregationBuilder; AdjacencyMatrixAggregationBuilder(String name); AdjacencyMatrixAggregationBuilder(String name, String separator, Map filters);@param;String name;String name;the name of this aggregation;true
org.elasticsearch.search.aggregations.bucket.adjacency.AdjacencyMatrixAggregationBuilder; AdjacencyMatrixAggregationBuilder(String name, Map filters); AdjacencyMatrixAggregationBuilder(String name, String separator, Map filters);@param;String name;String name;the name of this aggregation;true
org.elasticsearch.search.aggregations.bucket.significant.heuristics.SignificanceHeuristic;SignificanceHeuristic rewrite(InternalAggregation.ReduceContext reduceContext);SignificanceHeuristic rewrite(SearchContext context);@return;;;a version of this heuristic suitable for execution;true
org.elasticsearch.search.aggregations.bucket.filter.FiltersAggregationBuilder; FiltersAggregationBuilder(String name, KeyedFilter filters); FiltersAggregationBuilder(String name, QueryBuilder filters);@param;String name;String name;the name of this aggregation;true
org.elasticsearch.search.aggregations.bucket.range.DateRangeAggregationBuilder;DateRangeAggregationBuilder addRange(String key, String from, String to);DateRangeAggregationBuilder addUnboundedTo(String key, String to);@param;String key;String key;the key to use for this range in the response;true
org.elasticsearch.search.aggregations.bucket.range.DateRangeAggregationBuilder;DateRangeAggregationBuilder addRange(String key, String from, String to);DateRangeAggregationBuilder addUnboundedTo(String key, String to);@param;String to;String to;the upper bound on the dates, exclusive;true
org.elasticsearch.search.aggregations.bucket.range.DateRangeAggregationBuilder;DateRangeAggregationBuilder addRange(String key, String from, String to);DateRangeAggregationBuilder addUnboundedFrom(String key, String from);@param;String key;String key;the key to use for this range in the response;true
org.elasticsearch.search.aggregations.bucket.range.DateRangeAggregationBuilder;DateRangeAggregationBuilder addRange(String key, String from, String to);DateRangeAggregationBuilder addRange(String key, double from, double to);Whole;;;Add a new range to this aggregation.  @param the key to use for this range in the response@param the lower bound on the dates, inclusive@param the upper bound on the dates, exclusive  ;false
org.elasticsearch.search.aggregations.bucket.range.DateRangeAggregationBuilder;DateRangeAggregationBuilder addRange(String key, String from, String to);DateRangeAggregationBuilder addUnboundedTo(String key, double to);@param;String key;String key;the key to use for this range in the response;true
org.elasticsearch.search.aggregations.bucket.range.DateRangeAggregationBuilder;DateRangeAggregationBuilder addRange(String key, String from, String to);DateRangeAggregationBuilder addUnboundedTo(String key, double to);@param;String to;double to;the upper bound on the dates, exclusive;true
org.elasticsearch.search.aggregations.bucket.range.DateRangeAggregationBuilder;DateRangeAggregationBuilder addRange(String key, String from, String to);DateRangeAggregationBuilder addUnboundedFrom(String key, double from);@param;String key;String key;the key to use for this range in the response;true
org.elasticsearch.search.aggregations.bucket.range.DateRangeAggregationBuilder;DateRangeAggregationBuilder addRange(String key, String from, String to);DateRangeAggregationBuilder addRange(String key, DateTime from, DateTime to);Whole;;;Add a new range to this aggregation.  @param the key to use for this range in the response@param the lower bound on the dates, inclusive@param the upper bound on the dates, exclusive  ;false
org.elasticsearch.search.aggregations.bucket.range.DateRangeAggregationBuilder;DateRangeAggregationBuilder addRange(String key, String from, String to);DateRangeAggregationBuilder addUnboundedTo(String key, DateTime to);@param;String key;String key;the key to use for this range in the response;true
org.elasticsearch.search.aggregations.bucket.range.DateRangeAggregationBuilder;DateRangeAggregationBuilder addRange(String key, String from, String to);DateRangeAggregationBuilder addUnboundedTo(String key, DateTime to);@param;String to;DateTime to;the upper bound on the dates, exclusive;true
org.elasticsearch.search.aggregations.bucket.range.DateRangeAggregationBuilder;DateRangeAggregationBuilder addRange(String key, String from, String to);DateRangeAggregationBuilder addUnboundedFrom(String key, DateTime from);@param;String key;String key;the key to use for this range in the response;true
org.elasticsearch.search.aggregations.bucket.range.DateRangeAggregationBuilder;DateRangeAggregationBuilder addUnboundedTo(String key, String to);DateRangeAggregationBuilder addUnboundedFrom(String key, String from);@param;String key;String key;the key to use for this range in the response;true
org.elasticsearch.search.aggregations.bucket.range.DateRangeAggregationBuilder;DateRangeAggregationBuilder addUnboundedTo(String key, String to);DateRangeAggregationBuilder addRange(String key, double from, double to);@param;String key;String key;the key to use for this range in the response;true
org.elasticsearch.search.aggregations.bucket.range.DateRangeAggregationBuilder;DateRangeAggregationBuilder addUnboundedTo(String key, String to);DateRangeAggregationBuilder addRange(String key, double from, double to);@param;String to;double to;the upper bound on the dates, exclusive;true
org.elasticsearch.search.aggregations.bucket.range.DateRangeAggregationBuilder;DateRangeAggregationBuilder addUnboundedTo(String key, String to);DateRangeAggregationBuilder addUnboundedTo(String key, double to);Whole;;;Add a new range with no lower bound.  @param the key to use for this range in the response@param the upper bound on the dates, exclusive  ;false
org.elasticsearch.search.aggregations.bucket.range.DateRangeAggregationBuilder;DateRangeAggregationBuilder addUnboundedTo(String key, String to);DateRangeAggregationBuilder addUnboundedFrom(String key, double from);@param;String key;String key;the key to use for this range in the response;true
org.elasticsearch.search.aggregations.bucket.range.DateRangeAggregationBuilder;DateRangeAggregationBuilder addUnboundedTo(String key, String to);DateRangeAggregationBuilder addRange(String key, DateTime from, DateTime to);@param;String key;String key;the key to use for this range in the response;true
org.elasticsearch.search.aggregations.bucket.range.DateRangeAggregationBuilder;DateRangeAggregationBuilder addUnboundedTo(String key, String to);DateRangeAggregationBuilder addRange(String key, DateTime from, DateTime to);@param;String to;DateTime to;the upper bound on the dates, exclusive;true
org.elasticsearch.search.aggregations.bucket.range.DateRangeAggregationBuilder;DateRangeAggregationBuilder addUnboundedTo(String key, String to);DateRangeAggregationBuilder addUnboundedTo(String key, DateTime to);Whole;;;Add a new range with no lower bound.  @param the key to use for this range in the response@param the upper bound on the dates, exclusive  ;false
org.elasticsearch.search.aggregations.bucket.range.DateRangeAggregationBuilder;DateRangeAggregationBuilder addUnboundedTo(String key, String to);DateRangeAggregationBuilder addUnboundedFrom(String key, DateTime from);@param;String key;String key;the key to use for this range in the response;true
org.elasticsearch.search.aggregations.bucket.range.DateRangeAggregationBuilder;DateRangeAggregationBuilder addUnboundedFrom(String key, String from);DateRangeAggregationBuilder addRange(String key, double from, double to);@param;String key;String key;the key to use for this range in the response;true
org.elasticsearch.search.aggregations.bucket.range.DateRangeAggregationBuilder;DateRangeAggregationBuilder addUnboundedFrom(String key, String from);DateRangeAggregationBuilder addUnboundedTo(String key, double to);@param;String key;String key;the key to use for this range in the response;true
org.elasticsearch.search.aggregations.bucket.range.DateRangeAggregationBuilder;DateRangeAggregationBuilder addUnboundedFrom(String key, String from);DateRangeAggregationBuilder addUnboundedFrom(String key, double from);Whole;;;Add a new range with no upper bound.  @param the key to use for this range in the response@param the lower bound on the distances, inclusive  ;false
org.elasticsearch.search.aggregations.bucket.range.DateRangeAggregationBuilder;DateRangeAggregationBuilder addUnboundedFrom(String key, String from);DateRangeAggregationBuilder addRange(String key, DateTime from, DateTime to);@param;String key;String key;the key to use for this range in the response;true
org.elasticsearch.search.aggregations.bucket.range.DateRangeAggregationBuilder;DateRangeAggregationBuilder addUnboundedFrom(String key, String from);DateRangeAggregationBuilder addUnboundedTo(String key, DateTime to);@param;String key;String key;the key to use for this range in the response;true
org.elasticsearch.search.aggregations.bucket.range.DateRangeAggregationBuilder;DateRangeAggregationBuilder addUnboundedFrom(String key, String from);DateRangeAggregationBuilder addUnboundedFrom(String key, DateTime from);Whole;;;Add a new range with no upper bound.  @param the key to use for this range in the response@param the lower bound on the distances, inclusive  ;false
org.elasticsearch.search.aggregations.bucket.range.DateRangeAggregationBuilder;DateRangeAggregationBuilder addRange(String key, double from, double to);DateRangeAggregationBuilder addUnboundedTo(String key, double to);@param;String key;String key;the key to use for this range in the response;true
org.elasticsearch.search.aggregations.bucket.range.DateRangeAggregationBuilder;DateRangeAggregationBuilder addRange(String key, double from, double to);DateRangeAggregationBuilder addUnboundedTo(String key, double to);@param;double to;double to;the upper bound on the dates, exclusive;true
org.elasticsearch.search.aggregations.bucket.range.DateRangeAggregationBuilder;DateRangeAggregationBuilder addRange(String key, double from, double to);DateRangeAggregationBuilder addUnboundedFrom(String key, double from);@param;String key;String key;the key to use for this range in the response;true
org.elasticsearch.search.aggregations.bucket.range.DateRangeAggregationBuilder;DateRangeAggregationBuilder addRange(String key, double from, double to);DateRangeAggregationBuilder addRange(String key, DateTime from, DateTime to);Whole;;;Add a new range to this aggregation.  @param the key to use for this range in the response@param the lower bound on the dates, inclusive@param the upper bound on the dates, exclusive  ;false
org.elasticsearch.search.aggregations.bucket.range.DateRangeAggregationBuilder;DateRangeAggregationBuilder addRange(String key, double from, double to);DateRangeAggregationBuilder addUnboundedTo(String key, DateTime to);@param;String key;String key;the key to use for this range in the response;true
org.elasticsearch.search.aggregations.bucket.range.DateRangeAggregationBuilder;DateRangeAggregationBuilder addRange(String key, double from, double to);DateRangeAggregationBuilder addUnboundedTo(String key, DateTime to);@param;double to;DateTime to;the upper bound on the dates, exclusive;true
org.elasticsearch.search.aggregations.bucket.range.DateRangeAggregationBuilder;DateRangeAggregationBuilder addRange(String key, double from, double to);DateRangeAggregationBuilder addUnboundedFrom(String key, DateTime from);@param;String key;String key;the key to use for this range in the response;true
org.elasticsearch.search.aggregations.bucket.range.DateRangeAggregationBuilder;DateRangeAggregationBuilder addUnboundedTo(String key, double to);DateRangeAggregationBuilder addUnboundedFrom(String key, double from);@param;String key;String key;the key to use for this range in the response;true
org.elasticsearch.search.aggregations.bucket.range.DateRangeAggregationBuilder;DateRangeAggregationBuilder addUnboundedTo(String key, double to);DateRangeAggregationBuilder addRange(String key, DateTime from, DateTime to);@param;String key;String key;the key to use for this range in the response;true
org.elasticsearch.search.aggregations.bucket.range.DateRangeAggregationBuilder;DateRangeAggregationBuilder addUnboundedTo(String key, double to);DateRangeAggregationBuilder addRange(String key, DateTime from, DateTime to);@param;double to;DateTime to;the upper bound on the dates, exclusive;true
org.elasticsearch.search.aggregations.bucket.range.DateRangeAggregationBuilder;DateRangeAggregationBuilder addUnboundedTo(String key, double to);DateRangeAggregationBuilder addUnboundedTo(String key, DateTime to);Whole;;;Add a new range with no lower bound.  @param the key to use for this range in the response@param the upper bound on the dates, exclusive  ;false
org.elasticsearch.search.aggregations.bucket.range.DateRangeAggregationBuilder;DateRangeAggregationBuilder addUnboundedTo(String key, double to);DateRangeAggregationBuilder addUnboundedFrom(String key, DateTime from);@param;String key;String key;the key to use for this range in the response;true
org.elasticsearch.search.aggregations.bucket.range.DateRangeAggregationBuilder;DateRangeAggregationBuilder addUnboundedFrom(String key, double from);DateRangeAggregationBuilder addRange(String key, DateTime from, DateTime to);@param;String key;String key;the key to use for this range in the response;true
org.elasticsearch.search.aggregations.bucket.range.DateRangeAggregationBuilder;DateRangeAggregationBuilder addUnboundedFrom(String key, double from);DateRangeAggregationBuilder addUnboundedTo(String key, DateTime to);@param;String key;String key;the key to use for this range in the response;true
org.elasticsearch.search.aggregations.bucket.range.DateRangeAggregationBuilder;DateRangeAggregationBuilder addUnboundedFrom(String key, double from);DateRangeAggregationBuilder addUnboundedFrom(String key, DateTime from);Whole;;;Add a new range with no upper bound.  @param the key to use for this range in the response@param the lower bound on the distances, inclusive  ;false
org.elasticsearch.search.aggregations.bucket.range.DateRangeAggregationBuilder;DateRangeAggregationBuilder addRange(String key, DateTime from, DateTime to);DateRangeAggregationBuilder addUnboundedTo(String key, DateTime to);@param;String key;String key;the key to use for this range in the response;true
org.elasticsearch.search.aggregations.bucket.range.DateRangeAggregationBuilder;DateRangeAggregationBuilder addRange(String key, DateTime from, DateTime to);DateRangeAggregationBuilder addUnboundedTo(String key, DateTime to);@param;DateTime to;DateTime to;the upper bound on the dates, exclusive;true
org.elasticsearch.search.aggregations.bucket.range.DateRangeAggregationBuilder;DateRangeAggregationBuilder addRange(String key, DateTime from, DateTime to);DateRangeAggregationBuilder addUnboundedFrom(String key, DateTime from);@param;String key;String key;the key to use for this range in the response;true
org.elasticsearch.search.aggregations.bucket.range.DateRangeAggregationBuilder;DateRangeAggregationBuilder addUnboundedTo(String key, DateTime to);DateRangeAggregationBuilder addUnboundedFrom(String key, DateTime from);@param;String key;String key;the key to use for this range in the response;true
org.elasticsearch.search.aggregations.bucket.range.RangeAggregationBuilder;RangeAggregationBuilder addRange(String key, double from, double to);RangeAggregationBuilder addUnboundedTo(String key, double to);@param;String key;String key;the key to use for this range in the response;true
org.elasticsearch.search.aggregations.bucket.range.RangeAggregationBuilder;RangeAggregationBuilder addRange(String key, double from, double to);RangeAggregationBuilder addUnboundedTo(String key, double to);@param;double to;double to;the upper bound on the distances, exclusive;true
org.elasticsearch.search.aggregations.bucket.range.RangeAggregationBuilder;RangeAggregationBuilder addRange(String key, double from, double to);RangeAggregationBuilder addUnboundedFrom(String key, double from);@param;String key;String key;the key to use for this range in the response;true
org.elasticsearch.search.aggregations.bucket.range.RangeAggregationBuilder;RangeAggregationBuilder addRange(String key, double from, double to);RangeAggregationBuilder addUnboundedFrom(String key, double from);@param;double from;double from;the lower bound on the distances, inclusive;true
org.elasticsearch.search.aggregations.bucket.range.RangeAggregationBuilder;RangeAggregationBuilder addUnboundedTo(String key, double to);RangeAggregationBuilder addUnboundedFrom(String key, double from);@param;String key;String key;the key to use for this range in the response;true
org.elasticsearch.search.aggregations.bucket.range.GeoDistanceAggregationBuilder;GeoDistanceAggregationBuilder addRange(String key, double from, double to);GeoDistanceAggregationBuilder addUnboundedTo(String key, double to);@param;String key;String key;the key to use for this range in the response;true
org.elasticsearch.search.aggregations.bucket.range.GeoDistanceAggregationBuilder;GeoDistanceAggregationBuilder addRange(String key, double from, double to);GeoDistanceAggregationBuilder addUnboundedTo(String key, double to);@param;double to;double to;the upper bound on the distances, exclusive;true
org.elasticsearch.search.aggregations.bucket.range.GeoDistanceAggregationBuilder;GeoDistanceAggregationBuilder addRange(String key, double from, double to);GeoDistanceAggregationBuilder addUnboundedFrom(String key, double from);@param;String key;String key;the key to use for this range in the response;true
org.elasticsearch.search.aggregations.bucket.range.GeoDistanceAggregationBuilder;GeoDistanceAggregationBuilder addRange(String key, double from, double to);GeoDistanceAggregationBuilder addUnboundedFrom(String key, double from);@param;double from;double from;the lower bound on the distances, inclusive;true
org.elasticsearch.search.aggregations.bucket.range.GeoDistanceAggregationBuilder;GeoDistanceAggregationBuilder addUnboundedTo(String key, double to);GeoDistanceAggregationBuilder addUnboundedFrom(String key, double from);@param;String key;String key;the key to use for this range in the response;true
org.elasticsearch.search.aggregations.bucket.histogram.DateHistogramAggregationBuilder;DateHistogramAggregationBuilder interval(long interval);DateHistogramAggregationBuilder dateHistogramInterval(DateHistogramInterval dateHistogramInterval);Whole;;; If both {@link #interval()} and {@link #dateHistogramInterval()} are set, then the  {@link #dateHistogramInterval()} wins.    ;false
org.elasticsearch.search.aggregations.bucket.histogram.DateHistogramAggregationBuilder;DateHistogramAggregationBuilder offset(long offset);DateHistogramAggregationBuilder offset(String offset);Whole;;; return the builder so that calls can be chained.    ;false
org.elasticsearch.search.aggregations.support.AggregationPath;Aggregator resolveAggregator(Aggregator root);Aggregator resolveTopmostAggregator(Aggregator root);@param;Aggregator root;Aggregator root;The point of reference of this path;true
org.elasticsearch.search.aggregations.support.AggregationPath;Aggregator resolveAggregator(Aggregator root);void validate(Aggregator root);@param;Aggregator root;Aggregator root;The point of reference of this path;true
org.elasticsearch.search.aggregations.support.AggregationPath;Aggregator resolveTopmostAggregator(Aggregator root);void validate(Aggregator root);@param;Aggregator root;Aggregator root;The point of reference of this path;true
org.elasticsearch.search.aggregations.Aggregations;Map asMap();Map getAsMap();Whole;;;Returns the {@link Aggregation}s keyed by aggregation name.    ;false
org.elasticsearch.env.NodeEnvironment;Path resolveNodePath(Path path, int nodeLockId);Set availableIndexFoldersForPath(NodePath nodePath);@param;Path path;NodePath nodePath;the path;false
org.elasticsearch.env.NodeEnvironment;void deleteShardDirectorySafe(ShardId shardId, IndexSettings indexSettings);void deleteShardDirectoryUnderLock(ShardLock lock, IndexSettings indexSettings);@throws;;;if an IOException occurs;true
org.elasticsearch.env.NodeEnvironment;void deleteShardDirectorySafe(ShardId shardId, IndexSettings indexSettings);Set findAllShardIds(Index index);@throws;;;if an IOException occurs;true
org.elasticsearch.env.NodeEnvironment;void deleteShardDirectorySafe(ShardId shardId, IndexSettings indexSettings);Map shardCountPerPath(Index index);@throws;;;if an IOException occurs;true
org.elasticsearch.env.NodeEnvironment;void deleteShardDirectoryUnderLock(ShardLock lock, IndexSettings indexSettings);Set findAllShardIds(Index index);@throws;;;if an IOException occurs;true
org.elasticsearch.env.NodeEnvironment;void deleteShardDirectoryUnderLock(ShardLock lock, IndexSettings indexSettings);Map shardCountPerPath(Index index);@throws;;;if an IOException occurs;true
org.elasticsearch.env.NodeEnvironment;void deleteIndexDirectorySafe(Index index, long lockTimeoutMS, IndexSettings indexSettings);void deleteIndexDirectoryUnderLock(Index index, IndexSettings indexSettings);@param;Index index;Index index;the index to delete;true
org.elasticsearch.env.NodeEnvironment;void deleteIndexDirectorySafe(Index index, long lockTimeoutMS, IndexSettings indexSettings);void deleteIndexDirectoryUnderLock(Index index, IndexSettings indexSettings);@param;IndexSettings indexSettings;IndexSettings indexSettings;settings for the index being deleted;true
org.elasticsearch.env.NodeEnvironment;void deleteIndexDirectorySafe(Index index, long lockTimeoutMS, IndexSettings indexSettings);List lockAllForIndex(Index index, IndexSettings settings, long lockTimeoutMS);@param;long lockTimeoutMS;long lockTimeoutMS;how long to wait for acquiring the indices shard locks;true
org.elasticsearch.env.NodeEnvironment;ShardLock shardLock(ShardId id);ShardLock shardLock(ShardId shardId, long lockTimeoutMS);@return;;;the shard lock. Call ShardLock#close() to release the lock;true
org.elasticsearch.env.NodeEnvironment;ShardLock shardLock(ShardId id);ShardLock shardLock(ShardId shardId, long lockTimeoutMS);@param;ShardId id;ShardId shardId;the shard ID to lock;true
org.elasticsearch.env.NodeEnvironment;Set findAllShardIds(Index index);Map shardCountPerPath(Index index);@throws;;;if an IOException occurs;true
org.elasticsearch.env.NodeEnvironment;Path resolveBaseCustomLocation(IndexSettings indexSettings);Path resolveCustomLocation(IndexSettings indexSettings, ShardId shardId);Free text;;;Resolve the custom path for a index's shard. Uses the {@code IndexMetaData.SETTING_DATA_PATH} setting to determine the root path for the index. ;false
org.elasticsearch.env.NodeEnvironment;Path resolveBaseCustomLocation(IndexSettings indexSettings);Path resolveCustomLocation(IndexSettings indexSettings, ShardId shardId);@param;IndexSettings indexSettings;IndexSettings indexSettings;settings for the index;true
org.elasticsearch.common.Booleans;boolean parseBoolean(char[] text, int offset, int length, boolean defaultValue);boolean parseBoolean(String value);@throws;;;if the string cannot be parsed to boolean.;true
org.elasticsearch.common.Booleans;boolean isBoolean(char[] text, int offset, int length);boolean isBooleanLenient(char[] text, int offset, int length);@param;char[] text;char[] text;sequence to check;true
org.elasticsearch.common.Booleans;boolean isBoolean(char[] text, int offset, int length);boolean isBooleanLenient(char[] text, int offset, int length);@param;int offset;int offset;offset to start;true
org.elasticsearch.common.Booleans;boolean isBoolean(char[] text, int offset, int length);boolean isBooleanLenient(char[] text, int offset, int length);@param;int length;int length;length to check;true
org.elasticsearch.common.settings.AbstractScopedSettings;boolean updateDynamicSettings(Settings toApply, Settings.Builder target, Settings.Builder updates, String type);boolean updateSettings(Settings toApply, Settings.Builder target, Settings.Builder updates, String type);@return;;;true if the target has changed otherwise false;false
org.elasticsearch.common.settings.AbstractScopedSettings;boolean updateDynamicSettings(Settings toApply, Settings.Builder target, Settings.Builder updates, String type);boolean updateSettings(Settings toApply, Settings.Builder target, Settings.Builder updates, String type);@param;Settings toApply;Settings toApply;the new settings to apply;true
org.elasticsearch.common.settings.AbstractScopedSettings;boolean updateDynamicSettings(Settings toApply, Settings.Builder target, Settings.Builder updates, String type);boolean updateSettings(Settings toApply, Settings.Builder target, Settings.Builder updates, String type);@param;Settings.Builder target;Settings.Builder target;the target settings builder that the updates are applied to. All keys that have explicit null value in toApply will be removed from this builder;true
org.elasticsearch.common.settings.AbstractScopedSettings;boolean updateDynamicSettings(Settings toApply, Settings.Builder target, Settings.Builder updates, String type);boolean updateSettings(Settings toApply, Settings.Builder target, Settings.Builder updates, String type);@param;Settings.Builder updates;Settings.Builder updates;a settings builder that holds all updates applied to target;true
org.elasticsearch.common.settings.AbstractScopedSettings;boolean updateDynamicSettings(Settings toApply, Settings.Builder target, Settings.Builder updates, String type);boolean updateSettings(Settings toApply, Settings.Builder target, Settings.Builder updates, String type);@param;String type;String type;a free text string to allow better exceptions messages;true
org.elasticsearch.common.settings.Setting; Setting(Key key, Function defaultValue, Function parser, Property properties); Setting(String key, String defaultValue, Function parser, Property properties);Free text;;;Creates a new Setting instance ;true
org.elasticsearch.common.settings.Setting; Setting(Key key, Function defaultValue, Function parser, Property properties); Setting(String key, String defaultValue, Function parser, Property properties);@param;Key key;String key;the settings key for this setting.;true
org.elasticsearch.common.settings.Setting; Setting(Key key, Function defaultValue, Function parser, Property properties); Setting(String key, String defaultValue, Function parser, Property properties);@param;Function<String,T> parser;Function<String,T> parser;a parser that parses the string rep into a complex datatype.;true
org.elasticsearch.common.settings.Setting; Setting(Key key, Function defaultValue, Function parser, Property properties); Setting(String key, String defaultValue, Function parser, Property properties);@param;Property properties;Property properties;properties for this setting like scope, filtering...;true
org.elasticsearch.common.settings.Setting; Setting(Key key, Function defaultValue, Function parser, Property properties); Setting(String key, Function defaultValue, Function parser, Property properties);Whole;;;Creates a new Setting instance  @param the settings key for this setting.@param a default value function that returns the default values string representation.@param a parser that parses the string rep into a complex datatype.@param properties for this setting like scope, filtering...  ;false
org.elasticsearch.common.settings.Setting; Setting(Key key, Function defaultValue, Function parser, Property properties); Setting(Key key, Setting fallbackSetting, Function parser, Property properties);Free text;;;Creates a new Setting instance ;true
org.elasticsearch.common.settings.Setting; Setting(Key key, Function defaultValue, Function parser, Property properties); Setting(Key key, Setting fallbackSetting, Function parser, Property properties);@param;Key key;Key key;the settings key for this setting.;true
org.elasticsearch.common.settings.Setting; Setting(Key key, Function defaultValue, Function parser, Property properties); Setting(Key key, Setting fallbackSetting, Function parser, Property properties);@param;Function<String,T> parser;Function<String,T> parser;a parser that parses the string rep into a complex datatype.;true
org.elasticsearch.common.settings.Setting; Setting(Key key, Function defaultValue, Function parser, Property properties); Setting(Key key, Setting fallbackSetting, Function parser, Property properties);@param;Property properties;Property properties;properties for this setting like scope, filtering...;true
org.elasticsearch.common.settings.Setting; Setting(Key key, Function defaultValue, Function parser, Property properties); Setting(String key, Setting fallBackSetting, Function parser, Property properties);Free text;;;Creates a new Setting instance ;true
org.elasticsearch.common.settings.Setting; Setting(Key key, Function defaultValue, Function parser, Property properties); Setting(String key, Setting fallBackSetting, Function parser, Property properties);@param;Key key;String key;the settings key for this setting.;true
org.elasticsearch.common.settings.Setting; Setting(Key key, Function defaultValue, Function parser, Property properties); Setting(String key, Setting fallBackSetting, Function parser, Property properties);@param;Function<String,T> parser;Function<String,T> parser;a parser that parses the string rep into a complex datatype.;true
org.elasticsearch.common.settings.Setting; Setting(Key key, Function defaultValue, Function parser, Property properties); Setting(String key, Setting fallBackSetting, Function parser, Property properties);@param;Property properties;Property properties;properties for this setting like scope, filtering...;true
org.elasticsearch.common.settings.Setting; Setting(Key key, Function defaultValue, Function parser, Validator validator, Property properties); Setting(String key, String defaultValue, Function parser, Validator validator, Property properties);Whole;;;Creates a new {@code Setting} instance.  @param the settings key for this setting@param a default value function that results a string representation of the default value@param a parser that parses a string representation into the concrete type for this setting@param a Validator for validating this setting@param properties for this setting  ;false
org.elasticsearch.common.settings.Setting; Setting(String key, String defaultValue, Function parser, Property properties); Setting(String key, Function defaultValue, Function parser, Property properties);Free text;;;Creates a new Setting instance ;true
org.elasticsearch.common.settings.Setting; Setting(String key, String defaultValue, Function parser, Property properties); Setting(String key, Function defaultValue, Function parser, Property properties);@param;String key;String key;the settings key for this setting.;true
org.elasticsearch.common.settings.Setting; Setting(String key, String defaultValue, Function parser, Property properties); Setting(String key, Function defaultValue, Function parser, Property properties);@param;Function<String,T> parser;Function<String,T> parser;a parser that parses the string rep into a complex datatype.;true
org.elasticsearch.common.settings.Setting; Setting(String key, String defaultValue, Function parser, Property properties); Setting(String key, Function defaultValue, Function parser, Property properties);@param;Property properties;Property properties;properties for this setting like scope, filtering...;true
org.elasticsearch.common.settings.Setting; Setting(String key, String defaultValue, Function parser, Property properties); Setting(Key key, Setting fallbackSetting, Function parser, Property properties);Free text;;;Creates a new Setting instance ;true
org.elasticsearch.common.settings.Setting; Setting(String key, String defaultValue, Function parser, Property properties); Setting(Key key, Setting fallbackSetting, Function parser, Property properties);@param;String key;Key key;the settings key for this setting.;true
org.elasticsearch.common.settings.Setting; Setting(String key, String defaultValue, Function parser, Property properties); Setting(Key key, Setting fallbackSetting, Function parser, Property properties);@param;Function<String,T> parser;Function<String,T> parser;a parser that parses the string rep into a complex datatype.;true
org.elasticsearch.common.settings.Setting; Setting(String key, String defaultValue, Function parser, Property properties); Setting(Key key, Setting fallbackSetting, Function parser, Property properties);@param;Property properties;Property properties;properties for this setting like scope, filtering...;true
org.elasticsearch.common.settings.Setting; Setting(String key, String defaultValue, Function parser, Property properties); Setting(String key, Setting fallBackSetting, Function parser, Property properties);Free text;;;Creates a new Setting instance ;true
org.elasticsearch.common.settings.Setting; Setting(String key, String defaultValue, Function parser, Property properties); Setting(String key, Setting fallBackSetting, Function parser, Property properties);@param;String key;String key;the settings key for this setting.;true
org.elasticsearch.common.settings.Setting; Setting(String key, String defaultValue, Function parser, Property properties); Setting(String key, Setting fallBackSetting, Function parser, Property properties);@param;Function<String,T> parser;Function<String,T> parser;a parser that parses the string rep into a complex datatype.;true
org.elasticsearch.common.settings.Setting; Setting(String key, String defaultValue, Function parser, Property properties); Setting(String key, Setting fallBackSetting, Function parser, Property properties);@param;Property properties;Property properties;properties for this setting like scope, filtering...;true
org.elasticsearch.common.settings.Setting; Setting(String key, Function defaultValue, Function parser, Property properties); Setting(Key key, Setting fallbackSetting, Function parser, Property properties);Free text;;;Creates a new Setting instance ;true
org.elasticsearch.common.settings.Setting; Setting(String key, Function defaultValue, Function parser, Property properties); Setting(Key key, Setting fallbackSetting, Function parser, Property properties);@param;String key;Key key;the settings key for this setting.;true
org.elasticsearch.common.settings.Setting; Setting(String key, Function defaultValue, Function parser, Property properties); Setting(Key key, Setting fallbackSetting, Function parser, Property properties);@param;Function<String,T> parser;Function<String,T> parser;a parser that parses the string rep into a complex datatype.;true
org.elasticsearch.common.settings.Setting; Setting(String key, Function defaultValue, Function parser, Property properties); Setting(Key key, Setting fallbackSetting, Function parser, Property properties);@param;Property properties;Property properties;properties for this setting like scope, filtering...;true
org.elasticsearch.common.settings.Setting; Setting(String key, Function defaultValue, Function parser, Property properties); Setting(String key, Setting fallBackSetting, Function parser, Property properties);Free text;;;Creates a new Setting instance ;true
org.elasticsearch.common.settings.Setting; Setting(String key, Function defaultValue, Function parser, Property properties); Setting(String key, Setting fallBackSetting, Function parser, Property properties);@param;String key;String key;the settings key for this setting.;true
org.elasticsearch.common.settings.Setting; Setting(String key, Function defaultValue, Function parser, Property properties); Setting(String key, Setting fallBackSetting, Function parser, Property properties);@param;Function<String,T> parser;Function<String,T> parser;a parser that parses the string rep into a complex datatype.;true
org.elasticsearch.common.settings.Setting; Setting(String key, Function defaultValue, Function parser, Property properties); Setting(String key, Setting fallBackSetting, Function parser, Property properties);@param;Property properties;Property properties;properties for this setting like scope, filtering...;true
org.elasticsearch.common.settings.Setting; Setting(Key key, Setting fallbackSetting, Function parser, Property properties); Setting(String key, Setting fallBackSetting, Function parser, Property properties);Free text;;;Creates a new Setting instance ;true
org.elasticsearch.common.settings.Setting; Setting(Key key, Setting fallbackSetting, Function parser, Property properties); Setting(String key, Setting fallBackSetting, Function parser, Property properties);@param;Key key;String key;the settings key for this setting.;true
org.elasticsearch.common.settings.Setting; Setting(Key key, Setting fallbackSetting, Function parser, Property properties); Setting(String key, Setting fallBackSetting, Function parser, Property properties);@param;Function<String,T> parser;Function<String,T> parser;a parser that parses the string rep into a complex datatype.;true
org.elasticsearch.common.settings.Setting; Setting(Key key, Setting fallbackSetting, Function parser, Property properties); Setting(String key, Setting fallBackSetting, Function parser, Property properties);@param;Property properties;Property properties;properties for this setting like scope, filtering...;true
org.elasticsearch.common.settings.Setting;String getDefaultRaw(Settings settings);T getDefault(Settings settings);@param;Settings settings;Settings settings;a settings object for settings that has a default value depending on another setting if available;true
org.elasticsearch.common.settings.Setting;Setting memorySizeSetting(String key, ByteSizeValue defaultValue, Property properties);Setting memorySizeSetting(String key, Function defaultValue, Property properties);Free text;;;Creates a setting which specifies a memory size. This can either be specified as an absolute bytes value or as a percentage of the heap memory. ;true
org.elasticsearch.common.settings.Setting;Setting memorySizeSetting(String key, ByteSizeValue defaultValue, Property properties);Setting memorySizeSetting(String key, Function defaultValue, Property properties);@return;;;the setting object;true
org.elasticsearch.common.settings.Setting;Setting memorySizeSetting(String key, ByteSizeValue defaultValue, Property properties);Setting memorySizeSetting(String key, Function defaultValue, Property properties);@param;String key;String key;the key for the setting;true
org.elasticsearch.common.settings.Setting;Setting memorySizeSetting(String key, ByteSizeValue defaultValue, Property properties);Setting memorySizeSetting(String key, Function defaultValue, Property properties);@param;Property properties;Property properties;properties properties for this setting like scope, filtering...;true
org.elasticsearch.common.settings.Setting;Setting memorySizeSetting(String key, ByteSizeValue defaultValue, Property properties);Setting memorySizeSetting(String key, String defaultPercentage, Property properties);Free text;;;Creates a setting which specifies a memory size. This can either be specified as an absolute bytes value or as a percentage of the heap memory. ;true
org.elasticsearch.common.settings.Setting;Setting memorySizeSetting(String key, ByteSizeValue defaultValue, Property properties);Setting memorySizeSetting(String key, String defaultPercentage, Property properties);@return;;;the setting object;true
org.elasticsearch.common.settings.Setting;Setting memorySizeSetting(String key, ByteSizeValue defaultValue, Property properties);Setting memorySizeSetting(String key, String defaultPercentage, Property properties);@param;String key;String key;the key for the setting;true
org.elasticsearch.common.settings.Setting;Setting memorySizeSetting(String key, ByteSizeValue defaultValue, Property properties);Setting memorySizeSetting(String key, String defaultPercentage, Property properties);@param;Property properties;Property properties;properties properties for this setting like scope, filtering...;true
org.elasticsearch.common.settings.Setting;Setting memorySizeSetting(String key, Function defaultValue, Property properties);Setting memorySizeSetting(String key, String defaultPercentage, Property properties);Free text;;;Creates a setting which specifies a memory size. This can either be specified as an absolute bytes value or as a percentage of the heap memory. ;true
org.elasticsearch.common.settings.Setting;Setting memorySizeSetting(String key, Function defaultValue, Property properties);Setting memorySizeSetting(String key, String defaultPercentage, Property properties);@return;;;the setting object;true
org.elasticsearch.common.settings.Setting;Setting memorySizeSetting(String key, Function defaultValue, Property properties);Setting memorySizeSetting(String key, String defaultPercentage, Property properties);@param;String key;String key;the key for the setting;true
org.elasticsearch.common.settings.Setting;Setting memorySizeSetting(String key, Function defaultValue, Property properties);Setting memorySizeSetting(String key, String defaultPercentage, Property properties);@param;Property properties;Property properties;properties properties for this setting like scope, filtering...;true
org.elasticsearch.common.settings.Settings;ByteSizeValue getAsBytesSize(String setting, ByteSizeValue defaultValue);SizeValue getAsSize(String setting, SizeValue defaultValue);Whole;;;Returns the setting value (as size) associated with the setting key. If it does not exists, returns the default value provided.    ;false
org.elasticsearch.common.settings.Settings;List getAsList(String key);List getAsList(String key, List defaultValue);@return;;;The setting list values;true
org.elasticsearch.common.settings.Settings;List getAsList(String key);List getAsList(String key, List defaultValue);@param;String key;String key;The setting key to load the list by;true
org.elasticsearch.common.settings.Settings;List getAsList(String key);List getAsList(String key, List defaultValue, Boolean commaDelimited);Free text;;;The values associated with a setting key as an immutable list. <p> It will also automatically load a comma separated list under the settingPrefix and merge with the numbered format. ;true
org.elasticsearch.common.settings.Settings;List getAsList(String key);List getAsList(String key, List defaultValue, Boolean commaDelimited);@return;;;The setting list values;true
org.elasticsearch.common.settings.Settings;List getAsList(String key);List getAsList(String key, List defaultValue, Boolean commaDelimited);@param;String key;String key;The setting key to load the list by;true
org.elasticsearch.common.settings.Settings;List getAsList(String key, List defaultValue);List getAsList(String key, List defaultValue, Boolean commaDelimited);@return;;;The setting list values;true
org.elasticsearch.common.settings.Settings;List getAsList(String key, List defaultValue);List getAsList(String key, List defaultValue, Boolean commaDelimited);@param;String key;String key;The setting key to load the list by;true
org.elasticsearch.common.settings.Settings;Map getGroups(String settingPrefix);Map getGroups(String settingPrefix, boolean ignoreNonGrouped);Whole;;;Returns group settings for the given setting prefix.    ;false
org.elasticsearch.common.settings.Settings;Map getGroups(String settingPrefix);Map getAsGroups();Whole;;;Returns group settings for the given setting prefix.    ;false
org.elasticsearch.common.settings.Settings;Map getGroups(String settingPrefix, boolean ignoreNonGrouped);Map getAsGroups();Whole;;;Returns group settings for the given setting prefix.    ;false
org.elasticsearch.common.collect.ImmutableOpenMap;Iterator keysIt();Iterator valuesIt();Whole;;;Returns a direct iterator over the keys.    ;false
org.elasticsearch.common.collect.HppcMaps;ObjectObjectHashMap newMap(int expectedElements);ObjectObjectHashMap newNoNullKeysMap(int expectedElements);@param;int expectedElements;int expectedElements;The expected number of elements guaranteed not to cause buffer expansion (inclusive).;true
org.elasticsearch.common.collect.HppcMaps;ObjectObjectHashMap newMap(int expectedElements);ObjectObjectHashMap ensureNoNullKeys(int expectedElements);@param;int expectedElements;int expectedElements;The expected number of elements guaranteed not to cause buffer expansion (inclusive).;true
org.elasticsearch.common.collect.HppcMaps;ObjectObjectHashMap newNoNullKeysMap(int expectedElements);ObjectObjectHashMap ensureNoNullKeys(int expectedElements);@param;int expectedElements;int expectedElements;The expected number of elements guaranteed not to cause buffer expansion (inclusive).;true
org.elasticsearch.common.collect.ImmutableOpenIntMap;Iterator keysIt();Iterator valuesIt();Whole;;;Returns a direct iterator over the keys.    ;false
org.elasticsearch.common.lucene.search.function.FunctionScoreQuery; FunctionScoreQuery(Query subQuery, Float minScore, float maxBoost); FunctionScoreQuery(Query subQuery, ScoreFunction function);@param;Query subQuery;Query subQuery;The query to match.;true
org.elasticsearch.common.lucene.search.function.FunctionScoreQuery; FunctionScoreQuery(Query subQuery, Float minScore, float maxBoost); FunctionScoreQuery(Query subQuery, ScoreFunction function, CombineFunction combineFunction, Float minScore, float maxBoost);@param;Query subQuery;Query subQuery;The query to match.;true
org.elasticsearch.common.lucene.search.function.FunctionScoreQuery; FunctionScoreQuery(Query subQuery, Float minScore, float maxBoost); FunctionScoreQuery(Query subQuery, ScoreFunction function, CombineFunction combineFunction, Float minScore, float maxBoost);@param;Float minScore;Float minScore;The minimum score to consider a document.;true
org.elasticsearch.common.lucene.search.function.FunctionScoreQuery; FunctionScoreQuery(Query subQuery, Float minScore, float maxBoost); FunctionScoreQuery(Query subQuery, ScoreFunction function, CombineFunction combineFunction, Float minScore, float maxBoost);@param;float maxBoost;float maxBoost;The maximum applicable boost.;true
org.elasticsearch.common.lucene.search.function.FunctionScoreQuery; FunctionScoreQuery(Query subQuery, Float minScore, float maxBoost); FunctionScoreQuery(Query subQuery, ScoreMode scoreMode, ScoreFunction[] functions, CombineFunction combineFunction, Float minScore, float maxBoost);@param;Query subQuery;Query subQuery;The query to match.;true
org.elasticsearch.common.lucene.search.function.FunctionScoreQuery; FunctionScoreQuery(Query subQuery, Float minScore, float maxBoost); FunctionScoreQuery(Query subQuery, ScoreMode scoreMode, ScoreFunction[] functions, CombineFunction combineFunction, Float minScore, float maxBoost);@param;Float minScore;Float minScore;The minimum score to consider a document.;true
org.elasticsearch.common.lucene.search.function.FunctionScoreQuery; FunctionScoreQuery(Query subQuery, Float minScore, float maxBoost); FunctionScoreQuery(Query subQuery, ScoreMode scoreMode, ScoreFunction[] functions, CombineFunction combineFunction, Float minScore, float maxBoost);@param;float maxBoost;float maxBoost;The maximum applicable boost.;true
org.elasticsearch.common.lucene.search.function.FunctionScoreQuery; FunctionScoreQuery(Query subQuery, ScoreFunction function); FunctionScoreQuery(Query subQuery, ScoreFunction function, CombineFunction combineFunction, Float minScore, float maxBoost);@param;Query subQuery;Query subQuery;The query to match.;true
org.elasticsearch.common.lucene.search.function.FunctionScoreQuery; FunctionScoreQuery(Query subQuery, ScoreFunction function); FunctionScoreQuery(Query subQuery, ScoreFunction function, CombineFunction combineFunction, Float minScore, float maxBoost);@param;ScoreFunction function;ScoreFunction function;The ScoreFunction to apply.;true
org.elasticsearch.common.lucene.search.function.FunctionScoreQuery; FunctionScoreQuery(Query subQuery, ScoreFunction function); FunctionScoreQuery(Query subQuery, ScoreMode scoreMode, ScoreFunction[] functions, CombineFunction combineFunction, Float minScore, float maxBoost);@param;Query subQuery;Query subQuery;The query to match.;true
org.elasticsearch.common.lucene.search.function.FunctionScoreQuery; FunctionScoreQuery(Query subQuery, ScoreFunction function, CombineFunction combineFunction, Float minScore, float maxBoost); FunctionScoreQuery(Query subQuery, ScoreMode scoreMode, ScoreFunction[] functions, CombineFunction combineFunction, Float minScore, float maxBoost);@param;Query subQuery;Query subQuery;The query to match.;true
org.elasticsearch.common.lucene.search.function.FunctionScoreQuery; FunctionScoreQuery(Query subQuery, ScoreFunction function, CombineFunction combineFunction, Float minScore, float maxBoost); FunctionScoreQuery(Query subQuery, ScoreMode scoreMode, ScoreFunction[] functions, CombineFunction combineFunction, Float minScore, float maxBoost);@param;CombineFunction combineFunction;CombineFunction combineFunction;Defines how the query and function score should be applied.;true
org.elasticsearch.common.lucene.search.function.FunctionScoreQuery; FunctionScoreQuery(Query subQuery, ScoreFunction function, CombineFunction combineFunction, Float minScore, float maxBoost); FunctionScoreQuery(Query subQuery, ScoreMode scoreMode, ScoreFunction[] functions, CombineFunction combineFunction, Float minScore, float maxBoost);@param;Float minScore;Float minScore;The minimum score to consider a document.;true
org.elasticsearch.common.lucene.search.function.FunctionScoreQuery; FunctionScoreQuery(Query subQuery, ScoreFunction function, CombineFunction combineFunction, Float minScore, float maxBoost); FunctionScoreQuery(Query subQuery, ScoreMode scoreMode, ScoreFunction[] functions, CombineFunction combineFunction, Float minScore, float maxBoost);@param;float maxBoost;float maxBoost;The maximum applicable boost.;true
org.elasticsearch.common.breaker.ChildMemoryCircuitBreaker; ChildMemoryCircuitBreaker(BreakerSettings settings, Logger logger, HierarchyCircuitBreakerService parent, String name); ChildMemoryCircuitBreaker(BreakerSettings settings, ChildMemoryCircuitBreaker oldBreaker, Logger logger, HierarchyCircuitBreakerService parent, String name);@param;BreakerSettings settings;BreakerSettings settings;settings to configure this breaker;true
org.elasticsearch.common.breaker.ChildMemoryCircuitBreaker; ChildMemoryCircuitBreaker(BreakerSettings settings, Logger logger, HierarchyCircuitBreakerService parent, String name); ChildMemoryCircuitBreaker(BreakerSettings settings, ChildMemoryCircuitBreaker oldBreaker, Logger logger, HierarchyCircuitBreakerService parent, String name);@param;HierarchyCircuitBreakerService parent;HierarchyCircuitBreakerService parent;parent circuit breaker service to delegate tripped breakers to;true
org.elasticsearch.common.breaker.ChildMemoryCircuitBreaker; ChildMemoryCircuitBreaker(BreakerSettings settings, Logger logger, HierarchyCircuitBreakerService parent, String name); ChildMemoryCircuitBreaker(BreakerSettings settings, ChildMemoryCircuitBreaker oldBreaker, Logger logger, HierarchyCircuitBreakerService parent, String name);@param;String name;String name;the name of the breaker;true
org.elasticsearch.common.breaker.ChildMemoryCircuitBreaker;double addEstimateBytesAndMaybeBreak(long bytes, String label);long addWithoutBreaking(long bytes);@return;;;number of "used" bytes so far;false
org.elasticsearch.common.breaker.ChildMemoryCircuitBreaker;double addEstimateBytesAndMaybeBreak(long bytes, String label);long addWithoutBreaking(long bytes);@param;long bytes;long bytes;number of bytes to add to the breaker;true
org.elasticsearch.common.breaker.MemoryCircuitBreaker; MemoryCircuitBreaker(ByteSizeValue limit, double overheadConstant, Logger logger); MemoryCircuitBreaker(ByteSizeValue limit, double overheadConstant, MemoryCircuitBreaker oldBreaker, Logger logger);@param;ByteSizeValue limit;ByteSizeValue limit;circuit breaker limit;true
org.elasticsearch.common.breaker.MemoryCircuitBreaker; MemoryCircuitBreaker(ByteSizeValue limit, double overheadConstant, Logger logger); MemoryCircuitBreaker(ByteSizeValue limit, double overheadConstant, MemoryCircuitBreaker oldBreaker, Logger logger);@param;double overheadConstant;double overheadConstant;constant multiplier for byte estimations;true
org.elasticsearch.common.breaker.MemoryCircuitBreaker;double addEstimateBytesAndMaybeBreak(long bytes, String label);long addWithoutBreaking(long bytes);@return;;;number of "used" bytes so far;false
org.elasticsearch.common.breaker.MemoryCircuitBreaker;double addEstimateBytesAndMaybeBreak(long bytes, String label);long addWithoutBreaking(long bytes);@param;long bytes;long bytes;number of bytes to add to the breaker;true
org.elasticsearch.common.xcontent.XContentHelper;BytesReference toXContent(ToXContent toXContent, XContentType xContentType, boolean humanReadable);BytesReference toXContent(ToXContent toXContent, XContentType xContentType, Params params, boolean humanReadable);Whole;;;Returns the bytes that represent the XContent output of the provided {@link ToXContent} object, using the provided {@link XContentType}. Wraps the output into a new anonymous object according to the value returned by the {@link ToXContent#isFragment()} method returns.    ;false
org.elasticsearch.common.xcontent.ParseFieldRegistry;void register(T value, String name);void register(T value, ParseField parseField);Whole;;;Register a parser.    ;false
org.elasticsearch.common.xcontent.ParseFieldRegistry;T lookup(String name, XContentLocation xContentLocation);T lookupReturningNullIfNotFound(String name);Free text;;;Lookup a value from the registry by name while checking that the name matches the ParseField. ;false
org.elasticsearch.common.xcontent.ParseFieldRegistry;T lookup(String name, XContentLocation xContentLocation);T lookupReturningNullIfNotFound(String name);@param;String name;String name;The name of the thing to look up.;true
org.elasticsearch.common.xcontent.ParseFieldRegistry;T lookup(String name, XContentLocation xContentLocation);T lookupReturningNullIfNotFound(String name);@throws;;;if the named thing isn't in the registry or the name was deprecated and deprecated names aren't supported.;true
org.elasticsearch.common.xcontent.XContentBuilder; XContentBuilder(XContent xContent, OutputStream os, Set includes, Set excludes);XContentBuilder builder(XContent xContent, Set includes, Set excludes);@param;Set<String> includes;Set<String> includes;the inclusive filters: only fields and objects that match the inclusive filters will be written to the output.;true
org.elasticsearch.common.xcontent.XContentBuilder; XContentBuilder(XContent xContent, OutputStream os, Set includes, Set excludes);XContentBuilder builder(XContent xContent, Set includes, Set excludes);@param;Set<String> excludes;Set<String> excludes;the exclusive filters: only fields and objects that don't match the exclusive filters will be written to the output.;true
org.elasticsearch.common.xcontent.XContentBuilder;XContentBuilder builder(XContent xContent);XContentBuilder builder(XContent xContent, Set includes, Set excludes);@param;XContent xContent;XContent xContent;the XContent;true
org.elasticsearch.common.xcontent.XContentBuilder;XContentBuilder builder(XContent xContent);XContentBuilder builder(XContent xContent, Set includes, Set excludes);@throws;;;if an IOException occurs while building the content;true
org.elasticsearch.common.xcontent.XContentBuilder;XContentBuilder field(String name, BytesRef value);XContentBuilder binaryValue(BytesRef value);Whole;;;Writes the binary content of the given {@link BytesRef}. Use {@link org.elasticsearch.common.xcontent.XContentParser#binaryValue()} to read the value back    ;false
org.elasticsearch.common.xcontent.XContentBuilder;XContentBuilder utf8Field(String name, BytesRef value);XContentBuilder utf8Value(BytesRef value);Whole;;;Writes the binary content of the given {@link BytesRef} as UTF-8 bytes. Use {@link XContentParser#utf8Bytes()} to read the value back    ;false
org.elasticsearch.common.xcontent.XContentBuilder;XContentBuilder field(String name, BytesReference value);XContentBuilder value(BytesReference value);Whole;;;Writes the binary content of the given {@link BytesReference}. Use {@link org.elasticsearch.common.xcontent.XContentParser#binaryValue()} to read the value back    ;false
org.elasticsearch.common.xcontent.ObjectParser; ObjectParser(String name, Supplier valueSupplier); ObjectParser(String name, boolean ignoreUnknownFields, Supplier valueSupplier);Free text;;;Creates a new ObjectParser instance which a name. ;true
org.elasticsearch.common.xcontent.ObjectParser; ObjectParser(String name, Supplier valueSupplier); ObjectParser(String name, boolean ignoreUnknownFields, Supplier valueSupplier);@param;String name;String name;the parsers name, used to reference the parser in exceptions and messages.;true
org.elasticsearch.common.xcontent.ObjectParser; ObjectParser(String name, Supplier valueSupplier); ObjectParser(String name, boolean ignoreUnknownFields, Supplier valueSupplier);@param;Supplier<Value> valueSupplier;Supplier<Value> valueSupplier;a supplier that creates a new Value instance used when the parser is used as an inner object parser.;true
org.elasticsearch.common.xcontent.ObjectParser;Value parse(XContentParser parser, Context context);Value parse(XContentParser parser, Value value, Context context);Free text;;;Parses a Value from the given {@link XContentParser} ;true
org.elasticsearch.common.xcontent.ObjectParser;Value parse(XContentParser parser, Context context);Value parse(XContentParser parser, Value value, Context context);@param;XContentParser parser;XContentParser parser;the parser to build a value from;true
org.elasticsearch.common.xcontent.ObjectParser;Value parse(XContentParser parser, Context context);Value parse(XContentParser parser, Value value, Context context);@throws;;;if an IOException occurs.;true
org.elasticsearch.common.xcontent.XContentFactory;XContentBuilder jsonBuilder(OutputStream os);XContentBuilder smileBuilder(OutputStream os);Whole;;;Constructs a new json builder that will output the result into the provided output stream.    ;false
org.elasticsearch.common.xcontent.XContentFactory;XContent xContent(byte[] data);XContent xContent(BytesReference bytes);Whole;;;Guesses the content type based on the provided bytes and returns the corresponding {@link XContent} @deprecated the content type should not be guessed except for few cases where we effectively don't know the content type. The REST layer should move to reading the Content-Type header instead. There are other places where auto-detection may be needed. This method is deprecated to prevent usages of it from spreading further without specific reasons.    ;false
org.elasticsearch.common.xcontent.XContentFactory;XContentType xContentType(byte[] data);XContentType xContentType(byte[] data, int offset, int length);Whole;;;Guesses the content type based on the provided bytes. @deprecated the content type should not be guessed except for few cases where we effectively don't know the content type. The REST layer should move to reading the Content-Type header instead. There are other places where auto-detection may be needed. This method is deprecated to prevent usages of it from spreading further without specific reasons.    ;false
org.elasticsearch.common.xcontent.XContentFactory;XContentType xContentType(byte[] data);XContentType xContentType(BytesReference bytes);Whole;;;Guesses the content type based on the provided bytes. @deprecated the content type should not be guessed except for few cases where we effectively don't know the content type. The REST layer should move to reading the Content-Type header instead. There are other places where auto-detection may be needed. This method is deprecated to prevent usages of it from spreading further without specific reasons.    ;false
org.elasticsearch.common.xcontent.XContentFactory;XContentType xContentType(byte[] data, int offset, int length);XContentType xContentType(BytesReference bytes);Whole;;;Guesses the content type based on the provided bytes. @deprecated the content type should not be guessed except for few cases where we effectively don't know the content type. The REST layer should move to reading the Content-Type header instead. There are other places where auto-detection may be needed. This method is deprecated to prevent usages of it from spreading further without specific reasons.    ;false
org.elasticsearch.common.xcontent.AbstractObjectParser;void declareNamedObjects(BiConsumer consumer, NamedObjectParser namedObjectParser, ParseField parseField);void declareNamedObjects(BiConsumer consumer, NamedObjectParser namedObjectParser, Consumer orderedModeCallback, ParseField parseField);@param;BiConsumer<Value,List<T>> consumer;BiConsumer<Value,List<T>> consumer;sets the values once they have been parsed;true
org.elasticsearch.common.xcontent.AbstractObjectParser;void declareNamedObjects(BiConsumer consumer, NamedObjectParser namedObjectParser, ParseField parseField);void declareNamedObjects(BiConsumer consumer, NamedObjectParser namedObjectParser, Consumer orderedModeCallback, ParseField parseField);@param;NamedObjectParser<T,Context> namedObjectParser;NamedObjectParser<T,Context> namedObjectParser;parses each named object;true
org.elasticsearch.common.xcontent.AbstractObjectParser;void declareNamedObjects(BiConsumer consumer, NamedObjectParser namedObjectParser, ParseField parseField);void declareNamedObjects(BiConsumer consumer, NamedObjectParser namedObjectParser, Consumer orderedModeCallback, ParseField parseField);@param;ParseField parseField;ParseField parseField;the field to parse;true
org.elasticsearch.common.xcontent.ConstructingObjectParser; ConstructingObjectParser(String name, Function builder); ConstructingObjectParser(String name, boolean ignoreUnknownFields, Function builder);Free text;;;Build the parser. ;true
org.elasticsearch.common.xcontent.ConstructingObjectParser; ConstructingObjectParser(String name, Function builder); ConstructingObjectParser(String name, boolean ignoreUnknownFields, Function builder);@param;String name;String name;The name given to the delegate ObjectParser for error identification. Use what you'd use if the object worked with ObjectParser.;true
org.elasticsearch.common.xcontent.ConstructingObjectParser; ConstructingObjectParser(String name, Function builder); ConstructingObjectParser(String name, boolean ignoreUnknownFields, Function builder);@param;Function<Object[],Value> builder;Function<Object[],Value> builder;A function that builds the object from an array of Objects. Declare this inline with the parser, casting the elements of the array to the arguments so they work with your favorite constructor. The objects in the array will be in the same order that you declared the constructorArg()s and none will be null. If any of the constructor arguments aren't defined in the XContent then parsing will throw an error. We use an array here rather than a Map<String, Object> to save on allocations.;true
org.elasticsearch.common.xcontent.ConstructingObjectParser; ConstructingObjectParser(String name, Function builder); ConstructingObjectParser(String name, boolean ignoreUnknownFields, BiFunction builder);Free text;;;Build the parser. ;true
org.elasticsearch.common.xcontent.ConstructingObjectParser; ConstructingObjectParser(String name, Function builder); ConstructingObjectParser(String name, boolean ignoreUnknownFields, BiFunction builder);@param;String name;String name;The name given to the delegate ObjectParser for error identification. Use what you'd use if the object worked with ObjectParser.;true
org.elasticsearch.common.xcontent.ConstructingObjectParser; ConstructingObjectParser(String name, boolean ignoreUnknownFields, Function builder); ConstructingObjectParser(String name, boolean ignoreUnknownFields, BiFunction builder);Free text;;;Build the parser. ;true
org.elasticsearch.common.xcontent.ConstructingObjectParser; ConstructingObjectParser(String name, boolean ignoreUnknownFields, Function builder); ConstructingObjectParser(String name, boolean ignoreUnknownFields, BiFunction builder);@param;String name;String name;The name given to the delegate ObjectParser for error identification. Use what you'd use if the object worked with ObjectParser.;true
org.elasticsearch.common.xcontent.ConstructingObjectParser; ConstructingObjectParser(String name, boolean ignoreUnknownFields, Function builder); ConstructingObjectParser(String name, boolean ignoreUnknownFields, BiFunction builder);@param;boolean ignoreUnknownFields;boolean ignoreUnknownFields;Should this parser ignore unknown fields? This should generally be set to true only when parsing responses from external systems, never when parsing requests from users.;true
org.elasticsearch.common.xcontent.XContent;XContentParser createParser(NamedXContentRegistry xContentRegistry, byte[] data);XContentParser createParser(NamedXContentRegistry xContentRegistry, byte[] data, int offset, int length);Whole;;;Creates a parser over the provided bytes.    ;false
org.elasticsearch.common.xcontent.XContent;XContentParser createParser(NamedXContentRegistry xContentRegistry, byte[] data);XContentParser createParser(NamedXContentRegistry xContentRegistry, BytesReference bytes);Whole;;;Creates a parser over the provided bytes.    ;false
org.elasticsearch.common.xcontent.XContent;XContentParser createParser(NamedXContentRegistry xContentRegistry, byte[] data, int offset, int length);XContentParser createParser(NamedXContentRegistry xContentRegistry, BytesReference bytes);Whole;;;Creates a parser over the provided bytes.    ;false
org.elasticsearch.common.util.CancellableThreads;void execute(Interruptable interruptable);void executeIO(IOInterruptable interruptable);Whole;;;run the Interruptable, capturing the executing thread. Concurrent calls to {@link #cancel(String)} will interrupt this thread causing the call to prematurely return.  @param code to run  ;false
org.elasticsearch.common.util.ArrayUtils;String[] concat(String[] one, String[] other);T[] concat(T[] one, T[] other, Class clazz);Whole;;;Concatenates 2 arrays    ;false
org.elasticsearch.common.util.concurrent.ConcurrentCollections;ConcurrentMap newConcurrentMapWithAggressiveConcurrency();ConcurrentMap newConcurrentMapWithAggressiveConcurrency(int initalCapacity);Whole;;;Creates a new CHM with an aggressive concurrency level, aimed at high concurrent update rate long living maps.    ;false
org.elasticsearch.common.util.concurrent.BaseFuture;V get(long timeout, TimeUnit unit);V get();Whole;;;{@inheritDoc} <p> The default {@link BaseFuture} implementation throws {@code InterruptedException} if the current thread is interrupted before or during the call, even if the value is already available.    @throws if the current thread was interrupted before or during the call (optional but recommended).@throws {@inheritDoc};false
org.elasticsearch.common.util.concurrent.BaseFuture;boolean set(V value);boolean setException(Throwable throwable);@return;;;true if the state was successfully changed.;false
org.elasticsearch.common.util.concurrent.ThreadContext;StoredContext newStoredContext(boolean preserveResponseHeaders);Supplier newRestorableContext(boolean preserveResponseHeaders);@param;boolean preserveResponseHeaders;boolean preserveResponseHeaders;if set to true the response headers of the restore thread will be preserved.;true
org.elasticsearch.common.util.concurrent.ThreadContext;void addResponseHeader(String key, String value);void addResponseHeader(String key, String value, Function uniqueValue);@param;String key;String key;the header name;true
org.elasticsearch.common.util.concurrent.ThreadContext;void addResponseHeader(String key, String value);void addResponseHeader(String key, String value, Function uniqueValue);@param;String value;String value;the header value;true
org.elasticsearch.common.util.concurrent.AtomicArray;void set(int i, E value);E get(int i);@param;int i;int i;the index;true
org.elasticsearch.common.util.BigArrays;ByteArray newByteArray(long size, boolean clearOnResize);ByteArray newByteArray(long size);@param;long size;long size;the initial length of the array;true
org.elasticsearch.common.util.BigArrays;ByteArray newByteArray(long size, boolean clearOnResize);IntArray newIntArray(long size, boolean clearOnResize);@param;long size;long size;the initial length of the array;true
org.elasticsearch.common.util.BigArrays;ByteArray newByteArray(long size, boolean clearOnResize);IntArray newIntArray(long size, boolean clearOnResize);@param;boolean clearOnResize;boolean clearOnResize;whether values should be set to 0 on initialization and resize;true
org.elasticsearch.common.util.BigArrays;ByteArray newByteArray(long size, boolean clearOnResize);IntArray newIntArray(long size);@param;long size;long size;the initial length of the array;true
org.elasticsearch.common.util.BigArrays;ByteArray newByteArray(long size, boolean clearOnResize);LongArray newLongArray(long size, boolean clearOnResize);@param;long size;long size;the initial length of the array;true
org.elasticsearch.common.util.BigArrays;ByteArray newByteArray(long size, boolean clearOnResize);LongArray newLongArray(long size, boolean clearOnResize);@param;boolean clearOnResize;boolean clearOnResize;whether values should be set to 0 on initialization and resize;true
org.elasticsearch.common.util.BigArrays;ByteArray newByteArray(long size, boolean clearOnResize);LongArray newLongArray(long size);@param;long size;long size;the initial length of the array;true
org.elasticsearch.common.util.BigArrays;ByteArray newByteArray(long size, boolean clearOnResize);DoubleArray newDoubleArray(long size, boolean clearOnResize);@param;long size;long size;the initial length of the array;true
org.elasticsearch.common.util.BigArrays;ByteArray newByteArray(long size, boolean clearOnResize);DoubleArray newDoubleArray(long size, boolean clearOnResize);@param;boolean clearOnResize;boolean clearOnResize;whether values should be set to 0 on initialization and resize;true
org.elasticsearch.common.util.BigArrays;ByteArray newByteArray(long size, boolean clearOnResize);FloatArray newFloatArray(long size, boolean clearOnResize);@param;long size;long size;the initial length of the array;true
org.elasticsearch.common.util.BigArrays;ByteArray newByteArray(long size, boolean clearOnResize);FloatArray newFloatArray(long size, boolean clearOnResize);@param;boolean clearOnResize;boolean clearOnResize;whether values should be set to 0 on initialization and resize;true
org.elasticsearch.common.util.BigArrays;ByteArray newByteArray(long size, boolean clearOnResize);ObjectArray newObjectArray(long size);@param;long size;long size;the initial length of the array;true
org.elasticsearch.common.util.BigArrays;ByteArray newByteArray(long size);IntArray newIntArray(long size, boolean clearOnResize);@param;long size;long size;the initial length of the array;true
org.elasticsearch.common.util.BigArrays;ByteArray newByteArray(long size);IntArray newIntArray(long size);@param;long size;long size;the initial length of the array;true
org.elasticsearch.common.util.BigArrays;ByteArray newByteArray(long size);LongArray newLongArray(long size, boolean clearOnResize);@param;long size;long size;the initial length of the array;true
org.elasticsearch.common.util.BigArrays;ByteArray newByteArray(long size);LongArray newLongArray(long size);@param;long size;long size;the initial length of the array;true
org.elasticsearch.common.util.BigArrays;ByteArray newByteArray(long size);DoubleArray newDoubleArray(long size, boolean clearOnResize);@param;long size;long size;the initial length of the array;true
org.elasticsearch.common.util.BigArrays;ByteArray newByteArray(long size);FloatArray newFloatArray(long size, boolean clearOnResize);@param;long size;long size;the initial length of the array;true
org.elasticsearch.common.util.BigArrays;ByteArray newByteArray(long size);ObjectArray newObjectArray(long size);@param;long size;long size;the initial length of the array;true
org.elasticsearch.common.util.BigArrays;IntArray newIntArray(long size, boolean clearOnResize);IntArray newIntArray(long size);Free text;;;Allocate a new {@link IntArray}. ;true
org.elasticsearch.common.util.BigArrays;IntArray newIntArray(long size, boolean clearOnResize);IntArray newIntArray(long size);@param;long size;long size;the initial length of the array;true
org.elasticsearch.common.util.BigArrays;IntArray newIntArray(long size, boolean clearOnResize);LongArray newLongArray(long size, boolean clearOnResize);@param;long size;long size;the initial length of the array;true
org.elasticsearch.common.util.BigArrays;IntArray newIntArray(long size, boolean clearOnResize);LongArray newLongArray(long size, boolean clearOnResize);@param;boolean clearOnResize;boolean clearOnResize;whether values should be set to 0 on initialization and resize;true
org.elasticsearch.common.util.BigArrays;IntArray newIntArray(long size, boolean clearOnResize);LongArray newLongArray(long size);@param;long size;long size;the initial length of the array;true
org.elasticsearch.common.util.BigArrays;IntArray newIntArray(long size, boolean clearOnResize);DoubleArray newDoubleArray(long size, boolean clearOnResize);@param;long size;long size;the initial length of the array;true
org.elasticsearch.common.util.BigArrays;IntArray newIntArray(long size, boolean clearOnResize);DoubleArray newDoubleArray(long size, boolean clearOnResize);@param;boolean clearOnResize;boolean clearOnResize;whether values should be set to 0 on initialization and resize;true
org.elasticsearch.common.util.BigArrays;IntArray newIntArray(long size, boolean clearOnResize);FloatArray newFloatArray(long size, boolean clearOnResize);@param;long size;long size;the initial length of the array;true
org.elasticsearch.common.util.BigArrays;IntArray newIntArray(long size, boolean clearOnResize);FloatArray newFloatArray(long size, boolean clearOnResize);@param;boolean clearOnResize;boolean clearOnResize;whether values should be set to 0 on initialization and resize;true
org.elasticsearch.common.util.BigArrays;IntArray newIntArray(long size, boolean clearOnResize);ObjectArray newObjectArray(long size);@param;long size;long size;the initial length of the array;true
org.elasticsearch.common.util.BigArrays;IntArray newIntArray(long size);LongArray newLongArray(long size, boolean clearOnResize);@param;long size;long size;the initial length of the array;true
org.elasticsearch.common.util.BigArrays;IntArray newIntArray(long size);LongArray newLongArray(long size);@param;long size;long size;the initial length of the array;true
org.elasticsearch.common.util.BigArrays;IntArray newIntArray(long size);DoubleArray newDoubleArray(long size, boolean clearOnResize);@param;long size;long size;the initial length of the array;true
org.elasticsearch.common.util.BigArrays;IntArray newIntArray(long size);FloatArray newFloatArray(long size, boolean clearOnResize);@param;long size;long size;the initial length of the array;true
org.elasticsearch.common.util.BigArrays;IntArray newIntArray(long size);ObjectArray newObjectArray(long size);@param;long size;long size;the initial length of the array;true
org.elasticsearch.common.util.BigArrays;LongArray newLongArray(long size, boolean clearOnResize);LongArray newLongArray(long size);Free text;;;Allocate a new {@link LongArray}. ;true
org.elasticsearch.common.util.BigArrays;LongArray newLongArray(long size, boolean clearOnResize);LongArray newLongArray(long size);@param;long size;long size;the initial length of the array;true
org.elasticsearch.common.util.BigArrays;LongArray newLongArray(long size, boolean clearOnResize);DoubleArray newDoubleArray(long size, boolean clearOnResize);@param;long size;long size;the initial length of the array;true
org.elasticsearch.common.util.BigArrays;LongArray newLongArray(long size, boolean clearOnResize);DoubleArray newDoubleArray(long size, boolean clearOnResize);@param;boolean clearOnResize;boolean clearOnResize;whether values should be set to 0 on initialization and resize;true
org.elasticsearch.common.util.BigArrays;LongArray newLongArray(long size, boolean clearOnResize);FloatArray newFloatArray(long size, boolean clearOnResize);@param;long size;long size;the initial length of the array;true
org.elasticsearch.common.util.BigArrays;LongArray newLongArray(long size, boolean clearOnResize);FloatArray newFloatArray(long size, boolean clearOnResize);@param;boolean clearOnResize;boolean clearOnResize;whether values should be set to 0 on initialization and resize;true
org.elasticsearch.common.util.BigArrays;LongArray newLongArray(long size, boolean clearOnResize);ObjectArray newObjectArray(long size);@param;long size;long size;the initial length of the array;true
org.elasticsearch.common.util.BigArrays;LongArray newLongArray(long size);DoubleArray newDoubleArray(long size, boolean clearOnResize);@param;long size;long size;the initial length of the array;true
org.elasticsearch.common.util.BigArrays;LongArray newLongArray(long size);FloatArray newFloatArray(long size, boolean clearOnResize);@param;long size;long size;the initial length of the array;true
org.elasticsearch.common.util.BigArrays;LongArray newLongArray(long size);ObjectArray newObjectArray(long size);@param;long size;long size;the initial length of the array;true
org.elasticsearch.common.util.BigArrays;DoubleArray newDoubleArray(long size, boolean clearOnResize);FloatArray newFloatArray(long size, boolean clearOnResize);@param;long size;long size;the initial length of the array;true
org.elasticsearch.common.util.BigArrays;DoubleArray newDoubleArray(long size, boolean clearOnResize);FloatArray newFloatArray(long size, boolean clearOnResize);@param;boolean clearOnResize;boolean clearOnResize;whether values should be set to 0 on initialization and resize;true
org.elasticsearch.common.util.BigArrays;DoubleArray newDoubleArray(long size, boolean clearOnResize);ObjectArray newObjectArray(long size);@param;long size;long size;the initial length of the array;true
org.elasticsearch.common.util.BigArrays;FloatArray newFloatArray(long size, boolean clearOnResize);ObjectArray newObjectArray(long size);@param;long size;long size;the initial length of the array;true
org.elasticsearch.common.util.set.Sets;Set difference(Set left, Set right);SortedSet sortedDifference(Set left, Set right);@param;Set<T> left;Set<T> left;the left set;true
org.elasticsearch.common.util.set.Sets;Set difference(Set left, Set right);SortedSet sortedDifference(Set left, Set right);@param;Set<T> right;Set<T> right;the right set;true
org.elasticsearch.common.inject.PrivateModule;AnnotatedElementBuilder expose(Class type);AnnotatedElementBuilder expose(TypeLiteral type);Whole;;;Makes a binding for {@code type} available to other modules and the injector. Use {@link AnnotatedElementBuilder#annotatedWith(Class) annotatedWith()} to expose {@code type} with a binding annotation.    ;false
org.elasticsearch.common.inject.multibindings.Multibinder;Multibinder newSetBinder(Binder binder, TypeLiteral type);Multibinder newSetBinder(Binder binder, Class type);Whole;;;Returns a new multibinder that collects instances of {@code type} in a {@link Set} that is itself bound with no binding annotation.    ;false
org.elasticsearch.common.inject.multibindings.Multibinder;Multibinder newSetBinder(Binder binder, TypeLiteral type, Annotation annotation);Multibinder newSetBinder(Binder binder, Class type, Annotation annotation);Whole;;;Returns a new multibinder that collects instances of {@code type} in a {@link Set} that is itself bound with {@code annotation}.    ;false
org.elasticsearch.common.inject.multibindings.Multibinder;Multibinder newSetBinder(Binder binder, TypeLiteral type, Class annotationType);Multibinder newSetBinder(Binder binder, Class type, Class annotationType);Whole;;;Returns a new multibinder that collects instances of {@code type} in a {@link Set} that is itself bound with {@code annotationType}.    ;false
org.elasticsearch.common.inject.multibindings.MapBinder;MapBinder newMapBinder(Binder binder, TypeLiteral keyType, TypeLiteral valueType);MapBinder newMapBinder(Binder binder, Class keyType, Class valueType);Whole;;;Returns a new mapbinder that collects entries of {@code keyType}/{@code valueType} in a {@link Map} that is itself bound with no binding annotation.    ;false
org.elasticsearch.common.inject.multibindings.MapBinder;MapBinder newMapBinder(Binder binder, TypeLiteral keyType, TypeLiteral valueType, Annotation annotation);MapBinder newMapBinder(Binder binder, Class keyType, Class valueType, Annotation annotation);Whole;;;Returns a new mapbinder that collects entries of {@code keyType}/{@code valueType} in a {@link Map} that is itself bound with {@code annotation}.    ;false
org.elasticsearch.common.inject.multibindings.MapBinder;MapBinder newMapBinder(Binder binder, TypeLiteral keyType, TypeLiteral valueType, Class annotationType);MapBinder newMapBinder(Binder binder, Class keyType, Class valueType, Class annotationType);Whole;;;Returns a new mapbinder that collects entries of {@code keyType}/{@code valueType} in a {@link Map} that is itself bound with {@code annotationType}.    ;false
org.elasticsearch.common.inject.util.Modules;OverriddenModuleBuilder override(Module modules);OverriddenModuleBuilder override(Iterable modules);@param;Module modules;Iterable<? extends Module> modules;the modules whose bindings are open to be overridden;true
org.elasticsearch.common.inject.util.Modules;Module combine(Module modules);Module combine(Iterable modules);Whole;;;Returns a new module that installs all of {@code modules}.    ;false
org.elasticsearch.common.inject.util.Types;ParameterizedType newParameterizedType(Type rawType, Type typeArguments);ParameterizedType newParameterizedTypeWithOwner(Type ownerType, Type rawType, Type typeArguments);@return;;;a parameterized type.;false
org.elasticsearch.common.inject.util.Types;ParameterizedType newParameterizedType(Type rawType, Type typeArguments);ParameterizedType listOf(Type elementType);@return;;;a parameterized type.;false
org.elasticsearch.common.inject.util.Types;ParameterizedType newParameterizedType(Type rawType, Type typeArguments);ParameterizedType setOf(Type elementType);@return;;;a parameterized type.;false
org.elasticsearch.common.inject.util.Types;ParameterizedType newParameterizedType(Type rawType, Type typeArguments);ParameterizedType mapOf(Type keyType, Type valueType);@return;;;a parameterized type.;false
org.elasticsearch.common.inject.util.Types;ParameterizedType newParameterizedType(Type rawType, Type typeArguments);ParameterizedType providerOf(Type providedType);@return;;;a parameterized type.;false
org.elasticsearch.common.inject.util.Types;ParameterizedType newParameterizedTypeWithOwner(Type ownerType, Type rawType, Type typeArguments);ParameterizedType listOf(Type elementType);@return;;;a parameterized type.;false
org.elasticsearch.common.inject.util.Types;ParameterizedType newParameterizedTypeWithOwner(Type ownerType, Type rawType, Type typeArguments);ParameterizedType setOf(Type elementType);@return;;;a parameterized type.;false
org.elasticsearch.common.inject.util.Types;ParameterizedType newParameterizedTypeWithOwner(Type ownerType, Type rawType, Type typeArguments);ParameterizedType mapOf(Type keyType, Type valueType);@return;;;a parameterized type.;false
org.elasticsearch.common.inject.util.Types;ParameterizedType newParameterizedTypeWithOwner(Type ownerType, Type rawType, Type typeArguments);ParameterizedType providerOf(Type providedType);@return;;;a parameterized type.;false
org.elasticsearch.common.inject.util.Types;ParameterizedType listOf(Type elementType);ParameterizedType setOf(Type elementType);@return;;;a parameterized type.;false
org.elasticsearch.common.inject.util.Types;ParameterizedType listOf(Type elementType);ParameterizedType mapOf(Type keyType, Type valueType);@return;;;a parameterized type.;false
org.elasticsearch.common.inject.util.Types;ParameterizedType listOf(Type elementType);ParameterizedType providerOf(Type providedType);@return;;;a parameterized type.;false
org.elasticsearch.common.inject.util.Types;ParameterizedType setOf(Type elementType);ParameterizedType mapOf(Type keyType, Type valueType);@return;;;a parameterized type.;false
org.elasticsearch.common.inject.util.Types;ParameterizedType setOf(Type elementType);ParameterizedType providerOf(Type providedType);@return;;;a parameterized type.;false
org.elasticsearch.common.inject.util.Types;ParameterizedType mapOf(Type keyType, Type valueType);ParameterizedType providerOf(Type providedType);@return;;;a parameterized type.;false
org.elasticsearch.common.inject.binder.AnnotatedConstantBindingBuilder;ConstantBindingBuilder annotatedWith(Class annotationType);ConstantBindingBuilder annotatedWith(Annotation annotation);Whole;;;See the EDSL examples at {@link org.elasticsearch.common.inject.Binder}.    ;false
org.elasticsearch.common.inject.binder.AnnotatedBindingBuilder;LinkedBindingBuilder annotatedWith(Class annotationType);LinkedBindingBuilder annotatedWith(Annotation annotation);Whole;;;See the EDSL examples at {@link org.elasticsearch.common.inject.Binder}.    ;false
org.elasticsearch.common.inject.binder.AnnotatedElementBuilder;void annotatedWith(Class annotationType);void annotatedWith(Annotation annotation);Whole;;;See the EDSL examples at {@link org.elasticsearch.common.inject.Binder}.    ;false
org.elasticsearch.common.inject.binder.LinkedBindingBuilder;ScopedBindingBuilder to(Class implementation);ScopedBindingBuilder to(TypeLiteral implementation);Whole;;;See the EDSL examples at {@link org.elasticsearch.common.inject.Binder}.    ;false
org.elasticsearch.common.inject.binder.LinkedBindingBuilder;ScopedBindingBuilder to(Class implementation);ScopedBindingBuilder to(Key targetKey);Whole;;;See the EDSL examples at {@link org.elasticsearch.common.inject.Binder}.    ;false
org.elasticsearch.common.inject.binder.LinkedBindingBuilder;ScopedBindingBuilder to(Class implementation);ScopedBindingBuilder toProvider(Class providerType);Whole;;;See the EDSL examples at {@link org.elasticsearch.common.inject.Binder}.    ;false
org.elasticsearch.common.inject.binder.LinkedBindingBuilder;ScopedBindingBuilder to(Class implementation);ScopedBindingBuilder toProvider(Key providerKey);Whole;;;See the EDSL examples at {@link org.elasticsearch.common.inject.Binder}.    ;false
org.elasticsearch.common.inject.binder.LinkedBindingBuilder;ScopedBindingBuilder to(TypeLiteral implementation);ScopedBindingBuilder to(Key targetKey);Whole;;;See the EDSL examples at {@link org.elasticsearch.common.inject.Binder}.    ;false
org.elasticsearch.common.inject.binder.LinkedBindingBuilder;ScopedBindingBuilder to(TypeLiteral implementation);ScopedBindingBuilder toProvider(Class providerType);Whole;;;See the EDSL examples at {@link org.elasticsearch.common.inject.Binder}.    ;false
org.elasticsearch.common.inject.binder.LinkedBindingBuilder;ScopedBindingBuilder to(TypeLiteral implementation);ScopedBindingBuilder toProvider(Key providerKey);Whole;;;See the EDSL examples at {@link org.elasticsearch.common.inject.Binder}.    ;false
org.elasticsearch.common.inject.binder.LinkedBindingBuilder;ScopedBindingBuilder to(Key targetKey);ScopedBindingBuilder toProvider(Class providerType);Whole;;;See the EDSL examples at {@link org.elasticsearch.common.inject.Binder}.    ;false
org.elasticsearch.common.inject.binder.LinkedBindingBuilder;ScopedBindingBuilder to(Key targetKey);ScopedBindingBuilder toProvider(Key providerKey);Whole;;;See the EDSL examples at {@link org.elasticsearch.common.inject.Binder}.    ;false
org.elasticsearch.common.inject.binder.LinkedBindingBuilder;void toInstance(T instance);ScopedBindingBuilder toProvider(Provider provider);Whole;;;See the EDSL examples at {@link org.elasticsearch.common.inject.Binder}. @see org.elasticsearch.common.inject.Injector#injectMembers    ;false
org.elasticsearch.common.inject.binder.LinkedBindingBuilder;ScopedBindingBuilder toProvider(Class providerType);ScopedBindingBuilder toProvider(Key providerKey);Whole;;;See the EDSL examples at {@link org.elasticsearch.common.inject.Binder}.    ;false
org.elasticsearch.common.inject.binder.ScopedBindingBuilder;void in(Class scopeAnnotation);void in(Scope scope);Whole;;;See the EDSL examples at {@link org.elasticsearch.common.inject.Binder}.    ;false
org.elasticsearch.common.inject.binder.ConstantBindingBuilder;void to(String value);void to(int value);Whole;;;Binds constant to the given value.    ;false
org.elasticsearch.common.inject.binder.ConstantBindingBuilder;void to(String value);void to(long value);Whole;;;Binds constant to the given value.    ;false
org.elasticsearch.common.inject.binder.ConstantBindingBuilder;void to(String value);void to(boolean value);Whole;;;Binds constant to the given value.    ;false
org.elasticsearch.common.inject.binder.ConstantBindingBuilder;void to(String value);void to(double value);Whole;;;Binds constant to the given value.    ;false
org.elasticsearch.common.inject.binder.ConstantBindingBuilder;void to(String value);void to(float value);Whole;;;Binds constant to the given value.    ;false
org.elasticsearch.common.inject.binder.ConstantBindingBuilder;void to(String value);void to(short value);Whole;;;Binds constant to the given value.    ;false
org.elasticsearch.common.inject.binder.ConstantBindingBuilder;void to(String value);void to(char value);Whole;;;Binds constant to the given value.    ;false
org.elasticsearch.common.inject.binder.ConstantBindingBuilder;void to(String value);void to(Class value);Whole;;;Binds constant to the given value.    ;false
org.elasticsearch.common.inject.binder.ConstantBindingBuilder;void to(String value);void to(E value);Whole;;;Binds constant to the given value.    ;false
org.elasticsearch.common.inject.binder.ConstantBindingBuilder;void to(int value);void to(long value);Whole;;;Binds constant to the given value.    ;false
org.elasticsearch.common.inject.binder.ConstantBindingBuilder;void to(int value);void to(boolean value);Whole;;;Binds constant to the given value.    ;false
org.elasticsearch.common.inject.binder.ConstantBindingBuilder;void to(int value);void to(double value);Whole;;;Binds constant to the given value.    ;false
org.elasticsearch.common.inject.binder.ConstantBindingBuilder;void to(int value);void to(float value);Whole;;;Binds constant to the given value.    ;false
org.elasticsearch.common.inject.binder.ConstantBindingBuilder;void to(int value);void to(short value);Whole;;;Binds constant to the given value.    ;false
org.elasticsearch.common.inject.binder.ConstantBindingBuilder;void to(int value);void to(char value);Whole;;;Binds constant to the given value.    ;false
org.elasticsearch.common.inject.binder.ConstantBindingBuilder;void to(int value);void to(Class value);Whole;;;Binds constant to the given value.    ;false
org.elasticsearch.common.inject.binder.ConstantBindingBuilder;void to(int value);void to(E value);Whole;;;Binds constant to the given value.    ;false
org.elasticsearch.common.inject.binder.ConstantBindingBuilder;void to(long value);void to(boolean value);Whole;;;Binds constant to the given value.    ;false
org.elasticsearch.common.inject.binder.ConstantBindingBuilder;void to(long value);void to(double value);Whole;;;Binds constant to the given value.    ;false
org.elasticsearch.common.inject.binder.ConstantBindingBuilder;void to(long value);void to(float value);Whole;;;Binds constant to the given value.    ;false
org.elasticsearch.common.inject.binder.ConstantBindingBuilder;void to(long value);void to(short value);Whole;;;Binds constant to the given value.    ;false
org.elasticsearch.common.inject.binder.ConstantBindingBuilder;void to(long value);void to(char value);Whole;;;Binds constant to the given value.    ;false
org.elasticsearch.common.inject.binder.ConstantBindingBuilder;void to(long value);void to(Class value);Whole;;;Binds constant to the given value.    ;false
org.elasticsearch.common.inject.binder.ConstantBindingBuilder;void to(long value);void to(E value);Whole;;;Binds constant to the given value.    ;false
org.elasticsearch.common.inject.binder.ConstantBindingBuilder;void to(boolean value);void to(double value);Whole;;;Binds constant to the given value.    ;false
org.elasticsearch.common.inject.binder.ConstantBindingBuilder;void to(boolean value);void to(float value);Whole;;;Binds constant to the given value.    ;false
org.elasticsearch.common.inject.binder.ConstantBindingBuilder;void to(boolean value);void to(short value);Whole;;;Binds constant to the given value.    ;false
org.elasticsearch.common.inject.binder.ConstantBindingBuilder;void to(boolean value);void to(char value);Whole;;;Binds constant to the given value.    ;false
org.elasticsearch.common.inject.binder.ConstantBindingBuilder;void to(boolean value);void to(Class value);Whole;;;Binds constant to the given value.    ;false
org.elasticsearch.common.inject.binder.ConstantBindingBuilder;void to(boolean value);void to(E value);Whole;;;Binds constant to the given value.    ;false
org.elasticsearch.common.inject.binder.ConstantBindingBuilder;void to(double value);void to(float value);Whole;;;Binds constant to the given value.    ;false
org.elasticsearch.common.inject.binder.ConstantBindingBuilder;void to(double value);void to(short value);Whole;;;Binds constant to the given value.    ;false
org.elasticsearch.common.inject.binder.ConstantBindingBuilder;void to(double value);void to(char value);Whole;;;Binds constant to the given value.    ;false
org.elasticsearch.common.inject.binder.ConstantBindingBuilder;void to(double value);void to(Class value);Whole;;;Binds constant to the given value.    ;false
org.elasticsearch.common.inject.binder.ConstantBindingBuilder;void to(double value);void to(E value);Whole;;;Binds constant to the given value.    ;false
org.elasticsearch.common.inject.binder.ConstantBindingBuilder;void to(float value);void to(short value);Whole;;;Binds constant to the given value.    ;false
org.elasticsearch.common.inject.binder.ConstantBindingBuilder;void to(float value);void to(char value);Whole;;;Binds constant to the given value.    ;false
org.elasticsearch.common.inject.binder.ConstantBindingBuilder;void to(float value);void to(Class value);Whole;;;Binds constant to the given value.    ;false
org.elasticsearch.common.inject.binder.ConstantBindingBuilder;void to(float value);void to(E value);Whole;;;Binds constant to the given value.    ;false
org.elasticsearch.common.inject.binder.ConstantBindingBuilder;void to(short value);void to(char value);Whole;;;Binds constant to the given value.    ;false
org.elasticsearch.common.inject.binder.ConstantBindingBuilder;void to(short value);void to(Class value);Whole;;;Binds constant to the given value.    ;false
org.elasticsearch.common.inject.binder.ConstantBindingBuilder;void to(short value);void to(E value);Whole;;;Binds constant to the given value.    ;false
org.elasticsearch.common.inject.binder.ConstantBindingBuilder;void to(char value);void to(Class value);Whole;;;Binds constant to the given value.    ;false
org.elasticsearch.common.inject.binder.ConstantBindingBuilder;void to(char value);void to(E value);Whole;;;Binds constant to the given value.    ;false
org.elasticsearch.common.inject.binder.ConstantBindingBuilder;void to(Class value);void to(E value);Whole;;;Binds constant to the given value.    ;false
org.elasticsearch.common.inject.Guice;Injector createInjector(Module modules);Injector createInjector(Iterable modules);Free text;;;Creates an injector for the given set of modules. ;true
org.elasticsearch.common.inject.Guice;Injector createInjector(Module modules);Injector createInjector(Stage stage, Iterable modules);@throws;;;if one or more errors occur during Injector construction;true
org.elasticsearch.common.inject.Guice;Injector createInjector(Iterable modules);Injector createInjector(Stage stage, Module modules);@throws;;;if one or more errors occur during Injector creation;true
org.elasticsearch.common.inject.Guice;Injector createInjector(Stage stage, Module modules);Injector createInjector(Stage stage, Iterable modules);Free text;;;Creates an injector for the given set of modules, in a given development stage. ;true
org.elasticsearch.common.inject.Binder;LinkedBindingBuilder bind(Key key);AnnotatedBindingBuilder bind(TypeLiteral typeLiteral);Whole;;;See the EDSL examples at {@link Binder}.    ;false
org.elasticsearch.common.inject.Binder;LinkedBindingBuilder bind(Key key);AnnotatedBindingBuilder bind(Class type);Whole;;;See the EDSL examples at {@link Binder}.    ;false
org.elasticsearch.common.inject.Binder;LinkedBindingBuilder bind(Key key);AnnotatedConstantBindingBuilder bindConstant();Whole;;;See the EDSL examples at {@link Binder}.    ;false
org.elasticsearch.common.inject.Binder;AnnotatedBindingBuilder bind(TypeLiteral typeLiteral);AnnotatedBindingBuilder bind(Class type);Whole;;;See the EDSL examples at {@link Binder}.    ;false
org.elasticsearch.common.inject.Binder;AnnotatedBindingBuilder bind(TypeLiteral typeLiteral);AnnotatedConstantBindingBuilder bindConstant();Whole;;;See the EDSL examples at {@link Binder}.    ;false
org.elasticsearch.common.inject.Binder;AnnotatedBindingBuilder bind(Class type);AnnotatedConstantBindingBuilder bindConstant();Whole;;;See the EDSL examples at {@link Binder}.    ;false
org.elasticsearch.common.inject.Binder;void requestInjection(TypeLiteral type, T instance);void requestInjection(Object instance);Free text;;;Upon successful creation, the {@link Injector} will inject instance fields and methods of the given object. ;true
org.elasticsearch.common.inject.Binder;void requestInjection(TypeLiteral type, T instance);void requestInjection(Object instance);@param;T instance;Object instance;for which members will be injected;true
org.elasticsearch.common.inject.Binder;MembersInjector getMembersInjector(TypeLiteral typeLiteral);MembersInjector getMembersInjector(Class type);Whole;;;Returns the members injector used to inject dependencies into methods and fields on instances of the given type {@code T}. The returned members injector will not be valid until the main {@link Injector} has been created. The members injector will throw an {@code IllegalStateException} if you try to use it beforehand.  @param type to get members injector for  ;false
org.elasticsearch.common.inject.internal.Join;String join(String delimiter, Iterable tokens);String join(String delimiter, Object[] tokens);Whole;;;Returns a string containing the {@code tokens}, converted to strings if necessary, separated by {@code delimiter}. If {@code tokens} is empty, it returns an empty string. <p> Each token will be converted to a {@link CharSequence} using {@link String#valueOf(Object)}, if it isn't a {@link CharSequence} already. Note that this implies that null tokens will be appended as the four-character string {@code "null"}.  @param a string to append between every element, but not at the beginning or end@param objects to append @return a string consisting of the joined elements ;false
org.elasticsearch.common.inject.internal.Join;String join(String delimiter, Iterable tokens);String join(String delimiter, Object firstToken, Object otherTokens);@return;;;a string consisting of the joined elements;true
org.elasticsearch.common.inject.internal.Join;String join(String delimiter, Iterable tokens);String join(String delimiter, Object firstToken, Object otherTokens);@param;String delimiter;String delimiter;a string to append between every element, but not at the beginning or end;true
org.elasticsearch.common.inject.internal.Join;String join(String delimiter, Iterable tokens);String join(String delimiter, Iterator tokens);Whole;;;Returns a string containing the {@code tokens}, converted to strings if necessary, separated by {@code delimiter}. If {@code tokens} is empty, it returns an empty string. <p> Each token will be converted to a {@link CharSequence} using {@link String#valueOf(Object)}, if it isn't a {@link CharSequence} already. Note that this implies that null tokens will be appended as the four-character string {@code "null"}.  @param a string to append between every element, but not at the beginning or end@param objects to append @return a string consisting of the joined elements ;false
org.elasticsearch.common.inject.internal.Join;String join(String delimiter, Iterable tokens);T join(T appendable, String delimiter, Iterable tokens);@param;String delimiter;String delimiter;a string to append between every element, but not at the beginning or end;true
org.elasticsearch.common.inject.internal.Join;String join(String delimiter, Iterable tokens);T join(T appendable, String delimiter, Iterable tokens);@param;Iterable<?> tokens;Iterable<?> tokens;objects to append;true
org.elasticsearch.common.inject.internal.Join;String join(String delimiter, Iterable tokens);T join(T appendable, String delimiter, Object[] tokens);@param;String delimiter;String delimiter;a string to append between every element, but not at the beginning or end;true
org.elasticsearch.common.inject.internal.Join;String join(String delimiter, Iterable tokens);T join(T appendable, String delimiter, Object[] tokens);@param;Iterable<?> tokens;Object[] tokens;objects to append;true
org.elasticsearch.common.inject.internal.Join;String join(String delimiter, Iterable tokens);T join(T appendable, String delimiter, Object firstToken, Object otherTokens);@param;String delimiter;String delimiter;a string to append between every element, but not at the beginning or end;true
org.elasticsearch.common.inject.internal.Join;String join(String delimiter, Iterable tokens);T join(T appendable, String delimiter, Iterator tokens);@param;String delimiter;String delimiter;a string to append between every element, but not at the beginning or end;true
org.elasticsearch.common.inject.internal.Join;String join(String delimiter, Iterable tokens);T join(T appendable, String delimiter, Iterator tokens);@param;Iterable<?> tokens;Iterator<?> tokens;objects to append;true
org.elasticsearch.common.inject.internal.Join;String join(String delimiter, Object[] tokens);String join(String delimiter, Object firstToken, Object otherTokens);@return;;;a string consisting of the joined elements;true
org.elasticsearch.common.inject.internal.Join;String join(String delimiter, Object[] tokens);String join(String delimiter, Object firstToken, Object otherTokens);@param;String delimiter;String delimiter;a string to append between every element, but not at the beginning or end;true
org.elasticsearch.common.inject.internal.Join;String join(String delimiter, Object[] tokens);String join(String delimiter, Iterator tokens);Whole;;;Returns a string containing the {@code tokens}, converted to strings if necessary, separated by {@code delimiter}. If {@code tokens} is empty, it returns an empty string. <p> Each token will be converted to a {@link CharSequence} using {@link String#valueOf(Object)}, if it isn't a {@link CharSequence} already. Note that this implies that null tokens will be appended as the four-character string {@code "null"}.  @param a string to append between every element, but not at the beginning or end@param objects to append @return a string consisting of the joined elements ;false
org.elasticsearch.common.inject.internal.Join;String join(String delimiter, Object[] tokens);T join(T appendable, String delimiter, Iterable tokens);@param;String delimiter;String delimiter;a string to append between every element, but not at the beginning or end;true
org.elasticsearch.common.inject.internal.Join;String join(String delimiter, Object[] tokens);T join(T appendable, String delimiter, Iterable tokens);@param;Object[] tokens;Iterable<?> tokens;objects to append;true
org.elasticsearch.common.inject.internal.Join;String join(String delimiter, Object[] tokens);T join(T appendable, String delimiter, Object[] tokens);@param;String delimiter;String delimiter;a string to append between every element, but not at the beginning or end;true
org.elasticsearch.common.inject.internal.Join;String join(String delimiter, Object[] tokens);T join(T appendable, String delimiter, Object[] tokens);@param;Object[] tokens;Object[] tokens;objects to append;true
org.elasticsearch.common.inject.internal.Join;String join(String delimiter, Object[] tokens);T join(T appendable, String delimiter, Object firstToken, Object otherTokens);@param;String delimiter;String delimiter;a string to append between every element, but not at the beginning or end;true
org.elasticsearch.common.inject.internal.Join;String join(String delimiter, Object[] tokens);T join(T appendable, String delimiter, Iterator tokens);@param;String delimiter;String delimiter;a string to append between every element, but not at the beginning or end;true
org.elasticsearch.common.inject.internal.Join;String join(String delimiter, Object[] tokens);T join(T appendable, String delimiter, Iterator tokens);@param;Object[] tokens;Iterator<?> tokens;objects to append;true
org.elasticsearch.common.inject.internal.Join;String join(String delimiter, Object firstToken, Object otherTokens);String join(String delimiter, Iterator tokens);@return;;;a string consisting of the joined elements;true
org.elasticsearch.common.inject.internal.Join;String join(String delimiter, Object firstToken, Object otherTokens);String join(String delimiter, Iterator tokens);@param;String delimiter;String delimiter;a string to append between every element, but not at the beginning or end;true
org.elasticsearch.common.inject.internal.Join;String join(String delimiter, Object firstToken, Object otherTokens);T join(T appendable, String delimiter, Iterable tokens);@param;String delimiter;String delimiter;a string to append between every element, but not at the beginning or end;true
org.elasticsearch.common.inject.internal.Join;String join(String delimiter, Object firstToken, Object otherTokens);T join(T appendable, String delimiter, Object[] tokens);@param;String delimiter;String delimiter;a string to append between every element, but not at the beginning or end;true
org.elasticsearch.common.inject.internal.Join;String join(String delimiter, Object firstToken, Object otherTokens);T join(T appendable, String delimiter, Object firstToken, Object otherTokens);@param;String delimiter;String delimiter;a string to append between every element, but not at the beginning or end;true
org.elasticsearch.common.inject.internal.Join;String join(String delimiter, Object firstToken, Object otherTokens);T join(T appendable, String delimiter, Object firstToken, Object otherTokens);@param;Object firstToken;Object firstToken;the first object to append;true
org.elasticsearch.common.inject.internal.Join;String join(String delimiter, Object firstToken, Object otherTokens);T join(T appendable, String delimiter, Object firstToken, Object otherTokens);@param;Object otherTokens;Object otherTokens;subsequent objects to append;true
org.elasticsearch.common.inject.internal.Join;String join(String delimiter, Object firstToken, Object otherTokens);T join(T appendable, String delimiter, Iterator tokens);@param;String delimiter;String delimiter;a string to append between every element, but not at the beginning or end;true
org.elasticsearch.common.inject.internal.Join;String join(String delimiter, Iterator tokens);T join(T appendable, String delimiter, Iterable tokens);@param;String delimiter;String delimiter;a string to append between every element, but not at the beginning or end;true
org.elasticsearch.common.inject.internal.Join;String join(String delimiter, Iterator tokens);T join(T appendable, String delimiter, Iterable tokens);@param;Iterator<?> tokens;Iterable<?> tokens;objects to append;true
org.elasticsearch.common.inject.internal.Join;String join(String delimiter, Iterator tokens);T join(T appendable, String delimiter, Object[] tokens);@param;String delimiter;String delimiter;a string to append between every element, but not at the beginning or end;true
org.elasticsearch.common.inject.internal.Join;String join(String delimiter, Iterator tokens);T join(T appendable, String delimiter, Object[] tokens);@param;Iterator<?> tokens;Object[] tokens;objects to append;true
org.elasticsearch.common.inject.internal.Join;String join(String delimiter, Iterator tokens);T join(T appendable, String delimiter, Object firstToken, Object otherTokens);@param;String delimiter;String delimiter;a string to append between every element, but not at the beginning or end;true
org.elasticsearch.common.inject.internal.Join;String join(String delimiter, Iterator tokens);T join(T appendable, String delimiter, Iterator tokens);@param;String delimiter;String delimiter;a string to append between every element, but not at the beginning or end;true
org.elasticsearch.common.inject.internal.Join;String join(String delimiter, Iterator tokens);T join(T appendable, String delimiter, Iterator tokens);@param;Iterator<?> tokens;Iterator<?> tokens;objects to append;true
org.elasticsearch.common.inject.internal.Join;String join(String keyValueSeparator, String entryDelimiter, Map map);T join(T appendable, String keyValueSeparator, String entryDelimiter, Map map);@param;String keyValueSeparator;String keyValueSeparator;a string to append between every key and its associated value;true
org.elasticsearch.common.inject.internal.Join;String join(String keyValueSeparator, String entryDelimiter, Map map);T join(T appendable, String keyValueSeparator, String entryDelimiter, Map map);@param;String entryDelimiter;String entryDelimiter;a string to append between every entry, but not at the beginning or end;true
org.elasticsearch.common.inject.internal.Join;String join(String keyValueSeparator, String entryDelimiter, Map map);T join(T appendable, String keyValueSeparator, String entryDelimiter, Map map);@param;Map<?,?> map;Map<?,?> map;the map containing the data to join;true
org.elasticsearch.common.inject.internal.Join;T join(T appendable, String delimiter, Iterable tokens);T join(T appendable, String delimiter, Object[] tokens);Whole;;;Appends each of the {@code tokens} to {@code appendable}, separated by {@code delimiter}. <p> Each token will be converted to a {@link CharSequence} using {@link String#valueOf(Object)}, if it isn't a {@link CharSequence} already. Note that this implies that null tokens will be appended as the four-character string {@code "null"}.  @param the object to append the results to@param a string to append between every element, but not at the beginning or end@param objects to append @return the same Appendable instance that was passed in @throws if an IOException occurs;false
org.elasticsearch.common.inject.internal.Join;T join(T appendable, String delimiter, Iterable tokens);T join(T appendable, String delimiter, Object firstToken, Object otherTokens);Free text;;;Appends each of the {@code tokens} to {@code appendable}, separated by {@code delimiter}. <p> Each token will be converted to a {@link CharSequence} using {@link String#valueOf(Object)}, if it isn't a {@link CharSequence} already. Note that this implies that null tokens will be appended as the four-character string {@code "null"}. ;true
org.elasticsearch.common.inject.internal.Join;T join(T appendable, String delimiter, Iterable tokens);T join(T appendable, String delimiter, Object firstToken, Object otherTokens);@return;;;the same Appendable instance that was passed in;true
org.elasticsearch.common.inject.internal.Join;T join(T appendable, String delimiter, Iterable tokens);T join(T appendable, String delimiter, Object firstToken, Object otherTokens);@param;T appendable;T appendable;the object to append the results to;true
org.elasticsearch.common.inject.internal.Join;T join(T appendable, String delimiter, Iterable tokens);T join(T appendable, String delimiter, Object firstToken, Object otherTokens);@param;String delimiter;String delimiter;a string to append between every element, but not at the beginning or end;true
org.elasticsearch.common.inject.internal.Join;T join(T appendable, String delimiter, Iterable tokens);T join(T appendable, String delimiter, Object firstToken, Object otherTokens);@throws;;;if an IOException occurs;true
org.elasticsearch.common.inject.internal.Join;T join(T appendable, String delimiter, Iterable tokens);T join(T appendable, String delimiter, Iterator tokens);Whole;;;Appends each of the {@code tokens} to {@code appendable}, separated by {@code delimiter}. <p> Each token will be converted to a {@link CharSequence} using {@link String#valueOf(Object)}, if it isn't a {@link CharSequence} already. Note that this implies that null tokens will be appended as the four-character string {@code "null"}.  @param the object to append the results to@param a string to append between every element, but not at the beginning or end@param objects to append @return the same Appendable instance that was passed in @throws if an IOException occurs;false
org.elasticsearch.common.inject.internal.Join;T join(T appendable, String delimiter, Iterable tokens);T join(T appendable, String keyValueSeparator, String entryDelimiter, Map map);@return;;;the same Appendable instance that was passed in;true
org.elasticsearch.common.inject.internal.Join;T join(T appendable, String delimiter, Iterable tokens);T join(T appendable, String keyValueSeparator, String entryDelimiter, Map map);@param;T appendable;T appendable;the object to append the results to;true
org.elasticsearch.common.inject.internal.Join;T join(T appendable, String delimiter, Object[] tokens);T join(T appendable, String delimiter, Object firstToken, Object otherTokens);Free text;;;Appends each of the {@code tokens} to {@code appendable}, separated by {@code delimiter}. <p> Each token will be converted to a {@link CharSequence} using {@link String#valueOf(Object)}, if it isn't a {@link CharSequence} already. Note that this implies that null tokens will be appended as the four-character string {@code "null"}. ;true
org.elasticsearch.common.inject.internal.Join;T join(T appendable, String delimiter, Object[] tokens);T join(T appendable, String delimiter, Object firstToken, Object otherTokens);@return;;;the same Appendable instance that was passed in;true
org.elasticsearch.common.inject.internal.Join;T join(T appendable, String delimiter, Object[] tokens);T join(T appendable, String delimiter, Object firstToken, Object otherTokens);@param;T appendable;T appendable;the object to append the results to;true
org.elasticsearch.common.inject.internal.Join;T join(T appendable, String delimiter, Object[] tokens);T join(T appendable, String delimiter, Object firstToken, Object otherTokens);@param;String delimiter;String delimiter;a string to append between every element, but not at the beginning or end;true
org.elasticsearch.common.inject.internal.Join;T join(T appendable, String delimiter, Object[] tokens);T join(T appendable, String delimiter, Object firstToken, Object otherTokens);@throws;;;if an IOException occurs;true
org.elasticsearch.common.inject.internal.Join;T join(T appendable, String delimiter, Object[] tokens);T join(T appendable, String delimiter, Iterator tokens);Whole;;;Appends each of the {@code tokens} to {@code appendable}, separated by {@code delimiter}. <p> Each token will be converted to a {@link CharSequence} using {@link String#valueOf(Object)}, if it isn't a {@link CharSequence} already. Note that this implies that null tokens will be appended as the four-character string {@code "null"}.  @param the object to append the results to@param a string to append between every element, but not at the beginning or end@param objects to append @return the same Appendable instance that was passed in @throws if an IOException occurs;false
org.elasticsearch.common.inject.internal.Join;T join(T appendable, String delimiter, Object[] tokens);T join(T appendable, String keyValueSeparator, String entryDelimiter, Map map);@return;;;the same Appendable instance that was passed in;true
org.elasticsearch.common.inject.internal.Join;T join(T appendable, String delimiter, Object[] tokens);T join(T appendable, String keyValueSeparator, String entryDelimiter, Map map);@param;T appendable;T appendable;the object to append the results to;true
org.elasticsearch.common.inject.internal.Join;T join(T appendable, String delimiter, Object firstToken, Object otherTokens);T join(T appendable, String delimiter, Iterator tokens);Free text;;;Appends each of the {@code tokens} to {@code appendable}, separated by {@code delimiter}. <p> Each token will be converted to a {@link CharSequence} using {@link String#valueOf(Object)}, if it isn't a {@link CharSequence} already. Note that this implies that null tokens will be appended as the four-character string {@code "null"}. ;true
org.elasticsearch.common.inject.internal.Join;T join(T appendable, String delimiter, Object firstToken, Object otherTokens);T join(T appendable, String delimiter, Iterator tokens);@return;;;the same Appendable instance that was passed in;true
org.elasticsearch.common.inject.internal.Join;T join(T appendable, String delimiter, Object firstToken, Object otherTokens);T join(T appendable, String delimiter, Iterator tokens);@param;T appendable;T appendable;the object to append the results to;true
org.elasticsearch.common.inject.internal.Join;T join(T appendable, String delimiter, Object firstToken, Object otherTokens);T join(T appendable, String delimiter, Iterator tokens);@param;String delimiter;String delimiter;a string to append between every element, but not at the beginning or end;true
org.elasticsearch.common.inject.internal.Join;T join(T appendable, String delimiter, Object firstToken, Object otherTokens);T join(T appendable, String delimiter, Iterator tokens);@throws;;;if an IOException occurs;true
org.elasticsearch.common.inject.internal.Join;T join(T appendable, String delimiter, Object firstToken, Object otherTokens);T join(T appendable, String keyValueSeparator, String entryDelimiter, Map map);@return;;;the same Appendable instance that was passed in;true
org.elasticsearch.common.inject.internal.Join;T join(T appendable, String delimiter, Object firstToken, Object otherTokens);T join(T appendable, String keyValueSeparator, String entryDelimiter, Map map);@param;T appendable;T appendable;the object to append the results to;true
org.elasticsearch.common.inject.internal.Join;T join(T appendable, String delimiter, Iterator tokens);T join(T appendable, String keyValueSeparator, String entryDelimiter, Map map);@return;;;the same Appendable instance that was passed in;true
org.elasticsearch.common.inject.internal.Join;T join(T appendable, String delimiter, Iterator tokens);T join(T appendable, String keyValueSeparator, String entryDelimiter, Map map);@param;T appendable;T appendable;the object to append the results to;true
org.elasticsearch.common.inject.internal.AbstractBindingBuilder;BindingImpl annotatedWithInternal(Class annotationType);BindingImpl annotatedWithInternal(Annotation annotation);Whole;;;Sets the binding to a copy with the specified annotation on the bound key    ;false
org.elasticsearch.common.inject.Injector;MembersInjector getMembersInjector(TypeLiteral typeLiteral);MembersInjector getMembersInjector(Class type);@param;TypeLiteral<T> typeLiteral;Class<T> type;type to get members injector for;true
org.elasticsearch.common.inject.Injector;Provider getProvider(Key key);Provider getProvider(Class type);@throws;;;if this injector cannot find or create the provider.;true
org.elasticsearch.common.inject.Injector;Provider getProvider(Key key);T getInstance(Key key);@throws;;;if this injector cannot find or create the provider.;true
org.elasticsearch.common.inject.Injector;Provider getProvider(Key key);T getInstance(Class type);@throws;;;if this injector cannot find or create the provider.;true
org.elasticsearch.common.inject.Injector;Provider getProvider(Class type);T getInstance(Key key);@throws;;;if this injector cannot find or create the provider.;true
org.elasticsearch.common.inject.Injector;Provider getProvider(Class type);T getInstance(Class type);@throws;;;if this injector cannot find or create the provider.;true
org.elasticsearch.common.inject.Injector;T getInstance(Key key);T getInstance(Class type);@throws;;;if this injector cannot find or create the provider.;true
org.elasticsearch.common.inject.Injector;T getInstance(Key key);T getInstance(Class type);@throws;;;if there was a runtime failure while providing an instance.;true
org.elasticsearch.common.inject.matcher.Matchers;Matcher annotatedWith(Class annotationType);Matcher annotatedWith(Annotation annotation);Whole;;;Returns a matcher which matches elements (methods, classes, etc.) with a given annotation.    ;false
org.elasticsearch.common.inject.spi.TypeEncounter;MembersInjector getMembersInjector(TypeLiteral typeLiteral);MembersInjector getMembersInjector(Class type);Whole;;;Returns the members injector used to inject dependencies into methods and fields on instances of the given type {@code T}. The returned members injector will not be valid until the main injector has been created. The members injector will throw an {@code IllegalStateException} if you try to use it beforehand.  @param type to get members injector for  ;false
org.elasticsearch.common.inject.spi.InjectionPoint;InjectionPoint forConstructorOf(TypeLiteral type);InjectionPoint forConstructorOf(Class type);Whole;;;Returns a new injection point for the injectable constructor of {@code type}.  @param a concrete type with exactly one constructor annotated {@literal @}Inject, or a no-arguments constructor that is not private.  @throws if there is no injectable constructor, more than one injectable constructor, or if parameters of the injectable constructor are malformed, such as a parameter with multiple binding annotations.;false
org.elasticsearch.common.inject.spi.InjectionPoint;Set forStaticMethodsAndFields(TypeLiteral type);Set forStaticMethodsAndFields(Class type);Whole;;;Returns all static method and field injection points on {@code type}.   @return a possibly empty set of injection points. The set has a specified iteration order. All fields are returned and then all methods. Within the fields, supertype fields are returned before subtype fields. Similarly, supertype methods are returned before subtype methods. @throws if there is a malformed injection point on type, such as a field with multiple binding annotations. The exception's ConfigurationException#getPartialValue() partial value is a Set<InjectionPoint> of the valid injection points.;false
org.elasticsearch.common.inject.spi.InjectionPoint;Set forStaticMethodsAndFields(TypeLiteral type);Set forInstanceMethodsAndFields(TypeLiteral type);@return;;;a possibly empty set of injection points. The set has a specified iteration order. All fields are returned and then all methods. Within the fields, supertype fields are returned before subtype fields. Similarly, supertype methods are returned before subtype methods.;false
org.elasticsearch.common.inject.spi.InjectionPoint;Set forStaticMethodsAndFields(TypeLiteral type);Set forInstanceMethodsAndFields(TypeLiteral type);@throws;;;if there is a malformed injection point on type, such as a field with multiple binding annotations. The exception's ConfigurationException#getPartialValue() partial value is a Set<InjectionPoint> of the valid injection points.;true
org.elasticsearch.common.inject.spi.InjectionPoint;Set forStaticMethodsAndFields(TypeLiteral type);Set forInstanceMethodsAndFields(Class type);@return;;;a possibly empty set of injection points. The set has a specified iteration order. All fields are returned and then all methods. Within the fields, supertype fields are returned before subtype fields. Similarly, supertype methods are returned before subtype methods.;false
org.elasticsearch.common.inject.spi.InjectionPoint;Set forStaticMethodsAndFields(TypeLiteral type);Set forInstanceMethodsAndFields(Class type);@throws;;;if there is a malformed injection point on type, such as a field with multiple binding annotations. The exception's ConfigurationException#getPartialValue() partial value is a Set<InjectionPoint> of the valid injection points.;true
org.elasticsearch.common.inject.spi.InjectionPoint;Set forStaticMethodsAndFields(Class type);Set forInstanceMethodsAndFields(TypeLiteral type);@return;;;a possibly empty set of injection points. The set has a specified iteration order. All fields are returned and then all methods. Within the fields, supertype fields are returned before subtype fields. Similarly, supertype methods are returned before subtype methods.;false
org.elasticsearch.common.inject.spi.InjectionPoint;Set forStaticMethodsAndFields(Class type);Set forInstanceMethodsAndFields(TypeLiteral type);@throws;;;if there is a malformed injection point on type, such as a field with multiple binding annotations. The exception's ConfigurationException#getPartialValue() partial value is a Set<InjectionPoint> of the valid injection points.;true
org.elasticsearch.common.inject.spi.InjectionPoint;Set forStaticMethodsAndFields(Class type);Set forInstanceMethodsAndFields(Class type);@return;;;a possibly empty set of injection points. The set has a specified iteration order. All fields are returned and then all methods. Within the fields, supertype fields are returned before subtype fields. Similarly, supertype methods are returned before subtype methods.;false
org.elasticsearch.common.inject.spi.InjectionPoint;Set forStaticMethodsAndFields(Class type);Set forInstanceMethodsAndFields(Class type);@throws;;;if there is a malformed injection point on type, such as a field with multiple binding annotations. The exception's ConfigurationException#getPartialValue() partial value is a Set<InjectionPoint> of the valid injection points.;true
org.elasticsearch.common.inject.spi.InjectionPoint;Set forInstanceMethodsAndFields(TypeLiteral type);Set forInstanceMethodsAndFields(Class type);Whole;;;Returns all instance method and field injection points on {@code type}.   @return a possibly empty set of injection points. The set has a specified iteration order. All fields are returned and then all methods. Within the fields, supertype fields are returned before subtype fields. Similarly, supertype methods are returned before subtype methods. @throws if there is a malformed injection point on type, such as a field with multiple binding annotations. The exception's ConfigurationException#getPartialValue() partial value is a Set<InjectionPoint> of the valid injection points.;false
org.elasticsearch.common.inject.spi.Elements;List getElements(Module modules);List getElements(Iterable modules);Whole;;;Records the elements executed by {@code modules}.    ;false
org.elasticsearch.common.inject.spi.Elements;List getElements(Module modules);List getElements(Stage stage, Iterable modules);Whole;;;Records the elements executed by {@code modules}.    ;false
org.elasticsearch.common.inject.spi.Elements;List getElements(Iterable modules);List getElements(Stage stage, Iterable modules);Whole;;;Records the elements executed by {@code modules}.    ;false
org.elasticsearch.common.inject.TypeLiteral;List getParameterTypes(Member methodOrConstructor);List getExceptionTypes(Member methodOrConstructor);@param;Member methodOrConstructor;Member methodOrConstructor;a method or constructor defined by this or any supertype.;true
org.elasticsearch.common.inject.Key;Key get(Class type);Key get(Type type);Whole;;;Gets a key for an injection type.    ;false
org.elasticsearch.common.inject.Key;Key get(Class type);Key get(TypeLiteral typeLiteral);Whole;;;Gets a key for an injection type.    ;false
org.elasticsearch.common.inject.Key;Key get(Class type, Class annotationType);Key get(Type type, Class annotationType);Whole;;;Gets a key for an injection type and an annotation type.    ;false
org.elasticsearch.common.inject.Key;Key get(Class type, Class annotationType);Key get(TypeLiteral typeLiteral, Class annotationType);Whole;;;Gets a key for an injection type and an annotation type.    ;false
org.elasticsearch.common.inject.Key;Key get(Class type, Annotation annotation);Key get(Type type, Annotation annotation);Whole;;;Gets a key for an injection type and an annotation.    ;false
org.elasticsearch.common.inject.Key;Key get(Class type, Annotation annotation);Key get(TypeLiteral typeLiteral, Annotation annotation);Whole;;;Gets a key for an injection type and an annotation.    ;false
org.elasticsearch.common.inject.Key;Key get(Type type);Key get(TypeLiteral typeLiteral);Whole;;;Gets a key for an injection type.    ;false
org.elasticsearch.common.inject.Key;Key get(Type type, Class annotationType);Key get(TypeLiteral typeLiteral, Class annotationType);Whole;;;Gets a key for an injection type and an annotation type.    ;false
org.elasticsearch.common.inject.Key;Key get(Type type, Annotation annotation);Key get(TypeLiteral typeLiteral, Annotation annotation);Whole;;;Gets a key for an injection type and an annotation.    ;false
org.elasticsearch.common.inject.Key;Key ofType(Class type);Key ofType(Type type);Whole;;;Returns a new key of the specified type with the same annotation as this key.    ;false
org.elasticsearch.common.inject.Key;Key ofType(Class type);Key ofType(TypeLiteral type);Whole;;;Returns a new key of the specified type with the same annotation as this key.    ;false
org.elasticsearch.common.inject.Key;Key ofType(Type type);Key ofType(TypeLiteral type);Whole;;;Returns a new key of the specified type with the same annotation as this key.    ;false
org.elasticsearch.common.inject.Binding;V acceptTargetVisitor(BindingTargetVisitor visitor);V acceptScopingVisitor(BindingScopingVisitor visitor);@param;BindingTargetVisitor<? super T,V> visitor;BindingScopingVisitor<V> visitor;to call back on;true
org.elasticsearch.common.blobstore.BlobContainer;InputStream readBlob(String blobName);void deleteBlob(String blobName);@throws;;;if the blob does not exist;true
org.elasticsearch.common.blobstore.BlobContainer;Map listBlobs();Map listBlobsByPrefix(String blobNamePrefix);@throws;;;if there were any failures in reading from the blob container.;true
org.elasticsearch.common.Strings;List splitSmart(String s, String separator, boolean decode);Set splitStringToSet(String s, char c);@param;String s;String s;the string to split;true
org.elasticsearch.common.Strings;List splitSmart(String s, String separator, boolean decode);String[] split(String toSplit, String delimiter);@param;String s;String toSplit;the string to split;false
org.elasticsearch.common.Strings;boolean hasLength(CharSequence str);boolean isEmpty(CharSequence str);@param;CharSequence str;CharSequence str;the CharSequence to check (may be null);true
org.elasticsearch.common.Strings;boolean hasLength(CharSequence str);boolean hasText(CharSequence str);@param;CharSequence str;CharSequence str;the CharSequence to check (may be null);true
org.elasticsearch.common.Strings;boolean hasLength(String str);boolean hasText(String str);@param;String str;String str;the String to check (may be null);true
org.elasticsearch.common.Strings;boolean isEmpty(CharSequence str);boolean hasText(CharSequence str);@param;CharSequence str;CharSequence str;the CharSequence to check (may be null);true
org.elasticsearch.common.Strings;String delete(String inString, String pattern);String deleteAny(String inString, String charsToDelete);@return;;;the resulting String;false
org.elasticsearch.common.Strings;String delete(String inString, String pattern);String deleteAny(String inString, String charsToDelete);@param;String inString;String inString;the original String;true
org.elasticsearch.common.Strings;Set splitStringToSet(String s, char c);String[] split(String toSplit, String delimiter);@param;String s;String toSplit;the string to split;false
org.elasticsearch.common.Strings;String[] tokenizeToStringArray(String str, String delimiters);String[] tokenizeToStringArray(String str, String delimiters, boolean trimTokens, boolean ignoreEmptyTokens);@param;String str;String str;the String to tokenize;true
org.elasticsearch.common.Strings;String[] delimitedListToStringArray(String str, String delimiter);String[] delimitedListToStringArray(String str, String delimiter, String charsToDelete);Free text;;;Take a String which is a delimited list and convert it to a String array. <p>A single delimiter can consists of more than one character: It will still be considered as single delimiter string, rather than as bunch of potential delimiter characters - in contrast to <code>tokenizeToStringArray</code>. ;true
org.elasticsearch.common.Strings;String[] delimitedListToStringArray(String str, String delimiter);String[] delimitedListToStringArray(String str, String delimiter, String charsToDelete);@return;;;an array of the tokens in the list;true
org.elasticsearch.common.Strings;String[] delimitedListToStringArray(String str, String delimiter);String[] delimitedListToStringArray(String str, String delimiter, String charsToDelete);@param;String str;String str;the input String;true
org.elasticsearch.common.Strings;String[] delimitedListToStringArray(String str, String delimiter);String[] delimitedListToStringArray(String str, String delimiter, String charsToDelete);@param;String delimiter;String delimiter;the delimiter between elements (this is a single delimiter, rather than a bunch individual delimiter characters);true
org.elasticsearch.common.Strings;String[] delimitedListToStringArray(String str, String delimiter);String[] commaDelimitedListToStringArray(String str);@param;String str;String str;the input String;true
org.elasticsearch.common.Strings;String[] delimitedListToStringArray(String str, String delimiter);Set commaDelimitedListToSet(String str);@param;String str;String str;the input String;true
org.elasticsearch.common.Strings;String[] delimitedListToStringArray(String str, String delimiter, String charsToDelete);String[] commaDelimitedListToStringArray(String str);@param;String str;String str;the input String;true
org.elasticsearch.common.Strings;String[] delimitedListToStringArray(String str, String delimiter, String charsToDelete);Set commaDelimitedListToSet(String str);@param;String str;String str;the input String;true
org.elasticsearch.common.Strings;String[] commaDelimitedListToStringArray(String str);Set commaDelimitedListToSet(String str);@param;String str;String str;the input String;true
org.elasticsearch.common.Strings;String collectionToDelimitedString(Iterable coll, String delim, String prefix, String suffix);String collectionToDelimitedString(Iterable coll, String delim);Free text;;;Convenience method to return a Collection as a delimited (e.g. CSV) String. E.g. useful for <code>toString()</code> implementations. ;true
org.elasticsearch.common.Strings;String collectionToDelimitedString(Iterable coll, String delim, String prefix, String suffix);String collectionToDelimitedString(Iterable coll, String delim);@return;;;the delimited String;true
org.elasticsearch.common.Strings;String collectionToDelimitedString(Iterable coll, String delim, String prefix, String suffix);String collectionToDelimitedString(Iterable coll, String delim);@param;Iterable<?> coll;Iterable<?> coll;the Collection to display;true
org.elasticsearch.common.Strings;String collectionToDelimitedString(Iterable coll, String delim, String prefix, String suffix);String collectionToDelimitedString(Iterable coll, String delim);@param;String delim;String delim;the delimiter to use (probably a ",");true
org.elasticsearch.common.Strings;String collectionToDelimitedString(Iterable coll, String delim, String prefix, String suffix);String collectionToCommaDelimitedString(Iterable coll);@return;;;the delimited String;false
org.elasticsearch.common.Strings;String collectionToDelimitedString(Iterable coll, String delim, String prefix, String suffix);String collectionToCommaDelimitedString(Iterable coll);@param;Iterable<?> coll;Iterable<?> coll;the Collection to display;true
org.elasticsearch.common.Strings;String collectionToDelimitedString(Iterable coll, String delim, String prefix, String suffix);String arrayToDelimitedString(Object[] arr, String delim);@return;;;the delimited String;false
org.elasticsearch.common.Strings;String collectionToDelimitedString(Iterable coll, String delim, String prefix, String suffix);String arrayToDelimitedString(Object[] arr, String delim);@param;String delim;String delim;the delimiter to use (probably a ",");true
org.elasticsearch.common.Strings;String collectionToDelimitedString(Iterable coll, String delim, String prefix, String suffix);String arrayToCommaDelimitedString(Object[] arr);@return;;;the delimited String;false
org.elasticsearch.common.Strings;String collectionToDelimitedString(Iterable coll, String delim);String collectionToCommaDelimitedString(Iterable coll);@return;;;the delimited String;false
org.elasticsearch.common.Strings;String collectionToDelimitedString(Iterable coll, String delim);String collectionToCommaDelimitedString(Iterable coll);@param;Iterable<?> coll;Iterable<?> coll;the Collection to display;true
org.elasticsearch.common.Strings;String collectionToDelimitedString(Iterable coll, String delim);String arrayToDelimitedString(Object[] arr, String delim);@return;;;the delimited String;false
org.elasticsearch.common.Strings;String collectionToDelimitedString(Iterable coll, String delim);String arrayToDelimitedString(Object[] arr, String delim);@param;String delim;String delim;the delimiter to use (probably a ",");true
org.elasticsearch.common.Strings;String collectionToDelimitedString(Iterable coll, String delim);String arrayToCommaDelimitedString(Object[] arr);@return;;;the delimited String;false
org.elasticsearch.common.Strings;String collectionToCommaDelimitedString(Iterable coll);String arrayToDelimitedString(Object[] arr, String delim);@return;;;the delimited String;false
org.elasticsearch.common.Strings;String collectionToCommaDelimitedString(Iterable coll);String arrayToCommaDelimitedString(Object[] arr);@return;;;the delimited String;false
org.elasticsearch.common.Strings;String arrayToDelimitedString(Object[] arr, String delim);String arrayToCommaDelimitedString(Object[] arr);@return;;;the delimited String;false
org.elasticsearch.common.Strings;String arrayToDelimitedString(Object[] arr, String delim);String arrayToCommaDelimitedString(Object[] arr);@param;Object[] arr;Object[] arr;the array to display;true
org.elasticsearch.common.network.NetworkAddress;String format(InetAddress address);String format(InetSocketAddress address);@return;;;formatted string;true
org.elasticsearch.common.io.stream.StreamOutput;void writeBytes(byte[] b);void writeBytes(byte[] b, int length);Free text;;;Writes an array of bytes. ;true
org.elasticsearch.common.io.stream.StreamOutput;void writeBytes(byte[] b);void writeBytes(byte[] b, int length);@param;byte[] b;byte[] b;the bytes to write;true
org.elasticsearch.common.io.stream.StreamOutput;void writeBytes(byte[] b);void writeBytes(byte[] b, int offset, int length);Free text;;;Writes an array of bytes. ;true
org.elasticsearch.common.io.stream.StreamOutput;void writeBytes(byte[] b);void writeBytes(byte[] b, int offset, int length);@param;byte[] b;byte[] b;the bytes to write;true
org.elasticsearch.common.io.stream.StreamOutput;void writeBytes(byte[] b);void writeByteArray(byte[] b);Whole;;;Writes an array of bytes.  @param the bytes to write  ;false
org.elasticsearch.common.io.stream.StreamOutput;void writeBytes(byte[] b, int length);void writeBytes(byte[] b, int offset, int length);Free text;;;Writes an array of bytes. ;true
org.elasticsearch.common.io.stream.StreamOutput;void writeBytes(byte[] b, int length);void writeBytes(byte[] b, int offset, int length);@param;byte[] b;byte[] b;the bytes to write;true
org.elasticsearch.common.io.stream.StreamOutput;void writeBytes(byte[] b, int length);void writeBytes(byte[] b, int offset, int length);@param;int length;int length;the number of bytes to write;true
org.elasticsearch.common.io.stream.StreamOutput;void writeBytes(byte[] b, int length);void writeByteArray(byte[] b);Free text;;;Writes an array of bytes. ;false
org.elasticsearch.common.io.stream.StreamOutput;void writeBytes(byte[] b, int length);void writeByteArray(byte[] b);@param;byte[] b;byte[] b;the bytes to write;true
org.elasticsearch.common.io.stream.StreamOutput;void writeBytes(byte[] b, int offset, int length);void writeByteArray(byte[] b);Free text;;;Writes an array of bytes. ;false
org.elasticsearch.common.io.stream.StreamOutput;void writeBytes(byte[] b, int offset, int length);void writeByteArray(byte[] b);@param;byte[] b;byte[] b;the bytes to write;true
org.elasticsearch.common.io.stream.StreamOutput;void writeMapOfLists(Map map, Writer keyWriter, Writer valueWriter);void writeMap(Map map, Writer keyWriter, Writer valueWriter);@param;Writer<K> keyWriter;Writer<K> keyWriter;The key writer;true
org.elasticsearch.common.io.stream.StreamOutput;void writeMapOfLists(Map map, Writer keyWriter, Writer valueWriter);void writeMap(Map map, Writer keyWriter, Writer valueWriter);@param;Writer<V> valueWriter;Writer<V> valueWriter;The value writer;true
org.elasticsearch.common.io.stream.InputStreamStreamInput; InputStreamStreamInput(InputStream is); InputStreamStreamInput(InputStream is, long sizeLimit);@param;InputStream is;InputStream is;the input stream to wrap;true
org.elasticsearch.common.io.stream.StreamInput;BytesReference readBytesReference();BytesReference readBytesReference(int length);Whole;;;Reads a bytes reference from this stream, might hold an actual reference to the underlying bytes of the stream.    ;false
org.elasticsearch.common.io.stream.StreamInput;Map readMapOfLists(Writeable.Reader keyReader, Writeable.Reader valueReader);List readStreamableList(Supplier constructor);@return;;;Never null.;false
org.elasticsearch.common.io.UTF8StreamWriter;void write(char c);void write(int code);@throws;;;if an I/O error occurs.;true
org.elasticsearch.common.io.UTF8StreamWriter;void write(char c);void write(char[] cbuf, int off, int len);@throws;;;if an I/O error occurs.;true
org.elasticsearch.common.io.UTF8StreamWriter;void write(char c);void flush();@throws;;;if an I/O error occurs.;true
org.elasticsearch.common.io.UTF8StreamWriter;void write(int code);void write(char[] cbuf, int off, int len);@throws;;;if an I/O error occurs.;true
org.elasticsearch.common.io.UTF8StreamWriter;void write(int code);void flush();@throws;;;if an I/O error occurs.;true
org.elasticsearch.common.io.UTF8StreamWriter;void write(char[] cbuf, int off, int len);void write(String str, int off, int len);@param;int off;int off;the offset from which to start writing characters.;true
org.elasticsearch.common.io.UTF8StreamWriter;void write(char[] cbuf, int off, int len);void write(String str, int off, int len);@param;int len;int len;the number of characters to write.;true
org.elasticsearch.common.io.UTF8StreamWriter;void write(char[] cbuf, int off, int len);void flush();@throws;;;if an I/O error occurs.;true
org.elasticsearch.common.io.UTF8StreamWriter;void write(String str, int off, int len);void write(CharSequence csq);@throws;;;if an I/O error occurs;true
org.elasticsearch.common.io.UTF8StreamWriter;void write(String str, int off, int len);void close();@throws;;;if an I/O error occurs;true
org.elasticsearch.common.io.UTF8StreamWriter;void write(CharSequence csq);void close();@throws;;;if an I/O error occurs;true
org.elasticsearch.common.io.FastCharArrayWriter;FastCharArrayWriter append(CharSequence csq);FastCharArrayWriter append(CharSequence csq, int start, int end);@return;;;This writer;true
org.elasticsearch.common.io.FastCharArrayWriter;FastCharArrayWriter append(CharSequence csq);FastCharArrayWriter append(char c);@return;;;This writer;true
org.elasticsearch.common.io.FastCharArrayWriter;FastCharArrayWriter append(CharSequence csq, int start, int end);FastCharArrayWriter append(char c);@return;;;This writer;true
org.elasticsearch.common.io.Channels;void readFromFileChannelWithEofException(FileChannel channel, long channelPosition, byte[] dest, int destOffset, int length);int readFromFileChannel(FileChannel channel, long channelPosition, byte[] dest, int destOffset, int length);@param;FileChannel channel;FileChannel channel;channel to read from;true
org.elasticsearch.common.io.Channels;void readFromFileChannelWithEofException(FileChannel channel, long channelPosition, byte[] dest, int destOffset, int length);int readFromFileChannel(FileChannel channel, long channelPosition, byte[] dest, int destOffset, int length);@param;long channelPosition;long channelPosition;position to read from;true
org.elasticsearch.common.io.Channels;void readFromFileChannelWithEofException(FileChannel channel, long channelPosition, byte[] dest, int destOffset, int length);int readFromFileChannel(FileChannel channel, long channelPosition, byte[] dest, int destOffset, int length);@param;byte[] dest;byte[] dest;destination byte array to put data in;true
org.elasticsearch.common.io.Channels;void readFromFileChannelWithEofException(FileChannel channel, long channelPosition, byte[] dest, int destOffset, int length);int readFromFileChannel(FileChannel channel, long channelPosition, byte[] dest, int destOffset, int length);@param;int destOffset;int destOffset;offset in dest to read into;true
org.elasticsearch.common.io.Channels;void readFromFileChannelWithEofException(FileChannel channel, long channelPosition, byte[] dest, int destOffset, int length);int readFromFileChannel(FileChannel channel, long channelPosition, byte[] dest, int destOffset, int length);@param;int length;int length;number of bytes to read;true
org.elasticsearch.common.io.Channels;void readFromFileChannelWithEofException(FileChannel channel, long channelPosition, byte[] dest, int destOffset, int length);void readFromFileChannelWithEofException(FileChannel channel, long channelPosition, ByteBuffer dest);@param;FileChannel channel;FileChannel channel;channel to read from;true
org.elasticsearch.common.io.Channels;void readFromFileChannelWithEofException(FileChannel channel, long channelPosition, byte[] dest, int destOffset, int length);void readFromFileChannelWithEofException(FileChannel channel, long channelPosition, ByteBuffer dest);@param;long channelPosition;long channelPosition;position to read from;true
org.elasticsearch.common.io.Channels;void readFromFileChannelWithEofException(FileChannel channel, long channelPosition, byte[] dest, int destOffset, int length);int readFromFileChannel(FileChannel channel, long channelPosition, ByteBuffer dest);@param;FileChannel channel;FileChannel channel;channel to read from;true
org.elasticsearch.common.io.Channels;void readFromFileChannelWithEofException(FileChannel channel, long channelPosition, byte[] dest, int destOffset, int length);int readFromFileChannel(FileChannel channel, long channelPosition, ByteBuffer dest);@param;long channelPosition;long channelPosition;position to read from;true
org.elasticsearch.common.io.Channels;int readFromFileChannel(FileChannel channel, long channelPosition, byte[] dest, int destOffset, int length);void readFromFileChannelWithEofException(FileChannel channel, long channelPosition, ByteBuffer dest);@param;FileChannel channel;FileChannel channel;channel to read from;true
org.elasticsearch.common.io.Channels;int readFromFileChannel(FileChannel channel, long channelPosition, byte[] dest, int destOffset, int length);void readFromFileChannelWithEofException(FileChannel channel, long channelPosition, ByteBuffer dest);@param;long channelPosition;long channelPosition;position to read from;true
org.elasticsearch.common.io.Channels;int readFromFileChannel(FileChannel channel, long channelPosition, byte[] dest, int destOffset, int length);int readFromFileChannel(FileChannel channel, long channelPosition, ByteBuffer dest);@return;;;total bytes read or -1 if an attempt was made to read past EOF. The method always tries to read all the bytes that will fit in the destination byte buffer.;true
org.elasticsearch.common.io.Channels;int readFromFileChannel(FileChannel channel, long channelPosition, byte[] dest, int destOffset, int length);int readFromFileChannel(FileChannel channel, long channelPosition, ByteBuffer dest);@param;FileChannel channel;FileChannel channel;channel to read from;true
org.elasticsearch.common.io.Channels;int readFromFileChannel(FileChannel channel, long channelPosition, byte[] dest, int destOffset, int length);int readFromFileChannel(FileChannel channel, long channelPosition, ByteBuffer dest);@param;long channelPosition;long channelPosition;position to read from;true
org.elasticsearch.common.io.Channels;void readFromFileChannelWithEofException(FileChannel channel, long channelPosition, ByteBuffer dest);int readFromFileChannel(FileChannel channel, long channelPosition, ByteBuffer dest);@param;FileChannel channel;FileChannel channel;channel to read from;true
org.elasticsearch.common.io.Channels;void readFromFileChannelWithEofException(FileChannel channel, long channelPosition, ByteBuffer dest);int readFromFileChannel(FileChannel channel, long channelPosition, ByteBuffer dest);@param;long channelPosition;long channelPosition;position to read from;true
org.elasticsearch.common.io.Channels;void readFromFileChannelWithEofException(FileChannel channel, long channelPosition, ByteBuffer dest);int readFromFileChannel(FileChannel channel, long channelPosition, ByteBuffer dest);@param;ByteBuffer dest;ByteBuffer dest;destination java.nio.ByteBuffer to put data in;true
org.elasticsearch.common.io.Channels;void writeToChannel(byte[] source, WritableByteChannel channel);void writeToChannel(byte[] source, int offset, int length, WritableByteChannel channel);Free text;;;Writes part of a byte array to a {@link java.nio.channels.WritableByteChannel} ;true
org.elasticsearch.common.io.Channels;void writeToChannel(byte[] source, WritableByteChannel channel);void writeToChannel(byte[] source, int offset, int length, WritableByteChannel channel);@param;byte[] source;byte[] source;byte array to copy from;true
org.elasticsearch.common.io.Channels;void writeToChannel(byte[] source, WritableByteChannel channel);void writeToChannel(byte[] source, int offset, int length, WritableByteChannel channel);@param;WritableByteChannel channel;WritableByteChannel channel;target WritableByteChannel;true
org.elasticsearch.common.io.FastCharArrayReader; FastCharArrayReader(char[] buf); FastCharArrayReader(char[] buf, int offset, int length);@param;char[] buf;char[] buf;Input buffer (not copied);true
org.elasticsearch.common.io.FastCharArrayReader;int read();int read(char[] b, int off, int len);@throws;;;If an I/O error occurs;true
org.elasticsearch.common.io.FastCharArrayReader;int read();boolean ready();@throws;;;If an I/O error occurs;true
org.elasticsearch.common.io.FastCharArrayReader;int read();void mark(int readAheadLimit);@throws;;;If an I/O error occurs;true
org.elasticsearch.common.io.FastCharArrayReader;int read();void reset();@throws;;;If an I/O error occurs;true
org.elasticsearch.common.io.FastCharArrayReader;int read(char[] b, int off, int len);boolean ready();@throws;;;If an I/O error occurs;true
org.elasticsearch.common.io.FastCharArrayReader;int read(char[] b, int off, int len);void mark(int readAheadLimit);@throws;;;If an I/O error occurs;true
org.elasticsearch.common.io.FastCharArrayReader;int read(char[] b, int off, int len);void reset();@throws;;;If an I/O error occurs;true
org.elasticsearch.common.io.FastCharArrayReader;boolean ready();void mark(int readAheadLimit);@throws;;;If an I/O error occurs;true
org.elasticsearch.common.io.FastCharArrayReader;boolean ready();void reset();@throws;;;If an I/O error occurs;true
org.elasticsearch.common.io.FastCharArrayReader;void mark(int readAheadLimit);void reset();@throws;;;If an I/O error occurs;true
org.elasticsearch.common.io.FastStringReader;int read();int read(char[] cbuf, int off, int len);@throws;;;If an I/O error occurs;true
org.elasticsearch.common.io.FastStringReader;int read();long skip(long ns);@throws;;;If an I/O error occurs;true
org.elasticsearch.common.io.FastStringReader;int read();void mark(int readAheadLimit);@throws;;;If an I/O error occurs;true
org.elasticsearch.common.io.FastStringReader;int read();void reset();@throws;;;If an I/O error occurs;true
org.elasticsearch.common.io.FastStringReader;int read(char[] cbuf, int off, int len);long skip(long ns);@throws;;;If an I/O error occurs;true
org.elasticsearch.common.io.FastStringReader;int read(char[] cbuf, int off, int len);void mark(int readAheadLimit);@throws;;;If an I/O error occurs;true
org.elasticsearch.common.io.FastStringReader;int read(char[] cbuf, int off, int len);void reset();@throws;;;If an I/O error occurs;true
org.elasticsearch.common.io.FastStringReader;long skip(long ns);void mark(int readAheadLimit);@throws;;;If an I/O error occurs;true
org.elasticsearch.common.io.FastStringReader;long skip(long ns);void reset();@throws;;;If an I/O error occurs;true
org.elasticsearch.common.io.FastStringReader;void mark(int readAheadLimit);void reset();@throws;;;If an I/O error occurs;true
org.elasticsearch.common.io.Streams;long copy(InputStream in, OutputStream out, byte[] buffer);void copy(byte[] in, OutputStream out);@throws;;;in case of I/O errors;true
org.elasticsearch.common.io.Streams;long copy(InputStream in, OutputStream out, byte[] buffer);int copy(Reader in, Writer out);@throws;;;in case of I/O errors;true
org.elasticsearch.common.io.Streams;long copy(InputStream in, OutputStream out, byte[] buffer);void copy(String in, Writer out);@throws;;;in case of I/O errors;true
org.elasticsearch.common.io.Streams;long copy(InputStream in, OutputStream out, byte[] buffer);String copyToString(Reader in);@throws;;;in case of I/O errors;true
org.elasticsearch.common.io.Streams;void copy(byte[] in, OutputStream out);int copy(Reader in, Writer out);@throws;;;in case of I/O errors;true
org.elasticsearch.common.io.Streams;void copy(byte[] in, OutputStream out);void copy(String in, Writer out);@throws;;;in case of I/O errors;true
org.elasticsearch.common.io.Streams;void copy(byte[] in, OutputStream out);String copyToString(Reader in);@throws;;;in case of I/O errors;true
org.elasticsearch.common.io.Streams;int copy(Reader in, Writer out);void copy(String in, Writer out);@param;Writer out;Writer out;the Writer to copy to;true
org.elasticsearch.common.io.Streams;int copy(Reader in, Writer out);void copy(String in, Writer out);@throws;;;in case of I/O errors;true
org.elasticsearch.common.io.Streams;int copy(Reader in, Writer out);String copyToString(Reader in);@throws;;;in case of I/O errors;true
org.elasticsearch.common.io.Streams;void copy(String in, Writer out);String copyToString(Reader in);@throws;;;in case of I/O errors;true
org.elasticsearch.common.geo.builders.CoordinateCollection;E coordinate(double longitude, double latitude);E coordinate(Coordinate coordinate);Free text;;;Add a new coordinate to the collection ;true
org.elasticsearch.common.geo.builders.CoordinateCollection;E coordinate(double longitude, double latitude);E coordinate(Coordinate coordinate);@return;;;this;true
org.elasticsearch.common.geo.builders.CoordinateCollection;E coordinate(double longitude, double latitude);E coordinates(Coordinate coordinates);@return;;;this;false
org.elasticsearch.common.geo.builders.CoordinateCollection;E coordinate(double longitude, double latitude);E coordinates(Collection coordinates);@return;;;this;false
org.elasticsearch.common.geo.builders.CoordinateCollection;E coordinate(Coordinate coordinate);E coordinates(Coordinate coordinates);@return;;;this;false
org.elasticsearch.common.geo.builders.CoordinateCollection;E coordinate(Coordinate coordinate);E coordinates(Collection coordinates);@return;;;this;false
org.elasticsearch.common.geo.builders.CoordinateCollection;E coordinates(Coordinate coordinates);E coordinates(Collection coordinates);@return;;;this;true
org.elasticsearch.common.geo.builders.CoordinateCollection;E coordinates(Coordinate coordinates);E coordinates(Collection coordinates);@param;Coordinate coordinates;Collection<? extends Coordinate> coordinates;array of Coordinates to add;true
org.elasticsearch.common.geo.builders.CircleBuilder;CircleBuilder center(Coordinate center);CircleBuilder center(double lon, double lat);@return;;;this;true
org.elasticsearch.common.geo.builders.CircleBuilder;CircleBuilder center(Coordinate center);CircleBuilder radius(String radius);@return;;;this;false
org.elasticsearch.common.geo.builders.CircleBuilder;CircleBuilder center(Coordinate center);CircleBuilder radius(Distance radius);@return;;;this;false
org.elasticsearch.common.geo.builders.CircleBuilder;CircleBuilder center(Coordinate center);CircleBuilder radius(double radius, String unit);@return;;;this;false
org.elasticsearch.common.geo.builders.CircleBuilder;CircleBuilder center(Coordinate center);CircleBuilder radius(double radius, DistanceUnit unit);@return;;;this;false
org.elasticsearch.common.geo.builders.CircleBuilder;CircleBuilder center(double lon, double lat);CircleBuilder radius(String radius);@return;;;this;false
org.elasticsearch.common.geo.builders.CircleBuilder;CircleBuilder center(double lon, double lat);CircleBuilder radius(Distance radius);@return;;;this;false
org.elasticsearch.common.geo.builders.CircleBuilder;CircleBuilder center(double lon, double lat);CircleBuilder radius(double radius, String unit);@return;;;this;false
org.elasticsearch.common.geo.builders.CircleBuilder;CircleBuilder center(double lon, double lat);CircleBuilder radius(double radius, DistanceUnit unit);@return;;;this;false
org.elasticsearch.common.geo.builders.CircleBuilder;CircleBuilder radius(String radius);CircleBuilder radius(Distance radius);@return;;;this;true
org.elasticsearch.common.geo.builders.CircleBuilder;CircleBuilder radius(String radius);CircleBuilder radius(double radius, String unit);@return;;;this;true
org.elasticsearch.common.geo.builders.CircleBuilder;CircleBuilder radius(String radius);CircleBuilder radius(double radius, DistanceUnit unit);@return;;;this;true
org.elasticsearch.common.geo.builders.CircleBuilder;CircleBuilder radius(Distance radius);CircleBuilder radius(double radius, String unit);Free text;;;Set the radius of the circle ;true
org.elasticsearch.common.geo.builders.CircleBuilder;CircleBuilder radius(Distance radius);CircleBuilder radius(double radius, String unit);@return;;;this;true
org.elasticsearch.common.geo.builders.CircleBuilder;CircleBuilder radius(Distance radius);CircleBuilder radius(double radius, DistanceUnit unit);Free text;;;Set the radius of the circle ;true
org.elasticsearch.common.geo.builders.CircleBuilder;CircleBuilder radius(Distance radius);CircleBuilder radius(double radius, DistanceUnit unit);@return;;;this;true
org.elasticsearch.common.geo.builders.CircleBuilder;CircleBuilder radius(double radius, String unit);CircleBuilder radius(double radius, DistanceUnit unit);Free text;;;Set the radius of the circle ;true
org.elasticsearch.common.geo.builders.CircleBuilder;CircleBuilder radius(double radius, String unit);CircleBuilder radius(double radius, DistanceUnit unit);@return;;;this;true
org.elasticsearch.common.geo.builders.CircleBuilder;CircleBuilder radius(double radius, String unit);CircleBuilder radius(double radius, DistanceUnit unit);@param;double radius;double radius;value of the circles radius;true
org.elasticsearch.common.geo.builders.PolygonBuilder;PolygonBuilder hole(LineStringBuilder hole);PolygonBuilder hole(LineStringBuilder hole, boolean coerce);Free text;;;Add a new hole to the polygon ;true
org.elasticsearch.common.geo.builders.PolygonBuilder;PolygonBuilder hole(LineStringBuilder hole);PolygonBuilder hole(LineStringBuilder hole, boolean coerce);@return;;;this;true
org.elasticsearch.common.geo.builders.PolygonBuilder;PolygonBuilder hole(LineStringBuilder hole);PolygonBuilder hole(LineStringBuilder hole, boolean coerce);@param;LineStringBuilder hole;LineStringBuilder hole;linear ring defining the hole;true
org.elasticsearch.common.geo.builders.CoordinatesBuilder;CoordinatesBuilder coordinate(Coordinate coordinate);CoordinatesBuilder coordinate(double longitude, double latitude);Free text;;;Add a new coordinate to the collection ;true
org.elasticsearch.common.geo.builders.CoordinatesBuilder;CoordinatesBuilder coordinate(Coordinate coordinate);CoordinatesBuilder coordinate(double longitude, double latitude);@return;;;this;true
org.elasticsearch.common.geo.builders.CoordinatesBuilder;CoordinatesBuilder coordinate(Coordinate coordinate);CoordinatesBuilder coordinates(Coordinate coordinates);@return;;;this;false
org.elasticsearch.common.geo.builders.CoordinatesBuilder;CoordinatesBuilder coordinate(Coordinate coordinate);CoordinatesBuilder coordinates(Collection coordinates);@return;;;this;false
org.elasticsearch.common.geo.builders.CoordinatesBuilder;CoordinatesBuilder coordinate(double longitude, double latitude);CoordinatesBuilder coordinates(Coordinate coordinates);@return;;;this;false
org.elasticsearch.common.geo.builders.CoordinatesBuilder;CoordinatesBuilder coordinate(double longitude, double latitude);CoordinatesBuilder coordinates(Collection coordinates);@return;;;this;false
org.elasticsearch.common.geo.builders.CoordinatesBuilder;CoordinatesBuilder coordinates(Coordinate coordinates);CoordinatesBuilder coordinates(Collection coordinates);@return;;;this;true
org.elasticsearch.common.geo.builders.ShapeBuilder;ShapeBuilder parse(XContentParser parser);ShapeBuilder parse(XContentParser parser, GeoShapeFieldMapper geoDocMapper);Free text;;;Create a new {@link ShapeBuilder} from {@link XContent} ;true
org.elasticsearch.common.geo.builders.ShapeBuilder;ShapeBuilder parse(XContentParser parser);ShapeBuilder parse(XContentParser parser, GeoShapeFieldMapper geoDocMapper);@return;;;ShapeBuilder read from the parser or null if the parsers current token has been null;true
org.elasticsearch.common.geo.builders.ShapeBuilder;ShapeBuilder parse(XContentParser parser);ShapeBuilder parse(XContentParser parser, GeoShapeFieldMapper geoDocMapper);@param;XContentParser parser;XContentParser parser;parser to read the GeoShape from;true
org.elasticsearch.common.geo.builders.ShapeBuilder;ShapeBuilder parse(XContentParser parser);ShapeBuilder parse(XContentParser parser, GeoShapeFieldMapper geoDocMapper);@throws;;;if the input could not be read;true
org.elasticsearch.common.geo.builders.ShapeBuilders;PointBuilder newPoint(double longitude, double latitude);PointBuilder newPoint(Coordinate coordinate);@return;;;a new PointBuilder;true
org.elasticsearch.common.geo.builders.ShapeBuilders;LineStringBuilder newLineString(List list);LineStringBuilder newLineString(CoordinatesBuilder coordinates);Whole;;;Create a new lineString   @return a new LineStringBuilder ;false
org.elasticsearch.common.geo.builders.ShapeBuilders;PolygonBuilder newPolygon(List shell);PolygonBuilder newPolygon(CoordinatesBuilder shell);Whole;;;Create a new PolygonBuilder   @return a new PolygonBuilder ;false
org.elasticsearch.common.geo.builders.ShapeBuilders;MultiPolygonBuilder newMultiPolygon();MultiPolygonBuilder newMultiPolygon(ShapeBuilder.Orientation orientation);Whole;;;Create a new Collection of polygons   @return a new MultiPolygonBuilder ;false
org.elasticsearch.common.geo.GeoHashUtils;Rectangle bbox(String geohash);Collection neighbors(String geohash);@param;String geohash;String geohash;Geohash of the defined cell;true
org.elasticsearch.common.geo.GeoHashUtils;E addNeighbors(String geohash, E neighbors);E addNeighbors(String geohash, int length, E neighbors);Free text;;;Add all geohashes of the cells next to a given geohash to a list. ;true
org.elasticsearch.common.geo.GeoHashUtils;E addNeighbors(String geohash, E neighbors);E addNeighbors(String geohash, int length, E neighbors);@return;;;the given list;true
org.elasticsearch.common.geo.GeoHashUtils;E addNeighbors(String geohash, E neighbors);E addNeighbors(String geohash, int length, E neighbors);@param;String geohash;String geohash;Geohash of a specified cell;true
org.elasticsearch.common.geo.GeoHashUtils;E addNeighbors(String geohash, E neighbors);E addNeighbors(String geohash, int length, E neighbors);@param;E neighbors;E neighbors;list to add the neighbors to;true
org.elasticsearch.common.geo.GeoUtils;double geoHashCellWidth(int level);double quadTreeCellWidth(int level);@return;;;the width of cells at level in meters;false
org.elasticsearch.common.geo.GeoUtils;double geoHashCellWidth(int level);double geoHashCellHeight(int level);@param;int level;int level;geohash level must be greater or equal to zero;true
org.elasticsearch.common.geo.GeoUtils;double geoHashCellWidth(int level);double geoHashCellSize(int level);@param;int level;int level;geohash level must be greater or equal to zero;true
org.elasticsearch.common.geo.GeoUtils;double quadTreeCellWidth(int level);double quadTreeCellHeight(int level);@param;int level;int level;quadtree level must be greater or equal to zero;true
org.elasticsearch.common.geo.GeoUtils;double quadTreeCellWidth(int level);double quadTreeCellSize(int level);@param;int level;int level;quadtree level must be greater or equal to zero;true
org.elasticsearch.common.geo.GeoUtils;double geoHashCellHeight(int level);double quadTreeCellHeight(int level);@return;;;the height of cells at level in meters;false
org.elasticsearch.common.geo.GeoUtils;double geoHashCellHeight(int level);double geoHashCellSize(int level);@param;int level;int level;geohash level must be greater or equal to zero;true
org.elasticsearch.common.geo.GeoUtils;double quadTreeCellHeight(int level);double quadTreeCellSize(int level);@param;int level;int level;quadtree level must be greater or equal to zero;true
org.elasticsearch.common.geo.GeoUtils;double geoHashCellSize(int level);double quadTreeCellSize(int level);@return;;;the size of cells at level in meters;false
org.elasticsearch.common.geo.GeoUtils;int quadTreeLevelsForPrecision(double meters);int quadTreeLevelsForPrecision(String distance);@return;;;levels need to achieve precision;true
org.elasticsearch.common.geo.GeoUtils;int quadTreeLevelsForPrecision(double meters);int geoHashLevelsForPrecision(double meters);@return;;;levels need to achieve precision;false
org.elasticsearch.common.geo.GeoUtils;int quadTreeLevelsForPrecision(double meters);int geoHashLevelsForPrecision(String distance);@return;;;levels need to achieve precision;false
org.elasticsearch.common.geo.GeoUtils;int quadTreeLevelsForPrecision(String distance);int geoHashLevelsForPrecision(double meters);@return;;;levels need to achieve precision;false
org.elasticsearch.common.geo.GeoUtils;int quadTreeLevelsForPrecision(String distance);int geoHashLevelsForPrecision(String distance);@return;;;levels need to achieve precision;false
org.elasticsearch.common.geo.GeoUtils;int quadTreeLevelsForPrecision(String distance);int geoHashLevelsForPrecision(String distance);@param;String distance;String distance;Maximum size of cells as unit string (must greater or equal to zero);true
org.elasticsearch.common.geo.GeoUtils;int geoHashLevelsForPrecision(double meters);int geoHashLevelsForPrecision(String distance);Free text;;;Calculate the number of levels needed for a specific precision. GeoHash cells will not exceed the specified size (diagonal) of the precision. ;true
org.elasticsearch.common.geo.GeoUtils;int geoHashLevelsForPrecision(double meters);int geoHashLevelsForPrecision(String distance);@return;;;levels need to achieve precision;true
org.elasticsearch.common.geo.GeoUtils;void normalizePoint(GeoPoint point);void normalizePoint(GeoPoint point, boolean normLat, boolean normLon);@param;GeoPoint point;GeoPoint point;The point to normalize in-place.;true
org.elasticsearch.common.geo.GeoUtils;GeoPoint parseGeoPoint(XContentParser parser);GeoPoint parseGeoPoint(XContentParser parser, GeoPoint point);@return;;;new GeoPoint parsed from the parse;true
org.elasticsearch.common.geo.GeoUtils;GeoPoint parseGeoPoint(XContentParser parser);GeoPoint parseGeoPoint(XContentParser parser, GeoPoint point);@param;XContentParser parser;XContentParser parser;XContentParser to parse the value from;true
org.elasticsearch.common.regex.Regex;boolean simpleMatch(String pattern, String str);boolean simpleMatch(String[] patterns, String str);@param;String str;String str;the String to match;true
org.elasticsearch.common.Numbers;short bytesToShort(byte[] arr);int bytesToInt(byte[] arr);@return;;;The int converted;false
org.elasticsearch.common.Numbers;byte[] intToBytes(int val);byte[] shortToBytes(int val);Whole;;;Converts an int to a byte array.  @param The int to convert to a byte array @return The byte array converted ;false
org.elasticsearch.common.Numbers;byte[] intToBytes(int val);byte[] longToBytes(long val);@return;;;The byte array converted;false
org.elasticsearch.common.Numbers;byte[] intToBytes(int val);byte[] floatToBytes(float val);@return;;;The byte array converted;false
org.elasticsearch.common.Numbers;byte[] intToBytes(int val);byte[] doubleToBytes(double val);@return;;;The byte array converted;false
org.elasticsearch.common.Numbers;byte[] shortToBytes(int val);byte[] longToBytes(long val);@return;;;The byte array converted;false
org.elasticsearch.common.Numbers;byte[] shortToBytes(int val);byte[] floatToBytes(float val);@return;;;The byte array converted;false
org.elasticsearch.common.Numbers;byte[] shortToBytes(int val);byte[] doubleToBytes(double val);@return;;;The byte array converted;false
org.elasticsearch.common.Numbers;byte[] longToBytes(long val);byte[] floatToBytes(float val);@return;;;The byte array converted;false
org.elasticsearch.common.Numbers;byte[] longToBytes(long val);byte[] doubleToBytes(double val);@return;;;The byte array converted;false
org.elasticsearch.common.Numbers;byte[] floatToBytes(float val);byte[] doubleToBytes(double val);@return;;;The byte array converted;false
org.elasticsearch.common.logging.DeprecationLogger;void setThreadContext(ThreadContext threadContext);void removeThreadContext(ThreadContext threadContext);@param;ThreadContext threadContext;ThreadContext threadContext;The thread context owned by the ThreadPool (and implicitly a Node);true
org.elasticsearch.action.bulk.Retry;void withBackoff(BiConsumer consumer, BulkRequest bulkRequest, ActionListener listener, Settings settings);PlainActionFuture withBackoff(BiConsumer consumer, BulkRequest bulkRequest, Settings settings);@param;BiConsumer<BulkRequest,ActionListener<BulkResponse>> consumer;BiConsumer<BulkRequest,ActionListener<BulkResponse>> consumer;The consumer to which apply the request and listener;true
org.elasticsearch.action.bulk.Retry;void withBackoff(BiConsumer consumer, BulkRequest bulkRequest, ActionListener listener, Settings settings);PlainActionFuture withBackoff(BiConsumer consumer, BulkRequest bulkRequest, Settings settings);@param;BulkRequest bulkRequest;BulkRequest bulkRequest;The bulk request that should be executed.;true
org.elasticsearch.action.bulk.Retry;void withBackoff(BiConsumer consumer, BulkRequest bulkRequest, ActionListener listener, Settings settings);PlainActionFuture withBackoff(BiConsumer consumer, BulkRequest bulkRequest, Settings settings);@param;Settings settings;Settings settings;settings;true
org.elasticsearch.action.bulk.BulkRequestBuilder;BulkRequestBuilder add(IndexRequest request);BulkRequestBuilder add(IndexRequestBuilder request);Whole;;;Adds an {@link IndexRequest} to the list of actions to execute. Follows the same behavior of {@link IndexRequest} (for example, if no id is provided, one will be generated, or usage of the create flag).    ;false
org.elasticsearch.action.bulk.BulkRequestBuilder;BulkRequestBuilder add(DeleteRequest request);BulkRequestBuilder add(DeleteRequestBuilder request);Whole;;;Adds an {@link DeleteRequest} to the list of actions to execute.    ;false
org.elasticsearch.action.bulk.BulkRequestBuilder;BulkRequestBuilder add(UpdateRequest request);BulkRequestBuilder add(UpdateRequestBuilder request);Whole;;;Adds an {@link UpdateRequest} to the list of actions to execute.    ;false
org.elasticsearch.action.bulk.BulkRequestBuilder;BulkRequestBuilder add(byte[] data, int from, int length, XContentType xContentType);BulkRequestBuilder add(byte[] data, int from, int length, String defaultIndex, String defaultType, XContentType xContentType);Whole;;;Adds a framed data in binary format    ;false
org.elasticsearch.action.bulk.BulkRequestBuilder;BulkRequestBuilder setTimeout(TimeValue timeout);BulkRequestBuilder setTimeout(String timeout);Whole;;;A timeout to wait if the index operation can't be performed immediately. Defaults to <tt>1m</tt>.    ;false
org.elasticsearch.action.bulk.BackoffPolicy;BackoffPolicy constantBackoff(TimeValue delay, int maxNumberOfRetries);BackoffPolicy exponentialBackoff(TimeValue initialDelay, int maxNumberOfRetries);@param;int maxNumberOfRetries;int maxNumberOfRetries;The maximum number of retries. Must be a non-negative number.;true
org.elasticsearch.action.bulk.BackoffPolicy;BackoffPolicy exponentialBackoff();BackoffPolicy exponentialBackoff(TimeValue initialDelay, int maxNumberOfRetries);@return;;;A backoff policy with an exponential increase in wait time for retries. The returned instance is thread safe but each iterator created from it should only be used by a single thread.;true
org.elasticsearch.action.bulk.BulkProcessor;BulkProcessor add(BytesReference data, String defaultIndex, String defaultType, XContentType xContentType);BulkProcessor add(BytesReference data, String defaultIndex, String defaultType, String defaultPipeline, Object payload, XContentType xContentType);Whole;;;Adds the data from the bytes to be processed by the bulk processor    ;false
org.elasticsearch.action.bulk.BulkRequest;BulkRequest add(DocWriteRequest requests);BulkRequest add(Iterable requests);Whole;;;Adds a list of requests to be executed. Either index or delete requests.    ;false
org.elasticsearch.action.bulk.BulkRequest;BulkRequest add(byte[] data, int from, int length, XContentType xContentType);BulkRequest add(byte[] data, int from, int length, String defaultIndex, String defaultType, XContentType xContentType);Whole;;;Adds a framed data in binary format    ;false
org.elasticsearch.action.bulk.BulkRequest;BulkRequest add(byte[] data, int from, int length, XContentType xContentType);BulkRequest add(BytesReference data, String defaultIndex, String defaultType, XContentType xContentType);Whole;;;Adds a framed data in binary format    ;false
org.elasticsearch.action.bulk.BulkRequest;BulkRequest add(byte[] data, int from, int length, XContentType xContentType);BulkRequest add(BytesReference data, String defaultIndex, String defaultType, boolean allowExplicitIndex, XContentType xContentType);Whole;;;Adds a framed data in binary format    ;false
org.elasticsearch.action.bulk.BulkRequest;BulkRequest add(byte[] data, int from, int length, String defaultIndex, String defaultType, XContentType xContentType);BulkRequest add(BytesReference data, String defaultIndex, String defaultType, XContentType xContentType);Whole;;;Adds a framed data in binary format    ;false
org.elasticsearch.action.bulk.BulkRequest;BulkRequest add(byte[] data, int from, int length, String defaultIndex, String defaultType, XContentType xContentType);BulkRequest add(BytesReference data, String defaultIndex, String defaultType, boolean allowExplicitIndex, XContentType xContentType);Whole;;;Adds a framed data in binary format    ;false
org.elasticsearch.action.bulk.BulkRequest;BulkRequest add(BytesReference data, String defaultIndex, String defaultType, XContentType xContentType);BulkRequest add(BytesReference data, String defaultIndex, String defaultType, boolean allowExplicitIndex, XContentType xContentType);Whole;;;Adds a framed data in binary format    ;false
org.elasticsearch.action.bulk.BulkRequest;BulkRequest timeout(TimeValue timeout);BulkRequest timeout(String timeout);Whole;;;A timeout to wait if the index operation can't be performed immediately. Defaults to <tt>1m</tt>.    ;false
org.elasticsearch.action.explain.ExplainRequestBuilder;ExplainRequestBuilder setFetchSource(String include, String exclude);ExplainRequestBuilder setFetchSource(String[] includes, String[] excludes);Free text;;;Indicate that _source should be returned, with an "include" and/or "exclude" set which can include simple wildcard elements. ;true
org.elasticsearch.action.update.UpdateRequestBuilder;UpdateRequestBuilder setDoc(IndexRequest indexRequest);UpdateRequestBuilder setDoc(XContentBuilder source);Whole;;;Sets the doc to use for updates when a script is not specified.    ;false
org.elasticsearch.action.update.UpdateRequestBuilder;UpdateRequestBuilder setDoc(IndexRequest indexRequest);UpdateRequestBuilder setDoc(Map source);Whole;;;Sets the doc to use for updates when a script is not specified.    ;false
org.elasticsearch.action.update.UpdateRequestBuilder;UpdateRequestBuilder setDoc(IndexRequest indexRequest);UpdateRequestBuilder setDoc(Map source, XContentType contentType);Whole;;;Sets the doc to use for updates when a script is not specified.    ;false
org.elasticsearch.action.update.UpdateRequestBuilder;UpdateRequestBuilder setDoc(IndexRequest indexRequest);UpdateRequestBuilder setDoc(String source, XContentType xContentType);Whole;;;Sets the doc to use for updates when a script is not specified.    ;false
org.elasticsearch.action.update.UpdateRequestBuilder;UpdateRequestBuilder setDoc(IndexRequest indexRequest);UpdateRequestBuilder setDoc(byte[] source, XContentType xContentType);Whole;;;Sets the doc to use for updates when a script is not specified.    ;false
org.elasticsearch.action.update.UpdateRequestBuilder;UpdateRequestBuilder setDoc(IndexRequest indexRequest);UpdateRequestBuilder setDoc(byte[] source, int offset, int length, XContentType xContentType);Whole;;;Sets the doc to use for updates when a script is not specified.    ;false
org.elasticsearch.action.update.UpdateRequestBuilder;UpdateRequestBuilder setDoc(XContentBuilder source);UpdateRequestBuilder setDoc(Map source);Whole;;;Sets the doc to use for updates when a script is not specified.    ;false
org.elasticsearch.action.update.UpdateRequestBuilder;UpdateRequestBuilder setDoc(XContentBuilder source);UpdateRequestBuilder setDoc(Map source, XContentType contentType);Whole;;;Sets the doc to use for updates when a script is not specified.    ;false
org.elasticsearch.action.update.UpdateRequestBuilder;UpdateRequestBuilder setDoc(XContentBuilder source);UpdateRequestBuilder setDoc(String source, XContentType xContentType);Whole;;;Sets the doc to use for updates when a script is not specified.    ;false
org.elasticsearch.action.update.UpdateRequestBuilder;UpdateRequestBuilder setDoc(XContentBuilder source);UpdateRequestBuilder setDoc(byte[] source, XContentType xContentType);Whole;;;Sets the doc to use for updates when a script is not specified.    ;false
org.elasticsearch.action.update.UpdateRequestBuilder;UpdateRequestBuilder setDoc(XContentBuilder source);UpdateRequestBuilder setDoc(byte[] source, int offset, int length, XContentType xContentType);Whole;;;Sets the doc to use for updates when a script is not specified.    ;false
org.elasticsearch.action.update.UpdateRequestBuilder;UpdateRequestBuilder setDoc(Map source);UpdateRequestBuilder setDoc(Map source, XContentType contentType);Whole;;;Sets the doc to use for updates when a script is not specified.    ;false
org.elasticsearch.action.update.UpdateRequestBuilder;UpdateRequestBuilder setDoc(Map source);UpdateRequestBuilder setDoc(String source, XContentType xContentType);Whole;;;Sets the doc to use for updates when a script is not specified.    ;false
org.elasticsearch.action.update.UpdateRequestBuilder;UpdateRequestBuilder setDoc(Map source);UpdateRequestBuilder setDoc(byte[] source, XContentType xContentType);Whole;;;Sets the doc to use for updates when a script is not specified.    ;false
org.elasticsearch.action.update.UpdateRequestBuilder;UpdateRequestBuilder setDoc(Map source);UpdateRequestBuilder setDoc(byte[] source, int offset, int length, XContentType xContentType);Whole;;;Sets the doc to use for updates when a script is not specified.    ;false
org.elasticsearch.action.update.UpdateRequestBuilder;UpdateRequestBuilder setDoc(Map source, XContentType contentType);UpdateRequestBuilder setDoc(String source, XContentType xContentType);Whole;;;Sets the doc to use for updates when a script is not specified.    ;false
org.elasticsearch.action.update.UpdateRequestBuilder;UpdateRequestBuilder setDoc(Map source, XContentType contentType);UpdateRequestBuilder setDoc(byte[] source, XContentType xContentType);Whole;;;Sets the doc to use for updates when a script is not specified.    ;false
org.elasticsearch.action.update.UpdateRequestBuilder;UpdateRequestBuilder setDoc(Map source, XContentType contentType);UpdateRequestBuilder setDoc(byte[] source, int offset, int length, XContentType xContentType);Whole;;;Sets the doc to use for updates when a script is not specified.    ;false
org.elasticsearch.action.update.UpdateRequestBuilder;UpdateRequestBuilder setDoc(String source, XContentType xContentType);UpdateRequestBuilder setDoc(byte[] source, XContentType xContentType);Whole;;;Sets the doc to use for updates when a script is not specified.    ;false
org.elasticsearch.action.update.UpdateRequestBuilder;UpdateRequestBuilder setDoc(String source, XContentType xContentType);UpdateRequestBuilder setDoc(byte[] source, int offset, int length, XContentType xContentType);Whole;;;Sets the doc to use for updates when a script is not specified.    ;false
org.elasticsearch.action.update.UpdateRequestBuilder;UpdateRequestBuilder setDoc(byte[] source, XContentType xContentType);UpdateRequestBuilder setDoc(byte[] source, int offset, int length, XContentType xContentType);Whole;;;Sets the doc to use for updates when a script is not specified.    ;false
org.elasticsearch.action.update.UpdateRequestBuilder;UpdateRequestBuilder setDoc(Object source);UpdateRequestBuilder setDoc(XContentType xContentType, Object source);Whole;;;Sets the doc to use for updates when a script is not specified, the doc provided is a field and value pairs.    ;false
org.elasticsearch.action.update.UpdateRequestBuilder;UpdateRequestBuilder setUpsert(XContentBuilder source);UpdateRequestBuilder setUpsert(Map source);Whole;;;Sets the doc source of the update request to be used when the document does not exists.    ;false
org.elasticsearch.action.update.UpdateRequestBuilder;UpdateRequestBuilder setUpsert(XContentBuilder source);UpdateRequestBuilder setUpsert(Map source, XContentType contentType);Whole;;;Sets the doc source of the update request to be used when the document does not exists.    ;false
org.elasticsearch.action.update.UpdateRequestBuilder;UpdateRequestBuilder setUpsert(XContentBuilder source);UpdateRequestBuilder setUpsert(String source, XContentType xContentType);Whole;;;Sets the doc source of the update request to be used when the document does not exists.    ;false
org.elasticsearch.action.update.UpdateRequestBuilder;UpdateRequestBuilder setUpsert(XContentBuilder source);UpdateRequestBuilder setUpsert(byte[] source, XContentType xContentType);Whole;;;Sets the doc source of the update request to be used when the document does not exists.    ;false
org.elasticsearch.action.update.UpdateRequestBuilder;UpdateRequestBuilder setUpsert(XContentBuilder source);UpdateRequestBuilder setUpsert(byte[] source, int offset, int length, XContentType xContentType);Whole;;;Sets the doc source of the update request to be used when the document does not exists.    ;false
org.elasticsearch.action.update.UpdateRequestBuilder;UpdateRequestBuilder setUpsert(Map source);UpdateRequestBuilder setUpsert(Map source, XContentType contentType);Whole;;;Sets the doc source of the update request to be used when the document does not exists.    ;false
org.elasticsearch.action.update.UpdateRequestBuilder;UpdateRequestBuilder setUpsert(Map source);UpdateRequestBuilder setUpsert(String source, XContentType xContentType);Whole;;;Sets the doc source of the update request to be used when the document does not exists.    ;false
org.elasticsearch.action.update.UpdateRequestBuilder;UpdateRequestBuilder setUpsert(Map source);UpdateRequestBuilder setUpsert(byte[] source, XContentType xContentType);Whole;;;Sets the doc source of the update request to be used when the document does not exists.    ;false
org.elasticsearch.action.update.UpdateRequestBuilder;UpdateRequestBuilder setUpsert(Map source);UpdateRequestBuilder setUpsert(byte[] source, int offset, int length, XContentType xContentType);Whole;;;Sets the doc source of the update request to be used when the document does not exists.    ;false
org.elasticsearch.action.update.UpdateRequestBuilder;UpdateRequestBuilder setUpsert(Map source, XContentType contentType);UpdateRequestBuilder setUpsert(String source, XContentType xContentType);Whole;;;Sets the doc source of the update request to be used when the document does not exists.    ;false
org.elasticsearch.action.update.UpdateRequestBuilder;UpdateRequestBuilder setUpsert(Map source, XContentType contentType);UpdateRequestBuilder setUpsert(byte[] source, XContentType xContentType);Whole;;;Sets the doc source of the update request to be used when the document does not exists.    ;false
org.elasticsearch.action.update.UpdateRequestBuilder;UpdateRequestBuilder setUpsert(Map source, XContentType contentType);UpdateRequestBuilder setUpsert(byte[] source, int offset, int length, XContentType xContentType);Whole;;;Sets the doc source of the update request to be used when the document does not exists.    ;false
org.elasticsearch.action.update.UpdateRequestBuilder;UpdateRequestBuilder setUpsert(String source, XContentType xContentType);UpdateRequestBuilder setUpsert(byte[] source, XContentType xContentType);Whole;;;Sets the doc source of the update request to be used when the document does not exists.    ;false
org.elasticsearch.action.update.UpdateRequestBuilder;UpdateRequestBuilder setUpsert(String source, XContentType xContentType);UpdateRequestBuilder setUpsert(byte[] source, int offset, int length, XContentType xContentType);Whole;;;Sets the doc source of the update request to be used when the document does not exists.    ;false
org.elasticsearch.action.update.UpdateRequestBuilder;UpdateRequestBuilder setUpsert(byte[] source, XContentType xContentType);UpdateRequestBuilder setUpsert(byte[] source, int offset, int length, XContentType xContentType);Whole;;;Sets the doc source of the update request to be used when the document does not exists.    ;false
org.elasticsearch.action.update.UpdateRequestBuilder;UpdateRequestBuilder setUpsert(Object source);UpdateRequestBuilder setUpsert(XContentType xContentType, Object source);Whole;;;Sets the doc source of the update request to be used when the document does not exists. The doc includes field and value pairs.    ;false
org.elasticsearch.action.update.UpdateRequest;UpdateRequest routing(String routing);String routing();Whole;;;Controls the shard routing of the request. Using this value to hash the shard and not the id.    ;false
org.elasticsearch.action.update.UpdateRequest;UpdateRequest script(Script script);UpdateRequest script(String script, String scriptLang, ScriptType scriptType, Map scriptParams);Free text;;;The script to execute. Note, make sure not to send different script each times and instead use script params if possible with the same (automatically compiled) script. ;true
org.elasticsearch.action.update.UpdateRequest;String scriptString();ScriptType scriptType();Whole;;;@deprecated Use {@link #script()} instead    ;false
org.elasticsearch.action.update.UpdateRequest;String scriptString();Map scriptParams();Whole;;;@deprecated Use {@link #script()} instead    ;false
org.elasticsearch.action.update.UpdateRequest;String scriptString();String scriptLang();Whole;;;@deprecated Use {@link #script()} instead    ;false
org.elasticsearch.action.update.UpdateRequest;ScriptType scriptType();Map scriptParams();Whole;;;@deprecated Use {@link #script()} instead    ;false
org.elasticsearch.action.update.UpdateRequest;ScriptType scriptType();String scriptLang();Whole;;;@deprecated Use {@link #script()} instead    ;false
org.elasticsearch.action.update.UpdateRequest;Map scriptParams();String scriptLang();Whole;;;@deprecated Use {@link #script()} instead    ;false
org.elasticsearch.action.update.UpdateRequest;UpdateRequest script(String script, ScriptType scriptType);UpdateRequest script(String script);Whole;;;The script to execute. Note, make sure not to send different script each times and instead use script params if possible with the same (automatically compiled) script. @deprecated Use {@link #script(Script)} instead    ;false
org.elasticsearch.action.update.UpdateRequest;UpdateRequest script(String script, ScriptType scriptType);UpdateRequest script(String script, ScriptType scriptType, Map scriptParams);Whole;;;The script to execute. Note, make sure not to send different script each times and instead use script params if possible with the same (automatically compiled) script. @deprecated Use {@link #script(Script)} instead    ;false
org.elasticsearch.action.update.UpdateRequest;UpdateRequest script(String script);UpdateRequest script(String script, ScriptType scriptType, Map scriptParams);Whole;;;The script to execute. Note, make sure not to send different script each times and instead use script params if possible with the same (automatically compiled) script. @deprecated Use {@link #script(Script)} instead    ;false
org.elasticsearch.action.update.UpdateRequest;UpdateRequest doc(IndexRequest doc);UpdateRequest doc(XContentBuilder source);Whole;;;Sets the doc to use for updates when a script is not specified.    ;false
org.elasticsearch.action.update.UpdateRequest;UpdateRequest doc(IndexRequest doc);UpdateRequest doc(Map source);Whole;;;Sets the doc to use for updates when a script is not specified.    ;false
org.elasticsearch.action.update.UpdateRequest;UpdateRequest doc(IndexRequest doc);UpdateRequest doc(Map source, XContentType contentType);Whole;;;Sets the doc to use for updates when a script is not specified.    ;false
org.elasticsearch.action.update.UpdateRequest;UpdateRequest doc(IndexRequest doc);UpdateRequest doc(String source, XContentType xContentType);Whole;;;Sets the doc to use for updates when a script is not specified.    ;false
org.elasticsearch.action.update.UpdateRequest;UpdateRequest doc(IndexRequest doc);UpdateRequest doc(byte[] source, XContentType xContentType);Whole;;;Sets the doc to use for updates when a script is not specified.    ;false
org.elasticsearch.action.update.UpdateRequest;UpdateRequest doc(IndexRequest doc);UpdateRequest doc(byte[] source, int offset, int length, XContentType xContentType);Whole;;;Sets the doc to use for updates when a script is not specified.    ;false
org.elasticsearch.action.update.UpdateRequest;UpdateRequest doc(XContentBuilder source);UpdateRequest doc(Map source);Whole;;;Sets the doc to use for updates when a script is not specified.    ;false
org.elasticsearch.action.update.UpdateRequest;UpdateRequest doc(XContentBuilder source);UpdateRequest doc(Map source, XContentType contentType);Whole;;;Sets the doc to use for updates when a script is not specified.    ;false
org.elasticsearch.action.update.UpdateRequest;UpdateRequest doc(XContentBuilder source);UpdateRequest doc(String source, XContentType xContentType);Whole;;;Sets the doc to use for updates when a script is not specified.    ;false
org.elasticsearch.action.update.UpdateRequest;UpdateRequest doc(XContentBuilder source);UpdateRequest doc(byte[] source, XContentType xContentType);Whole;;;Sets the doc to use for updates when a script is not specified.    ;false
org.elasticsearch.action.update.UpdateRequest;UpdateRequest doc(XContentBuilder source);UpdateRequest doc(byte[] source, int offset, int length, XContentType xContentType);Whole;;;Sets the doc to use for updates when a script is not specified.    ;false
org.elasticsearch.action.update.UpdateRequest;UpdateRequest doc(Map source);UpdateRequest doc(Map source, XContentType contentType);Whole;;;Sets the doc to use for updates when a script is not specified.    ;false
org.elasticsearch.action.update.UpdateRequest;UpdateRequest doc(Map source);UpdateRequest doc(String source, XContentType xContentType);Whole;;;Sets the doc to use for updates when a script is not specified.    ;false
org.elasticsearch.action.update.UpdateRequest;UpdateRequest doc(Map source);UpdateRequest doc(byte[] source, XContentType xContentType);Whole;;;Sets the doc to use for updates when a script is not specified.    ;false
org.elasticsearch.action.update.UpdateRequest;UpdateRequest doc(Map source);UpdateRequest doc(byte[] source, int offset, int length, XContentType xContentType);Whole;;;Sets the doc to use for updates when a script is not specified.    ;false
org.elasticsearch.action.update.UpdateRequest;UpdateRequest doc(Map source, XContentType contentType);UpdateRequest doc(String source, XContentType xContentType);Whole;;;Sets the doc to use for updates when a script is not specified.    ;false
org.elasticsearch.action.update.UpdateRequest;UpdateRequest doc(Map source, XContentType contentType);UpdateRequest doc(byte[] source, XContentType xContentType);Whole;;;Sets the doc to use for updates when a script is not specified.    ;false
org.elasticsearch.action.update.UpdateRequest;UpdateRequest doc(Map source, XContentType contentType);UpdateRequest doc(byte[] source, int offset, int length, XContentType xContentType);Whole;;;Sets the doc to use for updates when a script is not specified.    ;false
org.elasticsearch.action.update.UpdateRequest;UpdateRequest doc(String source, XContentType xContentType);UpdateRequest doc(byte[] source, XContentType xContentType);Whole;;;Sets the doc to use for updates when a script is not specified.    ;false
org.elasticsearch.action.update.UpdateRequest;UpdateRequest doc(String source, XContentType xContentType);UpdateRequest doc(byte[] source, int offset, int length, XContentType xContentType);Whole;;;Sets the doc to use for updates when a script is not specified.    ;false
org.elasticsearch.action.update.UpdateRequest;UpdateRequest doc(byte[] source, XContentType xContentType);UpdateRequest doc(byte[] source, int offset, int length, XContentType xContentType);Whole;;;Sets the doc to use for updates when a script is not specified.    ;false
org.elasticsearch.action.update.UpdateRequest;UpdateRequest doc(Object source);UpdateRequest doc(XContentType xContentType, Object source);Whole;;;Sets the doc to use for updates when a script is not specified, the doc provided is a field and value pairs.    ;false
org.elasticsearch.action.update.UpdateRequest;UpdateRequest upsert(XContentBuilder source);UpdateRequest upsert(Map source);Whole;;;Sets the doc source of the update request to be used when the document does not exists.    ;false
org.elasticsearch.action.update.UpdateRequest;UpdateRequest upsert(XContentBuilder source);UpdateRequest upsert(Map source, XContentType contentType);Whole;;;Sets the doc source of the update request to be used when the document does not exists.    ;false
org.elasticsearch.action.update.UpdateRequest;UpdateRequest upsert(XContentBuilder source);UpdateRequest upsert(String source, XContentType xContentType);Whole;;;Sets the doc source of the update request to be used when the document does not exists.    ;false
org.elasticsearch.action.update.UpdateRequest;UpdateRequest upsert(XContentBuilder source);UpdateRequest upsert(byte[] source, XContentType xContentType);Whole;;;Sets the doc source of the update request to be used when the document does not exists.    ;false
org.elasticsearch.action.update.UpdateRequest;UpdateRequest upsert(XContentBuilder source);UpdateRequest upsert(byte[] source, int offset, int length, XContentType xContentType);Whole;;;Sets the doc source of the update request to be used when the document does not exists.    ;false
org.elasticsearch.action.update.UpdateRequest;UpdateRequest upsert(Map source);UpdateRequest upsert(Map source, XContentType contentType);Whole;;;Sets the doc source of the update request to be used when the document does not exists.    ;false
org.elasticsearch.action.update.UpdateRequest;UpdateRequest upsert(Map source);UpdateRequest upsert(String source, XContentType xContentType);Whole;;;Sets the doc source of the update request to be used when the document does not exists.    ;false
org.elasticsearch.action.update.UpdateRequest;UpdateRequest upsert(Map source);UpdateRequest upsert(byte[] source, XContentType xContentType);Whole;;;Sets the doc source of the update request to be used when the document does not exists.    ;false
org.elasticsearch.action.update.UpdateRequest;UpdateRequest upsert(Map source);UpdateRequest upsert(byte[] source, int offset, int length, XContentType xContentType);Whole;;;Sets the doc source of the update request to be used when the document does not exists.    ;false
org.elasticsearch.action.update.UpdateRequest;UpdateRequest upsert(Map source, XContentType contentType);UpdateRequest upsert(String source, XContentType xContentType);Whole;;;Sets the doc source of the update request to be used when the document does not exists.    ;false
org.elasticsearch.action.update.UpdateRequest;UpdateRequest upsert(Map source, XContentType contentType);UpdateRequest upsert(byte[] source, XContentType xContentType);Whole;;;Sets the doc source of the update request to be used when the document does not exists.    ;false
org.elasticsearch.action.update.UpdateRequest;UpdateRequest upsert(Map source, XContentType contentType);UpdateRequest upsert(byte[] source, int offset, int length, XContentType xContentType);Whole;;;Sets the doc source of the update request to be used when the document does not exists.    ;false
org.elasticsearch.action.update.UpdateRequest;UpdateRequest upsert(String source, XContentType xContentType);UpdateRequest upsert(byte[] source, XContentType xContentType);Whole;;;Sets the doc source of the update request to be used when the document does not exists.    ;false
org.elasticsearch.action.update.UpdateRequest;UpdateRequest upsert(String source, XContentType xContentType);UpdateRequest upsert(byte[] source, int offset, int length, XContentType xContentType);Whole;;;Sets the doc source of the update request to be used when the document does not exists.    ;false
org.elasticsearch.action.update.UpdateRequest;UpdateRequest upsert(byte[] source, XContentType xContentType);UpdateRequest upsert(byte[] source, int offset, int length, XContentType xContentType);Whole;;;Sets the doc source of the update request to be used when the document does not exists.    ;false
org.elasticsearch.action.update.UpdateRequest;UpdateRequest upsert(Object source);UpdateRequest upsert(XContentType xContentType, Object source);Whole;;;Sets the doc source of the update request to be used when the document does not exists. The doc includes field and value pairs.    ;false
org.elasticsearch.action.update.UpdateRequest;UpdateRequest detectNoop(boolean detectNoop);boolean detectNoop();Free text;;;Should this update attempt to detect if it is a noop? Defaults to true. ;true
org.elasticsearch.action.ingest.SimulatePipelineRequestBuilder; SimulatePipelineRequestBuilder(ElasticsearchClient client, SimulatePipelineAction action); SimulatePipelineRequestBuilder(ElasticsearchClient client, SimulatePipelineAction action, BytesReference source, XContentType xContentType);Whole;;;Create a new builder for {@link SimulatePipelineRequest}s    ;false
org.elasticsearch.action.termvectors.TermVectorsRequest; TermVectorsRequest(String index, String type, String id); TermVectorsRequest(TermVectorsRequest other);Whole;;;Constructs a new term vector request for a document that will be fetch from the provided index. Use {@link #type(String)} and {@link #id(String)} to specify the document to load.    ;false
org.elasticsearch.action.termvectors.TermVectorsRequest;TermVectorsRequest doc(XContentBuilder documentBuilder);TermVectorsRequest doc(BytesReference doc, boolean generateRandomId, XContentType xContentType);Whole;;;Sets an artificial document from which term vectors are requested for.    ;false
org.elasticsearch.action.admin.cluster.settings.ClusterUpdateSettingsRequest;ClusterUpdateSettingsRequest transientSettings(Settings settings);ClusterUpdateSettingsRequest transientSettings(Settings.Builder settings);Whole;;;Sets the transient settings to be updated. They will not survive a full cluster restart    ;false
org.elasticsearch.action.admin.cluster.settings.ClusterUpdateSettingsRequest;ClusterUpdateSettingsRequest transientSettings(Settings settings);ClusterUpdateSettingsRequest transientSettings(Map source);Whole;;;Sets the transient settings to be updated. They will not survive a full cluster restart    ;false
org.elasticsearch.action.admin.cluster.settings.ClusterUpdateSettingsRequest;ClusterUpdateSettingsRequest transientSettings(Settings.Builder settings);ClusterUpdateSettingsRequest transientSettings(Map source);Whole;;;Sets the transient settings to be updated. They will not survive a full cluster restart    ;false
org.elasticsearch.action.admin.cluster.settings.ClusterUpdateSettingsRequest;ClusterUpdateSettingsRequest persistentSettings(Settings settings);ClusterUpdateSettingsRequest persistentSettings(Settings.Builder settings);Whole;;;Sets the persistent settings to be updated. They will get applied cross restarts    ;false
org.elasticsearch.action.admin.cluster.settings.ClusterUpdateSettingsRequest;ClusterUpdateSettingsRequest persistentSettings(Settings settings);ClusterUpdateSettingsRequest persistentSettings(Map source);Whole;;;Sets the persistent settings to be updated. They will get applied cross restarts    ;false
org.elasticsearch.action.admin.cluster.settings.ClusterUpdateSettingsRequest;ClusterUpdateSettingsRequest persistentSettings(Settings.Builder settings);ClusterUpdateSettingsRequest persistentSettings(Map source);Whole;;;Sets the persistent settings to be updated. They will get applied cross restarts    ;false
org.elasticsearch.action.admin.cluster.settings.ClusterUpdateSettingsRequestBuilder;ClusterUpdateSettingsRequestBuilder setTransientSettings(Settings settings);ClusterUpdateSettingsRequestBuilder setTransientSettings(Settings.Builder settings);Whole;;;Sets the transient settings to be updated. They will not survive a full cluster restart    ;false
org.elasticsearch.action.admin.cluster.settings.ClusterUpdateSettingsRequestBuilder;ClusterUpdateSettingsRequestBuilder setTransientSettings(Settings settings);ClusterUpdateSettingsRequestBuilder setTransientSettings(Map settings);Whole;;;Sets the transient settings to be updated. They will not survive a full cluster restart    ;false
org.elasticsearch.action.admin.cluster.settings.ClusterUpdateSettingsRequestBuilder;ClusterUpdateSettingsRequestBuilder setTransientSettings(Settings.Builder settings);ClusterUpdateSettingsRequestBuilder setTransientSettings(Map settings);Whole;;;Sets the transient settings to be updated. They will not survive a full cluster restart    ;false
org.elasticsearch.action.admin.cluster.settings.ClusterUpdateSettingsRequestBuilder;ClusterUpdateSettingsRequestBuilder setPersistentSettings(Settings settings);ClusterUpdateSettingsRequestBuilder setPersistentSettings(Settings.Builder settings);Whole;;;Sets the persistent settings to be updated. They will get applied cross restarts    ;false
org.elasticsearch.action.admin.cluster.settings.ClusterUpdateSettingsRequestBuilder;ClusterUpdateSettingsRequestBuilder setPersistentSettings(Settings settings);ClusterUpdateSettingsRequestBuilder setPersistentSettings(Map settings);Whole;;;Sets the persistent settings to be updated. They will get applied cross restarts    ;false
org.elasticsearch.action.admin.cluster.settings.ClusterUpdateSettingsRequestBuilder;ClusterUpdateSettingsRequestBuilder setPersistentSettings(Settings.Builder settings);ClusterUpdateSettingsRequestBuilder setPersistentSettings(Map settings);Whole;;;Sets the persistent settings to be updated. They will get applied cross restarts    ;false
org.elasticsearch.action.admin.cluster.shards.ClusterSearchShardsRequest;String routing();ClusterSearchShardsRequest routing(String routing);Whole;;;A comma separated list of routing values to control the shards the search will be executed on.    ;false
org.elasticsearch.action.admin.cluster.snapshots.delete.DeleteSnapshotRequestBuilder;DeleteSnapshotRequestBuilder setRepository(String repository);DeleteSnapshotRequestBuilder setSnapshot(String snapshot);@return;;;this builder;false
org.elasticsearch.action.admin.cluster.snapshots.delete.DeleteSnapshotRequest; DeleteSnapshotRequest(String repository, String snapshot); DeleteSnapshotRequest(String repository);@param;String repository;String repository;repository name;true
org.elasticsearch.action.admin.cluster.snapshots.delete.DeleteSnapshotRequest;String repository();String snapshot();Whole;;;Returns repository name   @return repository name ;false
org.elasticsearch.action.admin.cluster.snapshots.get.GetSnapshotsRequest; GetSnapshotsRequest(String repository, String[] snapshots); GetSnapshotsRequest(String repository);@param;String repository;String repository;repository name;true
org.elasticsearch.action.admin.cluster.snapshots.get.GetSnapshotsRequest; GetSnapshotsRequest(String repository, String[] snapshots);GetSnapshotsRequest repository(String repository);@param;String repository;String repository;repository name;true
org.elasticsearch.action.admin.cluster.snapshots.get.GetSnapshotsRequest; GetSnapshotsRequest(String repository);GetSnapshotsRequest repository(String repository);@param;String repository;String repository;repository name;true
org.elasticsearch.action.admin.cluster.snapshots.get.GetSnapshotsRequest;GetSnapshotsRequest repository(String repository);GetSnapshotsRequest snapshots(String[] snapshots);@return;;;this request;false
org.elasticsearch.action.admin.cluster.snapshots.get.GetSnapshotsRequest;GetSnapshotsRequest repository(String repository);GetSnapshotsRequest ignoreUnavailable(boolean ignoreUnavailable);@return;;;this request;false
org.elasticsearch.action.admin.cluster.snapshots.get.GetSnapshotsRequest;GetSnapshotsRequest snapshots(String[] snapshots);GetSnapshotsRequest ignoreUnavailable(boolean ignoreUnavailable);@return;;;this request;false
org.elasticsearch.action.admin.cluster.snapshots.get.GetSnapshotsRequestBuilder;GetSnapshotsRequestBuilder setRepository(String repository);GetSnapshotsRequestBuilder setSnapshots(String snapshots);@return;;;this builder;false
org.elasticsearch.action.admin.cluster.snapshots.get.GetSnapshotsRequestBuilder;GetSnapshotsRequestBuilder setRepository(String repository);GetSnapshotsRequestBuilder setCurrentSnapshot();@return;;;this builder;false
org.elasticsearch.action.admin.cluster.snapshots.get.GetSnapshotsRequestBuilder;GetSnapshotsRequestBuilder setRepository(String repository);GetSnapshotsRequestBuilder addSnapshots(String snapshots);@return;;;this builder;false
org.elasticsearch.action.admin.cluster.snapshots.get.GetSnapshotsRequestBuilder;GetSnapshotsRequestBuilder setRepository(String repository);GetSnapshotsRequestBuilder setIgnoreUnavailable(boolean ignoreUnavailable);@return;;;this builder;false
org.elasticsearch.action.admin.cluster.snapshots.get.GetSnapshotsRequestBuilder;GetSnapshotsRequestBuilder setSnapshots(String snapshots);GetSnapshotsRequestBuilder setCurrentSnapshot();@return;;;this builder;false
org.elasticsearch.action.admin.cluster.snapshots.get.GetSnapshotsRequestBuilder;GetSnapshotsRequestBuilder setSnapshots(String snapshots);GetSnapshotsRequestBuilder addSnapshots(String snapshots);@return;;;this builder;false
org.elasticsearch.action.admin.cluster.snapshots.get.GetSnapshotsRequestBuilder;GetSnapshotsRequestBuilder setSnapshots(String snapshots);GetSnapshotsRequestBuilder setIgnoreUnavailable(boolean ignoreUnavailable);@return;;;this builder;false
org.elasticsearch.action.admin.cluster.snapshots.get.GetSnapshotsRequestBuilder;GetSnapshotsRequestBuilder setCurrentSnapshot();GetSnapshotsRequestBuilder addSnapshots(String snapshots);@return;;;this builder;false
org.elasticsearch.action.admin.cluster.snapshots.get.GetSnapshotsRequestBuilder;GetSnapshotsRequestBuilder setCurrentSnapshot();GetSnapshotsRequestBuilder setIgnoreUnavailable(boolean ignoreUnavailable);@return;;;this builder;false
org.elasticsearch.action.admin.cluster.snapshots.get.GetSnapshotsRequestBuilder;GetSnapshotsRequestBuilder addSnapshots(String snapshots);GetSnapshotsRequestBuilder setIgnoreUnavailable(boolean ignoreUnavailable);@return;;;this builder;false
org.elasticsearch.action.admin.cluster.snapshots.status.SnapshotsStatusRequest; SnapshotsStatusRequest(String repository, String[] snapshots); SnapshotsStatusRequest(String repository);@param;String repository;String repository;repository name;true
org.elasticsearch.action.admin.cluster.snapshots.status.SnapshotsStatusRequest; SnapshotsStatusRequest(String repository, String[] snapshots);SnapshotsStatusRequest repository(String repository);@param;String repository;String repository;repository name;true
org.elasticsearch.action.admin.cluster.snapshots.status.SnapshotsStatusRequest; SnapshotsStatusRequest(String repository);SnapshotsStatusRequest repository(String repository);@param;String repository;String repository;repository name;true
org.elasticsearch.action.admin.cluster.snapshots.status.SnapshotsStatusRequest;SnapshotsStatusRequest repository(String repository);SnapshotsStatusRequest snapshots(String[] snapshots);@return;;;this request;false
org.elasticsearch.action.admin.cluster.snapshots.status.SnapshotsStatusRequest;SnapshotsStatusRequest repository(String repository);SnapshotsStatusRequest ignoreUnavailable(boolean ignoreUnavailable);@return;;;this request;false
org.elasticsearch.action.admin.cluster.snapshots.status.SnapshotsStatusRequest;SnapshotsStatusRequest snapshots(String[] snapshots);SnapshotsStatusRequest ignoreUnavailable(boolean ignoreUnavailable);@return;;;this request;false
org.elasticsearch.action.admin.cluster.snapshots.status.SnapshotsStatusRequestBuilder;SnapshotsStatusRequestBuilder setRepository(String repository);SnapshotsStatusRequestBuilder setSnapshots(String snapshots);@return;;;this builder;false
org.elasticsearch.action.admin.cluster.snapshots.status.SnapshotsStatusRequestBuilder;SnapshotsStatusRequestBuilder setRepository(String repository);SnapshotsStatusRequestBuilder addSnapshots(String snapshots);@return;;;this builder;false
org.elasticsearch.action.admin.cluster.snapshots.status.SnapshotsStatusRequestBuilder;SnapshotsStatusRequestBuilder setRepository(String repository);SnapshotsStatusRequestBuilder setIgnoreUnavailable(boolean ignoreUnavailable);@return;;;this builder;false
org.elasticsearch.action.admin.cluster.snapshots.status.SnapshotsStatusRequestBuilder;SnapshotsStatusRequestBuilder setSnapshots(String snapshots);SnapshotsStatusRequestBuilder addSnapshots(String snapshots);@return;;;this builder;false
org.elasticsearch.action.admin.cluster.snapshots.status.SnapshotsStatusRequestBuilder;SnapshotsStatusRequestBuilder setSnapshots(String snapshots);SnapshotsStatusRequestBuilder setIgnoreUnavailable(boolean ignoreUnavailable);@return;;;this builder;false
org.elasticsearch.action.admin.cluster.snapshots.status.SnapshotsStatusRequestBuilder;SnapshotsStatusRequestBuilder addSnapshots(String snapshots);SnapshotsStatusRequestBuilder setIgnoreUnavailable(boolean ignoreUnavailable);@return;;;this builder;false
org.elasticsearch.action.admin.cluster.snapshots.create.CreateSnapshotRequest; CreateSnapshotRequest(String repository, String snapshot);CreateSnapshotRequest snapshot(String snapshot);@param;String snapshot;String snapshot;snapshot name;true
org.elasticsearch.action.admin.cluster.snapshots.create.CreateSnapshotRequest;CreateSnapshotRequest repository(String repository);CreateSnapshotRequest indices(String indices);@return;;;this request;false
org.elasticsearch.action.admin.cluster.snapshots.create.CreateSnapshotRequest;CreateSnapshotRequest repository(String repository);CreateSnapshotRequest indices(List indices);@return;;;this request;false
org.elasticsearch.action.admin.cluster.snapshots.create.CreateSnapshotRequest;CreateSnapshotRequest repository(String repository);CreateSnapshotRequest indicesOptions(IndicesOptions indicesOptions);@return;;;this request;false
org.elasticsearch.action.admin.cluster.snapshots.create.CreateSnapshotRequest;CreateSnapshotRequest repository(String repository);CreateSnapshotRequest partial(boolean partial);@return;;;this request;false
org.elasticsearch.action.admin.cluster.snapshots.create.CreateSnapshotRequest;CreateSnapshotRequest repository(String repository);CreateSnapshotRequest waitForCompletion(boolean waitForCompletion);@return;;;this request;false
org.elasticsearch.action.admin.cluster.snapshots.create.CreateSnapshotRequest;CreateSnapshotRequest repository(String repository);CreateSnapshotRequest settings(Settings settings);@return;;;this request;false
org.elasticsearch.action.admin.cluster.snapshots.create.CreateSnapshotRequest;CreateSnapshotRequest repository(String repository);CreateSnapshotRequest settings(Settings.Builder settings);@return;;;this request;false
org.elasticsearch.action.admin.cluster.snapshots.create.CreateSnapshotRequest;CreateSnapshotRequest repository(String repository);CreateSnapshotRequest settings(String source, XContentType xContentType);@return;;;this request;false
org.elasticsearch.action.admin.cluster.snapshots.create.CreateSnapshotRequest;CreateSnapshotRequest repository(String repository);CreateSnapshotRequest settings(Map source);@return;;;this request;false
org.elasticsearch.action.admin.cluster.snapshots.create.CreateSnapshotRequest;CreateSnapshotRequest repository(String repository);CreateSnapshotRequest includeGlobalState(boolean includeGlobalState);@return;;;this request;false
org.elasticsearch.action.admin.cluster.snapshots.create.CreateSnapshotRequest;CreateSnapshotRequest repository(String repository);CreateSnapshotRequest source(Map source);@return;;;this request;false
org.elasticsearch.action.admin.cluster.snapshots.create.CreateSnapshotRequest;CreateSnapshotRequest indices(String indices);CreateSnapshotRequest indices(List indices);Whole;;;Sets a list of indices that should be included into the snapshot <p> The list of indices supports multi-index syntax. For example: "+test*" ,"-test42" will index all indices with prefix "test" except index "test42". Aliases are supported. An empty list or {"_all"} will snapshot all open indices in the cluster.   @return this request ;false
org.elasticsearch.action.admin.cluster.snapshots.create.CreateSnapshotRequest;CreateSnapshotRequest indices(String indices);CreateSnapshotRequest indicesOptions(IndicesOptions indicesOptions);@return;;;this request;false
org.elasticsearch.action.admin.cluster.snapshots.create.CreateSnapshotRequest;CreateSnapshotRequest indices(String indices);CreateSnapshotRequest partial(boolean partial);@return;;;this request;false
org.elasticsearch.action.admin.cluster.snapshots.create.CreateSnapshotRequest;CreateSnapshotRequest indices(String indices);CreateSnapshotRequest waitForCompletion(boolean waitForCompletion);@return;;;this request;false
org.elasticsearch.action.admin.cluster.snapshots.create.CreateSnapshotRequest;CreateSnapshotRequest indices(String indices);CreateSnapshotRequest settings(Settings settings);@return;;;this request;false
org.elasticsearch.action.admin.cluster.snapshots.create.CreateSnapshotRequest;CreateSnapshotRequest indices(String indices);CreateSnapshotRequest settings(Settings.Builder settings);@return;;;this request;false
org.elasticsearch.action.admin.cluster.snapshots.create.CreateSnapshotRequest;CreateSnapshotRequest indices(String indices);CreateSnapshotRequest settings(String source, XContentType xContentType);@return;;;this request;false
org.elasticsearch.action.admin.cluster.snapshots.create.CreateSnapshotRequest;CreateSnapshotRequest indices(String indices);CreateSnapshotRequest settings(Map source);@return;;;this request;false
org.elasticsearch.action.admin.cluster.snapshots.create.CreateSnapshotRequest;CreateSnapshotRequest indices(String indices);CreateSnapshotRequest includeGlobalState(boolean includeGlobalState);@return;;;this request;false
org.elasticsearch.action.admin.cluster.snapshots.create.CreateSnapshotRequest;CreateSnapshotRequest indices(String indices);CreateSnapshotRequest source(Map source);@return;;;this request;false
org.elasticsearch.action.admin.cluster.snapshots.create.CreateSnapshotRequest;CreateSnapshotRequest indices(List indices);CreateSnapshotRequest indicesOptions(IndicesOptions indicesOptions);@return;;;this request;false
org.elasticsearch.action.admin.cluster.snapshots.create.CreateSnapshotRequest;CreateSnapshotRequest indices(List indices);CreateSnapshotRequest partial(boolean partial);@return;;;this request;false
org.elasticsearch.action.admin.cluster.snapshots.create.CreateSnapshotRequest;CreateSnapshotRequest indices(List indices);CreateSnapshotRequest waitForCompletion(boolean waitForCompletion);@return;;;this request;false
org.elasticsearch.action.admin.cluster.snapshots.create.CreateSnapshotRequest;CreateSnapshotRequest indices(List indices);CreateSnapshotRequest settings(Settings settings);@return;;;this request;false
org.elasticsearch.action.admin.cluster.snapshots.create.CreateSnapshotRequest;CreateSnapshotRequest indices(List indices);CreateSnapshotRequest settings(Settings.Builder settings);@return;;;this request;false
org.elasticsearch.action.admin.cluster.snapshots.create.CreateSnapshotRequest;CreateSnapshotRequest indices(List indices);CreateSnapshotRequest settings(String source, XContentType xContentType);@return;;;this request;false
org.elasticsearch.action.admin.cluster.snapshots.create.CreateSnapshotRequest;CreateSnapshotRequest indices(List indices);CreateSnapshotRequest settings(Map source);@return;;;this request;false
org.elasticsearch.action.admin.cluster.snapshots.create.CreateSnapshotRequest;CreateSnapshotRequest indices(List indices);CreateSnapshotRequest includeGlobalState(boolean includeGlobalState);@return;;;this request;false
org.elasticsearch.action.admin.cluster.snapshots.create.CreateSnapshotRequest;CreateSnapshotRequest indices(List indices);CreateSnapshotRequest source(Map source);@return;;;this request;false
org.elasticsearch.action.admin.cluster.snapshots.create.CreateSnapshotRequest;IndicesOptions indicesOptions();CreateSnapshotRequest indicesOptions(IndicesOptions indicesOptions);Free text;;;Specifies the indices options. Like what type of requested indices to ignore. For example indices that don't exist. ;true
org.elasticsearch.action.admin.cluster.snapshots.create.CreateSnapshotRequest;IndicesOptions indicesOptions();boolean partial();@return;;;the desired behaviour regarding indices options;false
org.elasticsearch.action.admin.cluster.snapshots.create.CreateSnapshotRequest;CreateSnapshotRequest indicesOptions(IndicesOptions indicesOptions);CreateSnapshotRequest partial(boolean partial);@return;;;this request;false
org.elasticsearch.action.admin.cluster.snapshots.create.CreateSnapshotRequest;CreateSnapshotRequest indicesOptions(IndicesOptions indicesOptions);CreateSnapshotRequest waitForCompletion(boolean waitForCompletion);@return;;;this request;false
org.elasticsearch.action.admin.cluster.snapshots.create.CreateSnapshotRequest;CreateSnapshotRequest indicesOptions(IndicesOptions indicesOptions);CreateSnapshotRequest settings(Settings settings);@return;;;this request;false
org.elasticsearch.action.admin.cluster.snapshots.create.CreateSnapshotRequest;CreateSnapshotRequest indicesOptions(IndicesOptions indicesOptions);CreateSnapshotRequest settings(Settings.Builder settings);@return;;;this request;false
org.elasticsearch.action.admin.cluster.snapshots.create.CreateSnapshotRequest;CreateSnapshotRequest indicesOptions(IndicesOptions indicesOptions);CreateSnapshotRequest settings(String source, XContentType xContentType);@return;;;this request;false
org.elasticsearch.action.admin.cluster.snapshots.create.CreateSnapshotRequest;CreateSnapshotRequest indicesOptions(IndicesOptions indicesOptions);CreateSnapshotRequest settings(Map source);@return;;;this request;false
org.elasticsearch.action.admin.cluster.snapshots.create.CreateSnapshotRequest;CreateSnapshotRequest indicesOptions(IndicesOptions indicesOptions);CreateSnapshotRequest includeGlobalState(boolean includeGlobalState);@return;;;this request;false
org.elasticsearch.action.admin.cluster.snapshots.create.CreateSnapshotRequest;CreateSnapshotRequest indicesOptions(IndicesOptions indicesOptions);CreateSnapshotRequest source(Map source);@return;;;this request;false
org.elasticsearch.action.admin.cluster.snapshots.create.CreateSnapshotRequest;CreateSnapshotRequest partial(boolean partial);CreateSnapshotRequest waitForCompletion(boolean waitForCompletion);@return;;;this request;false
org.elasticsearch.action.admin.cluster.snapshots.create.CreateSnapshotRequest;CreateSnapshotRequest partial(boolean partial);CreateSnapshotRequest settings(Settings settings);@return;;;this request;false
org.elasticsearch.action.admin.cluster.snapshots.create.CreateSnapshotRequest;CreateSnapshotRequest partial(boolean partial);CreateSnapshotRequest settings(Settings.Builder settings);@return;;;this request;false
org.elasticsearch.action.admin.cluster.snapshots.create.CreateSnapshotRequest;CreateSnapshotRequest partial(boolean partial);CreateSnapshotRequest settings(String source, XContentType xContentType);@return;;;this request;false
org.elasticsearch.action.admin.cluster.snapshots.create.CreateSnapshotRequest;CreateSnapshotRequest partial(boolean partial);CreateSnapshotRequest settings(Map source);@return;;;this request;false
org.elasticsearch.action.admin.cluster.snapshots.create.CreateSnapshotRequest;CreateSnapshotRequest partial(boolean partial);CreateSnapshotRequest includeGlobalState(boolean includeGlobalState);@return;;;this request;false
org.elasticsearch.action.admin.cluster.snapshots.create.CreateSnapshotRequest;CreateSnapshotRequest partial(boolean partial);CreateSnapshotRequest source(Map source);@return;;;this request;false
org.elasticsearch.action.admin.cluster.snapshots.create.CreateSnapshotRequest;CreateSnapshotRequest waitForCompletion(boolean waitForCompletion);CreateSnapshotRequest settings(Settings settings);@return;;;this request;false
org.elasticsearch.action.admin.cluster.snapshots.create.CreateSnapshotRequest;CreateSnapshotRequest waitForCompletion(boolean waitForCompletion);CreateSnapshotRequest settings(Settings.Builder settings);@return;;;this request;false
org.elasticsearch.action.admin.cluster.snapshots.create.CreateSnapshotRequest;CreateSnapshotRequest waitForCompletion(boolean waitForCompletion);CreateSnapshotRequest settings(String source, XContentType xContentType);@return;;;this request;false
org.elasticsearch.action.admin.cluster.snapshots.create.CreateSnapshotRequest;CreateSnapshotRequest waitForCompletion(boolean waitForCompletion);CreateSnapshotRequest settings(Map source);@return;;;this request;false
org.elasticsearch.action.admin.cluster.snapshots.create.CreateSnapshotRequest;CreateSnapshotRequest waitForCompletion(boolean waitForCompletion);CreateSnapshotRequest includeGlobalState(boolean includeGlobalState);@return;;;this request;false
org.elasticsearch.action.admin.cluster.snapshots.create.CreateSnapshotRequest;CreateSnapshotRequest waitForCompletion(boolean waitForCompletion);CreateSnapshotRequest source(Map source);@return;;;this request;false
org.elasticsearch.action.admin.cluster.snapshots.create.CreateSnapshotRequest;CreateSnapshotRequest settings(Settings settings);CreateSnapshotRequest settings(Settings.Builder settings);Whole;;;Sets repository-specific snapshot settings. <p> See repository documentation for more information.  @param repository-specific snapshot settings @return this request ;false
org.elasticsearch.action.admin.cluster.snapshots.create.CreateSnapshotRequest;CreateSnapshotRequest settings(Settings settings);CreateSnapshotRequest settings(String source, XContentType xContentType);@return;;;this request;true
org.elasticsearch.action.admin.cluster.snapshots.create.CreateSnapshotRequest;CreateSnapshotRequest settings(Settings settings);CreateSnapshotRequest settings(String source, XContentType xContentType);@param;Settings settings;String source;repository-specific snapshot settings;true
org.elasticsearch.action.admin.cluster.snapshots.create.CreateSnapshotRequest;CreateSnapshotRequest settings(Settings settings);CreateSnapshotRequest settings(Map source);Whole;;;Sets repository-specific snapshot settings. <p> See repository documentation for more information.  @param repository-specific snapshot settings @return this request ;false
org.elasticsearch.action.admin.cluster.snapshots.create.CreateSnapshotRequest;CreateSnapshotRequest settings(Settings settings);CreateSnapshotRequest includeGlobalState(boolean includeGlobalState);@return;;;this request;false
org.elasticsearch.action.admin.cluster.snapshots.create.CreateSnapshotRequest;CreateSnapshotRequest settings(Settings settings);CreateSnapshotRequest source(Map source);@return;;;this request;false
org.elasticsearch.action.admin.cluster.snapshots.create.CreateSnapshotRequest;CreateSnapshotRequest settings(Settings.Builder settings);CreateSnapshotRequest settings(String source, XContentType xContentType);@return;;;this request;true
org.elasticsearch.action.admin.cluster.snapshots.create.CreateSnapshotRequest;CreateSnapshotRequest settings(Settings.Builder settings);CreateSnapshotRequest settings(String source, XContentType xContentType);@param;Settings.Builder settings;String source;repository-specific snapshot settings;true
org.elasticsearch.action.admin.cluster.snapshots.create.CreateSnapshotRequest;CreateSnapshotRequest settings(Settings.Builder settings);CreateSnapshotRequest settings(Map source);Whole;;;Sets repository-specific snapshot settings. <p> See repository documentation for more information.  @param repository-specific snapshot settings @return this request ;false
org.elasticsearch.action.admin.cluster.snapshots.create.CreateSnapshotRequest;CreateSnapshotRequest settings(Settings.Builder settings);CreateSnapshotRequest includeGlobalState(boolean includeGlobalState);@return;;;this request;false
org.elasticsearch.action.admin.cluster.snapshots.create.CreateSnapshotRequest;CreateSnapshotRequest settings(Settings.Builder settings);CreateSnapshotRequest source(Map source);@return;;;this request;false
org.elasticsearch.action.admin.cluster.snapshots.create.CreateSnapshotRequest;CreateSnapshotRequest settings(String source, XContentType xContentType);CreateSnapshotRequest settings(Map source);@return;;;this request;true
org.elasticsearch.action.admin.cluster.snapshots.create.CreateSnapshotRequest;CreateSnapshotRequest settings(String source, XContentType xContentType);CreateSnapshotRequest settings(Map source);@param;String source;Map<String,Object> source;repository-specific snapshot settings;true
org.elasticsearch.action.admin.cluster.snapshots.create.CreateSnapshotRequest;CreateSnapshotRequest settings(String source, XContentType xContentType);CreateSnapshotRequest includeGlobalState(boolean includeGlobalState);@return;;;this request;false
org.elasticsearch.action.admin.cluster.snapshots.create.CreateSnapshotRequest;CreateSnapshotRequest settings(String source, XContentType xContentType);CreateSnapshotRequest source(Map source);@return;;;this request;false
org.elasticsearch.action.admin.cluster.snapshots.create.CreateSnapshotRequest;CreateSnapshotRequest settings(Map source);CreateSnapshotRequest includeGlobalState(boolean includeGlobalState);@return;;;this request;false
org.elasticsearch.action.admin.cluster.snapshots.create.CreateSnapshotRequest;CreateSnapshotRequest settings(Map source);CreateSnapshotRequest source(Map source);@return;;;this request;false
org.elasticsearch.action.admin.cluster.snapshots.create.CreateSnapshotRequest;CreateSnapshotRequest includeGlobalState(boolean includeGlobalState);CreateSnapshotRequest source(Map source);@return;;;this request;false
org.elasticsearch.action.admin.cluster.snapshots.create.CreateSnapshotRequestBuilder;CreateSnapshotRequestBuilder setSnapshot(String snapshot);CreateSnapshotRequestBuilder setRepository(String repository);@return;;;this builder;false
org.elasticsearch.action.admin.cluster.snapshots.create.CreateSnapshotRequestBuilder;CreateSnapshotRequestBuilder setSnapshot(String snapshot);CreateSnapshotRequestBuilder setIndices(String indices);@return;;;this builder;false
org.elasticsearch.action.admin.cluster.snapshots.create.CreateSnapshotRequestBuilder;CreateSnapshotRequestBuilder setSnapshot(String snapshot);CreateSnapshotRequestBuilder setWaitForCompletion(boolean waitForCompletion);@return;;;this builder;false
org.elasticsearch.action.admin.cluster.snapshots.create.CreateSnapshotRequestBuilder;CreateSnapshotRequestBuilder setSnapshot(String snapshot);CreateSnapshotRequestBuilder setPartial(boolean partial);@return;;;this builder;false
org.elasticsearch.action.admin.cluster.snapshots.create.CreateSnapshotRequestBuilder;CreateSnapshotRequestBuilder setSnapshot(String snapshot);CreateSnapshotRequestBuilder setSettings(Settings settings);@return;;;this builder;false
org.elasticsearch.action.admin.cluster.snapshots.create.CreateSnapshotRequestBuilder;CreateSnapshotRequestBuilder setSnapshot(String snapshot);CreateSnapshotRequestBuilder setSettings(Settings.Builder settings);@return;;;this builder;false
org.elasticsearch.action.admin.cluster.snapshots.create.CreateSnapshotRequestBuilder;CreateSnapshotRequestBuilder setSnapshot(String snapshot);CreateSnapshotRequestBuilder setSettings(String source, XContentType xContentType);@return;;;this builder;false
org.elasticsearch.action.admin.cluster.snapshots.create.CreateSnapshotRequestBuilder;CreateSnapshotRequestBuilder setSnapshot(String snapshot);CreateSnapshotRequestBuilder setSettings(Map settings);@return;;;this builder;false
org.elasticsearch.action.admin.cluster.snapshots.create.CreateSnapshotRequestBuilder;CreateSnapshotRequestBuilder setSnapshot(String snapshot);CreateSnapshotRequestBuilder setIncludeGlobalState(boolean includeGlobalState);@return;;;this builder;false
org.elasticsearch.action.admin.cluster.snapshots.create.CreateSnapshotRequestBuilder;CreateSnapshotRequestBuilder setRepository(String repository);CreateSnapshotRequestBuilder setIndices(String indices);@return;;;this builder;false
org.elasticsearch.action.admin.cluster.snapshots.create.CreateSnapshotRequestBuilder;CreateSnapshotRequestBuilder setRepository(String repository);CreateSnapshotRequestBuilder setWaitForCompletion(boolean waitForCompletion);@return;;;this builder;false
org.elasticsearch.action.admin.cluster.snapshots.create.CreateSnapshotRequestBuilder;CreateSnapshotRequestBuilder setRepository(String repository);CreateSnapshotRequestBuilder setPartial(boolean partial);@return;;;this builder;false
org.elasticsearch.action.admin.cluster.snapshots.create.CreateSnapshotRequestBuilder;CreateSnapshotRequestBuilder setRepository(String repository);CreateSnapshotRequestBuilder setSettings(Settings settings);@return;;;this builder;false
org.elasticsearch.action.admin.cluster.snapshots.create.CreateSnapshotRequestBuilder;CreateSnapshotRequestBuilder setRepository(String repository);CreateSnapshotRequestBuilder setSettings(Settings.Builder settings);@return;;;this builder;false
org.elasticsearch.action.admin.cluster.snapshots.create.CreateSnapshotRequestBuilder;CreateSnapshotRequestBuilder setRepository(String repository);CreateSnapshotRequestBuilder setSettings(String source, XContentType xContentType);@return;;;this builder;false
org.elasticsearch.action.admin.cluster.snapshots.create.CreateSnapshotRequestBuilder;CreateSnapshotRequestBuilder setRepository(String repository);CreateSnapshotRequestBuilder setSettings(Map settings);@return;;;this builder;false
org.elasticsearch.action.admin.cluster.snapshots.create.CreateSnapshotRequestBuilder;CreateSnapshotRequestBuilder setRepository(String repository);CreateSnapshotRequestBuilder setIncludeGlobalState(boolean includeGlobalState);@return;;;this builder;false
org.elasticsearch.action.admin.cluster.snapshots.create.CreateSnapshotRequestBuilder;CreateSnapshotRequestBuilder setIndices(String indices);CreateSnapshotRequestBuilder setWaitForCompletion(boolean waitForCompletion);@return;;;this builder;false
org.elasticsearch.action.admin.cluster.snapshots.create.CreateSnapshotRequestBuilder;CreateSnapshotRequestBuilder setIndices(String indices);CreateSnapshotRequestBuilder setPartial(boolean partial);@return;;;this builder;false
org.elasticsearch.action.admin.cluster.snapshots.create.CreateSnapshotRequestBuilder;CreateSnapshotRequestBuilder setIndices(String indices);CreateSnapshotRequestBuilder setSettings(Settings settings);@return;;;this builder;false
org.elasticsearch.action.admin.cluster.snapshots.create.CreateSnapshotRequestBuilder;CreateSnapshotRequestBuilder setIndices(String indices);CreateSnapshotRequestBuilder setSettings(Settings.Builder settings);@return;;;this builder;false
org.elasticsearch.action.admin.cluster.snapshots.create.CreateSnapshotRequestBuilder;CreateSnapshotRequestBuilder setIndices(String indices);CreateSnapshotRequestBuilder setSettings(String source, XContentType xContentType);@return;;;this builder;false
org.elasticsearch.action.admin.cluster.snapshots.create.CreateSnapshotRequestBuilder;CreateSnapshotRequestBuilder setIndices(String indices);CreateSnapshotRequestBuilder setSettings(Map settings);@return;;;this builder;false
org.elasticsearch.action.admin.cluster.snapshots.create.CreateSnapshotRequestBuilder;CreateSnapshotRequestBuilder setIndices(String indices);CreateSnapshotRequestBuilder setIncludeGlobalState(boolean includeGlobalState);@return;;;this builder;false
org.elasticsearch.action.admin.cluster.snapshots.create.CreateSnapshotRequestBuilder;CreateSnapshotRequestBuilder setWaitForCompletion(boolean waitForCompletion);CreateSnapshotRequestBuilder setPartial(boolean partial);@return;;;this builder;false
org.elasticsearch.action.admin.cluster.snapshots.create.CreateSnapshotRequestBuilder;CreateSnapshotRequestBuilder setWaitForCompletion(boolean waitForCompletion);CreateSnapshotRequestBuilder setSettings(Settings settings);@return;;;this builder;false
org.elasticsearch.action.admin.cluster.snapshots.create.CreateSnapshotRequestBuilder;CreateSnapshotRequestBuilder setWaitForCompletion(boolean waitForCompletion);CreateSnapshotRequestBuilder setSettings(Settings.Builder settings);@return;;;this builder;false
org.elasticsearch.action.admin.cluster.snapshots.create.CreateSnapshotRequestBuilder;CreateSnapshotRequestBuilder setWaitForCompletion(boolean waitForCompletion);CreateSnapshotRequestBuilder setSettings(String source, XContentType xContentType);@return;;;this builder;false
org.elasticsearch.action.admin.cluster.snapshots.create.CreateSnapshotRequestBuilder;CreateSnapshotRequestBuilder setWaitForCompletion(boolean waitForCompletion);CreateSnapshotRequestBuilder setSettings(Map settings);@return;;;this builder;false
org.elasticsearch.action.admin.cluster.snapshots.create.CreateSnapshotRequestBuilder;CreateSnapshotRequestBuilder setWaitForCompletion(boolean waitForCompletion);CreateSnapshotRequestBuilder setIncludeGlobalState(boolean includeGlobalState);@return;;;this builder;false
org.elasticsearch.action.admin.cluster.snapshots.create.CreateSnapshotRequestBuilder;CreateSnapshotRequestBuilder setPartial(boolean partial);CreateSnapshotRequestBuilder setSettings(Settings settings);@return;;;this builder;false
org.elasticsearch.action.admin.cluster.snapshots.create.CreateSnapshotRequestBuilder;CreateSnapshotRequestBuilder setPartial(boolean partial);CreateSnapshotRequestBuilder setSettings(Settings.Builder settings);@return;;;this builder;false
org.elasticsearch.action.admin.cluster.snapshots.create.CreateSnapshotRequestBuilder;CreateSnapshotRequestBuilder setPartial(boolean partial);CreateSnapshotRequestBuilder setSettings(String source, XContentType xContentType);@return;;;this builder;false
org.elasticsearch.action.admin.cluster.snapshots.create.CreateSnapshotRequestBuilder;CreateSnapshotRequestBuilder setPartial(boolean partial);CreateSnapshotRequestBuilder setSettings(Map settings);@return;;;this builder;false
org.elasticsearch.action.admin.cluster.snapshots.create.CreateSnapshotRequestBuilder;CreateSnapshotRequestBuilder setPartial(boolean partial);CreateSnapshotRequestBuilder setIncludeGlobalState(boolean includeGlobalState);@return;;;this builder;false
org.elasticsearch.action.admin.cluster.snapshots.create.CreateSnapshotRequestBuilder;CreateSnapshotRequestBuilder setSettings(Settings settings);CreateSnapshotRequestBuilder setSettings(Settings.Builder settings);Whole;;;Sets repository-specific snapshot settings. <p> See repository documentation for more information.  @param repository-specific snapshot settings @return this builder ;false
org.elasticsearch.action.admin.cluster.snapshots.create.CreateSnapshotRequestBuilder;CreateSnapshotRequestBuilder setSettings(Settings settings);CreateSnapshotRequestBuilder setSettings(String source, XContentType xContentType);@return;;;this builder;true
org.elasticsearch.action.admin.cluster.snapshots.create.CreateSnapshotRequestBuilder;CreateSnapshotRequestBuilder setSettings(Settings settings);CreateSnapshotRequestBuilder setSettings(String source, XContentType xContentType);@param;Settings settings;String source;repository-specific snapshot settings;true
org.elasticsearch.action.admin.cluster.snapshots.create.CreateSnapshotRequestBuilder;CreateSnapshotRequestBuilder setSettings(Settings settings);CreateSnapshotRequestBuilder setSettings(Map settings);Whole;;;Sets repository-specific snapshot settings. <p> See repository documentation for more information.  @param repository-specific snapshot settings @return this builder ;false
org.elasticsearch.action.admin.cluster.snapshots.create.CreateSnapshotRequestBuilder;CreateSnapshotRequestBuilder setSettings(Settings settings);CreateSnapshotRequestBuilder setIncludeGlobalState(boolean includeGlobalState);@return;;;this builder;false
org.elasticsearch.action.admin.cluster.snapshots.create.CreateSnapshotRequestBuilder;CreateSnapshotRequestBuilder setSettings(Settings.Builder settings);CreateSnapshotRequestBuilder setSettings(String source, XContentType xContentType);@return;;;this builder;true
org.elasticsearch.action.admin.cluster.snapshots.create.CreateSnapshotRequestBuilder;CreateSnapshotRequestBuilder setSettings(Settings.Builder settings);CreateSnapshotRequestBuilder setSettings(String source, XContentType xContentType);@param;Settings.Builder settings;String source;repository-specific snapshot settings;true
org.elasticsearch.action.admin.cluster.snapshots.create.CreateSnapshotRequestBuilder;CreateSnapshotRequestBuilder setSettings(Settings.Builder settings);CreateSnapshotRequestBuilder setSettings(Map settings);Whole;;;Sets repository-specific snapshot settings. <p> See repository documentation for more information.  @param repository-specific snapshot settings @return this builder ;false
org.elasticsearch.action.admin.cluster.snapshots.create.CreateSnapshotRequestBuilder;CreateSnapshotRequestBuilder setSettings(Settings.Builder settings);CreateSnapshotRequestBuilder setIncludeGlobalState(boolean includeGlobalState);@return;;;this builder;false
org.elasticsearch.action.admin.cluster.snapshots.create.CreateSnapshotRequestBuilder;CreateSnapshotRequestBuilder setSettings(String source, XContentType xContentType);CreateSnapshotRequestBuilder setSettings(Map settings);@return;;;this builder;true
org.elasticsearch.action.admin.cluster.snapshots.create.CreateSnapshotRequestBuilder;CreateSnapshotRequestBuilder setSettings(String source, XContentType xContentType);CreateSnapshotRequestBuilder setSettings(Map settings);@param;String source;Map<String,Object> settings;repository-specific snapshot settings;true
org.elasticsearch.action.admin.cluster.snapshots.create.CreateSnapshotRequestBuilder;CreateSnapshotRequestBuilder setSettings(String source, XContentType xContentType);CreateSnapshotRequestBuilder setIncludeGlobalState(boolean includeGlobalState);@return;;;this builder;false
org.elasticsearch.action.admin.cluster.snapshots.create.CreateSnapshotRequestBuilder;CreateSnapshotRequestBuilder setSettings(Map settings);CreateSnapshotRequestBuilder setIncludeGlobalState(boolean includeGlobalState);@return;;;this builder;false
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequest; RestoreSnapshotRequest(String repository, String snapshot);RestoreSnapshotRequest snapshot(String snapshot);@param;String snapshot;String snapshot;snapshot name;true
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequest; RestoreSnapshotRequest(String repository, String snapshot);RestoreSnapshotRequest repository(String repository);@param;String repository;String repository;repository name;true
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequest;RestoreSnapshotRequest snapshot(String snapshot);RestoreSnapshotRequest repository(String repository);@return;;;this request;false
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequest;RestoreSnapshotRequest snapshot(String snapshot);RestoreSnapshotRequest indices(String indices);@return;;;this request;false
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequest;RestoreSnapshotRequest snapshot(String snapshot);RestoreSnapshotRequest indices(List indices);@return;;;this request;false
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequest;RestoreSnapshotRequest snapshot(String snapshot);RestoreSnapshotRequest indicesOptions(IndicesOptions indicesOptions);@return;;;this request;false
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequest;RestoreSnapshotRequest snapshot(String snapshot);RestoreSnapshotRequest renamePattern(String renamePattern);@return;;;this request;false
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequest;RestoreSnapshotRequest snapshot(String snapshot);RestoreSnapshotRequest waitForCompletion(boolean waitForCompletion);@return;;;this request;false
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequest;RestoreSnapshotRequest snapshot(String snapshot);RestoreSnapshotRequest partial(boolean partial);@return;;;this request;false
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequest;RestoreSnapshotRequest snapshot(String snapshot);RestoreSnapshotRequest settings(Settings settings);@return;;;this request;false
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequest;RestoreSnapshotRequest snapshot(String snapshot);RestoreSnapshotRequest settings(Settings.Builder settings);@return;;;this request;false
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequest;RestoreSnapshotRequest snapshot(String snapshot);RestoreSnapshotRequest settings(String source, XContentType xContentType);@return;;;this request;false
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequest;RestoreSnapshotRequest snapshot(String snapshot);RestoreSnapshotRequest settings(Map source);@return;;;this request;false
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequest;RestoreSnapshotRequest snapshot(String snapshot);RestoreSnapshotRequest includeGlobalState(boolean includeGlobalState);@return;;;this request;false
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequest;RestoreSnapshotRequest snapshot(String snapshot);RestoreSnapshotRequest includeAliases(boolean includeAliases);@return;;;this request;false
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequest;RestoreSnapshotRequest snapshot(String snapshot);RestoreSnapshotRequest source(Map source);@return;;;this request;false
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequest;RestoreSnapshotRequest repository(String repository);RestoreSnapshotRequest indices(String indices);@return;;;this request;false
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequest;RestoreSnapshotRequest repository(String repository);RestoreSnapshotRequest indices(List indices);@return;;;this request;false
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequest;RestoreSnapshotRequest repository(String repository);RestoreSnapshotRequest indicesOptions(IndicesOptions indicesOptions);@return;;;this request;false
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequest;RestoreSnapshotRequest repository(String repository);RestoreSnapshotRequest renamePattern(String renamePattern);@return;;;this request;false
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequest;RestoreSnapshotRequest repository(String repository);RestoreSnapshotRequest waitForCompletion(boolean waitForCompletion);@return;;;this request;false
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequest;RestoreSnapshotRequest repository(String repository);RestoreSnapshotRequest partial(boolean partial);@return;;;this request;false
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequest;RestoreSnapshotRequest repository(String repository);RestoreSnapshotRequest settings(Settings settings);@return;;;this request;false
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequest;RestoreSnapshotRequest repository(String repository);RestoreSnapshotRequest settings(Settings.Builder settings);@return;;;this request;false
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequest;RestoreSnapshotRequest repository(String repository);RestoreSnapshotRequest settings(String source, XContentType xContentType);@return;;;this request;false
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequest;RestoreSnapshotRequest repository(String repository);RestoreSnapshotRequest settings(Map source);@return;;;this request;false
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequest;RestoreSnapshotRequest repository(String repository);RestoreSnapshotRequest includeGlobalState(boolean includeGlobalState);@return;;;this request;false
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequest;RestoreSnapshotRequest repository(String repository);RestoreSnapshotRequest includeAliases(boolean includeAliases);@return;;;this request;false
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequest;RestoreSnapshotRequest repository(String repository);RestoreSnapshotRequest source(Map source);@return;;;this request;false
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequest;RestoreSnapshotRequest indices(String indices);RestoreSnapshotRequest indices(List indices);Whole;;;Sets the list of indices that should be restored from snapshot <p> The list of indices supports multi-index syntax. For example: "+test*" ,"-test42" will index all indices with prefix "test" except index "test42". Aliases are not supported. An empty list or {"_all"} will restore all open indices in the snapshot.  @param list of indices @return this request ;false
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequest;RestoreSnapshotRequest indices(String indices);RestoreSnapshotRequest indicesOptions(IndicesOptions indicesOptions);@return;;;this request;false
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequest;RestoreSnapshotRequest indices(String indices);RestoreSnapshotRequest renamePattern(String renamePattern);@return;;;this request;false
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequest;RestoreSnapshotRequest indices(String indices);RestoreSnapshotRequest waitForCompletion(boolean waitForCompletion);@return;;;this request;false
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequest;RestoreSnapshotRequest indices(String indices);RestoreSnapshotRequest partial(boolean partial);@return;;;this request;false
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequest;RestoreSnapshotRequest indices(String indices);RestoreSnapshotRequest settings(Settings settings);@return;;;this request;false
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequest;RestoreSnapshotRequest indices(String indices);RestoreSnapshotRequest settings(Settings.Builder settings);@return;;;this request;false
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequest;RestoreSnapshotRequest indices(String indices);RestoreSnapshotRequest settings(String source, XContentType xContentType);@return;;;this request;false
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequest;RestoreSnapshotRequest indices(String indices);RestoreSnapshotRequest settings(Map source);@return;;;this request;false
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequest;RestoreSnapshotRequest indices(String indices);RestoreSnapshotRequest includeGlobalState(boolean includeGlobalState);@return;;;this request;false
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequest;RestoreSnapshotRequest indices(String indices);RestoreSnapshotRequest includeAliases(boolean includeAliases);@return;;;this request;false
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequest;RestoreSnapshotRequest indices(String indices);RestoreSnapshotRequest source(Map source);@return;;;this request;false
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequest;RestoreSnapshotRequest indices(List indices);RestoreSnapshotRequest indicesOptions(IndicesOptions indicesOptions);@return;;;this request;false
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequest;RestoreSnapshotRequest indices(List indices);RestoreSnapshotRequest renamePattern(String renamePattern);@return;;;this request;false
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequest;RestoreSnapshotRequest indices(List indices);RestoreSnapshotRequest waitForCompletion(boolean waitForCompletion);@return;;;this request;false
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequest;RestoreSnapshotRequest indices(List indices);RestoreSnapshotRequest partial(boolean partial);@return;;;this request;false
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequest;RestoreSnapshotRequest indices(List indices);RestoreSnapshotRequest settings(Settings settings);@return;;;this request;false
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequest;RestoreSnapshotRequest indices(List indices);RestoreSnapshotRequest settings(Settings.Builder settings);@return;;;this request;false
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequest;RestoreSnapshotRequest indices(List indices);RestoreSnapshotRequest settings(String source, XContentType xContentType);@return;;;this request;false
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequest;RestoreSnapshotRequest indices(List indices);RestoreSnapshotRequest settings(Map source);@return;;;this request;false
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequest;RestoreSnapshotRequest indices(List indices);RestoreSnapshotRequest includeGlobalState(boolean includeGlobalState);@return;;;this request;false
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequest;RestoreSnapshotRequest indices(List indices);RestoreSnapshotRequest includeAliases(boolean includeAliases);@return;;;this request;false
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequest;RestoreSnapshotRequest indices(List indices);RestoreSnapshotRequest source(Map source);@return;;;this request;false
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequest;IndicesOptions indicesOptions();RestoreSnapshotRequest indicesOptions(IndicesOptions indicesOptions);Free text;;;Specifies what type of requested indices to ignore and how to deal with wildcard expressions. For example indices that don't exist. ;true
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequest;RestoreSnapshotRequest indicesOptions(IndicesOptions indicesOptions);RestoreSnapshotRequest renamePattern(String renamePattern);@return;;;this request;false
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequest;RestoreSnapshotRequest indicesOptions(IndicesOptions indicesOptions);RestoreSnapshotRequest waitForCompletion(boolean waitForCompletion);@return;;;this request;false
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequest;RestoreSnapshotRequest indicesOptions(IndicesOptions indicesOptions);RestoreSnapshotRequest partial(boolean partial);@return;;;this request;false
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequest;RestoreSnapshotRequest indicesOptions(IndicesOptions indicesOptions);RestoreSnapshotRequest settings(Settings settings);@return;;;this request;false
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequest;RestoreSnapshotRequest indicesOptions(IndicesOptions indicesOptions);RestoreSnapshotRequest settings(Settings.Builder settings);@return;;;this request;false
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequest;RestoreSnapshotRequest indicesOptions(IndicesOptions indicesOptions);RestoreSnapshotRequest settings(String source, XContentType xContentType);@return;;;this request;false
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequest;RestoreSnapshotRequest indicesOptions(IndicesOptions indicesOptions);RestoreSnapshotRequest settings(Map source);@return;;;this request;false
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequest;RestoreSnapshotRequest indicesOptions(IndicesOptions indicesOptions);RestoreSnapshotRequest includeGlobalState(boolean includeGlobalState);@return;;;this request;false
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequest;RestoreSnapshotRequest indicesOptions(IndicesOptions indicesOptions);RestoreSnapshotRequest includeAliases(boolean includeAliases);@return;;;this request;false
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequest;RestoreSnapshotRequest indicesOptions(IndicesOptions indicesOptions);RestoreSnapshotRequest source(Map source);@return;;;this request;false
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequest;RestoreSnapshotRequest renamePattern(String renamePattern);RestoreSnapshotRequest waitForCompletion(boolean waitForCompletion);@return;;;this request;false
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequest;RestoreSnapshotRequest renamePattern(String renamePattern);RestoreSnapshotRequest partial(boolean partial);@return;;;this request;false
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequest;RestoreSnapshotRequest renamePattern(String renamePattern);RestoreSnapshotRequest settings(Settings settings);@return;;;this request;false
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequest;RestoreSnapshotRequest renamePattern(String renamePattern);RestoreSnapshotRequest settings(Settings.Builder settings);@return;;;this request;false
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequest;RestoreSnapshotRequest renamePattern(String renamePattern);RestoreSnapshotRequest settings(String source, XContentType xContentType);@return;;;this request;false
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequest;RestoreSnapshotRequest renamePattern(String renamePattern);RestoreSnapshotRequest settings(Map source);@return;;;this request;false
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequest;RestoreSnapshotRequest renamePattern(String renamePattern);RestoreSnapshotRequest includeGlobalState(boolean includeGlobalState);@return;;;this request;false
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequest;RestoreSnapshotRequest renamePattern(String renamePattern);RestoreSnapshotRequest includeAliases(boolean includeAliases);@return;;;this request;false
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequest;RestoreSnapshotRequest renamePattern(String renamePattern);RestoreSnapshotRequest source(Map source);@return;;;this request;false
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequest;RestoreSnapshotRequest waitForCompletion(boolean waitForCompletion);RestoreSnapshotRequest partial(boolean partial);@return;;;this request;false
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequest;RestoreSnapshotRequest waitForCompletion(boolean waitForCompletion);RestoreSnapshotRequest settings(Settings settings);@return;;;this request;false
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequest;RestoreSnapshotRequest waitForCompletion(boolean waitForCompletion);RestoreSnapshotRequest settings(Settings.Builder settings);@return;;;this request;false
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequest;RestoreSnapshotRequest waitForCompletion(boolean waitForCompletion);RestoreSnapshotRequest settings(String source, XContentType xContentType);@return;;;this request;false
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequest;RestoreSnapshotRequest waitForCompletion(boolean waitForCompletion);RestoreSnapshotRequest settings(Map source);@return;;;this request;false
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequest;RestoreSnapshotRequest waitForCompletion(boolean waitForCompletion);RestoreSnapshotRequest includeGlobalState(boolean includeGlobalState);@return;;;this request;false
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequest;RestoreSnapshotRequest waitForCompletion(boolean waitForCompletion);RestoreSnapshotRequest includeAliases(boolean includeAliases);@return;;;this request;false
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequest;RestoreSnapshotRequest waitForCompletion(boolean waitForCompletion);RestoreSnapshotRequest source(Map source);@return;;;this request;false
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequest;RestoreSnapshotRequest partial(boolean partial);RestoreSnapshotRequest settings(Settings settings);@return;;;this request;false
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequest;RestoreSnapshotRequest partial(boolean partial);RestoreSnapshotRequest settings(Settings.Builder settings);@return;;;this request;false
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequest;RestoreSnapshotRequest partial(boolean partial);RestoreSnapshotRequest settings(String source, XContentType xContentType);@return;;;this request;false
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequest;RestoreSnapshotRequest partial(boolean partial);RestoreSnapshotRequest settings(Map source);@return;;;this request;false
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequest;RestoreSnapshotRequest partial(boolean partial);RestoreSnapshotRequest includeGlobalState(boolean includeGlobalState);@return;;;this request;false
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequest;RestoreSnapshotRequest partial(boolean partial);RestoreSnapshotRequest includeAliases(boolean includeAliases);@return;;;this request;false
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequest;RestoreSnapshotRequest partial(boolean partial);RestoreSnapshotRequest source(Map source);@return;;;this request;false
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequest;RestoreSnapshotRequest settings(Settings settings);RestoreSnapshotRequest settings(Settings.Builder settings);Whole;;;Sets repository-specific restore settings. <p> See repository documentation for more information.  @param repository-specific snapshot settings @return this request ;false
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequest;RestoreSnapshotRequest settings(Settings settings);RestoreSnapshotRequest settings(String source, XContentType xContentType);@return;;;this request;true
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequest;RestoreSnapshotRequest settings(Settings settings);RestoreSnapshotRequest settings(String source, XContentType xContentType);@param;Settings settings;String source;repository-specific snapshot settings;true
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequest;RestoreSnapshotRequest settings(Settings settings);RestoreSnapshotRequest settings(Map source);@return;;;this request;true
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequest;RestoreSnapshotRequest settings(Settings settings);RestoreSnapshotRequest settings(Map source);@param;Settings settings;Map<String,Object> source;repository-specific snapshot settings;true
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequest;RestoreSnapshotRequest settings(Settings settings);RestoreSnapshotRequest includeGlobalState(boolean includeGlobalState);@return;;;this request;false
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequest;RestoreSnapshotRequest settings(Settings settings);RestoreSnapshotRequest includeAliases(boolean includeAliases);@return;;;this request;false
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequest;RestoreSnapshotRequest settings(Settings settings);RestoreSnapshotRequest source(Map source);@return;;;this request;false
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequest;RestoreSnapshotRequest settings(Settings.Builder settings);RestoreSnapshotRequest settings(String source, XContentType xContentType);@return;;;this request;true
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequest;RestoreSnapshotRequest settings(Settings.Builder settings);RestoreSnapshotRequest settings(String source, XContentType xContentType);@param;Settings.Builder settings;String source;repository-specific snapshot settings;true
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequest;RestoreSnapshotRequest settings(Settings.Builder settings);RestoreSnapshotRequest settings(Map source);@return;;;this request;true
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequest;RestoreSnapshotRequest settings(Settings.Builder settings);RestoreSnapshotRequest settings(Map source);@param;Settings.Builder settings;Map<String,Object> source;repository-specific snapshot settings;true
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequest;RestoreSnapshotRequest settings(Settings.Builder settings);RestoreSnapshotRequest includeGlobalState(boolean includeGlobalState);@return;;;this request;false
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequest;RestoreSnapshotRequest settings(Settings.Builder settings);RestoreSnapshotRequest includeAliases(boolean includeAliases);@return;;;this request;false
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequest;RestoreSnapshotRequest settings(Settings.Builder settings);RestoreSnapshotRequest source(Map source);@return;;;this request;false
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequest;RestoreSnapshotRequest settings(String source, XContentType xContentType);RestoreSnapshotRequest settings(Map source);@return;;;this request;true
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequest;RestoreSnapshotRequest settings(String source, XContentType xContentType);RestoreSnapshotRequest settings(Map source);@param;String source;Map<String,Object> source;repository-specific snapshot settings;true
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequest;RestoreSnapshotRequest settings(String source, XContentType xContentType);RestoreSnapshotRequest includeGlobalState(boolean includeGlobalState);@return;;;this request;false
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequest;RestoreSnapshotRequest settings(String source, XContentType xContentType);RestoreSnapshotRequest includeAliases(boolean includeAliases);@return;;;this request;false
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequest;RestoreSnapshotRequest settings(String source, XContentType xContentType);RestoreSnapshotRequest source(Map source);@return;;;this request;false
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequest;RestoreSnapshotRequest settings(Map source);RestoreSnapshotRequest includeGlobalState(boolean includeGlobalState);@return;;;this request;false
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequest;RestoreSnapshotRequest settings(Map source);RestoreSnapshotRequest includeAliases(boolean includeAliases);@return;;;this request;false
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequest;RestoreSnapshotRequest settings(Map source);RestoreSnapshotRequest source(Map source);@return;;;this request;false
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequest;RestoreSnapshotRequest ignoreIndexSettings(String ignoreIndexSettings);RestoreSnapshotRequest ignoreIndexSettings(List ignoreIndexSettings);Whole;;;Sets the list of index settings and index settings groups that shouldn't be restored from snapshot    ;false
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequest;RestoreSnapshotRequest includeGlobalState(boolean includeGlobalState);RestoreSnapshotRequest includeAliases(boolean includeAliases);@return;;;this request;false
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequest;RestoreSnapshotRequest includeGlobalState(boolean includeGlobalState);RestoreSnapshotRequest source(Map source);@return;;;this request;false
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequest;RestoreSnapshotRequest includeAliases(boolean includeAliases);RestoreSnapshotRequest source(Map source);@return;;;this request;false
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequest;RestoreSnapshotRequest indexSettings(Settings settings);RestoreSnapshotRequest indexSettings(Settings.Builder settings);Whole;;;Sets settings that should be added/changed in all restored indices    ;false
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequest;RestoreSnapshotRequest indexSettings(Settings settings);RestoreSnapshotRequest indexSettings(String source, XContentType xContentType);Whole;;;Sets settings that should be added/changed in all restored indices    ;false
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequest;RestoreSnapshotRequest indexSettings(Settings settings);RestoreSnapshotRequest indexSettings(Map source);Whole;;;Sets settings that should be added/changed in all restored indices    ;false
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequest;RestoreSnapshotRequest indexSettings(Settings.Builder settings);RestoreSnapshotRequest indexSettings(String source, XContentType xContentType);Whole;;;Sets settings that should be added/changed in all restored indices    ;false
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequest;RestoreSnapshotRequest indexSettings(Settings.Builder settings);RestoreSnapshotRequest indexSettings(Map source);Whole;;;Sets settings that should be added/changed in all restored indices    ;false
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequest;RestoreSnapshotRequest indexSettings(String source, XContentType xContentType);RestoreSnapshotRequest indexSettings(Map source);Whole;;;Sets settings that should be added/changed in all restored indices    ;false
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequestBuilder;RestoreSnapshotRequestBuilder setSnapshot(String snapshot);RestoreSnapshotRequestBuilder setRepository(String repository);@return;;;this builder;false
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequestBuilder;RestoreSnapshotRequestBuilder setSnapshot(String snapshot);RestoreSnapshotRequestBuilder setIndices(String indices);@return;;;this builder;false
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequestBuilder;RestoreSnapshotRequestBuilder setSnapshot(String snapshot);RestoreSnapshotRequestBuilder setIndicesOptions(IndicesOptions indicesOptions);@return;;;this builder;false
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequestBuilder;RestoreSnapshotRequestBuilder setSnapshot(String snapshot);RestoreSnapshotRequestBuilder setRenamePattern(String renamePattern);@return;;;this builder;false
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequestBuilder;RestoreSnapshotRequestBuilder setSnapshot(String snapshot);RestoreSnapshotRequestBuilder setRenameReplacement(String renameReplacement);@return;;;this builder;false
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequestBuilder;RestoreSnapshotRequestBuilder setSnapshot(String snapshot);RestoreSnapshotRequestBuilder setSettings(Settings settings);@return;;;this builder;false
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequestBuilder;RestoreSnapshotRequestBuilder setSnapshot(String snapshot);RestoreSnapshotRequestBuilder setSettings(Settings.Builder settings);@return;;;this builder;false
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequestBuilder;RestoreSnapshotRequestBuilder setSnapshot(String snapshot);RestoreSnapshotRequestBuilder setSettings(String source, XContentType xContentType);@return;;;this builder;false
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequestBuilder;RestoreSnapshotRequestBuilder setSnapshot(String snapshot);RestoreSnapshotRequestBuilder setSettings(Map source);@return;;;this builder;false
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequestBuilder;RestoreSnapshotRequestBuilder setSnapshot(String snapshot);RestoreSnapshotRequestBuilder setWaitForCompletion(boolean waitForCompletion);@return;;;this builder;false
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequestBuilder;RestoreSnapshotRequestBuilder setSnapshot(String snapshot);RestoreSnapshotRequestBuilder setRestoreGlobalState(boolean restoreGlobalState);@return;;;this builder;false
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequestBuilder;RestoreSnapshotRequestBuilder setSnapshot(String snapshot);RestoreSnapshotRequestBuilder setPartial(boolean partial);@return;;;this builder;false
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequestBuilder;RestoreSnapshotRequestBuilder setSnapshot(String snapshot);RestoreSnapshotRequestBuilder setIncludeAliases(boolean restoreAliases);@return;;;this builder;false
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequestBuilder;RestoreSnapshotRequestBuilder setSnapshot(String snapshot);RestoreSnapshotRequestBuilder setIndexSettings(Settings settings);@return;;;this builder;false
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequestBuilder;RestoreSnapshotRequestBuilder setSnapshot(String snapshot);RestoreSnapshotRequestBuilder setIndexSettings(Settings.Builder settings);@return;;;this builder;false
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequestBuilder;RestoreSnapshotRequestBuilder setSnapshot(String snapshot);RestoreSnapshotRequestBuilder setIndexSettings(String source, XContentType xContentType);@return;;;this builder;false
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequestBuilder;RestoreSnapshotRequestBuilder setSnapshot(String snapshot);RestoreSnapshotRequestBuilder setIndexSettings(Map source);@return;;;this builder;false
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequestBuilder;RestoreSnapshotRequestBuilder setRepository(String repository);RestoreSnapshotRequestBuilder setIndices(String indices);@return;;;this builder;false
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequestBuilder;RestoreSnapshotRequestBuilder setRepository(String repository);RestoreSnapshotRequestBuilder setIndicesOptions(IndicesOptions indicesOptions);@return;;;this builder;false
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequestBuilder;RestoreSnapshotRequestBuilder setRepository(String repository);RestoreSnapshotRequestBuilder setRenamePattern(String renamePattern);@return;;;this builder;false
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequestBuilder;RestoreSnapshotRequestBuilder setRepository(String repository);RestoreSnapshotRequestBuilder setRenameReplacement(String renameReplacement);@return;;;this builder;false
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequestBuilder;RestoreSnapshotRequestBuilder setRepository(String repository);RestoreSnapshotRequestBuilder setSettings(Settings settings);@return;;;this builder;false
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequestBuilder;RestoreSnapshotRequestBuilder setRepository(String repository);RestoreSnapshotRequestBuilder setSettings(Settings.Builder settings);@return;;;this builder;false
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequestBuilder;RestoreSnapshotRequestBuilder setRepository(String repository);RestoreSnapshotRequestBuilder setSettings(String source, XContentType xContentType);@return;;;this builder;false
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequestBuilder;RestoreSnapshotRequestBuilder setRepository(String repository);RestoreSnapshotRequestBuilder setSettings(Map source);@return;;;this builder;false
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequestBuilder;RestoreSnapshotRequestBuilder setRepository(String repository);RestoreSnapshotRequestBuilder setWaitForCompletion(boolean waitForCompletion);@return;;;this builder;false
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequestBuilder;RestoreSnapshotRequestBuilder setRepository(String repository);RestoreSnapshotRequestBuilder setRestoreGlobalState(boolean restoreGlobalState);@return;;;this builder;false
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequestBuilder;RestoreSnapshotRequestBuilder setRepository(String repository);RestoreSnapshotRequestBuilder setPartial(boolean partial);@return;;;this builder;false
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequestBuilder;RestoreSnapshotRequestBuilder setRepository(String repository);RestoreSnapshotRequestBuilder setIncludeAliases(boolean restoreAliases);@return;;;this builder;false
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequestBuilder;RestoreSnapshotRequestBuilder setRepository(String repository);RestoreSnapshotRequestBuilder setIndexSettings(Settings settings);@return;;;this builder;false
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequestBuilder;RestoreSnapshotRequestBuilder setRepository(String repository);RestoreSnapshotRequestBuilder setIndexSettings(Settings.Builder settings);@return;;;this builder;false
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequestBuilder;RestoreSnapshotRequestBuilder setRepository(String repository);RestoreSnapshotRequestBuilder setIndexSettings(String source, XContentType xContentType);@return;;;this builder;false
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequestBuilder;RestoreSnapshotRequestBuilder setRepository(String repository);RestoreSnapshotRequestBuilder setIndexSettings(Map source);@return;;;this builder;false
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequestBuilder;RestoreSnapshotRequestBuilder setIndices(String indices);RestoreSnapshotRequestBuilder setIndicesOptions(IndicesOptions indicesOptions);@return;;;this builder;false
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequestBuilder;RestoreSnapshotRequestBuilder setIndices(String indices);RestoreSnapshotRequestBuilder setRenamePattern(String renamePattern);@return;;;this builder;false
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequestBuilder;RestoreSnapshotRequestBuilder setIndices(String indices);RestoreSnapshotRequestBuilder setRenameReplacement(String renameReplacement);@return;;;this builder;false
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequestBuilder;RestoreSnapshotRequestBuilder setIndices(String indices);RestoreSnapshotRequestBuilder setSettings(Settings settings);@return;;;this builder;false
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequestBuilder;RestoreSnapshotRequestBuilder setIndices(String indices);RestoreSnapshotRequestBuilder setSettings(Settings.Builder settings);@return;;;this builder;false
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequestBuilder;RestoreSnapshotRequestBuilder setIndices(String indices);RestoreSnapshotRequestBuilder setSettings(String source, XContentType xContentType);@return;;;this builder;false
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequestBuilder;RestoreSnapshotRequestBuilder setIndices(String indices);RestoreSnapshotRequestBuilder setSettings(Map source);@return;;;this builder;false
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequestBuilder;RestoreSnapshotRequestBuilder setIndices(String indices);RestoreSnapshotRequestBuilder setWaitForCompletion(boolean waitForCompletion);@return;;;this builder;false
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequestBuilder;RestoreSnapshotRequestBuilder setIndices(String indices);RestoreSnapshotRequestBuilder setRestoreGlobalState(boolean restoreGlobalState);@return;;;this builder;false
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequestBuilder;RestoreSnapshotRequestBuilder setIndices(String indices);RestoreSnapshotRequestBuilder setPartial(boolean partial);@return;;;this builder;false
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequestBuilder;RestoreSnapshotRequestBuilder setIndices(String indices);RestoreSnapshotRequestBuilder setIncludeAliases(boolean restoreAliases);@return;;;this builder;false
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequestBuilder;RestoreSnapshotRequestBuilder setIndices(String indices);RestoreSnapshotRequestBuilder setIndexSettings(Settings settings);@return;;;this builder;false
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequestBuilder;RestoreSnapshotRequestBuilder setIndices(String indices);RestoreSnapshotRequestBuilder setIndexSettings(Settings.Builder settings);@return;;;this builder;false
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequestBuilder;RestoreSnapshotRequestBuilder setIndices(String indices);RestoreSnapshotRequestBuilder setIndexSettings(String source, XContentType xContentType);@return;;;this builder;false
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequestBuilder;RestoreSnapshotRequestBuilder setIndices(String indices);RestoreSnapshotRequestBuilder setIndexSettings(Map source);@return;;;this builder;false
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequestBuilder;RestoreSnapshotRequestBuilder setIndicesOptions(IndicesOptions indicesOptions);RestoreSnapshotRequestBuilder setRenamePattern(String renamePattern);@return;;;this builder;false
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequestBuilder;RestoreSnapshotRequestBuilder setIndicesOptions(IndicesOptions indicesOptions);RestoreSnapshotRequestBuilder setRenameReplacement(String renameReplacement);@return;;;this builder;false
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequestBuilder;RestoreSnapshotRequestBuilder setIndicesOptions(IndicesOptions indicesOptions);RestoreSnapshotRequestBuilder setSettings(Settings settings);@return;;;this builder;false
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequestBuilder;RestoreSnapshotRequestBuilder setIndicesOptions(IndicesOptions indicesOptions);RestoreSnapshotRequestBuilder setSettings(Settings.Builder settings);@return;;;this builder;false
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequestBuilder;RestoreSnapshotRequestBuilder setIndicesOptions(IndicesOptions indicesOptions);RestoreSnapshotRequestBuilder setSettings(String source, XContentType xContentType);@return;;;this builder;false
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequestBuilder;RestoreSnapshotRequestBuilder setIndicesOptions(IndicesOptions indicesOptions);RestoreSnapshotRequestBuilder setSettings(Map source);@return;;;this builder;false
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequestBuilder;RestoreSnapshotRequestBuilder setIndicesOptions(IndicesOptions indicesOptions);RestoreSnapshotRequestBuilder setWaitForCompletion(boolean waitForCompletion);@return;;;this builder;false
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequestBuilder;RestoreSnapshotRequestBuilder setIndicesOptions(IndicesOptions indicesOptions);RestoreSnapshotRequestBuilder setRestoreGlobalState(boolean restoreGlobalState);@return;;;this builder;false
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequestBuilder;RestoreSnapshotRequestBuilder setIndicesOptions(IndicesOptions indicesOptions);RestoreSnapshotRequestBuilder setPartial(boolean partial);@return;;;this builder;false
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequestBuilder;RestoreSnapshotRequestBuilder setIndicesOptions(IndicesOptions indicesOptions);RestoreSnapshotRequestBuilder setIncludeAliases(boolean restoreAliases);@return;;;this builder;false
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequestBuilder;RestoreSnapshotRequestBuilder setIndicesOptions(IndicesOptions indicesOptions);RestoreSnapshotRequestBuilder setIndexSettings(Settings settings);@return;;;this builder;false
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequestBuilder;RestoreSnapshotRequestBuilder setIndicesOptions(IndicesOptions indicesOptions);RestoreSnapshotRequestBuilder setIndexSettings(Settings.Builder settings);@return;;;this builder;false
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequestBuilder;RestoreSnapshotRequestBuilder setIndicesOptions(IndicesOptions indicesOptions);RestoreSnapshotRequestBuilder setIndexSettings(String source, XContentType xContentType);@return;;;this builder;false
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequestBuilder;RestoreSnapshotRequestBuilder setIndicesOptions(IndicesOptions indicesOptions);RestoreSnapshotRequestBuilder setIndexSettings(Map source);@return;;;this builder;false
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequestBuilder;RestoreSnapshotRequestBuilder setRenamePattern(String renamePattern);RestoreSnapshotRequestBuilder setRenameReplacement(String renameReplacement);@return;;;this builder;false
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequestBuilder;RestoreSnapshotRequestBuilder setRenamePattern(String renamePattern);RestoreSnapshotRequestBuilder setSettings(Settings settings);@return;;;this builder;false
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequestBuilder;RestoreSnapshotRequestBuilder setRenamePattern(String renamePattern);RestoreSnapshotRequestBuilder setSettings(Settings.Builder settings);@return;;;this builder;false
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequestBuilder;RestoreSnapshotRequestBuilder setRenamePattern(String renamePattern);RestoreSnapshotRequestBuilder setSettings(String source, XContentType xContentType);@return;;;this builder;false
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequestBuilder;RestoreSnapshotRequestBuilder setRenamePattern(String renamePattern);RestoreSnapshotRequestBuilder setSettings(Map source);@return;;;this builder;false
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequestBuilder;RestoreSnapshotRequestBuilder setRenamePattern(String renamePattern);RestoreSnapshotRequestBuilder setWaitForCompletion(boolean waitForCompletion);@return;;;this builder;false
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequestBuilder;RestoreSnapshotRequestBuilder setRenamePattern(String renamePattern);RestoreSnapshotRequestBuilder setRestoreGlobalState(boolean restoreGlobalState);@return;;;this builder;false
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequestBuilder;RestoreSnapshotRequestBuilder setRenamePattern(String renamePattern);RestoreSnapshotRequestBuilder setPartial(boolean partial);@return;;;this builder;false
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequestBuilder;RestoreSnapshotRequestBuilder setRenamePattern(String renamePattern);RestoreSnapshotRequestBuilder setIncludeAliases(boolean restoreAliases);@return;;;this builder;false
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequestBuilder;RestoreSnapshotRequestBuilder setRenamePattern(String renamePattern);RestoreSnapshotRequestBuilder setIndexSettings(Settings settings);@return;;;this builder;false
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequestBuilder;RestoreSnapshotRequestBuilder setRenamePattern(String renamePattern);RestoreSnapshotRequestBuilder setIndexSettings(Settings.Builder settings);@return;;;this builder;false
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequestBuilder;RestoreSnapshotRequestBuilder setRenamePattern(String renamePattern);RestoreSnapshotRequestBuilder setIndexSettings(String source, XContentType xContentType);@return;;;this builder;false
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequestBuilder;RestoreSnapshotRequestBuilder setRenamePattern(String renamePattern);RestoreSnapshotRequestBuilder setIndexSettings(Map source);@return;;;this builder;false
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequestBuilder;RestoreSnapshotRequestBuilder setRenameReplacement(String renameReplacement);RestoreSnapshotRequestBuilder setSettings(Settings settings);@return;;;this builder;false
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequestBuilder;RestoreSnapshotRequestBuilder setRenameReplacement(String renameReplacement);RestoreSnapshotRequestBuilder setSettings(Settings.Builder settings);@return;;;this builder;false
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequestBuilder;RestoreSnapshotRequestBuilder setRenameReplacement(String renameReplacement);RestoreSnapshotRequestBuilder setSettings(String source, XContentType xContentType);@return;;;this builder;false
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequestBuilder;RestoreSnapshotRequestBuilder setRenameReplacement(String renameReplacement);RestoreSnapshotRequestBuilder setSettings(Map source);@return;;;this builder;false
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequestBuilder;RestoreSnapshotRequestBuilder setRenameReplacement(String renameReplacement);RestoreSnapshotRequestBuilder setWaitForCompletion(boolean waitForCompletion);@return;;;this builder;false
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequestBuilder;RestoreSnapshotRequestBuilder setRenameReplacement(String renameReplacement);RestoreSnapshotRequestBuilder setRestoreGlobalState(boolean restoreGlobalState);@return;;;this builder;false
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequestBuilder;RestoreSnapshotRequestBuilder setRenameReplacement(String renameReplacement);RestoreSnapshotRequestBuilder setPartial(boolean partial);@return;;;this builder;false
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequestBuilder;RestoreSnapshotRequestBuilder setRenameReplacement(String renameReplacement);RestoreSnapshotRequestBuilder setIncludeAliases(boolean restoreAliases);@return;;;this builder;false
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequestBuilder;RestoreSnapshotRequestBuilder setRenameReplacement(String renameReplacement);RestoreSnapshotRequestBuilder setIndexSettings(Settings settings);@return;;;this builder;false
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequestBuilder;RestoreSnapshotRequestBuilder setRenameReplacement(String renameReplacement);RestoreSnapshotRequestBuilder setIndexSettings(Settings.Builder settings);@return;;;this builder;false
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequestBuilder;RestoreSnapshotRequestBuilder setRenameReplacement(String renameReplacement);RestoreSnapshotRequestBuilder setIndexSettings(String source, XContentType xContentType);@return;;;this builder;false
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequestBuilder;RestoreSnapshotRequestBuilder setRenameReplacement(String renameReplacement);RestoreSnapshotRequestBuilder setIndexSettings(Map source);@return;;;this builder;false
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequestBuilder;RestoreSnapshotRequestBuilder setSettings(Settings settings);RestoreSnapshotRequestBuilder setSettings(Settings.Builder settings);Whole;;;Sets repository-specific restore settings. <p> See repository documentation for more information.  @param repository-specific snapshot settings @return this builder ;false
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequestBuilder;RestoreSnapshotRequestBuilder setSettings(Settings settings);RestoreSnapshotRequestBuilder setSettings(String source, XContentType xContentType);@return;;;this builder;true
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequestBuilder;RestoreSnapshotRequestBuilder setSettings(Settings settings);RestoreSnapshotRequestBuilder setSettings(String source, XContentType xContentType);@param;Settings settings;String source;repository-specific snapshot settings;true
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequestBuilder;RestoreSnapshotRequestBuilder setSettings(Settings settings);RestoreSnapshotRequestBuilder setSettings(Map source);@return;;;this builder;true
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequestBuilder;RestoreSnapshotRequestBuilder setSettings(Settings settings);RestoreSnapshotRequestBuilder setSettings(Map source);@param;Settings settings;Map<String,Object> source;repository-specific snapshot settings;true
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequestBuilder;RestoreSnapshotRequestBuilder setSettings(Settings settings);RestoreSnapshotRequestBuilder setWaitForCompletion(boolean waitForCompletion);@return;;;this builder;false
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequestBuilder;RestoreSnapshotRequestBuilder setSettings(Settings settings);RestoreSnapshotRequestBuilder setRestoreGlobalState(boolean restoreGlobalState);@return;;;this builder;false
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequestBuilder;RestoreSnapshotRequestBuilder setSettings(Settings settings);RestoreSnapshotRequestBuilder setPartial(boolean partial);@return;;;this builder;false
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequestBuilder;RestoreSnapshotRequestBuilder setSettings(Settings settings);RestoreSnapshotRequestBuilder setIncludeAliases(boolean restoreAliases);@return;;;this builder;false
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequestBuilder;RestoreSnapshotRequestBuilder setSettings(Settings settings);RestoreSnapshotRequestBuilder setIndexSettings(Settings settings);@return;;;this builder;false
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequestBuilder;RestoreSnapshotRequestBuilder setSettings(Settings settings);RestoreSnapshotRequestBuilder setIndexSettings(Settings.Builder settings);@return;;;this builder;false
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequestBuilder;RestoreSnapshotRequestBuilder setSettings(Settings settings);RestoreSnapshotRequestBuilder setIndexSettings(String source, XContentType xContentType);@return;;;this builder;false
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequestBuilder;RestoreSnapshotRequestBuilder setSettings(Settings settings);RestoreSnapshotRequestBuilder setIndexSettings(Map source);@return;;;this builder;false
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequestBuilder;RestoreSnapshotRequestBuilder setSettings(Settings.Builder settings);RestoreSnapshotRequestBuilder setSettings(String source, XContentType xContentType);@return;;;this builder;true
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequestBuilder;RestoreSnapshotRequestBuilder setSettings(Settings.Builder settings);RestoreSnapshotRequestBuilder setSettings(String source, XContentType xContentType);@param;Settings.Builder settings;String source;repository-specific snapshot settings;true
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequestBuilder;RestoreSnapshotRequestBuilder setSettings(Settings.Builder settings);RestoreSnapshotRequestBuilder setSettings(Map source);@return;;;this builder;true
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequestBuilder;RestoreSnapshotRequestBuilder setSettings(Settings.Builder settings);RestoreSnapshotRequestBuilder setSettings(Map source);@param;Settings.Builder settings;Map<String,Object> source;repository-specific snapshot settings;true
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequestBuilder;RestoreSnapshotRequestBuilder setSettings(Settings.Builder settings);RestoreSnapshotRequestBuilder setWaitForCompletion(boolean waitForCompletion);@return;;;this builder;false
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequestBuilder;RestoreSnapshotRequestBuilder setSettings(Settings.Builder settings);RestoreSnapshotRequestBuilder setRestoreGlobalState(boolean restoreGlobalState);@return;;;this builder;false
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequestBuilder;RestoreSnapshotRequestBuilder setSettings(Settings.Builder settings);RestoreSnapshotRequestBuilder setPartial(boolean partial);@return;;;this builder;false
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequestBuilder;RestoreSnapshotRequestBuilder setSettings(Settings.Builder settings);RestoreSnapshotRequestBuilder setIncludeAliases(boolean restoreAliases);@return;;;this builder;false
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequestBuilder;RestoreSnapshotRequestBuilder setSettings(Settings.Builder settings);RestoreSnapshotRequestBuilder setIndexSettings(Settings settings);@return;;;this builder;false
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequestBuilder;RestoreSnapshotRequestBuilder setSettings(Settings.Builder settings);RestoreSnapshotRequestBuilder setIndexSettings(Settings.Builder settings);@return;;;this builder;false
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequestBuilder;RestoreSnapshotRequestBuilder setSettings(Settings.Builder settings);RestoreSnapshotRequestBuilder setIndexSettings(String source, XContentType xContentType);@return;;;this builder;false
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequestBuilder;RestoreSnapshotRequestBuilder setSettings(Settings.Builder settings);RestoreSnapshotRequestBuilder setIndexSettings(Map source);@return;;;this builder;false
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequestBuilder;RestoreSnapshotRequestBuilder setSettings(String source, XContentType xContentType);RestoreSnapshotRequestBuilder setSettings(Map source);@return;;;this builder;true
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequestBuilder;RestoreSnapshotRequestBuilder setSettings(String source, XContentType xContentType);RestoreSnapshotRequestBuilder setSettings(Map source);@param;String source;Map<String,Object> source;repository-specific snapshot settings;true
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequestBuilder;RestoreSnapshotRequestBuilder setSettings(String source, XContentType xContentType);RestoreSnapshotRequestBuilder setWaitForCompletion(boolean waitForCompletion);@return;;;this builder;false
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequestBuilder;RestoreSnapshotRequestBuilder setSettings(String source, XContentType xContentType);RestoreSnapshotRequestBuilder setRestoreGlobalState(boolean restoreGlobalState);@return;;;this builder;false
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequestBuilder;RestoreSnapshotRequestBuilder setSettings(String source, XContentType xContentType);RestoreSnapshotRequestBuilder setPartial(boolean partial);@return;;;this builder;false
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequestBuilder;RestoreSnapshotRequestBuilder setSettings(String source, XContentType xContentType);RestoreSnapshotRequestBuilder setIncludeAliases(boolean restoreAliases);@return;;;this builder;false
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequestBuilder;RestoreSnapshotRequestBuilder setSettings(String source, XContentType xContentType);RestoreSnapshotRequestBuilder setIndexSettings(Settings settings);@return;;;this builder;false
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequestBuilder;RestoreSnapshotRequestBuilder setSettings(String source, XContentType xContentType);RestoreSnapshotRequestBuilder setIndexSettings(Settings.Builder settings);@return;;;this builder;false
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequestBuilder;RestoreSnapshotRequestBuilder setSettings(String source, XContentType xContentType);RestoreSnapshotRequestBuilder setIndexSettings(String source, XContentType xContentType);@return;;;this builder;false
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequestBuilder;RestoreSnapshotRequestBuilder setSettings(String source, XContentType xContentType);RestoreSnapshotRequestBuilder setIndexSettings(String source, XContentType xContentType);@param;XContentType xContentType;XContentType xContentType;the content type of the source;true
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequestBuilder;RestoreSnapshotRequestBuilder setSettings(String source, XContentType xContentType);RestoreSnapshotRequestBuilder setIndexSettings(Map source);@return;;;this builder;false
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequestBuilder;RestoreSnapshotRequestBuilder setSettings(Map source);RestoreSnapshotRequestBuilder setWaitForCompletion(boolean waitForCompletion);@return;;;this builder;false
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequestBuilder;RestoreSnapshotRequestBuilder setSettings(Map source);RestoreSnapshotRequestBuilder setRestoreGlobalState(boolean restoreGlobalState);@return;;;this builder;false
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequestBuilder;RestoreSnapshotRequestBuilder setSettings(Map source);RestoreSnapshotRequestBuilder setPartial(boolean partial);@return;;;this builder;false
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequestBuilder;RestoreSnapshotRequestBuilder setSettings(Map source);RestoreSnapshotRequestBuilder setIncludeAliases(boolean restoreAliases);@return;;;this builder;false
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequestBuilder;RestoreSnapshotRequestBuilder setSettings(Map source);RestoreSnapshotRequestBuilder setIndexSettings(Settings settings);@return;;;this builder;false
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequestBuilder;RestoreSnapshotRequestBuilder setSettings(Map source);RestoreSnapshotRequestBuilder setIndexSettings(Settings.Builder settings);@return;;;this builder;false
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequestBuilder;RestoreSnapshotRequestBuilder setSettings(Map source);RestoreSnapshotRequestBuilder setIndexSettings(String source, XContentType xContentType);@return;;;this builder;false
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequestBuilder;RestoreSnapshotRequestBuilder setSettings(Map source);RestoreSnapshotRequestBuilder setIndexSettings(Map source);@return;;;this builder;false
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequestBuilder;RestoreSnapshotRequestBuilder setWaitForCompletion(boolean waitForCompletion);RestoreSnapshotRequestBuilder setRestoreGlobalState(boolean restoreGlobalState);@return;;;this builder;false
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequestBuilder;RestoreSnapshotRequestBuilder setWaitForCompletion(boolean waitForCompletion);RestoreSnapshotRequestBuilder setPartial(boolean partial);@return;;;this builder;false
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequestBuilder;RestoreSnapshotRequestBuilder setWaitForCompletion(boolean waitForCompletion);RestoreSnapshotRequestBuilder setIncludeAliases(boolean restoreAliases);@return;;;this builder;false
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequestBuilder;RestoreSnapshotRequestBuilder setWaitForCompletion(boolean waitForCompletion);RestoreSnapshotRequestBuilder setIndexSettings(Settings settings);@return;;;this builder;false
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequestBuilder;RestoreSnapshotRequestBuilder setWaitForCompletion(boolean waitForCompletion);RestoreSnapshotRequestBuilder setIndexSettings(Settings.Builder settings);@return;;;this builder;false
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequestBuilder;RestoreSnapshotRequestBuilder setWaitForCompletion(boolean waitForCompletion);RestoreSnapshotRequestBuilder setIndexSettings(String source, XContentType xContentType);@return;;;this builder;false
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequestBuilder;RestoreSnapshotRequestBuilder setWaitForCompletion(boolean waitForCompletion);RestoreSnapshotRequestBuilder setIndexSettings(Map source);@return;;;this builder;false
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequestBuilder;RestoreSnapshotRequestBuilder setRestoreGlobalState(boolean restoreGlobalState);RestoreSnapshotRequestBuilder setPartial(boolean partial);@return;;;this builder;false
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequestBuilder;RestoreSnapshotRequestBuilder setRestoreGlobalState(boolean restoreGlobalState);RestoreSnapshotRequestBuilder setIncludeAliases(boolean restoreAliases);@return;;;this builder;false
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequestBuilder;RestoreSnapshotRequestBuilder setRestoreGlobalState(boolean restoreGlobalState);RestoreSnapshotRequestBuilder setIndexSettings(Settings settings);@return;;;this builder;false
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequestBuilder;RestoreSnapshotRequestBuilder setRestoreGlobalState(boolean restoreGlobalState);RestoreSnapshotRequestBuilder setIndexSettings(Settings.Builder settings);@return;;;this builder;false
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequestBuilder;RestoreSnapshotRequestBuilder setRestoreGlobalState(boolean restoreGlobalState);RestoreSnapshotRequestBuilder setIndexSettings(String source, XContentType xContentType);@return;;;this builder;false
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequestBuilder;RestoreSnapshotRequestBuilder setRestoreGlobalState(boolean restoreGlobalState);RestoreSnapshotRequestBuilder setIndexSettings(Map source);@return;;;this builder;false
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequestBuilder;RestoreSnapshotRequestBuilder setPartial(boolean partial);RestoreSnapshotRequestBuilder setIncludeAliases(boolean restoreAliases);@return;;;this builder;false
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequestBuilder;RestoreSnapshotRequestBuilder setPartial(boolean partial);RestoreSnapshotRequestBuilder setIndexSettings(Settings settings);@return;;;this builder;false
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequestBuilder;RestoreSnapshotRequestBuilder setPartial(boolean partial);RestoreSnapshotRequestBuilder setIndexSettings(Settings.Builder settings);@return;;;this builder;false
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequestBuilder;RestoreSnapshotRequestBuilder setPartial(boolean partial);RestoreSnapshotRequestBuilder setIndexSettings(String source, XContentType xContentType);@return;;;this builder;false
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequestBuilder;RestoreSnapshotRequestBuilder setPartial(boolean partial);RestoreSnapshotRequestBuilder setIndexSettings(Map source);@return;;;this builder;false
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequestBuilder;RestoreSnapshotRequestBuilder setIncludeAliases(boolean restoreAliases);RestoreSnapshotRequestBuilder setIndexSettings(Settings settings);@return;;;this builder;false
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequestBuilder;RestoreSnapshotRequestBuilder setIncludeAliases(boolean restoreAliases);RestoreSnapshotRequestBuilder setIndexSettings(Settings.Builder settings);@return;;;this builder;false
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequestBuilder;RestoreSnapshotRequestBuilder setIncludeAliases(boolean restoreAliases);RestoreSnapshotRequestBuilder setIndexSettings(String source, XContentType xContentType);@return;;;this builder;false
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequestBuilder;RestoreSnapshotRequestBuilder setIncludeAliases(boolean restoreAliases);RestoreSnapshotRequestBuilder setIndexSettings(Map source);@return;;;this builder;false
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequestBuilder;RestoreSnapshotRequestBuilder setIndexSettings(Settings settings);RestoreSnapshotRequestBuilder setIndexSettings(Settings.Builder settings);Whole;;;Sets index settings that should be added or replaced during restore  @param index settings @return this builder ;false
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequestBuilder;RestoreSnapshotRequestBuilder setIndexSettings(Settings settings);RestoreSnapshotRequestBuilder setIndexSettings(String source, XContentType xContentType);Free text;;;Sets index settings that should be added or replaced during restore ;true
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequestBuilder;RestoreSnapshotRequestBuilder setIndexSettings(Settings settings);RestoreSnapshotRequestBuilder setIndexSettings(String source, XContentType xContentType);@return;;;this builder;true
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequestBuilder;RestoreSnapshotRequestBuilder setIndexSettings(Settings settings);RestoreSnapshotRequestBuilder setIndexSettings(String source, XContentType xContentType);@param;Settings settings;String source;index settings;true
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequestBuilder;RestoreSnapshotRequestBuilder setIndexSettings(Settings settings);RestoreSnapshotRequestBuilder setIndexSettings(Map source);Whole;;;Sets index settings that should be added or replaced during restore  @param index settings @return this builder ;false
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequestBuilder;RestoreSnapshotRequestBuilder setIndexSettings(Settings.Builder settings);RestoreSnapshotRequestBuilder setIndexSettings(String source, XContentType xContentType);Free text;;;Sets index settings that should be added or replaced during restore ;true
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequestBuilder;RestoreSnapshotRequestBuilder setIndexSettings(Settings.Builder settings);RestoreSnapshotRequestBuilder setIndexSettings(String source, XContentType xContentType);@return;;;this builder;true
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequestBuilder;RestoreSnapshotRequestBuilder setIndexSettings(Settings.Builder settings);RestoreSnapshotRequestBuilder setIndexSettings(String source, XContentType xContentType);@param;Settings.Builder settings;String source;index settings;true
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequestBuilder;RestoreSnapshotRequestBuilder setIndexSettings(Settings.Builder settings);RestoreSnapshotRequestBuilder setIndexSettings(Map source);Whole;;;Sets index settings that should be added or replaced during restore  @param index settings @return this builder ;false
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequestBuilder;RestoreSnapshotRequestBuilder setIndexSettings(String source, XContentType xContentType);RestoreSnapshotRequestBuilder setIndexSettings(Map source);Free text;;;Sets index settings that should be added or replaced during restore ;true
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequestBuilder;RestoreSnapshotRequestBuilder setIndexSettings(String source, XContentType xContentType);RestoreSnapshotRequestBuilder setIndexSettings(Map source);@return;;;this builder;true
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequestBuilder;RestoreSnapshotRequestBuilder setIndexSettings(String source, XContentType xContentType);RestoreSnapshotRequestBuilder setIndexSettings(Map source);@param;String source;Map<String,Object> source;index settings;true
org.elasticsearch.action.admin.cluster.snapshots.restore.RestoreSnapshotRequestBuilder;RestoreSnapshotRequestBuilder setIgnoreIndexSettings(String ignoreIndexSettings);RestoreSnapshotRequestBuilder setIgnoreIndexSettings(List ignoreIndexSettings);Whole;;;Sets the list of index settings and index settings groups that shouldn't be restored from snapshot    ;false
org.elasticsearch.action.admin.cluster.repositories.delete.DeleteRepositoryRequest; DeleteRepositoryRequest(String name);DeleteRepositoryRequest name(String name);@param;String name;String name;name of the repository;true
org.elasticsearch.action.admin.cluster.repositories.verify.VerifyRepositoryRequest; VerifyRepositoryRequest(String name);VerifyRepositoryRequest name(String name);@param;String name;String name;name of the repository;true
org.elasticsearch.action.admin.cluster.repositories.put.PutRepositoryRequestBuilder;PutRepositoryRequestBuilder setName(String name);PutRepositoryRequestBuilder setType(String type);@return;;;this builder;false
org.elasticsearch.action.admin.cluster.repositories.put.PutRepositoryRequestBuilder;PutRepositoryRequestBuilder setName(String name);PutRepositoryRequestBuilder setSettings(Settings settings);@return;;;this builder;false
org.elasticsearch.action.admin.cluster.repositories.put.PutRepositoryRequestBuilder;PutRepositoryRequestBuilder setName(String name);PutRepositoryRequestBuilder setSettings(Settings.Builder settings);@return;;;this builder;false
org.elasticsearch.action.admin.cluster.repositories.put.PutRepositoryRequestBuilder;PutRepositoryRequestBuilder setName(String name);PutRepositoryRequestBuilder setSettings(String source, XContentType xContentType);@return;;;this builder;false
org.elasticsearch.action.admin.cluster.repositories.put.PutRepositoryRequestBuilder;PutRepositoryRequestBuilder setName(String name);PutRepositoryRequestBuilder setSettings(Map source);@return;;;this builder;false
org.elasticsearch.action.admin.cluster.repositories.put.PutRepositoryRequestBuilder;PutRepositoryRequestBuilder setName(String name);PutRepositoryRequestBuilder setVerify(boolean verify);@return;;;this builder;false
org.elasticsearch.action.admin.cluster.repositories.put.PutRepositoryRequestBuilder;PutRepositoryRequestBuilder setType(String type);PutRepositoryRequestBuilder setSettings(Settings settings);@return;;;this builder;false
org.elasticsearch.action.admin.cluster.repositories.put.PutRepositoryRequestBuilder;PutRepositoryRequestBuilder setType(String type);PutRepositoryRequestBuilder setSettings(Settings.Builder settings);@return;;;this builder;false
org.elasticsearch.action.admin.cluster.repositories.put.PutRepositoryRequestBuilder;PutRepositoryRequestBuilder setType(String type);PutRepositoryRequestBuilder setSettings(String source, XContentType xContentType);@return;;;this builder;false
org.elasticsearch.action.admin.cluster.repositories.put.PutRepositoryRequestBuilder;PutRepositoryRequestBuilder setType(String type);PutRepositoryRequestBuilder setSettings(Map source);@return;;;this builder;false
org.elasticsearch.action.admin.cluster.repositories.put.PutRepositoryRequestBuilder;PutRepositoryRequestBuilder setType(String type);PutRepositoryRequestBuilder setVerify(boolean verify);@return;;;this builder;false
org.elasticsearch.action.admin.cluster.repositories.put.PutRepositoryRequestBuilder;PutRepositoryRequestBuilder setSettings(Settings settings);PutRepositoryRequestBuilder setSettings(Settings.Builder settings);Free text;;;Sets the repository settings ;true
org.elasticsearch.action.admin.cluster.repositories.put.PutRepositoryRequestBuilder;PutRepositoryRequestBuilder setSettings(Settings settings);PutRepositoryRequestBuilder setSettings(Settings.Builder settings);@return;;;this builder;true
org.elasticsearch.action.admin.cluster.repositories.put.PutRepositoryRequestBuilder;PutRepositoryRequestBuilder setSettings(Settings settings);PutRepositoryRequestBuilder setSettings(String source, XContentType xContentType);@return;;;this builder;true
org.elasticsearch.action.admin.cluster.repositories.put.PutRepositoryRequestBuilder;PutRepositoryRequestBuilder setSettings(Settings settings);PutRepositoryRequestBuilder setSettings(String source, XContentType xContentType);@param;Settings settings;String source;repository settings;true
org.elasticsearch.action.admin.cluster.repositories.put.PutRepositoryRequestBuilder;PutRepositoryRequestBuilder setSettings(Settings settings);PutRepositoryRequestBuilder setSettings(Map source);Whole;;;Sets the repository settings  @param repository settings @return this builder ;false
org.elasticsearch.action.admin.cluster.repositories.put.PutRepositoryRequestBuilder;PutRepositoryRequestBuilder setSettings(Settings settings);PutRepositoryRequestBuilder setVerify(boolean verify);@return;;;this builder;false
org.elasticsearch.action.admin.cluster.repositories.put.PutRepositoryRequestBuilder;PutRepositoryRequestBuilder setSettings(Settings.Builder settings);PutRepositoryRequestBuilder setSettings(String source, XContentType xContentType);@return;;;this builder;true
org.elasticsearch.action.admin.cluster.repositories.put.PutRepositoryRequestBuilder;PutRepositoryRequestBuilder setSettings(Settings.Builder settings);PutRepositoryRequestBuilder setSettings(Map source);Free text;;;Sets the repository settings ;true
org.elasticsearch.action.admin.cluster.repositories.put.PutRepositoryRequestBuilder;PutRepositoryRequestBuilder setSettings(Settings.Builder settings);PutRepositoryRequestBuilder setSettings(Map source);@return;;;this builder;true
org.elasticsearch.action.admin.cluster.repositories.put.PutRepositoryRequestBuilder;PutRepositoryRequestBuilder setSettings(Settings.Builder settings);PutRepositoryRequestBuilder setVerify(boolean verify);@return;;;this builder;false
org.elasticsearch.action.admin.cluster.repositories.put.PutRepositoryRequestBuilder;PutRepositoryRequestBuilder setSettings(String source, XContentType xContentType);PutRepositoryRequestBuilder setSettings(Map source);@return;;;this builder;true
org.elasticsearch.action.admin.cluster.repositories.put.PutRepositoryRequestBuilder;PutRepositoryRequestBuilder setSettings(String source, XContentType xContentType);PutRepositoryRequestBuilder setSettings(Map source);@param;String source;Map<String,Object> source;repository settings;true
org.elasticsearch.action.admin.cluster.repositories.put.PutRepositoryRequestBuilder;PutRepositoryRequestBuilder setSettings(String source, XContentType xContentType);PutRepositoryRequestBuilder setVerify(boolean verify);@return;;;this builder;false
org.elasticsearch.action.admin.cluster.repositories.put.PutRepositoryRequestBuilder;PutRepositoryRequestBuilder setSettings(Map source);PutRepositoryRequestBuilder setVerify(boolean verify);@return;;;this builder;false
org.elasticsearch.action.admin.cluster.repositories.put.PutRepositoryRequest;PutRepositoryRequest type(String type);PutRepositoryRequest settings(Settings settings);@return;;;this request;false
org.elasticsearch.action.admin.cluster.repositories.put.PutRepositoryRequest;PutRepositoryRequest type(String type);PutRepositoryRequest settings(Settings.Builder settings);@return;;;this request;false
org.elasticsearch.action.admin.cluster.repositories.put.PutRepositoryRequest;PutRepositoryRequest type(String type);PutRepositoryRequest settings(String source, XContentType xContentType);@return;;;this request;false
org.elasticsearch.action.admin.cluster.repositories.put.PutRepositoryRequest;PutRepositoryRequest type(String type);PutRepositoryRequest settings(Map source);@return;;;this request;false
org.elasticsearch.action.admin.cluster.repositories.put.PutRepositoryRequest;PutRepositoryRequest settings(Settings settings);PutRepositoryRequest settings(Settings.Builder settings);Whole;;;Sets the repository settings  @param repository settings @return this request ;false
org.elasticsearch.action.admin.cluster.repositories.put.PutRepositoryRequest;PutRepositoryRequest settings(Settings settings);PutRepositoryRequest settings(String source, XContentType xContentType);@return;;;this request;true
org.elasticsearch.action.admin.cluster.repositories.put.PutRepositoryRequest;PutRepositoryRequest settings(Settings settings);PutRepositoryRequest settings(Map source);@return;;;this request;true
org.elasticsearch.action.admin.cluster.repositories.put.PutRepositoryRequest;PutRepositoryRequest settings(Settings settings);PutRepositoryRequest settings(Map source);@param;Settings settings;Map<String,Object> source;repository settings;true
org.elasticsearch.action.admin.cluster.repositories.put.PutRepositoryRequest;PutRepositoryRequest settings(Settings.Builder settings);PutRepositoryRequest settings(String source, XContentType xContentType);@return;;;this request;true
org.elasticsearch.action.admin.cluster.repositories.put.PutRepositoryRequest;PutRepositoryRequest settings(Settings.Builder settings);PutRepositoryRequest settings(Map source);@return;;;this request;true
org.elasticsearch.action.admin.cluster.repositories.put.PutRepositoryRequest;PutRepositoryRequest settings(Settings.Builder settings);PutRepositoryRequest settings(Map source);@param;Settings.Builder settings;Map<String,Object> source;repository settings;true
org.elasticsearch.action.admin.cluster.repositories.put.PutRepositoryRequest;PutRepositoryRequest settings(String source, XContentType xContentType);PutRepositoryRequest settings(Map source);Free text;;;Sets the repository settings. ;true
org.elasticsearch.action.admin.cluster.repositories.put.PutRepositoryRequest;PutRepositoryRequest settings(String source, XContentType xContentType);PutRepositoryRequest settings(Map source);@return;;;this request;true
org.elasticsearch.action.admin.cluster.repositories.get.GetRepositoriesRequestBuilder; GetRepositoriesRequestBuilder(ElasticsearchClient client, GetRepositoriesAction action); GetRepositoriesRequestBuilder(ElasticsearchClient client, GetRepositoriesAction action, String repositories);Whole;;;Creates new get repository request builder    ;false
org.elasticsearch.action.admin.cluster.repositories.get.GetRepositoriesRequestBuilder;GetRepositoriesRequestBuilder setRepositories(String repositories);GetRepositoriesRequestBuilder addRepositories(String repositories);@return;;;builder;false
org.elasticsearch.action.admin.cluster.repositories.get.GetRepositoriesRequestBuilder;GetRepositoriesRequestBuilder setRepositories(String repositories);GetRepositoriesRequestBuilder addRepositories(String repositories);@param;String repositories;String repositories;list of repositories;true
org.elasticsearch.action.admin.cluster.repositories.get.GetRepositoriesRequest; GetRepositoriesRequest(String[] repositories);GetRepositoriesRequest repositories(String[] repositories);@param;String[] repositories;String[] repositories;list of repositories;true
org.elasticsearch.action.admin.cluster.node.tasks.get.GetTaskRequest;boolean getWaitForCompletion();GetTaskRequest setWaitForCompletion(boolean waitForCompletion);Whole;;;Should this request wait for all found tasks to complete?    ;false
org.elasticsearch.action.admin.cluster.node.tasks.get.GetTaskRequest;TimeValue getTimeout();GetTaskRequest setTimeout(TimeValue timeout);Whole;;;Timeout to wait for any async actions this request must take. It must take anywhere from 0 to 2.    ;false
org.elasticsearch.action.admin.cluster.node.tasks.list.ListTasksRequest;boolean getDetailed();ListTasksRequest setDetailed(boolean detailed);Whole;;;Should the detailed task information be returned.    ;false
org.elasticsearch.action.admin.cluster.node.tasks.list.ListTasksRequest;boolean getWaitForCompletion();ListTasksRequest setWaitForCompletion(boolean waitForCompletion);Whole;;;Should this request wait for all found tasks to complete?    ;false
org.elasticsearch.action.admin.cluster.node.usage.NodesUsageRequest;boolean restActions();NodesUsageRequest restActions(boolean restActions);Whole;;;Should the node rest actions usage statistics be returned.    ;false
org.elasticsearch.action.admin.cluster.node.info.NodesInfoRequest;boolean settings();NodesInfoRequest settings(boolean settings);Whole;;;Should the node settings be returned.    ;false
org.elasticsearch.action.admin.cluster.node.info.NodesInfoRequest;boolean os();NodesInfoRequest os(boolean os);Whole;;;Should the node OS be returned.    ;false
org.elasticsearch.action.admin.cluster.node.info.NodesInfoRequest;boolean process();NodesInfoRequest process(boolean process);Whole;;;Should the node Process be returned.    ;false
org.elasticsearch.action.admin.cluster.node.info.NodesInfoRequest;boolean jvm();NodesInfoRequest jvm(boolean jvm);Whole;;;Should the node JVM be returned.    ;false
org.elasticsearch.action.admin.cluster.node.info.NodesInfoRequest;boolean threadPool();NodesInfoRequest threadPool(boolean threadPool);Whole;;;Should the node Thread Pool info be returned.    ;false
org.elasticsearch.action.admin.cluster.node.info.NodesInfoRequest;boolean transport();NodesInfoRequest transport(boolean transport);Whole;;;Should the node Transport be returned.    ;false
org.elasticsearch.action.admin.cluster.node.info.NodesInfoRequest;boolean http();NodesInfoRequest http(boolean http);Whole;;;Should the node HTTP be returned.    ;false
org.elasticsearch.action.admin.cluster.node.info.NodesInfoRequest;NodesInfoRequest plugins(boolean plugins);NodesInfoRequest ingest(boolean ingest);@param;boolean plugins;boolean ingest;true if you want info;false
org.elasticsearch.action.admin.cluster.node.info.NodesInfoRequest;NodesInfoRequest plugins(boolean plugins);NodesInfoRequest indices(boolean indices);@param;boolean plugins;boolean indices;true if you want info;false
org.elasticsearch.action.admin.cluster.node.info.NodesInfoRequest;NodesInfoRequest ingest(boolean ingest);NodesInfoRequest indices(boolean indices);@param;boolean ingest;boolean indices;true if you want info;false
org.elasticsearch.action.admin.cluster.node.stats.NodesStatsRequest;boolean os();NodesStatsRequest os(boolean os);Whole;;;Should the node OS be returned.    ;false
org.elasticsearch.action.admin.cluster.node.stats.NodesStatsRequest;boolean process();NodesStatsRequest process(boolean process);Whole;;;Should the node Process be returned.    ;false
org.elasticsearch.action.admin.cluster.node.stats.NodesStatsRequest;boolean jvm();NodesStatsRequest jvm(boolean jvm);Whole;;;Should the node JVM be returned.    ;false
org.elasticsearch.action.admin.cluster.node.stats.NodesStatsRequest;boolean threadPool();NodesStatsRequest threadPool(boolean threadPool);Whole;;;Should the node Thread Pool be returned.    ;false
org.elasticsearch.action.admin.cluster.node.stats.NodesStatsRequest;boolean fs();NodesStatsRequest fs(boolean fs);Whole;;;Should the node file system stats be returned.    ;false
org.elasticsearch.action.admin.cluster.node.stats.NodesStatsRequest;boolean transport();NodesStatsRequest transport(boolean transport);Whole;;;Should the node Transport be returned.    ;false
org.elasticsearch.action.admin.cluster.node.stats.NodesStatsRequest;boolean http();NodesStatsRequest http(boolean http);Whole;;;Should the node HTTP be returned.    ;false
org.elasticsearch.action.admin.cluster.node.stats.NodesStatsRequestBuilder;NodesStatsRequestBuilder setIndices(boolean indices);NodesStatsRequestBuilder setIndices(CommonStatsFlags indices);Whole;;;Should the node indices stats be returned.    ;false
org.elasticsearch.action.admin.cluster.node.stats.NodesStatsRequestBuilder;NodesStatsRequestBuilder setOs(boolean os);NodesStatsRequestBuilder setProcess(boolean process);Whole;;;Should the node OS stats be returned.    ;false
org.elasticsearch.action.admin.indices.mapping.put.PutMappingRequestBuilder;PutMappingRequestBuilder setSource(XContentBuilder mappingBuilder);PutMappingRequestBuilder setSource(Map mappingSource);Whole;;;The mapping source definition.    ;false
org.elasticsearch.action.admin.indices.mapping.put.PutMappingRequestBuilder;PutMappingRequestBuilder setSource(XContentBuilder mappingBuilder);PutMappingRequestBuilder setSource(String mappingSource, XContentType xContentType);Whole;;;The mapping source definition.    ;false
org.elasticsearch.action.admin.indices.mapping.put.PutMappingRequestBuilder;PutMappingRequestBuilder setSource(Map mappingSource);PutMappingRequestBuilder setSource(String mappingSource, XContentType xContentType);Whole;;;The mapping source definition.    ;false
org.elasticsearch.action.admin.indices.mapping.put.PutMappingRequest;String source();PutMappingRequest source(XContentBuilder mappingBuilder);Whole;;;The mapping source definition.    ;false
org.elasticsearch.action.admin.indices.mapping.put.PutMappingRequest;String source();PutMappingRequest source(Map mappingSource);Whole;;;The mapping source definition.    ;false
org.elasticsearch.action.admin.indices.mapping.put.PutMappingRequest;String source();PutMappingRequest source(String mappingSource, XContentType xContentType);Whole;;;The mapping source definition.    ;false
org.elasticsearch.action.admin.indices.mapping.put.PutMappingRequest;String source();PutMappingRequest source(BytesReference mappingSource, XContentType xContentType);Whole;;;The mapping source definition.    ;false
org.elasticsearch.action.admin.indices.mapping.put.PutMappingRequest;PutMappingRequest source(XContentBuilder mappingBuilder);PutMappingRequest source(Map mappingSource);Whole;;;The mapping source definition.    ;false
org.elasticsearch.action.admin.indices.mapping.put.PutMappingRequest;PutMappingRequest source(XContentBuilder mappingBuilder);PutMappingRequest source(String mappingSource, XContentType xContentType);Whole;;;The mapping source definition.    ;false
org.elasticsearch.action.admin.indices.mapping.put.PutMappingRequest;PutMappingRequest source(XContentBuilder mappingBuilder);PutMappingRequest source(BytesReference mappingSource, XContentType xContentType);Whole;;;The mapping source definition.    ;false
org.elasticsearch.action.admin.indices.mapping.put.PutMappingRequest;PutMappingRequest source(Map mappingSource);PutMappingRequest source(String mappingSource, XContentType xContentType);Whole;;;The mapping source definition.    ;false
org.elasticsearch.action.admin.indices.mapping.put.PutMappingRequest;PutMappingRequest source(Map mappingSource);PutMappingRequest source(BytesReference mappingSource, XContentType xContentType);Whole;;;The mapping source definition.    ;false
org.elasticsearch.action.admin.indices.mapping.put.PutMappingRequest;PutMappingRequest source(String mappingSource, XContentType xContentType);PutMappingRequest source(BytesReference mappingSource, XContentType xContentType);Whole;;;The mapping source definition.    ;false
org.elasticsearch.action.admin.indices.settings.put.UpdateSettingsRequest; UpdateSettingsRequest(String indices); UpdateSettingsRequest(Settings settings, String indices);Whole;;;Constructs a new request to update settings for one or more indices    ;false
org.elasticsearch.action.admin.indices.settings.put.UpdateSettingsRequest;UpdateSettingsRequest settings(Settings settings);UpdateSettingsRequest settings(Settings.Builder settings);Whole;;;Sets the settings to be updated    ;false
org.elasticsearch.action.admin.indices.settings.put.UpdateSettingsRequest;UpdateSettingsRequest settings(String source, XContentType xContentType);UpdateSettingsRequest settings(Map source);Whole;;;Sets the settings to be updated (either json or yaml format)    ;false
org.elasticsearch.action.admin.indices.settings.put.UpdateSettingsRequestBuilder;UpdateSettingsRequestBuilder setSettings(Settings settings);UpdateSettingsRequestBuilder setSettings(Settings.Builder settings);Whole;;;Sets the settings to be updated    ;false
org.elasticsearch.action.admin.indices.settings.put.UpdateSettingsRequestBuilder;UpdateSettingsRequestBuilder setSettings(Settings settings);UpdateSettingsRequestBuilder setSettings(Map source);Whole;;;Sets the settings to be updated    ;false
org.elasticsearch.action.admin.indices.settings.put.UpdateSettingsRequestBuilder;UpdateSettingsRequestBuilder setSettings(Settings.Builder settings);UpdateSettingsRequestBuilder setSettings(Map source);Whole;;;Sets the settings to be updated    ;false
org.elasticsearch.action.admin.indices.validate.query.ValidateQueryRequest;String[] types();ValidateQueryRequest types(String types);Whole;;;The types of documents the query will run against. Defaults to all types.    ;false
org.elasticsearch.action.admin.indices.validate.query.ValidateQueryRequest;void rewrite(boolean rewrite);boolean rewrite();Whole;;;Indicates whether the query should be rewritten into primitive queries    ;false
org.elasticsearch.action.admin.indices.validate.query.ValidateQueryRequest;void allShards(boolean allShards);boolean allShards();Whole;;;Indicates whether the query should be validated on all shards instead of one random shard    ;false
org.elasticsearch.action.admin.indices.alias.IndicesAliasesRequestBuilder;IndicesAliasesRequestBuilder addAlias(String index, String alias);IndicesAliasesRequestBuilder addAlias(String[] indices, String alias);Free text;;;Adds an alias to the index. ;true
org.elasticsearch.action.admin.indices.alias.IndicesAliasesRequestBuilder;IndicesAliasesRequestBuilder addAlias(String index, String alias);IndicesAliasesRequestBuilder addAlias(String[] indices, String alias);@param;String alias;String alias;The alias;true
org.elasticsearch.action.admin.indices.alias.IndicesAliasesRequestBuilder;IndicesAliasesRequestBuilder addAlias(String index, String alias);IndicesAliasesRequestBuilder addAlias(String index, String alias, String filter);Free text;;;Adds an alias to the index. ;true
org.elasticsearch.action.admin.indices.alias.IndicesAliasesRequestBuilder;IndicesAliasesRequestBuilder addAlias(String index, String alias);IndicesAliasesRequestBuilder addAlias(String index, String alias, String filter);@param;String index;String index;The index;true
org.elasticsearch.action.admin.indices.alias.IndicesAliasesRequestBuilder;IndicesAliasesRequestBuilder addAlias(String index, String alias);IndicesAliasesRequestBuilder addAlias(String index, String alias, String filter);@param;String alias;String alias;The alias;true
org.elasticsearch.action.admin.indices.alias.IndicesAliasesRequestBuilder;IndicesAliasesRequestBuilder addAlias(String index, String alias);IndicesAliasesRequestBuilder addAlias(String[] indices, String alias, String filter);Free text;;;Adds an alias to the index. ;true
org.elasticsearch.action.admin.indices.alias.IndicesAliasesRequestBuilder;IndicesAliasesRequestBuilder addAlias(String index, String alias);IndicesAliasesRequestBuilder addAlias(String[] indices, String alias, String filter);@param;String alias;String alias;The alias;true
org.elasticsearch.action.admin.indices.alias.IndicesAliasesRequestBuilder;IndicesAliasesRequestBuilder addAlias(String index, String alias);IndicesAliasesRequestBuilder addAlias(String[] indices, String alias, Map filter);Free text;;;Adds an alias to the index. ;true
org.elasticsearch.action.admin.indices.alias.IndicesAliasesRequestBuilder;IndicesAliasesRequestBuilder addAlias(String index, String alias);IndicesAliasesRequestBuilder addAlias(String[] indices, String alias, Map filter);@param;String alias;String alias;The alias;true
org.elasticsearch.action.admin.indices.alias.IndicesAliasesRequestBuilder;IndicesAliasesRequestBuilder addAlias(String index, String alias);IndicesAliasesRequestBuilder addAlias(String index, String alias, Map filter);Free text;;;Adds an alias to the index. ;true
org.elasticsearch.action.admin.indices.alias.IndicesAliasesRequestBuilder;IndicesAliasesRequestBuilder addAlias(String index, String alias);IndicesAliasesRequestBuilder addAlias(String index, String alias, Map filter);@param;String alias;String alias;The alias;true
org.elasticsearch.action.admin.indices.alias.IndicesAliasesRequestBuilder;IndicesAliasesRequestBuilder addAlias(String index, String alias);IndicesAliasesRequestBuilder addAlias(String[] indices, String alias, QueryBuilder filterBuilder);Free text;;;Adds an alias to the index. ;true
org.elasticsearch.action.admin.indices.alias.IndicesAliasesRequestBuilder;IndicesAliasesRequestBuilder addAlias(String index, String alias);IndicesAliasesRequestBuilder addAlias(String[] indices, String alias, QueryBuilder filterBuilder);@param;String alias;String alias;The alias;true
org.elasticsearch.action.admin.indices.alias.IndicesAliasesRequestBuilder;IndicesAliasesRequestBuilder addAlias(String index, String alias);IndicesAliasesRequestBuilder addAlias(String index, String alias, QueryBuilder filterBuilder);Free text;;;Adds an alias to the index. ;true
org.elasticsearch.action.admin.indices.alias.IndicesAliasesRequestBuilder;IndicesAliasesRequestBuilder addAlias(String index, String alias);IndicesAliasesRequestBuilder addAlias(String index, String alias, QueryBuilder filterBuilder);@param;String index;String index;The index;true
org.elasticsearch.action.admin.indices.alias.IndicesAliasesRequestBuilder;IndicesAliasesRequestBuilder addAlias(String index, String alias);IndicesAliasesRequestBuilder addAlias(String index, String alias, QueryBuilder filterBuilder);@param;String alias;String alias;The alias;true
org.elasticsearch.action.admin.indices.alias.IndicesAliasesRequestBuilder;IndicesAliasesRequestBuilder addAlias(String index, String alias);IndicesAliasesRequestBuilder removeAlias(String index, String alias);@param;String index;String index;The index;true
org.elasticsearch.action.admin.indices.alias.IndicesAliasesRequestBuilder;IndicesAliasesRequestBuilder addAlias(String index, String alias);IndicesAliasesRequestBuilder removeAlias(String index, String alias);@param;String alias;String alias;The alias;true
org.elasticsearch.action.admin.indices.alias.IndicesAliasesRequestBuilder;IndicesAliasesRequestBuilder addAlias(String index, String alias);IndicesAliasesRequestBuilder removeAlias(String index, String[] aliases);@param;String index;String index;The index;true
org.elasticsearch.action.admin.indices.alias.IndicesAliasesRequestBuilder;IndicesAliasesRequestBuilder addAlias(String[] indices, String alias);IndicesAliasesRequestBuilder addAlias(String index, String alias, String filter);Free text;;;Adds an alias to the index. ;true
org.elasticsearch.action.admin.indices.alias.IndicesAliasesRequestBuilder;IndicesAliasesRequestBuilder addAlias(String[] indices, String alias);IndicesAliasesRequestBuilder addAlias(String index, String alias, String filter);@param;String alias;String alias;The alias;true
org.elasticsearch.action.admin.indices.alias.IndicesAliasesRequestBuilder;IndicesAliasesRequestBuilder addAlias(String[] indices, String alias);IndicesAliasesRequestBuilder addAlias(String[] indices, String alias, String filter);Free text;;;Adds an alias to the index. ;true
org.elasticsearch.action.admin.indices.alias.IndicesAliasesRequestBuilder;IndicesAliasesRequestBuilder addAlias(String[] indices, String alias);IndicesAliasesRequestBuilder addAlias(String[] indices, String alias, String filter);@param;String[] indices;String[] indices;The indices;true
org.elasticsearch.action.admin.indices.alias.IndicesAliasesRequestBuilder;IndicesAliasesRequestBuilder addAlias(String[] indices, String alias);IndicesAliasesRequestBuilder addAlias(String[] indices, String alias, String filter);@param;String alias;String alias;The alias;true
org.elasticsearch.action.admin.indices.alias.IndicesAliasesRequestBuilder;IndicesAliasesRequestBuilder addAlias(String[] indices, String alias);IndicesAliasesRequestBuilder addAlias(String[] indices, String alias, Map filter);Free text;;;Adds an alias to the index. ;true
org.elasticsearch.action.admin.indices.alias.IndicesAliasesRequestBuilder;IndicesAliasesRequestBuilder addAlias(String[] indices, String alias);IndicesAliasesRequestBuilder addAlias(String[] indices, String alias, Map filter);@param;String[] indices;String[] indices;The indices;true
org.elasticsearch.action.admin.indices.alias.IndicesAliasesRequestBuilder;IndicesAliasesRequestBuilder addAlias(String[] indices, String alias);IndicesAliasesRequestBuilder addAlias(String[] indices, String alias, Map filter);@param;String alias;String alias;The alias;true
org.elasticsearch.action.admin.indices.alias.IndicesAliasesRequestBuilder;IndicesAliasesRequestBuilder addAlias(String[] indices, String alias);IndicesAliasesRequestBuilder addAlias(String index, String alias, Map filter);Free text;;;Adds an alias to the index. ;true
org.elasticsearch.action.admin.indices.alias.IndicesAliasesRequestBuilder;IndicesAliasesRequestBuilder addAlias(String[] indices, String alias);IndicesAliasesRequestBuilder addAlias(String index, String alias, Map filter);@param;String[] indices;String index;The indices;true
org.elasticsearch.action.admin.indices.alias.IndicesAliasesRequestBuilder;IndicesAliasesRequestBuilder addAlias(String[] indices, String alias);IndicesAliasesRequestBuilder addAlias(String index, String alias, Map filter);@param;String alias;String alias;The alias;true
org.elasticsearch.action.admin.indices.alias.IndicesAliasesRequestBuilder;IndicesAliasesRequestBuilder addAlias(String[] indices, String alias);IndicesAliasesRequestBuilder addAlias(String[] indices, String alias, QueryBuilder filterBuilder);Free text;;;Adds an alias to the index. ;true
org.elasticsearch.action.admin.indices.alias.IndicesAliasesRequestBuilder;IndicesAliasesRequestBuilder addAlias(String[] indices, String alias);IndicesAliasesRequestBuilder addAlias(String[] indices, String alias, QueryBuilder filterBuilder);@param;String[] indices;String[] indices;The indices;true
org.elasticsearch.action.admin.indices.alias.IndicesAliasesRequestBuilder;IndicesAliasesRequestBuilder addAlias(String[] indices, String alias);IndicesAliasesRequestBuilder addAlias(String[] indices, String alias, QueryBuilder filterBuilder);@param;String alias;String alias;The alias;true
org.elasticsearch.action.admin.indices.alias.IndicesAliasesRequestBuilder;IndicesAliasesRequestBuilder addAlias(String[] indices, String alias);IndicesAliasesRequestBuilder addAlias(String index, String alias, QueryBuilder filterBuilder);Free text;;;Adds an alias to the index. ;true
org.elasticsearch.action.admin.indices.alias.IndicesAliasesRequestBuilder;IndicesAliasesRequestBuilder addAlias(String[] indices, String alias);IndicesAliasesRequestBuilder addAlias(String index, String alias, QueryBuilder filterBuilder);@param;String alias;String alias;The alias;true
org.elasticsearch.action.admin.indices.alias.IndicesAliasesRequestBuilder;IndicesAliasesRequestBuilder addAlias(String[] indices, String alias);IndicesAliasesRequestBuilder removeAlias(String index, String alias);@param;String alias;String alias;The alias;true
org.elasticsearch.action.admin.indices.alias.IndicesAliasesRequestBuilder;IndicesAliasesRequestBuilder addAlias(String[] indices, String alias);IndicesAliasesRequestBuilder removeAlias(String[] indices, String aliases);@param;String[] indices;String[] indices;The indices;true
org.elasticsearch.action.admin.indices.alias.IndicesAliasesRequestBuilder;IndicesAliasesRequestBuilder addAlias(String index, String alias, String filter);IndicesAliasesRequestBuilder addAlias(String[] indices, String alias, String filter);Free text;;;Adds an alias to the index. ;true
org.elasticsearch.action.admin.indices.alias.IndicesAliasesRequestBuilder;IndicesAliasesRequestBuilder addAlias(String index, String alias, String filter);IndicesAliasesRequestBuilder addAlias(String[] indices, String alias, String filter);@param;String alias;String alias;The alias;true
org.elasticsearch.action.admin.indices.alias.IndicesAliasesRequestBuilder;IndicesAliasesRequestBuilder addAlias(String index, String alias, String filter);IndicesAliasesRequestBuilder addAlias(String[] indices, String alias, String filter);@param;String filter;String filter;The filter;true
org.elasticsearch.action.admin.indices.alias.IndicesAliasesRequestBuilder;IndicesAliasesRequestBuilder addAlias(String index, String alias, String filter);IndicesAliasesRequestBuilder addAlias(String[] indices, String alias, Map filter);Free text;;;Adds an alias to the index. ;true
org.elasticsearch.action.admin.indices.alias.IndicesAliasesRequestBuilder;IndicesAliasesRequestBuilder addAlias(String index, String alias, String filter);IndicesAliasesRequestBuilder addAlias(String[] indices, String alias, Map filter);@param;String alias;String alias;The alias;true
org.elasticsearch.action.admin.indices.alias.IndicesAliasesRequestBuilder;IndicesAliasesRequestBuilder addAlias(String index, String alias, String filter);IndicesAliasesRequestBuilder addAlias(String[] indices, String alias, Map filter);@param;String filter;Map<String,Object> filter;The filter;true
org.elasticsearch.action.admin.indices.alias.IndicesAliasesRequestBuilder;IndicesAliasesRequestBuilder addAlias(String index, String alias, String filter);IndicesAliasesRequestBuilder addAlias(String index, String alias, Map filter);Free text;;;Adds an alias to the index. ;true
org.elasticsearch.action.admin.indices.alias.IndicesAliasesRequestBuilder;IndicesAliasesRequestBuilder addAlias(String index, String alias, String filter);IndicesAliasesRequestBuilder addAlias(String index, String alias, Map filter);@param;String alias;String alias;The alias;true
org.elasticsearch.action.admin.indices.alias.IndicesAliasesRequestBuilder;IndicesAliasesRequestBuilder addAlias(String index, String alias, String filter);IndicesAliasesRequestBuilder addAlias(String index, String alias, Map filter);@param;String filter;Map<String,Object> filter;The filter;true
org.elasticsearch.action.admin.indices.alias.IndicesAliasesRequestBuilder;IndicesAliasesRequestBuilder addAlias(String index, String alias, String filter);IndicesAliasesRequestBuilder addAlias(String[] indices, String alias, QueryBuilder filterBuilder);Free text;;;Adds an alias to the index. ;true
org.elasticsearch.action.admin.indices.alias.IndicesAliasesRequestBuilder;IndicesAliasesRequestBuilder addAlias(String index, String alias, String filter);IndicesAliasesRequestBuilder addAlias(String[] indices, String alias, QueryBuilder filterBuilder);@param;String alias;String alias;The alias;true
org.elasticsearch.action.admin.indices.alias.IndicesAliasesRequestBuilder;IndicesAliasesRequestBuilder addAlias(String index, String alias, String filter);IndicesAliasesRequestBuilder addAlias(String[] indices, String alias, QueryBuilder filterBuilder);@param;String filter;QueryBuilder filterBuilder;The filter;true
org.elasticsearch.action.admin.indices.alias.IndicesAliasesRequestBuilder;IndicesAliasesRequestBuilder addAlias(String index, String alias, String filter);IndicesAliasesRequestBuilder addAlias(String index, String alias, QueryBuilder filterBuilder);Whole;;;Adds an alias to the index.  @param The index@param The alias@param The filter  ;false
org.elasticsearch.action.admin.indices.alias.IndicesAliasesRequestBuilder;IndicesAliasesRequestBuilder addAlias(String index, String alias, String filter);IndicesAliasesRequestBuilder removeAlias(String index, String alias);@param;String index;String index;The index;true
org.elasticsearch.action.admin.indices.alias.IndicesAliasesRequestBuilder;IndicesAliasesRequestBuilder addAlias(String index, String alias, String filter);IndicesAliasesRequestBuilder removeAlias(String index, String alias);@param;String alias;String alias;The alias;true
org.elasticsearch.action.admin.indices.alias.IndicesAliasesRequestBuilder;IndicesAliasesRequestBuilder addAlias(String index, String alias, String filter);IndicesAliasesRequestBuilder removeAlias(String index, String[] aliases);@param;String index;String index;The index;true
org.elasticsearch.action.admin.indices.alias.IndicesAliasesRequestBuilder;IndicesAliasesRequestBuilder addAlias(String[] indices, String alias, String filter);IndicesAliasesRequestBuilder addAlias(String[] indices, String alias, Map filter);Whole;;;Adds an alias to the index.  @param The indices@param The alias@param The filter  ;false
org.elasticsearch.action.admin.indices.alias.IndicesAliasesRequestBuilder;IndicesAliasesRequestBuilder addAlias(String[] indices, String alias, String filter);IndicesAliasesRequestBuilder addAlias(String index, String alias, Map filter);Whole;;;Adds an alias to the index.  @param The indices@param The alias@param The filter  ;false
org.elasticsearch.action.admin.indices.alias.IndicesAliasesRequestBuilder;IndicesAliasesRequestBuilder addAlias(String[] indices, String alias, String filter);IndicesAliasesRequestBuilder addAlias(String[] indices, String alias, QueryBuilder filterBuilder);Whole;;;Adds an alias to the index.  @param The indices@param The alias@param The filter  ;false
org.elasticsearch.action.admin.indices.alias.IndicesAliasesRequestBuilder;IndicesAliasesRequestBuilder addAlias(String[] indices, String alias, String filter);IndicesAliasesRequestBuilder addAlias(String index, String alias, QueryBuilder filterBuilder);Free text;;;Adds an alias to the index. ;true
org.elasticsearch.action.admin.indices.alias.IndicesAliasesRequestBuilder;IndicesAliasesRequestBuilder addAlias(String[] indices, String alias, String filter);IndicesAliasesRequestBuilder addAlias(String index, String alias, QueryBuilder filterBuilder);@param;String alias;String alias;The alias;true
org.elasticsearch.action.admin.indices.alias.IndicesAliasesRequestBuilder;IndicesAliasesRequestBuilder addAlias(String[] indices, String alias, String filter);IndicesAliasesRequestBuilder addAlias(String index, String alias, QueryBuilder filterBuilder);@param;String filter;QueryBuilder filterBuilder;The filter;true
org.elasticsearch.action.admin.indices.alias.IndicesAliasesRequestBuilder;IndicesAliasesRequestBuilder addAlias(String[] indices, String alias, String filter);IndicesAliasesRequestBuilder removeAlias(String index, String alias);@param;String alias;String alias;The alias;true
org.elasticsearch.action.admin.indices.alias.IndicesAliasesRequestBuilder;IndicesAliasesRequestBuilder addAlias(String[] indices, String alias, String filter);IndicesAliasesRequestBuilder removeAlias(String[] indices, String aliases);@param;String[] indices;String[] indices;The indices;true
org.elasticsearch.action.admin.indices.alias.IndicesAliasesRequestBuilder;IndicesAliasesRequestBuilder addAlias(String[] indices, String alias, Map filter);IndicesAliasesRequestBuilder addAlias(String index, String alias, Map filter);Whole;;;Adds an alias to the index.  @param The indices@param The alias@param The filter  ;false
org.elasticsearch.action.admin.indices.alias.IndicesAliasesRequestBuilder;IndicesAliasesRequestBuilder addAlias(String[] indices, String alias, Map filter);IndicesAliasesRequestBuilder addAlias(String[] indices, String alias, QueryBuilder filterBuilder);Whole;;;Adds an alias to the index.  @param The indices@param The alias@param The filter  ;false
org.elasticsearch.action.admin.indices.alias.IndicesAliasesRequestBuilder;IndicesAliasesRequestBuilder addAlias(String[] indices, String alias, Map filter);IndicesAliasesRequestBuilder addAlias(String index, String alias, QueryBuilder filterBuilder);Free text;;;Adds an alias to the index. ;true
org.elasticsearch.action.admin.indices.alias.IndicesAliasesRequestBuilder;IndicesAliasesRequestBuilder addAlias(String[] indices, String alias, Map filter);IndicesAliasesRequestBuilder addAlias(String index, String alias, QueryBuilder filterBuilder);@param;String alias;String alias;The alias;true
org.elasticsearch.action.admin.indices.alias.IndicesAliasesRequestBuilder;IndicesAliasesRequestBuilder addAlias(String[] indices, String alias, Map filter);IndicesAliasesRequestBuilder addAlias(String index, String alias, QueryBuilder filterBuilder);@param;Map<String,Object> filter;QueryBuilder filterBuilder;The filter;true
org.elasticsearch.action.admin.indices.alias.IndicesAliasesRequestBuilder;IndicesAliasesRequestBuilder addAlias(String[] indices, String alias, Map filter);IndicesAliasesRequestBuilder removeAlias(String index, String alias);@param;String alias;String alias;The alias;true
org.elasticsearch.action.admin.indices.alias.IndicesAliasesRequestBuilder;IndicesAliasesRequestBuilder addAlias(String[] indices, String alias, Map filter);IndicesAliasesRequestBuilder removeAlias(String[] indices, String aliases);@param;String[] indices;String[] indices;The indices;true
org.elasticsearch.action.admin.indices.alias.IndicesAliasesRequestBuilder;IndicesAliasesRequestBuilder addAlias(String index, String alias, Map filter);IndicesAliasesRequestBuilder addAlias(String[] indices, String alias, QueryBuilder filterBuilder);Whole;;;Adds an alias to the index.  @param The indices@param The alias@param The filter  ;false
org.elasticsearch.action.admin.indices.alias.IndicesAliasesRequestBuilder;IndicesAliasesRequestBuilder addAlias(String index, String alias, Map filter);IndicesAliasesRequestBuilder addAlias(String index, String alias, QueryBuilder filterBuilder);Free text;;;Adds an alias to the index. ;true
org.elasticsearch.action.admin.indices.alias.IndicesAliasesRequestBuilder;IndicesAliasesRequestBuilder addAlias(String index, String alias, Map filter);IndicesAliasesRequestBuilder addAlias(String index, String alias, QueryBuilder filterBuilder);@param;String alias;String alias;The alias;true
org.elasticsearch.action.admin.indices.alias.IndicesAliasesRequestBuilder;IndicesAliasesRequestBuilder addAlias(String index, String alias, Map filter);IndicesAliasesRequestBuilder addAlias(String index, String alias, QueryBuilder filterBuilder);@param;Map<String,Object> filter;QueryBuilder filterBuilder;The filter;true
org.elasticsearch.action.admin.indices.alias.IndicesAliasesRequestBuilder;IndicesAliasesRequestBuilder addAlias(String index, String alias, Map filter);IndicesAliasesRequestBuilder removeAlias(String index, String alias);@param;String alias;String alias;The alias;true
org.elasticsearch.action.admin.indices.alias.IndicesAliasesRequestBuilder;IndicesAliasesRequestBuilder addAlias(String index, String alias, Map filter);IndicesAliasesRequestBuilder removeAlias(String[] indices, String aliases);@param;String index;String[] indices;The indices;false
org.elasticsearch.action.admin.indices.alias.IndicesAliasesRequestBuilder;IndicesAliasesRequestBuilder addAlias(String[] indices, String alias, QueryBuilder filterBuilder);IndicesAliasesRequestBuilder addAlias(String index, String alias, QueryBuilder filterBuilder);Free text;;;Adds an alias to the index. ;true
org.elasticsearch.action.admin.indices.alias.IndicesAliasesRequestBuilder;IndicesAliasesRequestBuilder addAlias(String[] indices, String alias, QueryBuilder filterBuilder);IndicesAliasesRequestBuilder addAlias(String index, String alias, QueryBuilder filterBuilder);@param;String alias;String alias;The alias;true
org.elasticsearch.action.admin.indices.alias.IndicesAliasesRequestBuilder;IndicesAliasesRequestBuilder addAlias(String[] indices, String alias, QueryBuilder filterBuilder);IndicesAliasesRequestBuilder addAlias(String index, String alias, QueryBuilder filterBuilder);@param;QueryBuilder filterBuilder;QueryBuilder filterBuilder;The filter;true
org.elasticsearch.action.admin.indices.alias.IndicesAliasesRequestBuilder;IndicesAliasesRequestBuilder addAlias(String[] indices, String alias, QueryBuilder filterBuilder);IndicesAliasesRequestBuilder removeAlias(String index, String alias);@param;String alias;String alias;The alias;true
org.elasticsearch.action.admin.indices.alias.IndicesAliasesRequestBuilder;IndicesAliasesRequestBuilder addAlias(String[] indices, String alias, QueryBuilder filterBuilder);IndicesAliasesRequestBuilder removeAlias(String[] indices, String aliases);@param;String[] indices;String[] indices;The indices;true
org.elasticsearch.action.admin.indices.alias.IndicesAliasesRequestBuilder;IndicesAliasesRequestBuilder addAlias(String index, String alias, QueryBuilder filterBuilder);IndicesAliasesRequestBuilder removeAlias(String index, String alias);@param;String index;String index;The index;true
org.elasticsearch.action.admin.indices.alias.IndicesAliasesRequestBuilder;IndicesAliasesRequestBuilder addAlias(String index, String alias, QueryBuilder filterBuilder);IndicesAliasesRequestBuilder removeAlias(String index, String alias);@param;String alias;String alias;The alias;true
org.elasticsearch.action.admin.indices.alias.IndicesAliasesRequestBuilder;IndicesAliasesRequestBuilder addAlias(String index, String alias, QueryBuilder filterBuilder);IndicesAliasesRequestBuilder removeAlias(String index, String[] aliases);@param;String index;String index;The index;true
org.elasticsearch.action.admin.indices.alias.IndicesAliasesRequestBuilder;IndicesAliasesRequestBuilder removeAlias(String index, String alias);IndicesAliasesRequestBuilder removeAlias(String index, String[] aliases);@param;String index;String index;The index;true
org.elasticsearch.action.admin.indices.alias.IndicesAliasesRequestBuilder;IndicesAliasesRequestBuilder removeAlias(String[] indices, String aliases);IndicesAliasesRequestBuilder removeAlias(String index, String[] aliases);Free text;;;Removes aliases from the index. ;true
org.elasticsearch.action.admin.indices.alias.IndicesAliasesRequestBuilder;IndicesAliasesRequestBuilder removeAlias(String[] indices, String aliases);IndicesAliasesRequestBuilder removeAlias(String index, String[] aliases);@param;String aliases;String[] aliases;The aliases;true
org.elasticsearch.action.admin.indices.alias.Alias;Alias filter(String filter);Alias filter(Map filter);Whole;;;Associates a filter to the alias    ;false
org.elasticsearch.action.admin.indices.alias.Alias;Alias filter(String filter);Alias filter(QueryBuilder filterBuilder);Whole;;;Associates a filter to the alias    ;false
org.elasticsearch.action.admin.indices.alias.Alias;Alias filter(Map filter);Alias filter(QueryBuilder filterBuilder);Whole;;;Associates a filter to the alias    ;false
org.elasticsearch.action.admin.indices.close.CloseIndexRequestBuilder;CloseIndexRequestBuilder setIndices(String indices);CloseIndexRequestBuilder setIndicesOptions(IndicesOptions indicesOptions);@return;;;the request itself;false
org.elasticsearch.action.admin.indices.close.CloseIndexRequest;CloseIndexRequest indices(String indices);CloseIndexRequest indicesOptions(IndicesOptions indicesOptions);@return;;;the request itself;false
org.elasticsearch.action.admin.indices.flush.FlushRequest;boolean force();FlushRequest force(boolean force);Whole;;;Force flushing, even if one is possibly not needed.    ;false
org.elasticsearch.action.admin.indices.exists.types.TypesExistsRequestBuilder; TypesExistsRequestBuilder(ElasticsearchClient client, TypesExistsAction action, String indices);TypesExistsRequestBuilder setIndices(String[] indices);Whole;;; @param What indices to check for types  ;false
org.elasticsearch.action.admin.indices.template.put.PutIndexTemplateRequest;PutIndexTemplateRequest settings(Settings settings);PutIndexTemplateRequest settings(Settings.Builder settings);Whole;;;The settings to create the index template with.    ;false
org.elasticsearch.action.admin.indices.template.put.PutIndexTemplateRequest;PutIndexTemplateRequest mapping(String type, String source, XContentType xContentType);PutIndexTemplateRequest mapping(String type, XContentBuilder source);Free text;;;Adds mapping that will be added when the index gets created. ;true
org.elasticsearch.action.admin.indices.template.put.PutIndexTemplateRequest;PutIndexTemplateRequest mapping(String type, String source, XContentType xContentType);PutIndexTemplateRequest mapping(String type, XContentBuilder source);@param;String type;String type;The mapping type;true
org.elasticsearch.action.admin.indices.template.put.PutIndexTemplateRequest;PutIndexTemplateRequest mapping(String type, String source, XContentType xContentType);PutIndexTemplateRequest mapping(String type, XContentBuilder source);@param;String source;XContentBuilder source;The mapping source;true
org.elasticsearch.action.admin.indices.template.put.PutIndexTemplateRequest;PutIndexTemplateRequest mapping(String type, String source, XContentType xContentType);PutIndexTemplateRequest mapping(String type, BytesReference source, XContentType xContentType);Free text;;;Adds mapping that will be added when the index gets created. ;true
org.elasticsearch.action.admin.indices.template.put.PutIndexTemplateRequest;PutIndexTemplateRequest mapping(String type, String source, XContentType xContentType);PutIndexTemplateRequest mapping(String type, BytesReference source, XContentType xContentType);@param;String type;String type;The mapping type;true
org.elasticsearch.action.admin.indices.template.put.PutIndexTemplateRequest;PutIndexTemplateRequest mapping(String type, String source, XContentType xContentType);PutIndexTemplateRequest mapping(String type, BytesReference source, XContentType xContentType);@param;String source;BytesReference source;The mapping source;true
org.elasticsearch.action.admin.indices.template.put.PutIndexTemplateRequest;PutIndexTemplateRequest mapping(String type, String source, XContentType xContentType);PutIndexTemplateRequest mapping(String type, Map source);Free text;;;Adds mapping that will be added when the index gets created. ;true
org.elasticsearch.action.admin.indices.template.put.PutIndexTemplateRequest;PutIndexTemplateRequest mapping(String type, String source, XContentType xContentType);PutIndexTemplateRequest mapping(String type, Map source);@param;String type;String type;The mapping type;true
org.elasticsearch.action.admin.indices.template.put.PutIndexTemplateRequest;PutIndexTemplateRequest mapping(String type, String source, XContentType xContentType);PutIndexTemplateRequest mapping(String type, Map source);@param;String source;Map<String,Object> source;The mapping source;true
org.elasticsearch.action.admin.indices.template.put.PutIndexTemplateRequest;PutIndexTemplateRequest mapping(String type, XContentBuilder source);PutIndexTemplateRequest mapping(String type, BytesReference source, XContentType xContentType);Free text;;;Adds mapping that will be added when the index gets created. ;true
org.elasticsearch.action.admin.indices.template.put.PutIndexTemplateRequest;PutIndexTemplateRequest mapping(String type, XContentBuilder source);PutIndexTemplateRequest mapping(String type, BytesReference source, XContentType xContentType);@param;String type;String type;The mapping type;true
org.elasticsearch.action.admin.indices.template.put.PutIndexTemplateRequest;PutIndexTemplateRequest mapping(String type, XContentBuilder source);PutIndexTemplateRequest mapping(String type, BytesReference source, XContentType xContentType);@param;XContentBuilder source;BytesReference source;The mapping source;true
org.elasticsearch.action.admin.indices.template.put.PutIndexTemplateRequest;PutIndexTemplateRequest mapping(String type, XContentBuilder source);PutIndexTemplateRequest mapping(String type, Map source);Whole;;;Adds mapping that will be added when the index gets created.  @param The mapping type@param The mapping source  ;false
org.elasticsearch.action.admin.indices.template.put.PutIndexTemplateRequest;PutIndexTemplateRequest mapping(String type, BytesReference source, XContentType xContentType);PutIndexTemplateRequest mapping(String type, Map source);Free text;;;Adds mapping that will be added when the index gets created. ;true
org.elasticsearch.action.admin.indices.template.put.PutIndexTemplateRequest;PutIndexTemplateRequest mapping(String type, BytesReference source, XContentType xContentType);PutIndexTemplateRequest mapping(String type, Map source);@param;String type;String type;The mapping type;true
org.elasticsearch.action.admin.indices.template.put.PutIndexTemplateRequest;PutIndexTemplateRequest mapping(String type, BytesReference source, XContentType xContentType);PutIndexTemplateRequest mapping(String type, Map source);@param;BytesReference source;Map<String,Object> source;The mapping source;true
org.elasticsearch.action.admin.indices.template.put.PutIndexTemplateRequest;PutIndexTemplateRequest source(XContentBuilder templateBuilder);PutIndexTemplateRequest source(Map templateSource);Whole;;;The template source definition.    ;false
org.elasticsearch.action.admin.indices.template.put.PutIndexTemplateRequest;PutIndexTemplateRequest source(XContentBuilder templateBuilder);PutIndexTemplateRequest source(String templateSource, XContentType xContentType);Whole;;;The template source definition.    ;false
org.elasticsearch.action.admin.indices.template.put.PutIndexTemplateRequest;PutIndexTemplateRequest source(XContentBuilder templateBuilder);PutIndexTemplateRequest source(byte[] source, XContentType xContentType);Whole;;;The template source definition.    ;false
org.elasticsearch.action.admin.indices.template.put.PutIndexTemplateRequest;PutIndexTemplateRequest source(XContentBuilder templateBuilder);PutIndexTemplateRequest source(byte[] source, int offset, int length, XContentType xContentType);Whole;;;The template source definition.    ;false
org.elasticsearch.action.admin.indices.template.put.PutIndexTemplateRequest;PutIndexTemplateRequest source(XContentBuilder templateBuilder);PutIndexTemplateRequest source(BytesReference source, XContentType xContentType);Whole;;;The template source definition.    ;false
org.elasticsearch.action.admin.indices.template.put.PutIndexTemplateRequest;PutIndexTemplateRequest source(Map templateSource);PutIndexTemplateRequest source(String templateSource, XContentType xContentType);Whole;;;The template source definition.    ;false
org.elasticsearch.action.admin.indices.template.put.PutIndexTemplateRequest;PutIndexTemplateRequest source(Map templateSource);PutIndexTemplateRequest source(byte[] source, XContentType xContentType);Whole;;;The template source definition.    ;false
org.elasticsearch.action.admin.indices.template.put.PutIndexTemplateRequest;PutIndexTemplateRequest source(Map templateSource);PutIndexTemplateRequest source(byte[] source, int offset, int length, XContentType xContentType);Whole;;;The template source definition.    ;false
org.elasticsearch.action.admin.indices.template.put.PutIndexTemplateRequest;PutIndexTemplateRequest source(Map templateSource);PutIndexTemplateRequest source(BytesReference source, XContentType xContentType);Whole;;;The template source definition.    ;false
org.elasticsearch.action.admin.indices.template.put.PutIndexTemplateRequest;PutIndexTemplateRequest source(String templateSource, XContentType xContentType);PutIndexTemplateRequest source(byte[] source, XContentType xContentType);Whole;;;The template source definition.    ;false
org.elasticsearch.action.admin.indices.template.put.PutIndexTemplateRequest;PutIndexTemplateRequest source(String templateSource, XContentType xContentType);PutIndexTemplateRequest source(byte[] source, int offset, int length, XContentType xContentType);Whole;;;The template source definition.    ;false
org.elasticsearch.action.admin.indices.template.put.PutIndexTemplateRequest;PutIndexTemplateRequest source(String templateSource, XContentType xContentType);PutIndexTemplateRequest source(BytesReference source, XContentType xContentType);Whole;;;The template source definition.    ;false
org.elasticsearch.action.admin.indices.template.put.PutIndexTemplateRequest;PutIndexTemplateRequest source(byte[] source, XContentType xContentType);PutIndexTemplateRequest source(byte[] source, int offset, int length, XContentType xContentType);Whole;;;The template source definition.    ;false
org.elasticsearch.action.admin.indices.template.put.PutIndexTemplateRequest;PutIndexTemplateRequest source(byte[] source, XContentType xContentType);PutIndexTemplateRequest source(BytesReference source, XContentType xContentType);Whole;;;The template source definition.    ;false
org.elasticsearch.action.admin.indices.template.put.PutIndexTemplateRequest;PutIndexTemplateRequest source(byte[] source, int offset, int length, XContentType xContentType);PutIndexTemplateRequest source(BytesReference source, XContentType xContentType);Whole;;;The template source definition.    ;false
org.elasticsearch.action.admin.indices.template.put.PutIndexTemplateRequest;PutIndexTemplateRequest aliases(Map source);PutIndexTemplateRequest aliases(XContentBuilder source);Whole;;;Sets the aliases that will be associated with the index when it gets created    ;false
org.elasticsearch.action.admin.indices.template.put.PutIndexTemplateRequest;PutIndexTemplateRequest aliases(Map source);PutIndexTemplateRequest aliases(String source);Whole;;;Sets the aliases that will be associated with the index when it gets created    ;false
org.elasticsearch.action.admin.indices.template.put.PutIndexTemplateRequest;PutIndexTemplateRequest aliases(Map source);PutIndexTemplateRequest aliases(BytesReference source);Whole;;;Sets the aliases that will be associated with the index when it gets created    ;false
org.elasticsearch.action.admin.indices.template.put.PutIndexTemplateRequest;PutIndexTemplateRequest aliases(XContentBuilder source);PutIndexTemplateRequest aliases(String source);Whole;;;Sets the aliases that will be associated with the index when it gets created    ;false
org.elasticsearch.action.admin.indices.template.put.PutIndexTemplateRequest;PutIndexTemplateRequest aliases(XContentBuilder source);PutIndexTemplateRequest aliases(BytesReference source);Whole;;;Sets the aliases that will be associated with the index when it gets created    ;false
org.elasticsearch.action.admin.indices.template.put.PutIndexTemplateRequest;PutIndexTemplateRequest aliases(String source);PutIndexTemplateRequest aliases(BytesReference source);Whole;;;Sets the aliases that will be associated with the index when it gets created    ;false
org.elasticsearch.action.admin.indices.template.put.PutIndexTemplateRequestBuilder;PutIndexTemplateRequestBuilder setSettings(Settings settings);PutIndexTemplateRequestBuilder setSettings(Settings.Builder settings);Whole;;;The settings to created the index template with.    ;false
org.elasticsearch.action.admin.indices.template.put.PutIndexTemplateRequestBuilder;PutIndexTemplateRequestBuilder setSettings(String source, XContentType xContentType);PutIndexTemplateRequestBuilder setSettings(Map source);Whole;;;The settings to crete the index template with (either json or yaml format)    ;false
org.elasticsearch.action.admin.indices.template.put.PutIndexTemplateRequestBuilder;PutIndexTemplateRequestBuilder addMapping(String type, String source, XContentType xContentType);PutIndexTemplateRequestBuilder addMapping(String type, XContentBuilder source);Free text;;;Adds mapping that will be added when the index template gets created. ;true
org.elasticsearch.action.admin.indices.template.put.PutIndexTemplateRequestBuilder;PutIndexTemplateRequestBuilder addMapping(String type, String source, XContentType xContentType);PutIndexTemplateRequestBuilder addMapping(String type, XContentBuilder source);@param;String type;String type;The mapping type;true
org.elasticsearch.action.admin.indices.template.put.PutIndexTemplateRequestBuilder;PutIndexTemplateRequestBuilder addMapping(String type, String source, XContentType xContentType);PutIndexTemplateRequestBuilder addMapping(String type, XContentBuilder source);@param;String source;XContentBuilder source;The mapping source;true
org.elasticsearch.action.admin.indices.template.put.PutIndexTemplateRequestBuilder;PutIndexTemplateRequestBuilder addMapping(String type, String source, XContentType xContentType);PutIndexTemplateRequestBuilder addMapping(String type, Map source);@param;String type;String type;The mapping type;true
org.elasticsearch.action.admin.indices.template.put.PutIndexTemplateRequestBuilder;PutIndexTemplateRequestBuilder addMapping(String type, String source, XContentType xContentType);PutIndexTemplateRequestBuilder addMapping(String type, Map source);@param;String source;Map<String,Object> source;The mapping source;true
org.elasticsearch.action.admin.indices.template.put.PutIndexTemplateRequestBuilder;PutIndexTemplateRequestBuilder setAliases(Map source);PutIndexTemplateRequestBuilder setAliases(String source);Whole;;;Sets the aliases that will be associated with the index when it gets created    ;false
org.elasticsearch.action.admin.indices.template.put.PutIndexTemplateRequestBuilder;PutIndexTemplateRequestBuilder setAliases(Map source);PutIndexTemplateRequestBuilder setAliases(XContentBuilder source);Whole;;;Sets the aliases that will be associated with the index when it gets created    ;false
org.elasticsearch.action.admin.indices.template.put.PutIndexTemplateRequestBuilder;PutIndexTemplateRequestBuilder setAliases(Map source);PutIndexTemplateRequestBuilder setAliases(BytesReference source);Whole;;;Sets the aliases that will be associated with the index when it gets created    ;false
org.elasticsearch.action.admin.indices.template.put.PutIndexTemplateRequestBuilder;PutIndexTemplateRequestBuilder setAliases(String source);PutIndexTemplateRequestBuilder setAliases(XContentBuilder source);Whole;;;Sets the aliases that will be associated with the index when it gets created    ;false
org.elasticsearch.action.admin.indices.template.put.PutIndexTemplateRequestBuilder;PutIndexTemplateRequestBuilder setAliases(String source);PutIndexTemplateRequestBuilder setAliases(BytesReference source);Whole;;;Sets the aliases that will be associated with the index when it gets created    ;false
org.elasticsearch.action.admin.indices.template.put.PutIndexTemplateRequestBuilder;PutIndexTemplateRequestBuilder setAliases(XContentBuilder source);PutIndexTemplateRequestBuilder setAliases(BytesReference source);Whole;;;Sets the aliases that will be associated with the index when it gets created    ;false
org.elasticsearch.action.admin.indices.template.put.PutIndexTemplateRequestBuilder;PutIndexTemplateRequestBuilder addMapping(String type, XContentBuilder source);PutIndexTemplateRequestBuilder addMapping(String type, Map source);@param;String type;String type;The mapping type;true
org.elasticsearch.action.admin.indices.template.put.PutIndexTemplateRequestBuilder;PutIndexTemplateRequestBuilder addMapping(String type, XContentBuilder source);PutIndexTemplateRequestBuilder addMapping(String type, Map source);@param;XContentBuilder source;Map<String,Object> source;The mapping source;true
org.elasticsearch.action.admin.indices.template.put.PutIndexTemplateRequestBuilder;PutIndexTemplateRequestBuilder setSource(XContentBuilder templateBuilder);PutIndexTemplateRequestBuilder setSource(Map templateSource);Whole;;;The template source definition.    ;false
org.elasticsearch.action.admin.indices.template.put.PutIndexTemplateRequestBuilder;PutIndexTemplateRequestBuilder setSource(XContentBuilder templateBuilder);PutIndexTemplateRequestBuilder setSource(BytesReference templateSource, XContentType xContentType);Whole;;;The template source definition.    ;false
org.elasticsearch.action.admin.indices.template.put.PutIndexTemplateRequestBuilder;PutIndexTemplateRequestBuilder setSource(XContentBuilder templateBuilder);PutIndexTemplateRequestBuilder setSource(byte[] templateSource, XContentType xContentType);Whole;;;The template source definition.    ;false
org.elasticsearch.action.admin.indices.template.put.PutIndexTemplateRequestBuilder;PutIndexTemplateRequestBuilder setSource(XContentBuilder templateBuilder);PutIndexTemplateRequestBuilder setSource(byte[] templateSource, int offset, int length, XContentType xContentType);Whole;;;The template source definition.    ;false
org.elasticsearch.action.admin.indices.template.put.PutIndexTemplateRequestBuilder;PutIndexTemplateRequestBuilder setSource(Map templateSource);PutIndexTemplateRequestBuilder setSource(BytesReference templateSource, XContentType xContentType);Whole;;;The template source definition.    ;false
org.elasticsearch.action.admin.indices.template.put.PutIndexTemplateRequestBuilder;PutIndexTemplateRequestBuilder setSource(Map templateSource);PutIndexTemplateRequestBuilder setSource(byte[] templateSource, XContentType xContentType);Whole;;;The template source definition.    ;false
org.elasticsearch.action.admin.indices.template.put.PutIndexTemplateRequestBuilder;PutIndexTemplateRequestBuilder setSource(Map templateSource);PutIndexTemplateRequestBuilder setSource(byte[] templateSource, int offset, int length, XContentType xContentType);Whole;;;The template source definition.    ;false
org.elasticsearch.action.admin.indices.template.put.PutIndexTemplateRequestBuilder;PutIndexTemplateRequestBuilder setSource(BytesReference templateSource, XContentType xContentType);PutIndexTemplateRequestBuilder setSource(byte[] templateSource, XContentType xContentType);Whole;;;The template source definition.    ;false
org.elasticsearch.action.admin.indices.template.put.PutIndexTemplateRequestBuilder;PutIndexTemplateRequestBuilder setSource(BytesReference templateSource, XContentType xContentType);PutIndexTemplateRequestBuilder setSource(byte[] templateSource, int offset, int length, XContentType xContentType);Whole;;;The template source definition.    ;false
org.elasticsearch.action.admin.indices.template.put.PutIndexTemplateRequestBuilder;PutIndexTemplateRequestBuilder setSource(byte[] templateSource, XContentType xContentType);PutIndexTemplateRequestBuilder setSource(byte[] templateSource, int offset, int length, XContentType xContentType);Whole;;;The template source definition.    ;false
org.elasticsearch.action.admin.indices.forcemerge.ForceMergeRequest;int maxNumSegments();ForceMergeRequest maxNumSegments(int maxNumSegments);Whole;;;Will merge the index down to &lt,= maxNumSegments. By default, will cause the merge process to merge down to half the configured number of segments.    ;false
org.elasticsearch.action.admin.indices.forcemerge.ForceMergeRequest;boolean flush();ForceMergeRequest flush(boolean flush);Whole;;;Should flush be performed after the merge. Defaults to <tt>true</tt>.    ;false
org.elasticsearch.action.admin.indices.rollover.RolloverRequest;void setAlias(String alias);void setNewIndexName(String newIndexName);Whole;;;Sets the alias to rollover to another index    ;false
org.elasticsearch.action.admin.indices.create.CreateIndexRequest;Settings settings();CreateIndexRequest settings(Settings.Builder settings);Whole;;;The settings to create the index with.    ;false
org.elasticsearch.action.admin.indices.create.CreateIndexRequest;Settings settings();CreateIndexRequest settings(Settings settings);Whole;;;The settings to create the index with.    ;false
org.elasticsearch.action.admin.indices.create.CreateIndexRequest;String cause();CreateIndexRequest cause(String cause);Whole;;;The cause for this index creation.    ;false
org.elasticsearch.action.admin.indices.create.CreateIndexRequest;CreateIndexRequest settings(Settings.Builder settings);CreateIndexRequest settings(Settings settings);Whole;;;The settings to create the index with.    ;false
org.elasticsearch.action.admin.indices.create.CreateIndexRequest;CreateIndexRequest mapping(String type, String source, XContentType xContentType);CreateIndexRequest mapping(String type, XContentBuilder source);Free text;;;Adds mapping that will be added when the index gets created. ;true
org.elasticsearch.action.admin.indices.create.CreateIndexRequest;CreateIndexRequest mapping(String type, String source, XContentType xContentType);CreateIndexRequest mapping(String type, XContentBuilder source);@param;String type;String type;The mapping type;true
org.elasticsearch.action.admin.indices.create.CreateIndexRequest;CreateIndexRequest mapping(String type, String source, XContentType xContentType);CreateIndexRequest mapping(String type, XContentBuilder source);@param;String source;XContentBuilder source;The mapping source;true
org.elasticsearch.action.admin.indices.create.CreateIndexRequest;CreateIndexRequest mapping(String type, String source, XContentType xContentType);CreateIndexRequest mapping(String type, Map source);Free text;;;Adds mapping that will be added when the index gets created. ;true
org.elasticsearch.action.admin.indices.create.CreateIndexRequest;CreateIndexRequest mapping(String type, String source, XContentType xContentType);CreateIndexRequest mapping(String type, Map source);@param;String type;String type;The mapping type;true
org.elasticsearch.action.admin.indices.create.CreateIndexRequest;CreateIndexRequest mapping(String type, String source, XContentType xContentType);CreateIndexRequest mapping(String type, Map source);@param;String source;Map source;The mapping source;true
org.elasticsearch.action.admin.indices.create.CreateIndexRequest;CreateIndexRequest mapping(String type, XContentBuilder source);CreateIndexRequest mapping(String type, Map source);Whole;;;Adds mapping that will be added when the index gets created.  @param The mapping type@param The mapping source  ;false
org.elasticsearch.action.admin.indices.create.CreateIndexRequest;CreateIndexRequest aliases(Map source);CreateIndexRequest aliases(XContentBuilder source);Whole;;;Sets the aliases that will be associated with the index when it gets created    ;false
org.elasticsearch.action.admin.indices.create.CreateIndexRequest;CreateIndexRequest aliases(Map source);CreateIndexRequest aliases(String source);Whole;;;Sets the aliases that will be associated with the index when it gets created    ;false
org.elasticsearch.action.admin.indices.create.CreateIndexRequest;CreateIndexRequest aliases(Map source);CreateIndexRequest aliases(BytesReference source);Whole;;;Sets the aliases that will be associated with the index when it gets created    ;false
org.elasticsearch.action.admin.indices.create.CreateIndexRequest;CreateIndexRequest aliases(XContentBuilder source);CreateIndexRequest aliases(String source);Whole;;;Sets the aliases that will be associated with the index when it gets created    ;false
org.elasticsearch.action.admin.indices.create.CreateIndexRequest;CreateIndexRequest aliases(XContentBuilder source);CreateIndexRequest aliases(BytesReference source);Whole;;;Sets the aliases that will be associated with the index when it gets created    ;false
org.elasticsearch.action.admin.indices.create.CreateIndexRequest;CreateIndexRequest aliases(String source);CreateIndexRequest aliases(BytesReference source);Whole;;;Sets the aliases that will be associated with the index when it gets created    ;false
org.elasticsearch.action.admin.indices.create.CreateIndexRequest;CreateIndexRequest source(String source, XContentType xContentType);CreateIndexRequest source(XContentBuilder source);Whole;;;Sets the settings and mappings as a single source.    ;false
org.elasticsearch.action.admin.indices.create.CreateIndexRequest;CreateIndexRequest source(String source, XContentType xContentType);CreateIndexRequest source(byte[] source, XContentType xContentType);Whole;;;Sets the settings and mappings as a single source.    ;false
org.elasticsearch.action.admin.indices.create.CreateIndexRequest;CreateIndexRequest source(String source, XContentType xContentType);CreateIndexRequest source(byte[] source, int offset, int length, XContentType xContentType);Whole;;;Sets the settings and mappings as a single source.    ;false
org.elasticsearch.action.admin.indices.create.CreateIndexRequest;CreateIndexRequest source(String source, XContentType xContentType);CreateIndexRequest source(BytesReference source, XContentType xContentType);Whole;;;Sets the settings and mappings as a single source.    ;false
org.elasticsearch.action.admin.indices.create.CreateIndexRequest;CreateIndexRequest source(String source, XContentType xContentType);CreateIndexRequest source(Map source);Whole;;;Sets the settings and mappings as a single source.    ;false
org.elasticsearch.action.admin.indices.create.CreateIndexRequest;CreateIndexRequest source(XContentBuilder source);CreateIndexRequest source(byte[] source, XContentType xContentType);Whole;;;Sets the settings and mappings as a single source.    ;false
org.elasticsearch.action.admin.indices.create.CreateIndexRequest;CreateIndexRequest source(XContentBuilder source);CreateIndexRequest source(byte[] source, int offset, int length, XContentType xContentType);Whole;;;Sets the settings and mappings as a single source.    ;false
org.elasticsearch.action.admin.indices.create.CreateIndexRequest;CreateIndexRequest source(XContentBuilder source);CreateIndexRequest source(BytesReference source, XContentType xContentType);Whole;;;Sets the settings and mappings as a single source.    ;false
org.elasticsearch.action.admin.indices.create.CreateIndexRequest;CreateIndexRequest source(XContentBuilder source);CreateIndexRequest source(Map source);Whole;;;Sets the settings and mappings as a single source.    ;false
org.elasticsearch.action.admin.indices.create.CreateIndexRequest;CreateIndexRequest source(byte[] source, XContentType xContentType);CreateIndexRequest source(byte[] source, int offset, int length, XContentType xContentType);Whole;;;Sets the settings and mappings as a single source.    ;false
org.elasticsearch.action.admin.indices.create.CreateIndexRequest;CreateIndexRequest source(byte[] source, XContentType xContentType);CreateIndexRequest source(BytesReference source, XContentType xContentType);Whole;;;Sets the settings and mappings as a single source.    ;false
org.elasticsearch.action.admin.indices.create.CreateIndexRequest;CreateIndexRequest source(byte[] source, XContentType xContentType);CreateIndexRequest source(Map source);Whole;;;Sets the settings and mappings as a single source.    ;false
org.elasticsearch.action.admin.indices.create.CreateIndexRequest;CreateIndexRequest source(byte[] source, int offset, int length, XContentType xContentType);CreateIndexRequest source(BytesReference source, XContentType xContentType);Whole;;;Sets the settings and mappings as a single source.    ;false
org.elasticsearch.action.admin.indices.create.CreateIndexRequest;CreateIndexRequest source(byte[] source, int offset, int length, XContentType xContentType);CreateIndexRequest source(Map source);Whole;;;Sets the settings and mappings as a single source.    ;false
org.elasticsearch.action.admin.indices.create.CreateIndexRequest;CreateIndexRequest source(BytesReference source, XContentType xContentType);CreateIndexRequest source(Map source);Whole;;;Sets the settings and mappings as a single source.    ;false
org.elasticsearch.action.admin.indices.create.CreateIndexRequestBuilder;CreateIndexRequestBuilder setSettings(Settings settings);CreateIndexRequestBuilder setSettings(Settings.Builder settings);Whole;;;The settings to create the index with.    ;false
org.elasticsearch.action.admin.indices.create.CreateIndexRequestBuilder;CreateIndexRequestBuilder addMapping(String type, String source, XContentType xContentType);CreateIndexRequestBuilder addMapping(String type, XContentBuilder source);Free text;;;Adds mapping that will be added when the index gets created. ;true
org.elasticsearch.action.admin.indices.create.CreateIndexRequestBuilder;CreateIndexRequestBuilder addMapping(String type, String source, XContentType xContentType);CreateIndexRequestBuilder addMapping(String type, XContentBuilder source);@param;String type;String type;The mapping type;true
org.elasticsearch.action.admin.indices.create.CreateIndexRequestBuilder;CreateIndexRequestBuilder addMapping(String type, String source, XContentType xContentType);CreateIndexRequestBuilder addMapping(String type, XContentBuilder source);@param;String source;XContentBuilder source;The mapping source;true
org.elasticsearch.action.admin.indices.create.CreateIndexRequestBuilder;CreateIndexRequestBuilder addMapping(String type, String source, XContentType xContentType);CreateIndexRequestBuilder addMapping(String type, Map source);Free text;;;Adds mapping that will be added when the index gets created. ;true
org.elasticsearch.action.admin.indices.create.CreateIndexRequestBuilder;CreateIndexRequestBuilder addMapping(String type, String source, XContentType xContentType);CreateIndexRequestBuilder addMapping(String type, Map source);@param;String type;String type;The mapping type;true
org.elasticsearch.action.admin.indices.create.CreateIndexRequestBuilder;CreateIndexRequestBuilder addMapping(String type, String source, XContentType xContentType);CreateIndexRequestBuilder addMapping(String type, Map source);@param;String source;Map<String,Object> source;The mapping source;true
org.elasticsearch.action.admin.indices.create.CreateIndexRequestBuilder;CreateIndexRequestBuilder addMapping(String type, XContentBuilder source);CreateIndexRequestBuilder addMapping(String type, Map source);Whole;;;Adds mapping that will be added when the index gets created.  @param The mapping type@param The mapping source  ;false
org.elasticsearch.action.admin.indices.create.CreateIndexRequestBuilder;CreateIndexRequestBuilder setAliases(Map source);CreateIndexRequestBuilder setAliases(String source);Whole;;;Sets the aliases that will be associated with the index when it gets created    ;false
org.elasticsearch.action.admin.indices.create.CreateIndexRequestBuilder;CreateIndexRequestBuilder setAliases(Map source);CreateIndexRequestBuilder setAliases(XContentBuilder source);Whole;;;Sets the aliases that will be associated with the index when it gets created    ;false
org.elasticsearch.action.admin.indices.create.CreateIndexRequestBuilder;CreateIndexRequestBuilder setAliases(Map source);CreateIndexRequestBuilder setAliases(BytesReference source);Whole;;;Sets the aliases that will be associated with the index when it gets created    ;false
org.elasticsearch.action.admin.indices.create.CreateIndexRequestBuilder;CreateIndexRequestBuilder setAliases(String source);CreateIndexRequestBuilder setAliases(XContentBuilder source);Whole;;;Sets the aliases that will be associated with the index when it gets created    ;false
org.elasticsearch.action.admin.indices.create.CreateIndexRequestBuilder;CreateIndexRequestBuilder setAliases(String source);CreateIndexRequestBuilder setAliases(BytesReference source);Whole;;;Sets the aliases that will be associated with the index when it gets created    ;false
org.elasticsearch.action.admin.indices.create.CreateIndexRequestBuilder;CreateIndexRequestBuilder setAliases(XContentBuilder source);CreateIndexRequestBuilder setAliases(BytesReference source);Whole;;;Sets the aliases that will be associated with the index when it gets created    ;false
org.elasticsearch.action.admin.indices.create.CreateIndexRequestBuilder;CreateIndexRequestBuilder setSource(String source, XContentType xContentType);CreateIndexRequestBuilder setSource(BytesReference source, XContentType xContentType);Whole;;;Sets the settings and mappings as a single source.    ;false
org.elasticsearch.action.admin.indices.create.CreateIndexRequestBuilder;CreateIndexRequestBuilder setSource(String source, XContentType xContentType);CreateIndexRequestBuilder setSource(byte[] source, XContentType xContentType);Whole;;;Sets the settings and mappings as a single source.    ;false
org.elasticsearch.action.admin.indices.create.CreateIndexRequestBuilder;CreateIndexRequestBuilder setSource(String source, XContentType xContentType);CreateIndexRequestBuilder setSource(byte[] source, int offset, int length, XContentType xContentType);Whole;;;Sets the settings and mappings as a single source.    ;false
org.elasticsearch.action.admin.indices.create.CreateIndexRequestBuilder;CreateIndexRequestBuilder setSource(String source, XContentType xContentType);CreateIndexRequestBuilder setSource(Map source);Whole;;;Sets the settings and mappings as a single source.    ;false
org.elasticsearch.action.admin.indices.create.CreateIndexRequestBuilder;CreateIndexRequestBuilder setSource(String source, XContentType xContentType);CreateIndexRequestBuilder setSource(XContentBuilder source);Whole;;;Sets the settings and mappings as a single source.    ;false
org.elasticsearch.action.admin.indices.create.CreateIndexRequestBuilder;CreateIndexRequestBuilder setSource(BytesReference source, XContentType xContentType);CreateIndexRequestBuilder setSource(byte[] source, XContentType xContentType);Whole;;;Sets the settings and mappings as a single source.    ;false
org.elasticsearch.action.admin.indices.create.CreateIndexRequestBuilder;CreateIndexRequestBuilder setSource(BytesReference source, XContentType xContentType);CreateIndexRequestBuilder setSource(byte[] source, int offset, int length, XContentType xContentType);Whole;;;Sets the settings and mappings as a single source.    ;false
org.elasticsearch.action.admin.indices.create.CreateIndexRequestBuilder;CreateIndexRequestBuilder setSource(BytesReference source, XContentType xContentType);CreateIndexRequestBuilder setSource(Map source);Whole;;;Sets the settings and mappings as a single source.    ;false
org.elasticsearch.action.admin.indices.create.CreateIndexRequestBuilder;CreateIndexRequestBuilder setSource(BytesReference source, XContentType xContentType);CreateIndexRequestBuilder setSource(XContentBuilder source);Whole;;;Sets the settings and mappings as a single source.    ;false
org.elasticsearch.action.admin.indices.create.CreateIndexRequestBuilder;CreateIndexRequestBuilder setSource(byte[] source, XContentType xContentType);CreateIndexRequestBuilder setSource(byte[] source, int offset, int length, XContentType xContentType);Whole;;;Sets the settings and mappings as a single source.    ;false
org.elasticsearch.action.admin.indices.create.CreateIndexRequestBuilder;CreateIndexRequestBuilder setSource(byte[] source, XContentType xContentType);CreateIndexRequestBuilder setSource(Map source);Whole;;;Sets the settings and mappings as a single source.    ;false
org.elasticsearch.action.admin.indices.create.CreateIndexRequestBuilder;CreateIndexRequestBuilder setSource(byte[] source, XContentType xContentType);CreateIndexRequestBuilder setSource(XContentBuilder source);Whole;;;Sets the settings and mappings as a single source.    ;false
org.elasticsearch.action.admin.indices.create.CreateIndexRequestBuilder;CreateIndexRequestBuilder setSource(byte[] source, int offset, int length, XContentType xContentType);CreateIndexRequestBuilder setSource(Map source);Whole;;;Sets the settings and mappings as a single source.    ;false
org.elasticsearch.action.admin.indices.create.CreateIndexRequestBuilder;CreateIndexRequestBuilder setSource(byte[] source, int offset, int length, XContentType xContentType);CreateIndexRequestBuilder setSource(XContentBuilder source);Whole;;;Sets the settings and mappings as a single source.    ;false
org.elasticsearch.action.admin.indices.create.CreateIndexRequestBuilder;CreateIndexRequestBuilder setSource(Map source);CreateIndexRequestBuilder setSource(XContentBuilder source);Whole;;;Sets the settings and mappings as a single source.    ;false
org.elasticsearch.action.admin.indices.open.OpenIndexRequest;OpenIndexRequest indices(String indices);OpenIndexRequest indicesOptions(IndicesOptions indicesOptions);@return;;;the request itself;false
org.elasticsearch.action.admin.indices.open.OpenIndexRequest;IndicesOptions indicesOptions();OpenIndexRequest indicesOptions(IndicesOptions indicesOptions);Free text;;;Specifies what type of requested indices to ignore and how to deal with wildcard expressions. For example indices that don't exist. ;true
org.elasticsearch.action.admin.indices.open.OpenIndexRequestBuilder;OpenIndexRequestBuilder setIndices(String indices);OpenIndexRequestBuilder setIndicesOptions(IndicesOptions indicesOptions);@return;;;the request itself;false
org.elasticsearch.action.admin.indices.stats.IndicesStatsRequest;IndicesStatsRequest types(String types);String[] types();Whole;;;Document types to return stats for. Mainly affects {@link #indexing(boolean)} when enabled, returning specific indexing stats for those types.    ;false
org.elasticsearch.action.admin.indices.stats.CommonStatsFlags;CommonStatsFlags types(String types);String[] types();Whole;;;Document types to return stats for. Mainly affects {@link Flag#Indexing} when enabled, returning specific indexing stats for those types.    ;false
org.elasticsearch.action.admin.indices.stats.CommonStatsFlags;CommonStatsFlags groups(String groups);CommonStatsFlags fieldDataFields(String fieldDataFields);Whole;;;Sets specific search group stats to retrieve the stats for. Mainly affects search when enabled.    ;false
org.elasticsearch.action.fieldcaps.FieldCapabilities; FieldCapabilities(String name, String type, boolean isSearchable, boolean isAggregatable); FieldCapabilities(String name, String type, boolean isSearchable, boolean isAggregatable, String[] indices, String[] nonSearchableIndices, String[] nonAggregatableIndices);Free text;;;Constructor ;true
org.elasticsearch.action.fieldcaps.FieldCapabilities; FieldCapabilities(String name, String type, boolean isSearchable, boolean isAggregatable); FieldCapabilities(String name, String type, boolean isSearchable, boolean isAggregatable, String[] indices, String[] nonSearchableIndices, String[] nonAggregatableIndices);@param;String type;String type;The type associated with the field.;true
org.elasticsearch.action.fieldcaps.FieldCapabilities; FieldCapabilities(String name, String type, boolean isSearchable, boolean isAggregatable); FieldCapabilities(String name, String type, boolean isSearchable, boolean isAggregatable, String[] indices, String[] nonSearchableIndices, String[] nonAggregatableIndices);@param;boolean isSearchable;boolean isSearchable;Whether this field is indexed for search.;true
org.elasticsearch.action.fieldcaps.FieldCapabilities; FieldCapabilities(String name, String type, boolean isSearchable, boolean isAggregatable); FieldCapabilities(String name, String type, boolean isSearchable, boolean isAggregatable, String[] indices, String[] nonSearchableIndices, String[] nonAggregatableIndices);@param;boolean isAggregatable;boolean isAggregatable;Whether this field can be aggregated on.;true
org.elasticsearch.action.get.GetRequest;GetRequest storedFields(String fields);String[] storedFields();Whole;;;Explicitly specify the stored fields that will be returned. By default, the <tt>_source</tt> field will be returned.    ;false
org.elasticsearch.action.get.GetRequestBuilder;GetRequestBuilder setFetchSource(String include, String exclude);GetRequestBuilder setFetchSource(String[] includes, String[] excludes);Free text;;;Indicate that _source should be returned, with an "include" and/or "exclude" set which can include simple wildcard elements. ;true
org.elasticsearch.action.search.SearchPhaseController;ReducedQueryPhase reducedQueryPhase(Collection queryResults, boolean isScrollRequest);ReducedQueryPhase reducedQueryPhase(Collection queryResults, boolean isScrollRequest, boolean trackTotalHits);Whole;;;Reduces the given query results and consumes all aggregations and profile results.  @param a list of non-null query shard results  ;false
org.elasticsearch.action.search.SearchScrollRequest;Scroll scroll();SearchScrollRequest scroll(Scroll scroll);Whole;;;If set, will enable scrolling of the search request.    ;false
org.elasticsearch.action.search.SearchScrollRequest;SearchScrollRequest scroll(TimeValue keepAlive);SearchScrollRequest scroll(String keepAlive);Whole;;;If set, will enable scrolling of the search request for the specified timeout.    ;false
org.elasticsearch.action.search.SearchScrollRequestBuilder;SearchScrollRequestBuilder setScroll(TimeValue keepAlive);SearchScrollRequestBuilder setScroll(String keepAlive);Whole;;;If set, will enable scrolling of the search request for the specified timeout.    ;false
org.elasticsearch.action.search.MultiSearchRequest;MultiSearchRequest add(SearchRequestBuilder request);MultiSearchRequest add(SearchRequest request);Whole;;;Add a search request to execute. Note, the order is important, the search response will be returned in the same order as the search requests.    ;false
org.elasticsearch.action.search.SearchRequestBuilder;SearchRequestBuilder setScroll(TimeValue keepAlive);SearchRequestBuilder setScroll(String keepAlive);Whole;;;If set, will enable scrolling of the search request for the specified timeout.    ;false
org.elasticsearch.action.search.SearchRequestBuilder;SearchRequestBuilder setStats(String statsGroups);SearchRequestBuilder setStats(List statsGroups);Whole;;;The stats groups this request will be aggregated under.    ;false
org.elasticsearch.action.search.SearchRequestBuilder;SearchRequestBuilder setFetchSource(String include, String exclude);SearchRequestBuilder setFetchSource(String[] includes, String[] excludes);Free text;;;Indicate that _source should be returned with every hit, with an "include" and/or "exclude" set which can include simple wildcard elements. ;true
org.elasticsearch.action.search.SearchRequestBuilder;SearchRequestBuilder addAggregation(AggregationBuilder aggregation);SearchRequestBuilder addAggregation(PipelineAggregationBuilder aggregation);Whole;;;Adds an aggregation to the search operation.    ;false
org.elasticsearch.action.search.SearchRequestBuilder;SearchRequestBuilder setRescorer(RescorerBuilder rescorer);SearchRequestBuilder setRescorer(RescorerBuilder rescorer, int window);Free text;;;Clears all rescorers on the builder and sets the first one.  To use multiple rescore windows use {@link #addRescorer(org.elasticsearch.search.rescore.RescorerBuilder, int)}. ;true
org.elasticsearch.action.search.SearchRequestBuilder;SearchRequestBuilder setRescorer(RescorerBuilder rescorer);SearchRequestBuilder setRescorer(RescorerBuilder rescorer, int window);@return;;;this for chaining;true
org.elasticsearch.action.search.SearchRequestBuilder;SearchRequestBuilder setRescorer(RescorerBuilder rescorer);SearchRequestBuilder setRescorer(RescorerBuilder rescorer, int window);@param;RescorerBuilder<?> rescorer;RescorerBuilder rescorer;rescorer configuration;true
org.elasticsearch.action.search.SearchRequestBuilder;SearchRequestBuilder setRescorer(RescorerBuilder rescorer);SearchRequestBuilder addRescorer(RescorerBuilder rescorer);@return;;;this for chaining;false
org.elasticsearch.action.search.SearchRequestBuilder;SearchRequestBuilder setRescorer(RescorerBuilder rescorer);SearchRequestBuilder addRescorer(RescorerBuilder rescorer);@param;RescorerBuilder<?> rescorer;RescorerBuilder<?> rescorer;rescorer configuration;true
org.elasticsearch.action.search.SearchRequestBuilder;SearchRequestBuilder setRescorer(RescorerBuilder rescorer);SearchRequestBuilder addRescorer(RescorerBuilder rescorer, int window);@return;;;this for chaining;false
org.elasticsearch.action.search.SearchRequestBuilder;SearchRequestBuilder setRescorer(RescorerBuilder rescorer);SearchRequestBuilder addRescorer(RescorerBuilder rescorer, int window);@param;RescorerBuilder<?> rescorer;RescorerBuilder<?> rescorer;rescorer configuration;true
org.elasticsearch.action.search.SearchRequestBuilder;SearchRequestBuilder setRescorer(RescorerBuilder rescorer);SearchRequestBuilder clearRescorers();@return;;;this for chaining;false
org.elasticsearch.action.search.SearchRequestBuilder;SearchRequestBuilder setRescorer(RescorerBuilder rescorer, int window);SearchRequestBuilder addRescorer(RescorerBuilder rescorer);@return;;;this for chaining;false
org.elasticsearch.action.search.SearchRequestBuilder;SearchRequestBuilder setRescorer(RescorerBuilder rescorer, int window);SearchRequestBuilder addRescorer(RescorerBuilder rescorer);@param;RescorerBuilder rescorer;RescorerBuilder<?> rescorer;rescorer configuration;true
org.elasticsearch.action.search.SearchRequestBuilder;SearchRequestBuilder setRescorer(RescorerBuilder rescorer, int window);SearchRequestBuilder addRescorer(RescorerBuilder rescorer, int window);@return;;;this for chaining;false
org.elasticsearch.action.search.SearchRequestBuilder;SearchRequestBuilder setRescorer(RescorerBuilder rescorer, int window);SearchRequestBuilder addRescorer(RescorerBuilder rescorer, int window);@param;RescorerBuilder rescorer;RescorerBuilder<?> rescorer;rescorer configuration;true
org.elasticsearch.action.search.SearchRequestBuilder;SearchRequestBuilder setRescorer(RescorerBuilder rescorer, int window);SearchRequestBuilder addRescorer(RescorerBuilder rescorer, int window);@param;int window;int window;rescore window;true
org.elasticsearch.action.search.SearchRequestBuilder;SearchRequestBuilder setRescorer(RescorerBuilder rescorer, int window);SearchRequestBuilder clearRescorers();@return;;;this for chaining;false
org.elasticsearch.action.search.SearchRequestBuilder;SearchRequestBuilder addRescorer(RescorerBuilder rescorer);SearchRequestBuilder addRescorer(RescorerBuilder rescorer, int window);Free text;;;Adds a new rescorer. ;true
org.elasticsearch.action.search.SearchRequestBuilder;SearchRequestBuilder addRescorer(RescorerBuilder rescorer);SearchRequestBuilder addRescorer(RescorerBuilder rescorer, int window);@return;;;this for chaining;true
org.elasticsearch.action.search.SearchRequestBuilder;SearchRequestBuilder addRescorer(RescorerBuilder rescorer);SearchRequestBuilder addRescorer(RescorerBuilder rescorer, int window);@param;RescorerBuilder<?> rescorer;RescorerBuilder<?> rescorer;rescorer configuration;true
org.elasticsearch.action.search.SearchRequestBuilder;SearchRequestBuilder addRescorer(RescorerBuilder rescorer);SearchRequestBuilder clearRescorers();@return;;;this for chaining;false
org.elasticsearch.action.search.SearchRequestBuilder;SearchRequestBuilder addRescorer(RescorerBuilder rescorer, int window);SearchRequestBuilder clearRescorers();@return;;;this for chaining;false
org.elasticsearch.action.search.SearchRequest;String[] types();SearchRequest types(String types);Whole;;;The document types to execute the search against. Defaults to be executed against all types.    ;false
org.elasticsearch.action.search.SearchRequest;String routing();SearchRequest routing(String routing);Whole;;;A comma separated list of routing values to control the shards the search will be executed on.    ;false
org.elasticsearch.action.search.SearchRequest;Scroll scroll();SearchRequest scroll(Scroll scroll);Whole;;;If set, will enable scrolling of the search request.    ;false
org.elasticsearch.action.search.SearchRequest;SearchRequest scroll(TimeValue keepAlive);SearchRequest scroll(String keepAlive);Whole;;;If set, will enable scrolling of the search request for the specified timeout.    ;false
org.elasticsearch.action.ActionFuture;T actionGet(String timeout);T actionGet(long timeoutMillis);Free text;;;Similar to {@link #get(long, java.util.concurrent.TimeUnit)}, just catching the {@link InterruptedException} and throwing an {@link IllegalStateException} instead. Also catches {@link java.util.concurrent.ExecutionException} and throws the actual cause instead. ;true
org.elasticsearch.action.ActionFuture;T actionGet(String timeout);T actionGet(long timeout, TimeUnit unit);Whole;;;Similar to {@link #get(long, java.util.concurrent.TimeUnit)}, just catching the {@link InterruptedException} and throwing an {@link IllegalStateException} instead. Also catches {@link java.util.concurrent.ExecutionException} and throws the actual cause instead.    ;false
org.elasticsearch.action.ActionFuture;T actionGet(String timeout);T actionGet(TimeValue timeout);Whole;;;Similar to {@link #get(long, java.util.concurrent.TimeUnit)}, just catching the {@link InterruptedException} and throwing an {@link IllegalStateException} instead. Also catches {@link java.util.concurrent.ExecutionException} and throws the actual cause instead.    ;false
org.elasticsearch.action.ActionFuture;T actionGet(long timeoutMillis);T actionGet(long timeout, TimeUnit unit);Free text;;;Similar to {@link #get(long, java.util.concurrent.TimeUnit)}, just catching the {@link InterruptedException} and throwing an {@link IllegalStateException} instead. Also catches {@link java.util.concurrent.ExecutionException} and throws the actual cause instead. ;true
org.elasticsearch.action.ActionFuture;T actionGet(long timeoutMillis);T actionGet(TimeValue timeout);Free text;;;Similar to {@link #get(long, java.util.concurrent.TimeUnit)}, just catching the {@link InterruptedException} and throwing an {@link IllegalStateException} instead. Also catches {@link java.util.concurrent.ExecutionException} and throws the actual cause instead. ;true
org.elasticsearch.action.ActionFuture;T actionGet(long timeout, TimeUnit unit);T actionGet(TimeValue timeout);Whole;;;Similar to {@link #get(long, java.util.concurrent.TimeUnit)}, just catching the {@link InterruptedException} and throwing an {@link IllegalStateException} instead. Also catches {@link java.util.concurrent.ExecutionException} and throws the actual cause instead.    ;false
org.elasticsearch.action.support.nodes.TransportNodesAction;NodesResponse newResponse(NodesRequest request, AtomicReferenceArray nodesResponses);NodesResponse newResponse(NodesRequest request, List responses, List failures);@return;;;Never null.;true
org.elasticsearch.action.support.nodes.TransportNodesAction;NodesResponse newResponse(NodesRequest request, AtomicReferenceArray nodesResponses);NodesResponse newResponse(NodesRequest request, List responses, List failures);@param;NodesRequest request;NodesRequest request;The associated request.;true
org.elasticsearch.action.support.nodes.BaseNodesResponse;ClusterName getClusterName();List readNodesFrom(StreamInput in);@return;;;Never null.;false
org.elasticsearch.action.support.nodes.BaseNodesResponse;List failures();List getNodes();@return;;;Never null. Can be empty.;false
org.elasticsearch.action.support.nodes.BaseNodesResponse;List failures();Map getNodesMap();@return;;;Never null. Can be empty.;false
org.elasticsearch.action.support.nodes.BaseNodesResponse;List getNodes();Map getNodesMap();@return;;;Never null. Can be empty.;false
org.elasticsearch.action.support.WriteRequest;R setRefreshPolicy(RefreshPolicy refreshPolicy);RefreshPolicy getRefreshPolicy();Whole;;;Should this request trigger a refresh ({@linkplain RefreshPolicy#IMMEDIATE}), wait for a refresh ( {@linkplain RefreshPolicy#WAIT_UNTIL}), or proceed ignore refreshes entirely ({@linkplain RefreshPolicy#NONE}, the default).    ;false
org.elasticsearch.action.support.PlainListenableActionFuture;PlainListenableActionFuture newListenableFuture();PlainListenableActionFuture newDispatchingListenableFuture(ThreadPool threadPool);@return;;;a listenable future;false
org.elasticsearch.action.support.single.instance.InstanceShardOperationRequestBuilder;RequestBuilder setTimeout(TimeValue timeout);RequestBuilder setTimeout(String timeout);Whole;;;A timeout to wait if the index operation can't be performed immediately. Defaults to <tt>1m</tt>.    ;false
org.elasticsearch.action.support.single.instance.InstanceShardOperationRequest;Request timeout(TimeValue timeout);Request timeout(String timeout);Whole;;;A timeout to wait if the index operation can't be performed immediately. Defaults to <tt>1m</tt>.    ;false
org.elasticsearch.action.support.single.shard.SingleShardRequest;boolean operationThreaded();Request operationThreaded(boolean threadedOperation);Whole;;;Controls if the operation will be executed on a separate thread when executed locally.    ;false
org.elasticsearch.action.support.master.MasterNodeOperationRequestBuilder;RequestBuilder setMasterNodeTimeout(TimeValue timeout);RequestBuilder setMasterNodeTimeout(String timeout);Whole;;;Sets the master node timeout in case the master has not yet been discovered.    ;false
org.elasticsearch.action.support.master.AcknowledgedRequest;Request timeout(String timeout);Request timeout(TimeValue timeout);Free text;;;Allows to set the timeout ;true
org.elasticsearch.action.support.master.AcknowledgedRequest;Request timeout(String timeout);Request timeout(TimeValue timeout);@return;;;the request itself;true
org.elasticsearch.action.support.master.MasterNodeRequest;Request masterNodeTimeout(TimeValue timeout);Request masterNodeTimeout(String timeout);Whole;;;A timeout value in case the master has not been discovered yet or disconnected.    ;false
org.elasticsearch.action.support.replication.ReplicationRequestBuilder;RequestBuilder setTimeout(TimeValue timeout);RequestBuilder setTimeout(String timeout);Whole;;;A timeout to wait if the index operation can't be performed immediately. Defaults to <tt>1m</tt>.    ;false
org.elasticsearch.action.support.replication.ReplicationRequest;Request timeout(TimeValue timeout);Request timeout(String timeout);Whole;;;A timeout to wait if the index operation can't be performed immediately. Defaults to <tt>1m</tt>.    ;false
org.elasticsearch.action.support.broadcast.node.TransportBroadcastByNodeAction;ShardOperationResult readShardResult(StreamInput in);Request readRequestFrom(StreamInput in);@param;StreamInput in;StreamInput in;input stream;true
org.elasticsearch.action.support.broadcast.node.TransportBroadcastByNodeAction;Response newResponse(Request request, int totalShards, int successfulShards, int failedShards, List results, List shardFailures, ClusterState clusterState);ShardsIterator shards(ClusterState clusterState, Request request, String[] concreteIndices);@param;Request request;Request request;the underlying request;true
org.elasticsearch.action.support.broadcast.node.TransportBroadcastByNodeAction;Response newResponse(Request request, int totalShards, int successfulShards, int failedShards, List results, List shardFailures, ClusterState clusterState);ShardsIterator shards(ClusterState clusterState, Request request, String[] concreteIndices);@param;ClusterState clusterState;ClusterState clusterState;the cluster state;true
org.elasticsearch.action.support.broadcast.node.TransportBroadcastByNodeAction;Response newResponse(Request request, int totalShards, int successfulShards, int failedShards, List results, List shardFailures, ClusterState clusterState);ClusterBlockException checkGlobalBlock(ClusterState state, Request request);@param;Request request;Request request;the underlying request;true
org.elasticsearch.action.support.broadcast.node.TransportBroadcastByNodeAction;Response newResponse(Request request, int totalShards, int successfulShards, int failedShards, List results, List shardFailures, ClusterState clusterState);ClusterBlockException checkGlobalBlock(ClusterState state, Request request);@param;ClusterState clusterState;ClusterState state;the cluster state;false
org.elasticsearch.action.support.broadcast.node.TransportBroadcastByNodeAction;Response newResponse(Request request, int totalShards, int successfulShards, int failedShards, List results, List shardFailures, ClusterState clusterState);ClusterBlockException checkRequestBlock(ClusterState state, Request request, String[] concreteIndices);@param;Request request;Request request;the underlying request;true
org.elasticsearch.action.support.broadcast.node.TransportBroadcastByNodeAction;Response newResponse(Request request, int totalShards, int successfulShards, int failedShards, List results, List shardFailures, ClusterState clusterState);ClusterBlockException checkRequestBlock(ClusterState state, Request request, String[] concreteIndices);@param;ClusterState clusterState;ClusterState state;the cluster state;false
org.elasticsearch.action.support.broadcast.node.TransportBroadcastByNodeAction;ShardsIterator shards(ClusterState clusterState, Request request, String[] concreteIndices);ClusterBlockException checkGlobalBlock(ClusterState state, Request request);@param;ClusterState clusterState;ClusterState state;the cluster state;false
org.elasticsearch.action.support.broadcast.node.TransportBroadcastByNodeAction;ShardsIterator shards(ClusterState clusterState, Request request, String[] concreteIndices);ClusterBlockException checkGlobalBlock(ClusterState state, Request request);@param;Request request;Request request;the underlying request;true
org.elasticsearch.action.support.broadcast.node.TransportBroadcastByNodeAction;ShardsIterator shards(ClusterState clusterState, Request request, String[] concreteIndices);ClusterBlockException checkRequestBlock(ClusterState state, Request request, String[] concreteIndices);@param;ClusterState clusterState;ClusterState state;the cluster state;false
org.elasticsearch.action.support.broadcast.node.TransportBroadcastByNodeAction;ShardsIterator shards(ClusterState clusterState, Request request, String[] concreteIndices);ClusterBlockException checkRequestBlock(ClusterState state, Request request, String[] concreteIndices);@param;Request request;Request request;the underlying request;true
org.elasticsearch.action.support.broadcast.node.TransportBroadcastByNodeAction;ShardsIterator shards(ClusterState clusterState, Request request, String[] concreteIndices);ClusterBlockException checkRequestBlock(ClusterState state, Request request, String[] concreteIndices);@param;String[] concreteIndices;String[] concreteIndices;the concrete indices on which to execute the operation;true
org.elasticsearch.action.support.broadcast.node.TransportBroadcastByNodeAction;ClusterBlockException checkGlobalBlock(ClusterState state, Request request);ClusterBlockException checkRequestBlock(ClusterState state, Request request, String[] concreteIndices);@param;ClusterState state;ClusterState state;the cluster state;true
org.elasticsearch.action.support.broadcast.node.TransportBroadcastByNodeAction;ClusterBlockException checkGlobalBlock(ClusterState state, Request request);ClusterBlockException checkRequestBlock(ClusterState state, Request request, String[] concreteIndices);@param;Request request;Request request;the underlying request;true
org.elasticsearch.action.index.IndexRequestBuilder;IndexRequestBuilder setSource(Map source);IndexRequestBuilder setSource(Map source, XContentType contentType);@param;Map<String,?> source;Map<String,?> source;The map to index;true
org.elasticsearch.action.index.IndexRequest;IndexRequest routing(String routing);String routing();Whole;;;Controls the shard routing of the request. Using this value to hash the shard and not the id.    ;false
org.elasticsearch.action.index.IndexRequest;IndexRequest source(Map source);IndexRequest source(Map source, XContentType contentType);@param;Map source;Map source;The map to index;true
org.elasticsearch.action.index.IndexRequest;IndexRequest source(BytesReference source, XContentType xContentType);IndexRequest source(byte[] source, XContentType xContentType);Whole;;;Sets the document to index in bytes form.    ;false
org.elasticsearch.action.ActionRequestBuilder;Response get();Response get(TimeValue timeout);Whole;;;Short version of execute().actionGet().    ;false
org.elasticsearch.action.ActionRequestBuilder;Response get();Response get(String timeout);Whole;;;Short version of execute().actionGet().    ;false
org.elasticsearch.action.ActionRequestBuilder;Response get(TimeValue timeout);Response get(String timeout);Whole;;;Short version of execute().actionGet().    ;false
org.elasticsearch.index.IndexSettings; IndexSettings(IndexMetaData indexMetaData, Settings nodeSettings); IndexSettings(IndexMetaData indexMetaData, Settings nodeSettings, IndexScopedSettings indexScopedSettings);Whole;;;Creates a new {@link IndexSettings} instance. The given node settings will be merged with the settings in the metadata while index level settings will overwrite node settings.  @param the index metadata this settings object is associated with@param the nodes settings this index is allocated on.  ;false
org.elasticsearch.index.seqno.GlobalCheckpointTracker;void updateGlobalCheckpointOnReplica(long globalCheckpoint, String reason);void updateGlobalCheckpointForShard(String allocationId, long globalCheckpoint);@param;long globalCheckpoint;long globalCheckpoint;the global checkpoint;true
org.elasticsearch.index.seqno.SequenceNumbers;long min(long minSeqNo, long seqNo);long max(long maxSeqNo, long seqNo);@param;long seqNo;long seqNo;the specified sequence number;true
org.elasticsearch.index.seqno.SequenceNumbersService;void updateGlobalCheckpointForShard(String allocationId, long globalCheckpoint);void updateGlobalCheckpointOnReplica(long globalCheckpoint, String reason);@param;long globalCheckpoint;long globalCheckpoint;the global checkpoint;true
org.elasticsearch.index.analysis.AnalysisRegistry;Settings getSettingsFromIndexSettings(IndexSettings indexSettings, String groupName);AnalysisProvider getTokenizerProvider(String tokenizer, IndexSettings indexSettings);@param;IndexSettings indexSettings;IndexSettings indexSettings;an index settings;true
org.elasticsearch.index.analysis.AnalysisRegistry;Settings getSettingsFromIndexSettings(IndexSettings indexSettings, String groupName);AnalysisProvider getTokenFilterProvider(String tokenFilter, IndexSettings indexSettings);@param;IndexSettings indexSettings;IndexSettings indexSettings;an index settings;true
org.elasticsearch.index.analysis.AnalysisRegistry;Settings getSettingsFromIndexSettings(IndexSettings indexSettings, String groupName);AnalysisProvider getCharFilterProvider(String charFilter, IndexSettings indexSettings);@param;IndexSettings indexSettings;IndexSettings indexSettings;an index settings;true
org.elasticsearch.index.analysis.AnalysisRegistry;AnalysisProvider getTokenizerProvider(String tokenizer, IndexSettings indexSettings);AnalysisProvider getTokenFilterProvider(String tokenFilter, IndexSettings indexSettings);@param;IndexSettings indexSettings;IndexSettings indexSettings;an index settings;true
org.elasticsearch.index.analysis.AnalysisRegistry;AnalysisProvider getTokenizerProvider(String tokenizer, IndexSettings indexSettings);AnalysisProvider getCharFilterProvider(String charFilter, IndexSettings indexSettings);@param;IndexSettings indexSettings;IndexSettings indexSettings;an index settings;true
org.elasticsearch.index.analysis.AnalysisRegistry;AnalysisProvider getTokenFilterProvider(String tokenFilter, IndexSettings indexSettings);AnalysisProvider getCharFilterProvider(String charFilter, IndexSettings indexSettings);@param;IndexSettings indexSettings;IndexSettings indexSettings;an index settings;true
org.elasticsearch.index.analysis.PreConfiguredTokenizer;PreConfiguredTokenizer singleton(String name, Supplier create, Supplier multiTermComponent);PreConfiguredTokenizer luceneVersion(String name, Function create, Function multiTermComponent);@param;String name;String name;the name of the tokenizer in the api;true
org.elasticsearch.index.analysis.PreConfiguredTokenizer;PreConfiguredTokenizer singleton(String name, Supplier create, Supplier multiTermComponent);PreConfiguredTokenizer luceneVersion(String name, Function create, Function multiTermComponent);@param;Supplier<Tokenizer> create;Function<org.apache.lucene.util.Version,Tokenizer> create;builds the tokenizer;true
org.elasticsearch.index.analysis.PreConfiguredTokenizer;PreConfiguredTokenizer singleton(String name, Supplier create, Supplier multiTermComponent);PreConfiguredTokenizer luceneVersion(String name, Function create, Function multiTermComponent);@param;Supplier<TokenFilterFactory> multiTermComponent;Function<org.apache.lucene.util.Version,TokenFilterFactory> multiTermComponent;null if this tokenizer shouldn't be used for multi-term queries, otherwise a supplier for the TokenFilterFactory that stands in for this tokenizer in multi-term queries.;true
org.elasticsearch.index.analysis.PreConfiguredTokenizer;PreConfiguredTokenizer singleton(String name, Supplier create, Supplier multiTermComponent);PreConfiguredTokenizer elasticsearchVersion(String name, Function create, Function multiTermComponent);@param;String name;String name;the name of the tokenizer in the api;true
org.elasticsearch.index.analysis.PreConfiguredTokenizer;PreConfiguredTokenizer singleton(String name, Supplier create, Supplier multiTermComponent);PreConfiguredTokenizer elasticsearchVersion(String name, Function create, Function multiTermComponent);@param;Supplier<Tokenizer> create;Function<org.elasticsearch.Version,Tokenizer> create;builds the tokenizer;true
org.elasticsearch.index.analysis.PreConfiguredTokenizer;PreConfiguredTokenizer singleton(String name, Supplier create, Supplier multiTermComponent);PreConfiguredTokenizer elasticsearchVersion(String name, Function create, Function multiTermComponent);@param;Supplier<TokenFilterFactory> multiTermComponent;Function<Version,TokenFilterFactory> multiTermComponent;null if this tokenizer shouldn't be used for multi-term queries, otherwise a supplier for the TokenFilterFactory that stands in for this tokenizer in multi-term queries.;true
org.elasticsearch.index.analysis.PreConfiguredTokenizer;PreConfiguredTokenizer luceneVersion(String name, Function create, Function multiTermComponent);PreConfiguredTokenizer elasticsearchVersion(String name, Function create, Function multiTermComponent);@param;String name;String name;the name of the tokenizer in the api;true
org.elasticsearch.index.analysis.PreConfiguredTokenizer;PreConfiguredTokenizer luceneVersion(String name, Function create, Function multiTermComponent);PreConfiguredTokenizer elasticsearchVersion(String name, Function create, Function multiTermComponent);@param;Function<org.apache.lucene.util.Version,Tokenizer> create;Function<org.elasticsearch.Version,Tokenizer> create;builds the tokenizer;true
org.elasticsearch.index.analysis.PreConfiguredTokenizer;PreConfiguredTokenizer luceneVersion(String name, Function create, Function multiTermComponent);PreConfiguredTokenizer elasticsearchVersion(String name, Function create, Function multiTermComponent);@param;Function<org.apache.lucene.util.Version,TokenFilterFactory> multiTermComponent;Function<Version,TokenFilterFactory> multiTermComponent;null if this tokenizer shouldn't be used for multi-term queries, otherwise a supplier for the TokenFilterFactory that stands in for this tokenizer in multi-term queries.;true
org.elasticsearch.index.merge.MergeStats;long getTotalStoppedTimeInMillis();TimeValue getTotalStoppedTime();Whole;;;The total time large merges were stopped so smaller merges could finish.    ;false
org.elasticsearch.index.merge.MergeStats;long getTotalThrottledTimeInMillis();TimeValue getTotalThrottledTime();Whole;;;The total time merge IO writes were throttled.    ;false
org.elasticsearch.index.snapshots.IndexShardSnapshotStatus;void files(int numberOfFiles, long totalSize);void processedFiles(int numberOfFiles, long totalSize);@param;int numberOfFiles;int numberOfFiles;number of files in this snapshot;true
org.elasticsearch.index.snapshots.IndexShardSnapshotStatus;void files(int numberOfFiles, long totalSize);void processedFiles(int numberOfFiles, long totalSize);@param;long totalSize;long totalSize;total size of files in this snapshot;true
org.elasticsearch.index.similarity.IBSimilarityProvider;Distribution parseDistribution(Settings settings);Lambda parseLambda(Settings settings);@return;;;Normalization referred to in the Settings;false
org.elasticsearch.index.similarity.IBSimilarityProvider;Distribution parseDistribution(Settings settings);Lambda parseLambda(Settings settings);@param;Settings settings;Settings settings;Settings to parse;true
org.elasticsearch.index.similarity.DFRSimilarityProvider;BasicModel parseBasicModel(Settings settings);AfterEffect parseAfterEffect(Settings settings);@param;Settings settings;Settings settings;Settings to parse;true
org.elasticsearch.index.mapper.MappedFieldType;IndexFieldData.Builder fielddataBuilder(String fullyQualifiedIndexName);void failIfNoDocValues();@throws;;;if the fielddata is not supported on this type. An IllegalArgumentException is needed in order to return an http error 400 when this error occurs in a request. see: org.elasticsearch.ExceptionsHelper#status;true
org.elasticsearch.index.mapper.Uid;String decodeId(byte[] idBytes);String decodeId(byte[] idBytes, int offset, int length);Whole;;; @see #encodeId    ;false
org.elasticsearch.index.translog.Translog;boolean ensureSynced(Location location);boolean ensureSynced(Stream locations);@return;;;Returns true iff this call caused an actual sync operation otherwise false;true
org.elasticsearch.index.translog.TranslogReader; TranslogReader(Checkpoint checkpoint, FileChannel channel, Path path, long firstOperationOffset);TranslogReader open(FileChannel channel, Path path, Checkpoint checkpoint, String translogUUID);@param;Checkpoint checkpoint;Checkpoint checkpoint;the translog checkpoint;true
org.elasticsearch.index.translog.TranslogReader; TranslogReader(Checkpoint checkpoint, FileChannel channel, Path path, long firstOperationOffset);TranslogReader open(FileChannel channel, Path path, Checkpoint checkpoint, String translogUUID);@param;Path path;Path path;the path to the translog;true
org.elasticsearch.index.search.QueryParserHelper;Map resolveMappingFields(QueryShardContext context, Map fieldsAndWeights, String fieldSuffix);Map resolveMappingField(QueryShardContext context, String fieldOrPattern, float weight, boolean acceptAllTypes, boolean acceptMetadataField, String fieldSuffix);@param;String fieldSuffix;String fieldSuffix;The suffix name to add to the expanded field names if a mapping exists for that name. The original name of the field is kept if adding the suffix to the field name does not point to a valid field in the mapping.;true
org.elasticsearch.index.search.QueryParserHelper;Map resolveMappingField(QueryShardContext context, String fieldOrPattern, float weight, boolean acceptAllTypes, boolean acceptMetadataField);Map resolveMappingField(QueryShardContext context, String fieldOrPattern, float weight, boolean acceptAllTypes, boolean acceptMetadataField, String fieldSuffix);Free text;;;Resolves the provided pattern or field name from the {@link QueryShardContext} and return a map of the expanded fields with their original boost. ;true
org.elasticsearch.index.search.QueryParserHelper;Map resolveMappingField(QueryShardContext context, String fieldOrPattern, float weight, boolean acceptAllTypes, boolean acceptMetadataField);Map resolveMappingField(QueryShardContext context, String fieldOrPattern, float weight, boolean acceptAllTypes, boolean acceptMetadataField, String fieldSuffix);@param;QueryShardContext context;QueryShardContext context;The context of the query;true
org.elasticsearch.index.search.QueryParserHelper;Map resolveMappingField(QueryShardContext context, String fieldOrPattern, float weight, boolean acceptAllTypes, boolean acceptMetadataField);Map resolveMappingField(QueryShardContext context, String fieldOrPattern, float weight, boolean acceptAllTypes, boolean acceptMetadataField, String fieldSuffix);@param;String fieldOrPattern;String fieldOrPattern;The field name or the pattern to resolve;true
org.elasticsearch.index.search.QueryParserHelper;Map resolveMappingField(QueryShardContext context, String fieldOrPattern, float weight, boolean acceptAllTypes, boolean acceptMetadataField);Map resolveMappingField(QueryShardContext context, String fieldOrPattern, float weight, boolean acceptAllTypes, boolean acceptMetadataField, String fieldSuffix);@param;float weight;float weight;The weight for the field;true
org.elasticsearch.index.search.QueryParserHelper;Map resolveMappingField(QueryShardContext context, String fieldOrPattern, float weight, boolean acceptAllTypes, boolean acceptMetadataField);Map resolveMappingField(QueryShardContext context, String fieldOrPattern, float weight, boolean acceptAllTypes, boolean acceptMetadataField, String fieldSuffix);@param;boolean acceptAllTypes;boolean acceptAllTypes;Whether all field type should be added when a pattern is expanded. If false, only ALLOWED_QUERY_MAPPER_TYPES are accepted and other field types are discarded from the query.;true
org.elasticsearch.index.search.QueryParserHelper;Map resolveMappingField(QueryShardContext context, String fieldOrPattern, float weight, boolean acceptAllTypes, boolean acceptMetadataField);Map resolveMappingField(QueryShardContext context, String fieldOrPattern, float weight, boolean acceptAllTypes, boolean acceptMetadataField, String fieldSuffix);@param;boolean acceptMetadataField;boolean acceptMetadataField;Whether metadata fields should be added when a pattern is expanded.;true
org.elasticsearch.index.reindex.AbstractBulkByScrollRequest;int getSize();Self setSize(int size);Whole;;;Maximum number of processed documents. Defaults to -1 meaning process all documents.    ;false
org.elasticsearch.index.reindex.AbstractBulkByScrollRequest;boolean isAbortOnVersionConflict();Self setAbortOnVersionConflict(boolean abortOnVersionConflict);Whole;;;Should version conflicts cause aborts? Defaults to false.    ;false
org.elasticsearch.index.reindex.AbstractBulkByScrollRequest;boolean isRefresh();Self setRefresh(boolean refresh);Whole;;;Call refresh on the indexes we've written to after the request ends?    ;false
org.elasticsearch.index.reindex.AbstractBulkByScrollRequest;TimeValue getTimeout();Self setTimeout(TimeValue timeout);Whole;;;Timeout to wait for the shards on to be available for each bulk request?    ;false
org.elasticsearch.index.reindex.AbstractBulkByScrollRequest;Self setSlices(int slices);int getSlices();Whole;;;The number of slices this task should be divided into. Defaults to 1 meaning the task isn't sliced into subtasks.    ;false
org.elasticsearch.index.reindex.AbstractBulkIndexByScrollRequest;Script getScript();Self setScript(Script script);Whole;;;Script to modify the documents before they are processed.    ;false
org.elasticsearch.index.query.GeoShapeQueryBuilder;GeoShapeQueryBuilder strategy(SpatialStrategy strategy);GeoShapeQueryBuilder indexedShapeIndex(String indexedShapeIndex);@return;;;this;false
org.elasticsearch.index.query.GeoShapeQueryBuilder;GeoShapeQueryBuilder strategy(SpatialStrategy strategy);GeoShapeQueryBuilder indexedShapePath(String indexedShapePath);@return;;;this;false
org.elasticsearch.index.query.GeoShapeQueryBuilder;GeoShapeQueryBuilder strategy(SpatialStrategy strategy);GeoShapeQueryBuilder relation(ShapeRelation relation);@return;;;this;false
org.elasticsearch.index.query.GeoShapeQueryBuilder;GeoShapeQueryBuilder indexedShapeIndex(String indexedShapeIndex);GeoShapeQueryBuilder indexedShapePath(String indexedShapePath);@return;;;this;false
org.elasticsearch.index.query.GeoShapeQueryBuilder;GeoShapeQueryBuilder indexedShapeIndex(String indexedShapeIndex);GeoShapeQueryBuilder relation(ShapeRelation relation);@return;;;this;false
org.elasticsearch.index.query.GeoShapeQueryBuilder;GeoShapeQueryBuilder indexedShapePath(String indexedShapePath);GeoShapeQueryBuilder relation(ShapeRelation relation);@return;;;this;false
org.elasticsearch.index.query.QueryStringQueryBuilder;QueryStringQueryBuilder useDisMax(boolean useDisMax);boolean useDisMax();Whole;;;Use {@link QueryStringQueryBuilder#tieBreaker} instead.    ;false
org.elasticsearch.index.query.QueryStringQueryBuilder;QueryStringQueryBuilder autoGeneratePhraseQueries(boolean autoGeneratePhraseQueries);boolean autoGeneratePhraseQueries();Whole;;;This setting is ignored    ;false
org.elasticsearch.index.query.QueryStringQueryBuilder;QueryStringQueryBuilder splitOnWhitespace(boolean value);boolean splitOnWhitespace();Whole;;;This setting is ignored, this query parser splits on operator only.    ;false
org.elasticsearch.index.query.QueryBuilders;MatchQueryBuilder matchQuery(String name, Object text);CommonTermsQueryBuilder commonTermsQuery(String fieldName, Object text);@param;String name;String fieldName;The field name.;false
org.elasticsearch.index.query.QueryBuilders;MatchQueryBuilder matchQuery(String name, Object text);CommonTermsQueryBuilder commonTermsQuery(String fieldName, Object text);@param;Object text;Object text;The query text (to be analyzed).;true
org.elasticsearch.index.query.QueryBuilders;MatchQueryBuilder matchQuery(String name, Object text);MultiMatchQueryBuilder multiMatchQuery(Object text, String fieldNames);Free text;;;Creates a match query with type "BOOLEAN" for the provided field name and text. ;false
org.elasticsearch.index.query.QueryBuilders;MatchQueryBuilder matchQuery(String name, Object text);MultiMatchQueryBuilder multiMatchQuery(Object text, String fieldNames);@param;Object text;Object text;The query text (to be analyzed).;true
org.elasticsearch.index.query.QueryBuilders;MatchQueryBuilder matchQuery(String name, Object text);MatchPhraseQueryBuilder matchPhraseQuery(String name, Object text);@param;String name;String name;The field name.;true
org.elasticsearch.index.query.QueryBuilders;MatchQueryBuilder matchQuery(String name, Object text);MatchPhraseQueryBuilder matchPhraseQuery(String name, Object text);@param;Object text;Object text;The query text (to be analyzed).;true
org.elasticsearch.index.query.QueryBuilders;MatchQueryBuilder matchQuery(String name, Object text);MatchPhrasePrefixQueryBuilder matchPhrasePrefixQuery(String name, Object text);@param;String name;String name;The field name.;true
org.elasticsearch.index.query.QueryBuilders;MatchQueryBuilder matchQuery(String name, Object text);MatchPhrasePrefixQueryBuilder matchPhrasePrefixQuery(String name, Object text);@param;Object text;Object text;The query text (to be analyzed).;true
org.elasticsearch.index.query.QueryBuilders;CommonTermsQueryBuilder commonTermsQuery(String fieldName, Object text);MultiMatchQueryBuilder multiMatchQuery(Object text, String fieldNames);@param;Object text;Object text;The query text (to be analyzed).;true
org.elasticsearch.index.query.QueryBuilders;CommonTermsQueryBuilder commonTermsQuery(String fieldName, Object text);MatchPhraseQueryBuilder matchPhraseQuery(String name, Object text);@param;String fieldName;String name;The field name.;false
org.elasticsearch.index.query.QueryBuilders;CommonTermsQueryBuilder commonTermsQuery(String fieldName, Object text);MatchPhraseQueryBuilder matchPhraseQuery(String name, Object text);@param;Object text;Object text;The query text (to be analyzed).;true
org.elasticsearch.index.query.QueryBuilders;CommonTermsQueryBuilder commonTermsQuery(String fieldName, Object text);MatchPhrasePrefixQueryBuilder matchPhrasePrefixQuery(String name, Object text);@param;String fieldName;String name;The field name.;false
org.elasticsearch.index.query.QueryBuilders;CommonTermsQueryBuilder commonTermsQuery(String fieldName, Object text);MatchPhrasePrefixQueryBuilder matchPhrasePrefixQuery(String name, Object text);@param;Object text;Object text;The query text (to be analyzed).;true
org.elasticsearch.index.query.QueryBuilders;MultiMatchQueryBuilder multiMatchQuery(Object text, String fieldNames);MatchPhraseQueryBuilder matchPhraseQuery(String name, Object text);@param;Object text;Object text;The query text (to be analyzed).;true
org.elasticsearch.index.query.QueryBuilders;MultiMatchQueryBuilder multiMatchQuery(Object text, String fieldNames);MatchPhrasePrefixQueryBuilder matchPhrasePrefixQuery(String name, Object text);@param;Object text;Object text;The query text (to be analyzed).;true
org.elasticsearch.index.query.QueryBuilders;MatchPhraseQueryBuilder matchPhraseQuery(String name, Object text);MatchPhrasePrefixQueryBuilder matchPhrasePrefixQuery(String name, Object text);@param;String name;String name;The field name.;true
org.elasticsearch.index.query.QueryBuilders;MatchPhraseQueryBuilder matchPhraseQuery(String name, Object text);MatchPhrasePrefixQueryBuilder matchPhrasePrefixQuery(String name, Object text);@param;Object text;Object text;The query text (to be analyzed).;true
org.elasticsearch.index.query.QueryBuilders;TermQueryBuilder termQuery(String name, String value);TermQueryBuilder termQuery(String name, int value);Whole;;;A Query that matches documents containing a term.  @param The name of the field@param The value of the term  ;false
org.elasticsearch.index.query.QueryBuilders;TermQueryBuilder termQuery(String name, String value);TermQueryBuilder termQuery(String name, long value);Whole;;;A Query that matches documents containing a term.  @param The name of the field@param The value of the term  ;false
org.elasticsearch.index.query.QueryBuilders;TermQueryBuilder termQuery(String name, String value);TermQueryBuilder termQuery(String name, float value);Whole;;;A Query that matches documents containing a term.  @param The name of the field@param The value of the term  ;false
org.elasticsearch.index.query.QueryBuilders;TermQueryBuilder termQuery(String name, String value);TermQueryBuilder termQuery(String name, double value);Whole;;;A Query that matches documents containing a term.  @param The name of the field@param The value of the term  ;false
org.elasticsearch.index.query.QueryBuilders;TermQueryBuilder termQuery(String name, String value);TermQueryBuilder termQuery(String name, boolean value);Whole;;;A Query that matches documents containing a term.  @param The name of the field@param The value of the term  ;false
org.elasticsearch.index.query.QueryBuilders;TermQueryBuilder termQuery(String name, String value);TermQueryBuilder termQuery(String name, Object value);Whole;;;A Query that matches documents containing a term.  @param The name of the field@param The value of the term  ;false
org.elasticsearch.index.query.QueryBuilders;TermQueryBuilder termQuery(String name, String value);FuzzyQueryBuilder fuzzyQuery(String name, String value);@param;String name;String name;The name of the field;true
org.elasticsearch.index.query.QueryBuilders;TermQueryBuilder termQuery(String name, String value);FuzzyQueryBuilder fuzzyQuery(String name, String value);@param;String value;String value;The value of the term;true
org.elasticsearch.index.query.QueryBuilders;TermQueryBuilder termQuery(String name, String value);FuzzyQueryBuilder fuzzyQuery(String name, Object value);@param;String name;String name;The name of the field;true
org.elasticsearch.index.query.QueryBuilders;TermQueryBuilder termQuery(String name, String value);FuzzyQueryBuilder fuzzyQuery(String name, Object value);@param;String value;Object value;The value of the term;true
org.elasticsearch.index.query.QueryBuilders;TermQueryBuilder termQuery(String name, String value);PrefixQueryBuilder prefixQuery(String name, String prefix);@param;String name;String name;The name of the field;true
org.elasticsearch.index.query.QueryBuilders;TermQueryBuilder termQuery(String name, String value);RegexpQueryBuilder regexpQuery(String name, String regexp);@param;String name;String name;The name of the field;true
org.elasticsearch.index.query.QueryBuilders;TermQueryBuilder termQuery(String name, String value);ExistsQueryBuilder existsQuery(String name);@param;String name;String name;The name of the field;true
org.elasticsearch.index.query.QueryBuilders;TermQueryBuilder termQuery(String name, int value);TermQueryBuilder termQuery(String name, long value);Whole;;;A Query that matches documents containing a term.  @param The name of the field@param The value of the term  ;false
org.elasticsearch.index.query.QueryBuilders;TermQueryBuilder termQuery(String name, int value);TermQueryBuilder termQuery(String name, float value);Whole;;;A Query that matches documents containing a term.  @param The name of the field@param The value of the term  ;false
org.elasticsearch.index.query.QueryBuilders;TermQueryBuilder termQuery(String name, int value);TermQueryBuilder termQuery(String name, double value);Whole;;;A Query that matches documents containing a term.  @param The name of the field@param The value of the term  ;false
org.elasticsearch.index.query.QueryBuilders;TermQueryBuilder termQuery(String name, int value);TermQueryBuilder termQuery(String name, boolean value);Whole;;;A Query that matches documents containing a term.  @param The name of the field@param The value of the term  ;false
org.elasticsearch.index.query.QueryBuilders;TermQueryBuilder termQuery(String name, int value);TermQueryBuilder termQuery(String name, Object value);Whole;;;A Query that matches documents containing a term.  @param The name of the field@param The value of the term  ;false
org.elasticsearch.index.query.QueryBuilders;TermQueryBuilder termQuery(String name, int value);FuzzyQueryBuilder fuzzyQuery(String name, String value);@param;String name;String name;The name of the field;true
org.elasticsearch.index.query.QueryBuilders;TermQueryBuilder termQuery(String name, int value);FuzzyQueryBuilder fuzzyQuery(String name, String value);@param;int value;String value;The value of the term;true
org.elasticsearch.index.query.QueryBuilders;TermQueryBuilder termQuery(String name, int value);FuzzyQueryBuilder fuzzyQuery(String name, Object value);@param;String name;String name;The name of the field;true
org.elasticsearch.index.query.QueryBuilders;TermQueryBuilder termQuery(String name, int value);FuzzyQueryBuilder fuzzyQuery(String name, Object value);@param;int value;Object value;The value of the term;true
org.elasticsearch.index.query.QueryBuilders;TermQueryBuilder termQuery(String name, int value);PrefixQueryBuilder prefixQuery(String name, String prefix);@param;String name;String name;The name of the field;true
org.elasticsearch.index.query.QueryBuilders;TermQueryBuilder termQuery(String name, int value);RegexpQueryBuilder regexpQuery(String name, String regexp);@param;String name;String name;The name of the field;true
org.elasticsearch.index.query.QueryBuilders;TermQueryBuilder termQuery(String name, int value);ExistsQueryBuilder existsQuery(String name);@param;String name;String name;The name of the field;true
org.elasticsearch.index.query.QueryBuilders;TermQueryBuilder termQuery(String name, long value);TermQueryBuilder termQuery(String name, float value);Whole;;;A Query that matches documents containing a term.  @param The name of the field@param The value of the term  ;false
org.elasticsearch.index.query.QueryBuilders;TermQueryBuilder termQuery(String name, long value);TermQueryBuilder termQuery(String name, double value);Whole;;;A Query that matches documents containing a term.  @param The name of the field@param The value of the term  ;false
org.elasticsearch.index.query.QueryBuilders;TermQueryBuilder termQuery(String name, long value);TermQueryBuilder termQuery(String name, boolean value);Whole;;;A Query that matches documents containing a term.  @param The name of the field@param The value of the term  ;false
org.elasticsearch.index.query.QueryBuilders;TermQueryBuilder termQuery(String name, long value);TermQueryBuilder termQuery(String name, Object value);Whole;;;A Query that matches documents containing a term.  @param The name of the field@param The value of the term  ;false
org.elasticsearch.index.query.QueryBuilders;TermQueryBuilder termQuery(String name, long value);FuzzyQueryBuilder fuzzyQuery(String name, String value);@param;String name;String name;The name of the field;true
org.elasticsearch.index.query.QueryBuilders;TermQueryBuilder termQuery(String name, long value);FuzzyQueryBuilder fuzzyQuery(String name, String value);@param;long value;String value;The value of the term;true
org.elasticsearch.index.query.QueryBuilders;TermQueryBuilder termQuery(String name, long value);FuzzyQueryBuilder fuzzyQuery(String name, Object value);@param;String name;String name;The name of the field;true
org.elasticsearch.index.query.QueryBuilders;TermQueryBuilder termQuery(String name, long value);FuzzyQueryBuilder fuzzyQuery(String name, Object value);@param;long value;Object value;The value of the term;true
org.elasticsearch.index.query.QueryBuilders;TermQueryBuilder termQuery(String name, long value);PrefixQueryBuilder prefixQuery(String name, String prefix);@param;String name;String name;The name of the field;true
org.elasticsearch.index.query.QueryBuilders;TermQueryBuilder termQuery(String name, long value);RegexpQueryBuilder regexpQuery(String name, String regexp);@param;String name;String name;The name of the field;true
org.elasticsearch.index.query.QueryBuilders;TermQueryBuilder termQuery(String name, long value);ExistsQueryBuilder existsQuery(String name);@param;String name;String name;The name of the field;true
org.elasticsearch.index.query.QueryBuilders;TermQueryBuilder termQuery(String name, float value);TermQueryBuilder termQuery(String name, double value);Whole;;;A Query that matches documents containing a term.  @param The name of the field@param The value of the term  ;false
org.elasticsearch.index.query.QueryBuilders;TermQueryBuilder termQuery(String name, float value);TermQueryBuilder termQuery(String name, boolean value);Whole;;;A Query that matches documents containing a term.  @param The name of the field@param The value of the term  ;false
org.elasticsearch.index.query.QueryBuilders;TermQueryBuilder termQuery(String name, float value);TermQueryBuilder termQuery(String name, Object value);Whole;;;A Query that matches documents containing a term.  @param The name of the field@param The value of the term  ;false
org.elasticsearch.index.query.QueryBuilders;TermQueryBuilder termQuery(String name, float value);FuzzyQueryBuilder fuzzyQuery(String name, String value);@param;String name;String name;The name of the field;true
org.elasticsearch.index.query.QueryBuilders;TermQueryBuilder termQuery(String name, float value);FuzzyQueryBuilder fuzzyQuery(String name, String value);@param;float value;String value;The value of the term;true
org.elasticsearch.index.query.QueryBuilders;TermQueryBuilder termQuery(String name, float value);FuzzyQueryBuilder fuzzyQuery(String name, Object value);@param;String name;String name;The name of the field;true
org.elasticsearch.index.query.QueryBuilders;TermQueryBuilder termQuery(String name, float value);FuzzyQueryBuilder fuzzyQuery(String name, Object value);@param;float value;Object value;The value of the term;true
org.elasticsearch.index.query.QueryBuilders;TermQueryBuilder termQuery(String name, float value);PrefixQueryBuilder prefixQuery(String name, String prefix);@param;String name;String name;The name of the field;true
org.elasticsearch.index.query.QueryBuilders;TermQueryBuilder termQuery(String name, float value);RegexpQueryBuilder regexpQuery(String name, String regexp);@param;String name;String name;The name of the field;true
org.elasticsearch.index.query.QueryBuilders;TermQueryBuilder termQuery(String name, float value);ExistsQueryBuilder existsQuery(String name);@param;String name;String name;The name of the field;true
org.elasticsearch.index.query.QueryBuilders;TermQueryBuilder termQuery(String name, double value);TermQueryBuilder termQuery(String name, boolean value);Whole;;;A Query that matches documents containing a term.  @param The name of the field@param The value of the term  ;false
org.elasticsearch.index.query.QueryBuilders;TermQueryBuilder termQuery(String name, double value);TermQueryBuilder termQuery(String name, Object value);Whole;;;A Query that matches documents containing a term.  @param The name of the field@param The value of the term  ;false
org.elasticsearch.index.query.QueryBuilders;TermQueryBuilder termQuery(String name, double value);FuzzyQueryBuilder fuzzyQuery(String name, String value);@param;String name;String name;The name of the field;true
org.elasticsearch.index.query.QueryBuilders;TermQueryBuilder termQuery(String name, double value);FuzzyQueryBuilder fuzzyQuery(String name, String value);@param;double value;String value;The value of the term;true
org.elasticsearch.index.query.QueryBuilders;TermQueryBuilder termQuery(String name, double value);FuzzyQueryBuilder fuzzyQuery(String name, Object value);@param;String name;String name;The name of the field;true
org.elasticsearch.index.query.QueryBuilders;TermQueryBuilder termQuery(String name, double value);FuzzyQueryBuilder fuzzyQuery(String name, Object value);@param;double value;Object value;The value of the term;true
org.elasticsearch.index.query.QueryBuilders;TermQueryBuilder termQuery(String name, double value);PrefixQueryBuilder prefixQuery(String name, String prefix);@param;String name;String name;The name of the field;true
org.elasticsearch.index.query.QueryBuilders;TermQueryBuilder termQuery(String name, double value);RegexpQueryBuilder regexpQuery(String name, String regexp);@param;String name;String name;The name of the field;true
org.elasticsearch.index.query.QueryBuilders;TermQueryBuilder termQuery(String name, double value);ExistsQueryBuilder existsQuery(String name);@param;String name;String name;The name of the field;true
org.elasticsearch.index.query.QueryBuilders;TermQueryBuilder termQuery(String name, boolean value);TermQueryBuilder termQuery(String name, Object value);Whole;;;A Query that matches documents containing a term.  @param The name of the field@param The value of the term  ;false
org.elasticsearch.index.query.QueryBuilders;TermQueryBuilder termQuery(String name, boolean value);FuzzyQueryBuilder fuzzyQuery(String name, String value);@param;String name;String name;The name of the field;true
org.elasticsearch.index.query.QueryBuilders;TermQueryBuilder termQuery(String name, boolean value);FuzzyQueryBuilder fuzzyQuery(String name, String value);@param;boolean value;String value;The value of the term;true
org.elasticsearch.index.query.QueryBuilders;TermQueryBuilder termQuery(String name, boolean value);FuzzyQueryBuilder fuzzyQuery(String name, Object value);@param;String name;String name;The name of the field;true
org.elasticsearch.index.query.QueryBuilders;TermQueryBuilder termQuery(String name, boolean value);FuzzyQueryBuilder fuzzyQuery(String name, Object value);@param;boolean value;Object value;The value of the term;true
org.elasticsearch.index.query.QueryBuilders;TermQueryBuilder termQuery(String name, boolean value);PrefixQueryBuilder prefixQuery(String name, String prefix);@param;String name;String name;The name of the field;true
org.elasticsearch.index.query.QueryBuilders;TermQueryBuilder termQuery(String name, boolean value);RegexpQueryBuilder regexpQuery(String name, String regexp);@param;String name;String name;The name of the field;true
org.elasticsearch.index.query.QueryBuilders;TermQueryBuilder termQuery(String name, boolean value);ExistsQueryBuilder existsQuery(String name);@param;String name;String name;The name of the field;true
org.elasticsearch.index.query.QueryBuilders;TermQueryBuilder termQuery(String name, Object value);FuzzyQueryBuilder fuzzyQuery(String name, String value);@param;String name;String name;The name of the field;true
org.elasticsearch.index.query.QueryBuilders;TermQueryBuilder termQuery(String name, Object value);FuzzyQueryBuilder fuzzyQuery(String name, String value);@param;Object value;String value;The value of the term;true
org.elasticsearch.index.query.QueryBuilders;TermQueryBuilder termQuery(String name, Object value);FuzzyQueryBuilder fuzzyQuery(String name, Object value);@param;String name;String name;The name of the field;true
org.elasticsearch.index.query.QueryBuilders;TermQueryBuilder termQuery(String name, Object value);FuzzyQueryBuilder fuzzyQuery(String name, Object value);@param;Object value;Object value;The value of the term;true
org.elasticsearch.index.query.QueryBuilders;TermQueryBuilder termQuery(String name, Object value);PrefixQueryBuilder prefixQuery(String name, String prefix);@param;String name;String name;The name of the field;true
org.elasticsearch.index.query.QueryBuilders;TermQueryBuilder termQuery(String name, Object value);RegexpQueryBuilder regexpQuery(String name, String regexp);@param;String name;String name;The name of the field;true
org.elasticsearch.index.query.QueryBuilders;TermQueryBuilder termQuery(String name, Object value);ExistsQueryBuilder existsQuery(String name);@param;String name;String name;The name of the field;true
org.elasticsearch.index.query.QueryBuilders;FuzzyQueryBuilder fuzzyQuery(String name, String value);FuzzyQueryBuilder fuzzyQuery(String name, Object value);Whole;;;A Query that matches documents using fuzzy query.  @param The name of the field@param The value of the term  ;false
org.elasticsearch.index.query.QueryBuilders;FuzzyQueryBuilder fuzzyQuery(String name, String value);PrefixQueryBuilder prefixQuery(String name, String prefix);@param;String name;String name;The name of the field;true
org.elasticsearch.index.query.QueryBuilders;FuzzyQueryBuilder fuzzyQuery(String name, String value);RegexpQueryBuilder regexpQuery(String name, String regexp);@param;String name;String name;The name of the field;true
org.elasticsearch.index.query.QueryBuilders;FuzzyQueryBuilder fuzzyQuery(String name, String value);ExistsQueryBuilder existsQuery(String name);@param;String name;String name;The name of the field;true
org.elasticsearch.index.query.QueryBuilders;FuzzyQueryBuilder fuzzyQuery(String name, Object value);PrefixQueryBuilder prefixQuery(String name, String prefix);@param;String name;String name;The name of the field;true
org.elasticsearch.index.query.QueryBuilders;FuzzyQueryBuilder fuzzyQuery(String name, Object value);RegexpQueryBuilder regexpQuery(String name, String regexp);@param;String name;String name;The name of the field;true
org.elasticsearch.index.query.QueryBuilders;FuzzyQueryBuilder fuzzyQuery(String name, Object value);ExistsQueryBuilder existsQuery(String name);@param;String name;String name;The name of the field;true
org.elasticsearch.index.query.QueryBuilders;PrefixQueryBuilder prefixQuery(String name, String prefix);RegexpQueryBuilder regexpQuery(String name, String regexp);@param;String name;String name;The name of the field;true
org.elasticsearch.index.query.QueryBuilders;PrefixQueryBuilder prefixQuery(String name, String prefix);ExistsQueryBuilder existsQuery(String name);@param;String name;String name;The name of the field;true
org.elasticsearch.index.query.QueryBuilders;RangeQueryBuilder rangeQuery(String name);WildcardQueryBuilder wildcardQuery(String name, String query);@param;String name;String name;The field name;true
org.elasticsearch.index.query.QueryBuilders;RangeQueryBuilder rangeQuery(String name);TermsQueryBuilder termsQuery(String name, String values);@param;String name;String name;The field name;true
org.elasticsearch.index.query.QueryBuilders;RangeQueryBuilder rangeQuery(String name);TermsQueryBuilder termsQuery(String name, int values);@param;String name;String name;The field name;true
org.elasticsearch.index.query.QueryBuilders;RangeQueryBuilder rangeQuery(String name);TermsQueryBuilder termsQuery(String name, long values);@param;String name;String name;The field name;true
org.elasticsearch.index.query.QueryBuilders;RangeQueryBuilder rangeQuery(String name);TermsQueryBuilder termsQuery(String name, float values);@param;String name;String name;The field name;true
org.elasticsearch.index.query.QueryBuilders;RangeQueryBuilder rangeQuery(String name);TermsQueryBuilder termsQuery(String name, double values);@param;String name;String name;The field name;true
org.elasticsearch.index.query.QueryBuilders;RangeQueryBuilder rangeQuery(String name);TermsQueryBuilder termsQuery(String name, Object values);@param;String name;String name;The field name;true
org.elasticsearch.index.query.QueryBuilders;RangeQueryBuilder rangeQuery(String name);TermsQueryBuilder termsQuery(String name, Collection values);@param;String name;String name;The field name;true
org.elasticsearch.index.query.QueryBuilders;WildcardQueryBuilder wildcardQuery(String name, String query);TermsQueryBuilder termsQuery(String name, String values);@param;String name;String name;The field name;true
org.elasticsearch.index.query.QueryBuilders;WildcardQueryBuilder wildcardQuery(String name, String query);TermsQueryBuilder termsQuery(String name, int values);@param;String name;String name;The field name;true
org.elasticsearch.index.query.QueryBuilders;WildcardQueryBuilder wildcardQuery(String name, String query);TermsQueryBuilder termsQuery(String name, long values);@param;String name;String name;The field name;true
org.elasticsearch.index.query.QueryBuilders;WildcardQueryBuilder wildcardQuery(String name, String query);TermsQueryBuilder termsQuery(String name, float values);@param;String name;String name;The field name;true
org.elasticsearch.index.query.QueryBuilders;WildcardQueryBuilder wildcardQuery(String name, String query);TermsQueryBuilder termsQuery(String name, double values);@param;String name;String name;The field name;true
org.elasticsearch.index.query.QueryBuilders;WildcardQueryBuilder wildcardQuery(String name, String query);TermsQueryBuilder termsQuery(String name, Object values);@param;String name;String name;The field name;true
org.elasticsearch.index.query.QueryBuilders;WildcardQueryBuilder wildcardQuery(String name, String query);TermsQueryBuilder termsQuery(String name, Collection values);@param;String name;String name;The field name;true
org.elasticsearch.index.query.QueryBuilders;RegexpQueryBuilder regexpQuery(String name, String regexp);ExistsQueryBuilder existsQuery(String name);@param;String name;String name;The name of the field;true
org.elasticsearch.index.query.QueryBuilders;SpanWithinQueryBuilder spanWithinQuery(SpanQueryBuilder big, SpanQueryBuilder little);SpanContainingQueryBuilder spanContainingQuery(SpanQueryBuilder big, SpanQueryBuilder little);@param;SpanQueryBuilder big;SpanQueryBuilder big;the big clause, it must enclose little for a match.;true
org.elasticsearch.index.query.QueryBuilders;SpanWithinQueryBuilder spanWithinQuery(SpanQueryBuilder big, SpanQueryBuilder little);SpanContainingQueryBuilder spanContainingQuery(SpanQueryBuilder big, SpanQueryBuilder little);@param;SpanQueryBuilder little;SpanQueryBuilder little;the little clause, it must be contained within big for a match.;true
org.elasticsearch.index.query.QueryBuilders;FunctionScoreQueryBuilder functionScoreQuery(QueryBuilder queryBuilder);FunctionScoreQueryBuilder functionScoreQuery(QueryBuilder queryBuilder, FunctionScoreQueryBuilder.FilterFunctionBuilder[] filterFunctionBuilders);@return;;;the function score query;true
org.elasticsearch.index.query.QueryBuilders;FunctionScoreQueryBuilder functionScoreQuery(QueryBuilder queryBuilder);FunctionScoreQueryBuilder functionScoreQuery(QueryBuilder queryBuilder, FunctionScoreQueryBuilder.FilterFunctionBuilder[] filterFunctionBuilders);@param;QueryBuilder queryBuilder;QueryBuilder queryBuilder;The query to custom score;true
org.elasticsearch.index.query.QueryBuilders;FunctionScoreQueryBuilder functionScoreQuery(QueryBuilder queryBuilder);FunctionScoreQueryBuilder functionScoreQuery(FunctionScoreQueryBuilder.FilterFunctionBuilder[] filterFunctionBuilders);@return;;;the function score query;true
org.elasticsearch.index.query.QueryBuilders;FunctionScoreQueryBuilder functionScoreQuery(QueryBuilder queryBuilder);FunctionScoreQueryBuilder functionScoreQuery(QueryBuilder queryBuilder, ScoreFunctionBuilder function);@param;QueryBuilder queryBuilder;QueryBuilder queryBuilder;The query to custom score;true
org.elasticsearch.index.query.QueryBuilders;FunctionScoreQueryBuilder functionScoreQuery(QueryBuilder queryBuilder, FunctionScoreQueryBuilder.FilterFunctionBuilder[] filterFunctionBuilders);FunctionScoreQueryBuilder functionScoreQuery(FunctionScoreQueryBuilder.FilterFunctionBuilder[] filterFunctionBuilders);Free text;;;A query that allows to define a custom scoring function ;true
org.elasticsearch.index.query.QueryBuilders;FunctionScoreQueryBuilder functionScoreQuery(QueryBuilder queryBuilder, FunctionScoreQueryBuilder.FilterFunctionBuilder[] filterFunctionBuilders);FunctionScoreQueryBuilder functionScoreQuery(FunctionScoreQueryBuilder.FilterFunctionBuilder[] filterFunctionBuilders);@return;;;the function score query;true
org.elasticsearch.index.query.QueryBuilders;FunctionScoreQueryBuilder functionScoreQuery(QueryBuilder queryBuilder, FunctionScoreQueryBuilder.FilterFunctionBuilder[] filterFunctionBuilders);FunctionScoreQueryBuilder functionScoreQuery(FunctionScoreQueryBuilder.FilterFunctionBuilder[] filterFunctionBuilders);@param;FunctionScoreQueryBuilder.FilterFunctionBuilder[] filterFunctionBuilders;FunctionScoreQueryBuilder.FilterFunctionBuilder[] filterFunctionBuilders;the filters and functions to execute;true
org.elasticsearch.index.query.QueryBuilders;FunctionScoreQueryBuilder functionScoreQuery(QueryBuilder queryBuilder, FunctionScoreQueryBuilder.FilterFunctionBuilder[] filterFunctionBuilders);FunctionScoreQueryBuilder functionScoreQuery(QueryBuilder queryBuilder, ScoreFunctionBuilder function);@param;QueryBuilder queryBuilder;QueryBuilder queryBuilder;The query to custom score;true
org.elasticsearch.index.query.QueryBuilders;FunctionScoreQueryBuilder functionScoreQuery(ScoreFunctionBuilder function);FunctionScoreQueryBuilder functionScoreQuery(QueryBuilder queryBuilder, ScoreFunctionBuilder function);Free text;;;A query that allows to define a custom scoring function. ;true
org.elasticsearch.index.query.QueryBuilders;FunctionScoreQueryBuilder functionScoreQuery(ScoreFunctionBuilder function);FunctionScoreQueryBuilder functionScoreQuery(QueryBuilder queryBuilder, ScoreFunctionBuilder function);@param;ScoreFunctionBuilder function;ScoreFunctionBuilder function;The function builder used to custom score;true
org.elasticsearch.index.query.QueryBuilders;MoreLikeThisQueryBuilder moreLikeThisQuery(String[] fields, String[] likeTexts, Item[] likeItems);MoreLikeThisQueryBuilder moreLikeThisQuery(String[] likeTexts, Item[] likeItems);@param;String[] likeTexts;String[] likeTexts;the text to use when generating the 'More Like This' query.;true
org.elasticsearch.index.query.QueryBuilders;MoreLikeThisQueryBuilder moreLikeThisQuery(String[] fields, String[] likeTexts, Item[] likeItems);MoreLikeThisQueryBuilder moreLikeThisQuery(String[] likeTexts, Item[] likeItems);@param;Item[] likeItems;Item[] likeItems;the documents to use when generating the 'More Like This' query.;true
org.elasticsearch.index.query.QueryBuilders;MoreLikeThisQueryBuilder moreLikeThisQuery(String[] fields, String[] likeTexts, Item[] likeItems);MoreLikeThisQueryBuilder moreLikeThisQuery(String[] likeTexts);@param;String[] likeTexts;String[] likeTexts;the text to use when generating the 'More Like This' query.;true
org.elasticsearch.index.query.QueryBuilders;MoreLikeThisQueryBuilder moreLikeThisQuery(String[] fields, String[] likeTexts, Item[] likeItems);MoreLikeThisQueryBuilder moreLikeThisQuery(Item[] likeItems);@param;Item[] likeItems;Item[] likeItems;the documents to use when generating the 'More Like This' query.;true
org.elasticsearch.index.query.QueryBuilders;MoreLikeThisQueryBuilder moreLikeThisQuery(String[] likeTexts, Item[] likeItems);MoreLikeThisQueryBuilder moreLikeThisQuery(String[] likeTexts);@param;String[] likeTexts;String[] likeTexts;the text to use when generating the 'More Like This' query.;true
org.elasticsearch.index.query.QueryBuilders;MoreLikeThisQueryBuilder moreLikeThisQuery(String[] likeTexts, Item[] likeItems);MoreLikeThisQueryBuilder moreLikeThisQuery(Item[] likeItems);@param;Item[] likeItems;Item[] likeItems;the documents to use when generating the 'More Like This' query.;true
org.elasticsearch.index.query.QueryBuilders;TermsQueryBuilder termsQuery(String name, String values);TermsQueryBuilder termsQuery(String name, int values);Whole;;;A filer for a field based on several terms matching on any of them.  @param The field name@param The terms  ;false
org.elasticsearch.index.query.QueryBuilders;TermsQueryBuilder termsQuery(String name, String values);TermsQueryBuilder termsQuery(String name, long values);Whole;;;A filer for a field based on several terms matching on any of them.  @param The field name@param The terms  ;false
org.elasticsearch.index.query.QueryBuilders;TermsQueryBuilder termsQuery(String name, String values);TermsQueryBuilder termsQuery(String name, float values);Whole;;;A filer for a field based on several terms matching on any of them.  @param The field name@param The terms  ;false
org.elasticsearch.index.query.QueryBuilders;TermsQueryBuilder termsQuery(String name, String values);TermsQueryBuilder termsQuery(String name, double values);Whole;;;A filer for a field based on several terms matching on any of them.  @param The field name@param The terms  ;false
org.elasticsearch.index.query.QueryBuilders;TermsQueryBuilder termsQuery(String name, String values);TermsQueryBuilder termsQuery(String name, Object values);Whole;;;A filer for a field based on several terms matching on any of them.  @param The field name@param The terms  ;false
org.elasticsearch.index.query.QueryBuilders;TermsQueryBuilder termsQuery(String name, String values);TermsQueryBuilder termsQuery(String name, Collection values);Whole;;;A filer for a field based on several terms matching on any of them.  @param The field name@param The terms  ;false
org.elasticsearch.index.query.QueryBuilders;TermsQueryBuilder termsQuery(String name, int values);TermsQueryBuilder termsQuery(String name, long values);Whole;;;A filer for a field based on several terms matching on any of them.  @param The field name@param The terms  ;false
org.elasticsearch.index.query.QueryBuilders;TermsQueryBuilder termsQuery(String name, int values);TermsQueryBuilder termsQuery(String name, float values);Whole;;;A filer for a field based on several terms matching on any of them.  @param The field name@param The terms  ;false
org.elasticsearch.index.query.QueryBuilders;TermsQueryBuilder termsQuery(String name, int values);TermsQueryBuilder termsQuery(String name, double values);Whole;;;A filer for a field based on several terms matching on any of them.  @param The field name@param The terms  ;false
org.elasticsearch.index.query.QueryBuilders;TermsQueryBuilder termsQuery(String name, int values);TermsQueryBuilder termsQuery(String name, Object values);Whole;;;A filer for a field based on several terms matching on any of them.  @param The field name@param The terms  ;false
org.elasticsearch.index.query.QueryBuilders;TermsQueryBuilder termsQuery(String name, int values);TermsQueryBuilder termsQuery(String name, Collection values);Whole;;;A filer for a field based on several terms matching on any of them.  @param The field name@param The terms  ;false
org.elasticsearch.index.query.QueryBuilders;TermsQueryBuilder termsQuery(String name, long values);TermsQueryBuilder termsQuery(String name, float values);Whole;;;A filer for a field based on several terms matching on any of them.  @param The field name@param The terms  ;false
org.elasticsearch.index.query.QueryBuilders;TermsQueryBuilder termsQuery(String name, long values);TermsQueryBuilder termsQuery(String name, double values);Whole;;;A filer for a field based on several terms matching on any of them.  @param The field name@param The terms  ;false
org.elasticsearch.index.query.QueryBuilders;TermsQueryBuilder termsQuery(String name, long values);TermsQueryBuilder termsQuery(String name, Object values);Whole;;;A filer for a field based on several terms matching on any of them.  @param The field name@param The terms  ;false
org.elasticsearch.index.query.QueryBuilders;TermsQueryBuilder termsQuery(String name, long values);TermsQueryBuilder termsQuery(String name, Collection values);Whole;;;A filer for a field based on several terms matching on any of them.  @param The field name@param The terms  ;false
org.elasticsearch.index.query.QueryBuilders;TermsQueryBuilder termsQuery(String name, float values);TermsQueryBuilder termsQuery(String name, double values);Whole;;;A filer for a field based on several terms matching on any of them.  @param The field name@param The terms  ;false
org.elasticsearch.index.query.QueryBuilders;TermsQueryBuilder termsQuery(String name, float values);TermsQueryBuilder termsQuery(String name, Object values);Whole;;;A filer for a field based on several terms matching on any of them.  @param The field name@param The terms  ;false
org.elasticsearch.index.query.QueryBuilders;TermsQueryBuilder termsQuery(String name, float values);TermsQueryBuilder termsQuery(String name, Collection values);Whole;;;A filer for a field based on several terms matching on any of them.  @param The field name@param The terms  ;false
org.elasticsearch.index.query.QueryBuilders;TermsQueryBuilder termsQuery(String name, double values);TermsQueryBuilder termsQuery(String name, Object values);Whole;;;A filer for a field based on several terms matching on any of them.  @param The field name@param The terms  ;false
org.elasticsearch.index.query.QueryBuilders;TermsQueryBuilder termsQuery(String name, double values);TermsQueryBuilder termsQuery(String name, Collection values);Whole;;;A filer for a field based on several terms matching on any of them.  @param The field name@param The terms  ;false
org.elasticsearch.index.query.QueryBuilders;TermsQueryBuilder termsQuery(String name, Object values);TermsQueryBuilder termsQuery(String name, Collection values);Whole;;;A filer for a field based on several terms matching on any of them.  @param The field name@param The terms  ;false
org.elasticsearch.index.query.QueryBuilders;WrapperQueryBuilder wrapperQuery(String source);WrapperQueryBuilder wrapperQuery(BytesReference source);Whole;;;A Query builder which allows building a query thanks to a JSON string or binary data.    ;false
org.elasticsearch.index.query.QueryBuilders;WrapperQueryBuilder wrapperQuery(String source);WrapperQueryBuilder wrapperQuery(byte[] source);Whole;;;A Query builder which allows building a query thanks to a JSON string or binary data.    ;false
org.elasticsearch.index.query.QueryBuilders;WrapperQueryBuilder wrapperQuery(BytesReference source);WrapperQueryBuilder wrapperQuery(byte[] source);Whole;;;A Query builder which allows building a query thanks to a JSON string or binary data.    ;false
org.elasticsearch.index.query.QueryBuilders;GeoDistanceQueryBuilder geoDistanceQuery(String name);GeoBoundingBoxQueryBuilder geoBoundingBoxQuery(String name);@param;String name;String name;The location field name.;true
org.elasticsearch.index.query.QueryBuilders;GeoDistanceQueryBuilder geoDistanceQuery(String name);GeoPolygonQueryBuilder geoPolygonQuery(String name, List points);@param;String name;String name;The location field name.;true
org.elasticsearch.index.query.QueryBuilders;GeoBoundingBoxQueryBuilder geoBoundingBoxQuery(String name);GeoPolygonQueryBuilder geoPolygonQuery(String name, List points);@param;String name;String name;The location field name.;true
org.elasticsearch.index.query.QueryBuilders;GeoShapeQueryBuilder geoShapeQuery(String name, ShapeBuilder shape);GeoShapeQueryBuilder geoIntersectionQuery(String name, ShapeBuilder shape);@param;String name;String name;The shape field name;true
org.elasticsearch.index.query.QueryBuilders;GeoShapeQueryBuilder geoShapeQuery(String name, ShapeBuilder shape);GeoShapeQueryBuilder geoIntersectionQuery(String name, ShapeBuilder shape);@param;ShapeBuilder shape;ShapeBuilder shape;Shape to use in the filter;true
org.elasticsearch.index.query.QueryBuilders;GeoShapeQueryBuilder geoShapeQuery(String name, ShapeBuilder shape);GeoShapeQueryBuilder geoWithinQuery(String name, ShapeBuilder shape);@param;String name;String name;The shape field name;true
org.elasticsearch.index.query.QueryBuilders;GeoShapeQueryBuilder geoShapeQuery(String name, ShapeBuilder shape);GeoShapeQueryBuilder geoWithinQuery(String name, ShapeBuilder shape);@param;ShapeBuilder shape;ShapeBuilder shape;Shape to use in the filter;true
org.elasticsearch.index.query.QueryBuilders;GeoShapeQueryBuilder geoShapeQuery(String name, ShapeBuilder shape);GeoShapeQueryBuilder geoDisjointQuery(String name, ShapeBuilder shape);@param;String name;String name;The shape field name;true
org.elasticsearch.index.query.QueryBuilders;GeoShapeQueryBuilder geoShapeQuery(String name, ShapeBuilder shape);GeoShapeQueryBuilder geoDisjointQuery(String name, ShapeBuilder shape);@param;ShapeBuilder shape;ShapeBuilder shape;Shape to use in the filter;true
org.elasticsearch.index.query.QueryBuilders;GeoShapeQueryBuilder geoIntersectionQuery(String name, ShapeBuilder shape);GeoShapeQueryBuilder geoWithinQuery(String name, ShapeBuilder shape);@param;String name;String name;The shape field name;true
org.elasticsearch.index.query.QueryBuilders;GeoShapeQueryBuilder geoIntersectionQuery(String name, ShapeBuilder shape);GeoShapeQueryBuilder geoWithinQuery(String name, ShapeBuilder shape);@param;ShapeBuilder shape;ShapeBuilder shape;Shape to use in the filter;true
org.elasticsearch.index.query.QueryBuilders;GeoShapeQueryBuilder geoIntersectionQuery(String name, ShapeBuilder shape);GeoShapeQueryBuilder geoDisjointQuery(String name, ShapeBuilder shape);@param;String name;String name;The shape field name;true
org.elasticsearch.index.query.QueryBuilders;GeoShapeQueryBuilder geoIntersectionQuery(String name, ShapeBuilder shape);GeoShapeQueryBuilder geoDisjointQuery(String name, ShapeBuilder shape);@param;ShapeBuilder shape;ShapeBuilder shape;Shape to use in the filter;true
org.elasticsearch.index.query.QueryBuilders;GeoShapeQueryBuilder geoWithinQuery(String name, ShapeBuilder shape);GeoShapeQueryBuilder geoDisjointQuery(String name, ShapeBuilder shape);@param;String name;String name;The shape field name;true
org.elasticsearch.index.query.QueryBuilders;GeoShapeQueryBuilder geoWithinQuery(String name, ShapeBuilder shape);GeoShapeQueryBuilder geoDisjointQuery(String name, ShapeBuilder shape);@param;ShapeBuilder shape;ShapeBuilder shape;Shape to use in the filter;true
org.elasticsearch.index.query.QueryBuilder;Query toQuery(QueryShardContext context);Query toFilter(QueryShardContext context);@return;;;the Query or null if this query should be ignored upstream;false
org.elasticsearch.index.query.QueryBuilder;Query toQuery(QueryShardContext context);Query toFilter(QueryShardContext context);@param;QueryShardContext context;QueryShardContext context;additional information needed to construct the queries;true
org.elasticsearch.index.query.MoreLikeThisQueryBuilder; MoreLikeThisQueryBuilder(String[] likeTexts, Item[] likeItems); MoreLikeThisQueryBuilder(String[] fields, String[] likeTexts, Item[] likeItems);@param;String[] likeTexts;String[] likeTexts;the text to use when generating the 'More Like This' query.;true
org.elasticsearch.index.query.MoreLikeThisQueryBuilder; MoreLikeThisQueryBuilder(String[] likeTexts, Item[] likeItems); MoreLikeThisQueryBuilder(String[] fields, String[] likeTexts, Item[] likeItems);@param;Item[] likeItems;Item[] likeItems;the documents to use when generating the 'More Like This' query.;true
org.elasticsearch.index.query.QueryValidationException;QueryValidationException addValidationError(String queryId, String validationError, QueryValidationException validationException);QueryValidationException addValidationErrors(List validationErrors, QueryValidationException validationException);Free text;;;Helper method than can be used to add error messages to an existing {@link QueryValidationException}. When passing {@code null} as the initial exception, a new exception is created. ;false
org.elasticsearch.index.query.QueryValidationException;QueryValidationException addValidationError(String queryId, String validationError, QueryValidationException validationException);QueryValidationException addValidationErrors(List validationErrors, QueryValidationException validationException);@return;;;a QueryValidationException with added validation error message;false
org.elasticsearch.index.query.QueryValidationException;QueryValidationException addValidationError(String queryId, String validationError, QueryValidationException validationException);QueryValidationException addValidationErrors(List validationErrors, QueryValidationException validationException);@param;QueryValidationException validationException;QueryValidationException validationException;an initial exception. Can be null, in which case a new exception is created.;true
org.elasticsearch.index.query.FuzzyQueryBuilder; FuzzyQueryBuilder(String fieldName, String value); FuzzyQueryBuilder(String fieldName, int value);Whole;;;Constructs a new fuzzy query.  @param The name of the field@param The value of the text  ;false
org.elasticsearch.index.query.FuzzyQueryBuilder; FuzzyQueryBuilder(String fieldName, String value); FuzzyQueryBuilder(String fieldName, long value);Whole;;;Constructs a new fuzzy query.  @param The name of the field@param The value of the text  ;false
org.elasticsearch.index.query.FuzzyQueryBuilder; FuzzyQueryBuilder(String fieldName, String value); FuzzyQueryBuilder(String fieldName, float value);Whole;;;Constructs a new fuzzy query.  @param The name of the field@param The value of the text  ;false
org.elasticsearch.index.query.FuzzyQueryBuilder; FuzzyQueryBuilder(String fieldName, String value); FuzzyQueryBuilder(String fieldName, double value);Whole;;;Constructs a new fuzzy query.  @param The name of the field@param The value of the text  ;false
org.elasticsearch.index.query.FuzzyQueryBuilder; FuzzyQueryBuilder(String fieldName, String value); FuzzyQueryBuilder(String fieldName, boolean value);Whole;;;Constructs a new fuzzy query.  @param The name of the field@param The value of the text  ;false
org.elasticsearch.index.query.FuzzyQueryBuilder; FuzzyQueryBuilder(String fieldName, String value); FuzzyQueryBuilder(String fieldName, Object value);Free text;;;Constructs a new fuzzy query. ;true
org.elasticsearch.index.query.FuzzyQueryBuilder; FuzzyQueryBuilder(String fieldName, String value); FuzzyQueryBuilder(String fieldName, Object value);@param;String fieldName;String fieldName;The name of the field;true
org.elasticsearch.index.query.FuzzyQueryBuilder; FuzzyQueryBuilder(String fieldName, int value); FuzzyQueryBuilder(String fieldName, long value);Whole;;;Constructs a new fuzzy query.  @param The name of the field@param The value of the text  ;false
org.elasticsearch.index.query.FuzzyQueryBuilder; FuzzyQueryBuilder(String fieldName, int value); FuzzyQueryBuilder(String fieldName, float value);Whole;;;Constructs a new fuzzy query.  @param The name of the field@param The value of the text  ;false
org.elasticsearch.index.query.FuzzyQueryBuilder; FuzzyQueryBuilder(String fieldName, int value); FuzzyQueryBuilder(String fieldName, double value);Whole;;;Constructs a new fuzzy query.  @param The name of the field@param The value of the text  ;false
org.elasticsearch.index.query.FuzzyQueryBuilder; FuzzyQueryBuilder(String fieldName, int value); FuzzyQueryBuilder(String fieldName, boolean value);Whole;;;Constructs a new fuzzy query.  @param The name of the field@param The value of the text  ;false
org.elasticsearch.index.query.FuzzyQueryBuilder; FuzzyQueryBuilder(String fieldName, int value); FuzzyQueryBuilder(String fieldName, Object value);Free text;;;Constructs a new fuzzy query. ;true
org.elasticsearch.index.query.FuzzyQueryBuilder; FuzzyQueryBuilder(String fieldName, int value); FuzzyQueryBuilder(String fieldName, Object value);@param;String fieldName;String fieldName;The name of the field;true
org.elasticsearch.index.query.FuzzyQueryBuilder; FuzzyQueryBuilder(String fieldName, long value); FuzzyQueryBuilder(String fieldName, float value);Whole;;;Constructs a new fuzzy query.  @param The name of the field@param The value of the text  ;false
org.elasticsearch.index.query.FuzzyQueryBuilder; FuzzyQueryBuilder(String fieldName, long value); FuzzyQueryBuilder(String fieldName, double value);Whole;;;Constructs a new fuzzy query.  @param The name of the field@param The value of the text  ;false
org.elasticsearch.index.query.FuzzyQueryBuilder; FuzzyQueryBuilder(String fieldName, long value); FuzzyQueryBuilder(String fieldName, boolean value);Whole;;;Constructs a new fuzzy query.  @param The name of the field@param The value of the text  ;false
org.elasticsearch.index.query.FuzzyQueryBuilder; FuzzyQueryBuilder(String fieldName, long value); FuzzyQueryBuilder(String fieldName, Object value);Free text;;;Constructs a new fuzzy query. ;true
org.elasticsearch.index.query.FuzzyQueryBuilder; FuzzyQueryBuilder(String fieldName, long value); FuzzyQueryBuilder(String fieldName, Object value);@param;String fieldName;String fieldName;The name of the field;true
org.elasticsearch.index.query.FuzzyQueryBuilder; FuzzyQueryBuilder(String fieldName, float value); FuzzyQueryBuilder(String fieldName, double value);Whole;;;Constructs a new fuzzy query.  @param The name of the field@param The value of the text  ;false
org.elasticsearch.index.query.FuzzyQueryBuilder; FuzzyQueryBuilder(String fieldName, float value); FuzzyQueryBuilder(String fieldName, boolean value);Whole;;;Constructs a new fuzzy query.  @param The name of the field@param The value of the text  ;false
org.elasticsearch.index.query.FuzzyQueryBuilder; FuzzyQueryBuilder(String fieldName, float value); FuzzyQueryBuilder(String fieldName, Object value);Free text;;;Constructs a new fuzzy query. ;true
org.elasticsearch.index.query.FuzzyQueryBuilder; FuzzyQueryBuilder(String fieldName, float value); FuzzyQueryBuilder(String fieldName, Object value);@param;String fieldName;String fieldName;The name of the field;true
org.elasticsearch.index.query.FuzzyQueryBuilder; FuzzyQueryBuilder(String fieldName, double value); FuzzyQueryBuilder(String fieldName, boolean value);Whole;;;Constructs a new fuzzy query.  @param The name of the field@param The value of the text  ;false
org.elasticsearch.index.query.FuzzyQueryBuilder; FuzzyQueryBuilder(String fieldName, double value); FuzzyQueryBuilder(String fieldName, Object value);Free text;;;Constructs a new fuzzy query. ;true
org.elasticsearch.index.query.FuzzyQueryBuilder; FuzzyQueryBuilder(String fieldName, double value); FuzzyQueryBuilder(String fieldName, Object value);@param;String fieldName;String fieldName;The name of the field;true
org.elasticsearch.index.query.FuzzyQueryBuilder; FuzzyQueryBuilder(String fieldName, boolean value); FuzzyQueryBuilder(String fieldName, Object value);Free text;;;Constructs a new fuzzy query. ;true
org.elasticsearch.index.query.FuzzyQueryBuilder; FuzzyQueryBuilder(String fieldName, boolean value); FuzzyQueryBuilder(String fieldName, Object value);@param;String fieldName;String fieldName;The name of the field;true
org.elasticsearch.index.query.TermsQueryBuilder; TermsQueryBuilder(String fieldName, String values); TermsQueryBuilder(String fieldName, int values);Whole;;;A filter for a field based on several terms matching on any of them.  @param The field name@param The terms  ;false
org.elasticsearch.index.query.TermsQueryBuilder; TermsQueryBuilder(String fieldName, String values); TermsQueryBuilder(String fieldName, long values);Whole;;;A filter for a field based on several terms matching on any of them.  @param The field name@param The terms  ;false
org.elasticsearch.index.query.TermsQueryBuilder; TermsQueryBuilder(String fieldName, String values); TermsQueryBuilder(String fieldName, float values);Whole;;;A filter for a field based on several terms matching on any of them.  @param The field name@param The terms  ;false
org.elasticsearch.index.query.TermsQueryBuilder; TermsQueryBuilder(String fieldName, String values); TermsQueryBuilder(String fieldName, double values);Whole;;;A filter for a field based on several terms matching on any of them.  @param The field name@param The terms  ;false
org.elasticsearch.index.query.TermsQueryBuilder; TermsQueryBuilder(String fieldName, String values); TermsQueryBuilder(String fieldName, Object values);Whole;;;A filter for a field based on several terms matching on any of them.  @param The field name@param The terms  ;false
org.elasticsearch.index.query.TermsQueryBuilder; TermsQueryBuilder(String fieldName, String values); TermsQueryBuilder(String fieldName, Iterable values);Whole;;;A filter for a field based on several terms matching on any of them.  @param The field name@param The terms  ;false
org.elasticsearch.index.query.TermsQueryBuilder; TermsQueryBuilder(String fieldName, int values); TermsQueryBuilder(String fieldName, long values);Whole;;;A filter for a field based on several terms matching on any of them.  @param The field name@param The terms  ;false
org.elasticsearch.index.query.TermsQueryBuilder; TermsQueryBuilder(String fieldName, int values); TermsQueryBuilder(String fieldName, float values);Whole;;;A filter for a field based on several terms matching on any of them.  @param The field name@param The terms  ;false
org.elasticsearch.index.query.TermsQueryBuilder; TermsQueryBuilder(String fieldName, int values); TermsQueryBuilder(String fieldName, double values);Whole;;;A filter for a field based on several terms matching on any of them.  @param The field name@param The terms  ;false
org.elasticsearch.index.query.TermsQueryBuilder; TermsQueryBuilder(String fieldName, int values); TermsQueryBuilder(String fieldName, Object values);Whole;;;A filter for a field based on several terms matching on any of them.  @param The field name@param The terms  ;false
org.elasticsearch.index.query.TermsQueryBuilder; TermsQueryBuilder(String fieldName, int values); TermsQueryBuilder(String fieldName, Iterable values);Whole;;;A filter for a field based on several terms matching on any of them.  @param The field name@param The terms  ;false
org.elasticsearch.index.query.TermsQueryBuilder; TermsQueryBuilder(String fieldName, long values); TermsQueryBuilder(String fieldName, float values);Whole;;;A filter for a field based on several terms matching on any of them.  @param The field name@param The terms  ;false
org.elasticsearch.index.query.TermsQueryBuilder; TermsQueryBuilder(String fieldName, long values); TermsQueryBuilder(String fieldName, double values);Whole;;;A filter for a field based on several terms matching on any of them.  @param The field name@param The terms  ;false
org.elasticsearch.index.query.TermsQueryBuilder; TermsQueryBuilder(String fieldName, long values); TermsQueryBuilder(String fieldName, Object values);Whole;;;A filter for a field based on several terms matching on any of them.  @param The field name@param The terms  ;false
org.elasticsearch.index.query.TermsQueryBuilder; TermsQueryBuilder(String fieldName, long values); TermsQueryBuilder(String fieldName, Iterable values);Whole;;;A filter for a field based on several terms matching on any of them.  @param The field name@param The terms  ;false
org.elasticsearch.index.query.TermsQueryBuilder; TermsQueryBuilder(String fieldName, float values); TermsQueryBuilder(String fieldName, double values);Whole;;;A filter for a field based on several terms matching on any of them.  @param The field name@param The terms  ;false
org.elasticsearch.index.query.TermsQueryBuilder; TermsQueryBuilder(String fieldName, float values); TermsQueryBuilder(String fieldName, Object values);Whole;;;A filter for a field based on several terms matching on any of them.  @param The field name@param The terms  ;false
org.elasticsearch.index.query.TermsQueryBuilder; TermsQueryBuilder(String fieldName, float values); TermsQueryBuilder(String fieldName, Iterable values);Whole;;;A filter for a field based on several terms matching on any of them.  @param The field name@param The terms  ;false
org.elasticsearch.index.query.TermsQueryBuilder; TermsQueryBuilder(String fieldName, double values); TermsQueryBuilder(String fieldName, Object values);Whole;;;A filter for a field based on several terms matching on any of them.  @param The field name@param The terms  ;false
org.elasticsearch.index.query.TermsQueryBuilder; TermsQueryBuilder(String fieldName, double values); TermsQueryBuilder(String fieldName, Iterable values);Whole;;;A filter for a field based on several terms matching on any of them.  @param The field name@param The terms  ;false
org.elasticsearch.index.query.TermsQueryBuilder; TermsQueryBuilder(String fieldName, Object values); TermsQueryBuilder(String fieldName, Iterable values);Whole;;;A filter for a field based on several terms matching on any of them.  @param The field name@param The terms  ;false
org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilder; FunctionScoreQueryBuilder(FilterFunctionBuilder[] filterFunctionBuilders); FunctionScoreQueryBuilder(QueryBuilder query, FilterFunctionBuilder[] filterFunctionBuilders);@param;FilterFunctionBuilder[] filterFunctionBuilders;FilterFunctionBuilder[] filterFunctionBuilders;the filters and functions;true
org.elasticsearch.index.query.functionscore.FunctionScoreQueryBuilder; FunctionScoreQueryBuilder(ScoreFunctionBuilder scoreFunctionBuilder); FunctionScoreQueryBuilder(QueryBuilder query, ScoreFunctionBuilder scoreFunctionBuilder);@param;ScoreFunctionBuilder<?> scoreFunctionBuilder;ScoreFunctionBuilder<?> scoreFunctionBuilder;score function that is executed;true
org.elasticsearch.index.query.functionscore.DecayFunctionBuilder; DecayFunctionBuilder(String fieldName, Object origin, Object scale, Object offset); DecayFunctionBuilder(String fieldName, Object origin, Object scale, Object offset, double decay);Whole;;;Convenience constructor that converts its parameters into json to parse on the data nodes.    ;false
org.elasticsearch.index.query.MultiMatchQueryBuilder;MultiMatchQueryBuilder type(MultiMatchQueryBuilder.Type type);MultiMatchQueryBuilder type(Object type);Whole;;;Sets the type of the text query.    ;false
org.elasticsearch.index.query.MultiMatchQueryBuilder;MultiMatchQueryBuilder tieBreaker(float tieBreaker);MultiMatchQueryBuilder tieBreaker(Float tieBreaker);Whole;;;<p>Tie-Breaker for "best-match" disjunction queries (OR-Queries). The tie breaker capability allows documents that match more than one query clause (in this case on more than one field) to be scored better than documents that match only the best of the fields, without confusing this with the better case of two distinct matches in the multiple fields.</p> <p>A tie-breaker value of <tt>1.0</tt> is interpreted as a signal to score queries as "most-match" queries where all matching query clauses are considered for scoring.</p> @see Type    ;false
org.elasticsearch.index.query.MultiMatchQueryBuilder;MultiMatchQueryBuilder cutoffFrequency(float cutoff);MultiMatchQueryBuilder cutoffFrequency(Float cutoff);Whole;;;Set a cutoff value in [0..1] (or absolute number &gt,=1) representing the maximum threshold of a terms document frequency to be considered a low frequency term.    ;false
org.elasticsearch.index.query.AbstractQueryBuilder;Object convertToBytesRefIfString(Object obj);Object convertToStringIfBytesRef(Object obj);@param;Object obj;Object obj;the input object;true
org.elasticsearch.index.query.BaseTermQueryBuilder; BaseTermQueryBuilder(String fieldName, String value); BaseTermQueryBuilder(String fieldName, int value);Whole;;;Constructs a new base term query.  @param The name of the field@param The value of the term  ;false
org.elasticsearch.index.query.BaseTermQueryBuilder; BaseTermQueryBuilder(String fieldName, String value); BaseTermQueryBuilder(String fieldName, long value);Whole;;;Constructs a new base term query.  @param The name of the field@param The value of the term  ;false
org.elasticsearch.index.query.BaseTermQueryBuilder; BaseTermQueryBuilder(String fieldName, String value); BaseTermQueryBuilder(String fieldName, float value);Whole;;;Constructs a new base term query.  @param The name of the field@param The value of the term  ;false
org.elasticsearch.index.query.BaseTermQueryBuilder; BaseTermQueryBuilder(String fieldName, String value); BaseTermQueryBuilder(String fieldName, double value);Whole;;;Constructs a new base term query.  @param The name of the field@param The value of the term  ;false
org.elasticsearch.index.query.BaseTermQueryBuilder; BaseTermQueryBuilder(String fieldName, String value); BaseTermQueryBuilder(String fieldName, boolean value);Whole;;;Constructs a new base term query.  @param The name of the field@param The value of the term  ;false
org.elasticsearch.index.query.BaseTermQueryBuilder; BaseTermQueryBuilder(String fieldName, String value); BaseTermQueryBuilder(String fieldName, Object value);@param;String fieldName;String fieldName;The name of the field;true
org.elasticsearch.index.query.BaseTermQueryBuilder; BaseTermQueryBuilder(String fieldName, String value); BaseTermQueryBuilder(String fieldName, Object value);@param;String value;Object value;The value of the term;true
org.elasticsearch.index.query.BaseTermQueryBuilder; BaseTermQueryBuilder(String fieldName, int value); BaseTermQueryBuilder(String fieldName, long value);Whole;;;Constructs a new base term query.  @param The name of the field@param The value of the term  ;false
org.elasticsearch.index.query.BaseTermQueryBuilder; BaseTermQueryBuilder(String fieldName, int value); BaseTermQueryBuilder(String fieldName, float value);Whole;;;Constructs a new base term query.  @param The name of the field@param The value of the term  ;false
org.elasticsearch.index.query.BaseTermQueryBuilder; BaseTermQueryBuilder(String fieldName, int value); BaseTermQueryBuilder(String fieldName, double value);Whole;;;Constructs a new base term query.  @param The name of the field@param The value of the term  ;false
org.elasticsearch.index.query.BaseTermQueryBuilder; BaseTermQueryBuilder(String fieldName, int value); BaseTermQueryBuilder(String fieldName, boolean value);Whole;;;Constructs a new base term query.  @param The name of the field@param The value of the term  ;false
org.elasticsearch.index.query.BaseTermQueryBuilder; BaseTermQueryBuilder(String fieldName, int value); BaseTermQueryBuilder(String fieldName, Object value);@param;String fieldName;String fieldName;The name of the field;true
org.elasticsearch.index.query.BaseTermQueryBuilder; BaseTermQueryBuilder(String fieldName, int value); BaseTermQueryBuilder(String fieldName, Object value);@param;int value;Object value;The value of the term;true
org.elasticsearch.index.query.BaseTermQueryBuilder; BaseTermQueryBuilder(String fieldName, long value); BaseTermQueryBuilder(String fieldName, float value);Whole;;;Constructs a new base term query.  @param The name of the field@param The value of the term  ;false
org.elasticsearch.index.query.BaseTermQueryBuilder; BaseTermQueryBuilder(String fieldName, long value); BaseTermQueryBuilder(String fieldName, double value);Whole;;;Constructs a new base term query.  @param The name of the field@param The value of the term  ;false
org.elasticsearch.index.query.BaseTermQueryBuilder; BaseTermQueryBuilder(String fieldName, long value); BaseTermQueryBuilder(String fieldName, boolean value);Whole;;;Constructs a new base term query.  @param The name of the field@param The value of the term  ;false
org.elasticsearch.index.query.BaseTermQueryBuilder; BaseTermQueryBuilder(String fieldName, long value); BaseTermQueryBuilder(String fieldName, Object value);@param;String fieldName;String fieldName;The name of the field;true
org.elasticsearch.index.query.BaseTermQueryBuilder; BaseTermQueryBuilder(String fieldName, long value); BaseTermQueryBuilder(String fieldName, Object value);@param;long value;Object value;The value of the term;true
org.elasticsearch.index.query.BaseTermQueryBuilder; BaseTermQueryBuilder(String fieldName, float value); BaseTermQueryBuilder(String fieldName, double value);Whole;;;Constructs a new base term query.  @param The name of the field@param The value of the term  ;false
org.elasticsearch.index.query.BaseTermQueryBuilder; BaseTermQueryBuilder(String fieldName, float value); BaseTermQueryBuilder(String fieldName, boolean value);Whole;;;Constructs a new base term query.  @param The name of the field@param The value of the term  ;false
org.elasticsearch.index.query.BaseTermQueryBuilder; BaseTermQueryBuilder(String fieldName, float value); BaseTermQueryBuilder(String fieldName, Object value);@param;String fieldName;String fieldName;The name of the field;true
org.elasticsearch.index.query.BaseTermQueryBuilder; BaseTermQueryBuilder(String fieldName, float value); BaseTermQueryBuilder(String fieldName, Object value);@param;float value;Object value;The value of the term;true
org.elasticsearch.index.query.BaseTermQueryBuilder; BaseTermQueryBuilder(String fieldName, double value); BaseTermQueryBuilder(String fieldName, boolean value);Whole;;;Constructs a new base term query.  @param The name of the field@param The value of the term  ;false
org.elasticsearch.index.query.BaseTermQueryBuilder; BaseTermQueryBuilder(String fieldName, double value); BaseTermQueryBuilder(String fieldName, Object value);@param;String fieldName;String fieldName;The name of the field;true
org.elasticsearch.index.query.BaseTermQueryBuilder; BaseTermQueryBuilder(String fieldName, double value); BaseTermQueryBuilder(String fieldName, Object value);@param;double value;Object value;The value of the term;true
org.elasticsearch.index.query.BaseTermQueryBuilder; BaseTermQueryBuilder(String fieldName, boolean value); BaseTermQueryBuilder(String fieldName, Object value);@param;String fieldName;String fieldName;The name of the field;true
org.elasticsearch.index.query.BaseTermQueryBuilder; BaseTermQueryBuilder(String fieldName, boolean value); BaseTermQueryBuilder(String fieldName, Object value);@param;boolean value;Object value;The value of the term;true
org.elasticsearch.index.query.RangeQueryBuilder;RangeQueryBuilder from(Object from);RangeQueryBuilder gt(Object from);Whole;;;The from part of the range query. Null indicates unbounded.    ;false
org.elasticsearch.index.query.RangeQueryBuilder;RangeQueryBuilder from(Object from);RangeQueryBuilder gte(Object from);Whole;;;The from part of the range query. Null indicates unbounded.    ;false
org.elasticsearch.index.query.RangeQueryBuilder;RangeQueryBuilder gt(Object from);RangeQueryBuilder gte(Object from);Whole;;;The from part of the range query. Null indicates unbounded.    ;false
org.elasticsearch.index.query.RangeQueryBuilder;RangeQueryBuilder to(Object to, boolean includeUpper);RangeQueryBuilder to(Object to);Whole;;;The to part of the range query. Null indicates unbounded.    ;false
org.elasticsearch.index.query.RangeQueryBuilder;RangeQueryBuilder to(Object to, boolean includeUpper);RangeQueryBuilder lt(Object to);Whole;;;The to part of the range query. Null indicates unbounded.    ;false
org.elasticsearch.index.query.RangeQueryBuilder;RangeQueryBuilder to(Object to, boolean includeUpper);RangeQueryBuilder lte(Object to);Whole;;;The to part of the range query. Null indicates unbounded.    ;false
org.elasticsearch.index.query.RangeQueryBuilder;RangeQueryBuilder to(Object to);RangeQueryBuilder lt(Object to);Whole;;;The to part of the range query. Null indicates unbounded.    ;false
org.elasticsearch.index.query.RangeQueryBuilder;RangeQueryBuilder to(Object to);RangeQueryBuilder lte(Object to);Whole;;;The to part of the range query. Null indicates unbounded.    ;false
org.elasticsearch.index.query.RangeQueryBuilder;RangeQueryBuilder lt(Object to);RangeQueryBuilder lte(Object to);Whole;;;The to part of the range query. Null indicates unbounded.    ;false
org.elasticsearch.index.query.Rewriteable;T rewrite(T original, QueryRewriteContext context);T rewrite(T original, QueryRewriteContext context, boolean assertNoAsyncTasks);@param;T original;T original;the original rewriteable to rewrite;true
org.elasticsearch.index.query.Rewriteable;T rewrite(T original, QueryRewriteContext context);T rewrite(T original, QueryRewriteContext context, boolean assertNoAsyncTasks);@param;QueryRewriteContext context;QueryRewriteContext context;the rewrite context to use;true
org.elasticsearch.index.query.Rewriteable;T rewrite(T original, QueryRewriteContext context);T rewrite(T original, QueryRewriteContext context, boolean assertNoAsyncTasks);@throws;;;if an IOException occurs;true
org.elasticsearch.index.query.Rewriteable;void rewriteAndFetch(T original, QueryRewriteContext context, ActionListener rewriteResponse);void rewriteAndFetch(T original, QueryRewriteContext context, ActionListener rewriteResponse, int iteration);Whole;;;Rewrites the given rewriteable and fetches pending async tasks for each round before rewriting again.    ;false
org.elasticsearch.index.query.GeoBoundingBoxQueryBuilder;GeoBoundingBoxQueryBuilder setCorners(GeoPoint topLeft, GeoPoint bottomRight);GeoBoundingBoxQueryBuilder setCorners(String topLeft, String bottomRight);Free text;;;Adds points. ;true
org.elasticsearch.index.query.GeoBoundingBoxQueryBuilder;GeoBoundingBoxQueryBuilder setCornersOGC(GeoPoint bottomLeft, GeoPoint topRight);GeoBoundingBoxQueryBuilder setCornersOGC(String bottomLeft, String topRight);Free text;;;Adds corners in OGC standard bbox/ envelop format. ;true
org.elasticsearch.index.engine.Engine;IndexResult index(Index index);DeleteResult delete(Delete delete);@param;Index index;Delete delete;operation to perform;false
org.elasticsearch.index.engine.Engine;Searcher acquireSearcher(String source);Searcher acquireSearcher(String source, SearcherScope scope);Free text;;;Returns a new searcher instance. The consumer of this API is responsible for releasing the returned searcher in a safe manner, preferably in a try/finally block. ;true
org.elasticsearch.index.engine.Engine;Searcher acquireSearcher(String source);Searcher acquireSearcher(String source, SearcherScope scope);@param;String source;String source;the source API or routing that triggers this searcher acquire;true
org.elasticsearch.index.engine.Engine;CommitId flush(boolean force, boolean waitIfOngoing);CommitId flush();@return;;;the commit Id for the resulting commit;true
org.elasticsearch.index.engine.ElasticsearchConcurrentMergeScheduler;void beforeMerge(OnGoingMerge merge);void afterMerge(OnGoingMerge merge);Whole;;;A callback allowing for custom logic before an actual merge starts.    ;false
org.elasticsearch.index.shard.SearchOperationListener;void onPreQueryPhase(SearchContext searchContext);void onFailedQueryPhase(SearchContext searchContext);@param;SearchContext searchContext;SearchContext searchContext;the current search context;true
org.elasticsearch.index.shard.SearchOperationListener;void onPreQueryPhase(SearchContext searchContext);void onQueryPhase(SearchContext searchContext, long tookInNanos);@param;SearchContext searchContext;SearchContext searchContext;the current search context;true
org.elasticsearch.index.shard.SearchOperationListener;void onPreQueryPhase(SearchContext searchContext);void onPreFetchPhase(SearchContext searchContext);@param;SearchContext searchContext;SearchContext searchContext;the current search context;true
org.elasticsearch.index.shard.SearchOperationListener;void onPreQueryPhase(SearchContext searchContext);void onFailedFetchPhase(SearchContext searchContext);@param;SearchContext searchContext;SearchContext searchContext;the current search context;true
org.elasticsearch.index.shard.SearchOperationListener;void onPreQueryPhase(SearchContext searchContext);void onFetchPhase(SearchContext searchContext, long tookInNanos);@param;SearchContext searchContext;SearchContext searchContext;the current search context;true
org.elasticsearch.index.shard.SearchOperationListener;void onFailedQueryPhase(SearchContext searchContext);void onQueryPhase(SearchContext searchContext, long tookInNanos);@param;SearchContext searchContext;SearchContext searchContext;the current search context;true
org.elasticsearch.index.shard.SearchOperationListener;void onFailedQueryPhase(SearchContext searchContext);void onPreFetchPhase(SearchContext searchContext);@param;SearchContext searchContext;SearchContext searchContext;the current search context;true
org.elasticsearch.index.shard.SearchOperationListener;void onFailedQueryPhase(SearchContext searchContext);void onFailedFetchPhase(SearchContext searchContext);@param;SearchContext searchContext;SearchContext searchContext;the current search context;true
org.elasticsearch.index.shard.SearchOperationListener;void onFailedQueryPhase(SearchContext searchContext);void onFetchPhase(SearchContext searchContext, long tookInNanos);@param;SearchContext searchContext;SearchContext searchContext;the current search context;true
org.elasticsearch.index.shard.SearchOperationListener;void onQueryPhase(SearchContext searchContext, long tookInNanos);void onPreFetchPhase(SearchContext searchContext);@param;SearchContext searchContext;SearchContext searchContext;the current search context;true
org.elasticsearch.index.shard.SearchOperationListener;void onQueryPhase(SearchContext searchContext, long tookInNanos);void onFailedFetchPhase(SearchContext searchContext);@param;SearchContext searchContext;SearchContext searchContext;the current search context;true
org.elasticsearch.index.shard.SearchOperationListener;void onQueryPhase(SearchContext searchContext, long tookInNanos);void onFetchPhase(SearchContext searchContext, long tookInNanos);@param;SearchContext searchContext;SearchContext searchContext;the current search context;true
org.elasticsearch.index.shard.SearchOperationListener;void onPreFetchPhase(SearchContext searchContext);void onFailedFetchPhase(SearchContext searchContext);@param;SearchContext searchContext;SearchContext searchContext;the current search context;true
org.elasticsearch.index.shard.SearchOperationListener;void onPreFetchPhase(SearchContext searchContext);void onFetchPhase(SearchContext searchContext, long tookInNanos);@param;SearchContext searchContext;SearchContext searchContext;the current search context;true
org.elasticsearch.index.shard.SearchOperationListener;void onFailedFetchPhase(SearchContext searchContext);void onFetchPhase(SearchContext searchContext, long tookInNanos);@param;SearchContext searchContext;SearchContext searchContext;the current search context;true
org.elasticsearch.index.shard.SearchOperationListener;void onFreeContext(SearchContext context);void onFreeScrollContext(SearchContext context);@param;SearchContext context;SearchContext context;the freed search context;true
org.elasticsearch.index.shard.IndexShardOperationPermits;void blockOperations(long timeout, TimeUnit timeUnit, CheckedRunnable onBlocked);void asyncBlockOperations(long timeout, TimeUnit timeUnit, CheckedRunnable onBlocked, Consumer onFailure);@param;long timeout;long timeout;the maximum time to wait for the in-flight operations block;true
org.elasticsearch.index.shard.IndexShardOperationPermits;void blockOperations(long timeout, TimeUnit timeUnit, CheckedRunnable onBlocked);void asyncBlockOperations(long timeout, TimeUnit timeUnit, CheckedRunnable onBlocked, Consumer onFailure);@param;TimeUnit timeUnit;TimeUnit timeUnit;the time unit of the timeout argument;true
org.elasticsearch.index.shard.IndexShardOperationPermits;void blockOperations(long timeout, TimeUnit timeUnit, CheckedRunnable onBlocked);void asyncBlockOperations(long timeout, TimeUnit timeUnit, CheckedRunnable onBlocked, Consumer onFailure);@param;CheckedRunnable<E> onBlocked;CheckedRunnable<E> onBlocked;the action to run once the block has been acquired;true
org.elasticsearch.index.shard.ShardUtils;ShardId extractShardId(LeafReader reader);ShardId extractShardId(DirectoryReader reader);Whole;;;Tries to extract the shard id from a reader if possible, when its not possible, will return null.    ;false
org.elasticsearch.index.shard.IndexShard;void updateGlobalCheckpointForShard(String allocationId, long globalCheckpoint);void updateGlobalCheckpointOnReplica(long globalCheckpoint, String reason);@param;long globalCheckpoint;long globalCheckpoint;the global checkpoint;true
org.elasticsearch.index.shard.IndexEventListener;void shardRoutingChanged(IndexShard indexShard, ShardRouting oldRouting, ShardRouting newRouting);void beforeIndexShardClosed(ShardId shardId, IndexShard indexShard, Settings indexSettings);@param;IndexShard indexShard;IndexShard indexShard;The index shard;true
org.elasticsearch.index.shard.IndexEventListener;void afterIndexShardClosed(ShardId shardId, IndexShard indexShard, Settings indexSettings);void beforeIndexShardDeleted(ShardId shardId, Settings indexSettings);@param;ShardId shardId;ShardId shardId;The shard id;true
org.elasticsearch.index.shard.IndexEventListener;void afterIndexShardClosed(ShardId shardId, IndexShard indexShard, Settings indexSettings);void afterIndexShardDeleted(ShardId shardId, Settings indexSettings);@param;ShardId shardId;ShardId shardId;The shard id;true
org.elasticsearch.index.shard.IndexEventListener;void beforeIndexRemoved(IndexService indexService, IndexRemovalReason reason);void afterIndexRemoved(Index index, IndexSettings indexSettings, IndexRemovalReason reason);@param;IndexRemovalReason reason;IndexRemovalReason reason;the reason for index removal;true
org.elasticsearch.index.shard.IndexEventListener;void beforeIndexShardDeleted(ShardId shardId, Settings indexSettings);void afterIndexShardDeleted(ShardId shardId, Settings indexSettings);@param;ShardId shardId;ShardId shardId;The shard id;true
org.elasticsearch.index.shard.IndexEventListener;void beforeIndexShardDeleted(ShardId shardId, Settings indexSettings);void afterIndexShardDeleted(ShardId shardId, Settings indexSettings);@param;Settings indexSettings;Settings indexSettings;the shards index settings;true
org.elasticsearch.index.shard.StoreRecovery;boolean recoverFromStore(IndexShard indexShard);boolean recoverFromRepository(IndexShard indexShard, Repository repository);@return;;;true if the shard has been recovered successfully, false if the recovery has been ignored due to a concurrent modification of if the clusters state has changed due to async updates.;false
org.elasticsearch.index.store.Store;MetadataSnapshot getMetadata(IndexCommit commit);MetadataSnapshot getMetadata(IndexCommit commit, boolean lockDirectory);Free text;;;Returns a new MetadataSnapshot for the given commit. If the given commit is <code>null</code> the latest commit point is used. Note that this method requires the caller verify it has the right to access the store and no concurrent file changes are happening. If in doubt, you probably want to use one of the following: {@link #readMetadataSnapshot(Path, ShardId, NodeEnvironment.ShardLocker, Logger)} to read a meta data while locking {@link IndexShard#snapshotStoreMetadata()} to safely read from an existing shard {@link IndexShard#acquireIndexCommit(boolean)} to get an {@link IndexCommit} which is safe to use but has to be freed ;true
org.elasticsearch.index.store.Store;MetadataSnapshot getMetadata(IndexCommit commit);MetadataSnapshot getMetadata(IndexCommit commit, boolean lockDirectory);@param;IndexCommit commit;IndexCommit commit;the index commit to read the snapshot from or null if the latest snapshot should be read from the directory;true
org.elasticsearch.index.store.Store;MetadataSnapshot getMetadata(IndexCommit commit);MetadataSnapshot getMetadata(IndexCommit commit, boolean lockDirectory);@throws;;;if the lucene index is corrupted. This can be caused by a checksum mismatch or an unexpected exception when opening the index reading the segments file.;true
org.elasticsearch.index.store.Store;MetadataSnapshot getMetadata(IndexCommit commit);MetadataSnapshot getMetadata(IndexCommit commit, boolean lockDirectory);@throws;;;if the lucene index is too old to be opened.;true
org.elasticsearch.index.store.Store;MetadataSnapshot getMetadata(IndexCommit commit);MetadataSnapshot getMetadata(IndexCommit commit, boolean lockDirectory);@throws;;;if the lucene index is too new to be opened.;true
org.elasticsearch.index.store.Store;MetadataSnapshot getMetadata(IndexCommit commit);MetadataSnapshot getMetadata(IndexCommit commit, boolean lockDirectory);@throws;;;if one or more files referenced by a commit are not present.;true
org.elasticsearch.index.store.Store;MetadataSnapshot getMetadata(IndexCommit commit);MetadataSnapshot getMetadata(IndexCommit commit, boolean lockDirectory);@throws;;;if one or more files referenced by a commit are not present.;true
org.elasticsearch.index.store.Store;MetadataSnapshot getMetadata(IndexCommit commit);MetadataSnapshot getMetadata(IndexCommit commit, boolean lockDirectory);@throws;;;if one or more files referenced by a commit are not present.;true
org.elasticsearch.index.store.Store;MetadataSnapshot getMetadata(IndexCommit commit);MetadataSnapshot getMetadata(IndexCommit commit, boolean lockDirectory);@throws;;;if one or more files referenced by a commit are not present.;true
org.elasticsearch.index.store.Store;MetadataSnapshot getMetadata(IndexCommit commit);MetadataSnapshot getMetadata(IndexCommit commit, boolean lockDirectory);@throws;;;if the commit point can't be found in this store;true
org.elasticsearch.node.InternalSettingsPreparer;Environment prepareEnvironment(Settings input, Terminal terminal);Environment prepareEnvironment(Settings input, Terminal terminal, Map properties, Path configPath);Free text;;;Prepares the settings by gathering all elasticsearch system properties, optionally loading the configuration settings, and then replacing all property placeholders. If a {@link Terminal} is provided and configuration settings are loaded, settings with a value of <code>${prompt.text}</code> or <code>${prompt.secret}</code> will result in a prompt for the setting to the user. ;true
org.elasticsearch.node.InternalSettingsPreparer;Environment prepareEnvironment(Settings input, Terminal terminal);Environment prepareEnvironment(Settings input, Terminal terminal, Map properties, Path configPath);@return;;;the Settings and Environment as a Tuple;true
org.elasticsearch.node.InternalSettingsPreparer;Environment prepareEnvironment(Settings input, Terminal terminal);Environment prepareEnvironment(Settings input, Terminal terminal, Map properties, Path configPath);@param;Terminal terminal;Terminal terminal;the Terminal to use for input/output;true
org.elasticsearch.client.ElasticsearchClient;ActionFuture execute(Action action, Request request);void execute(Action action, Request request, ActionListener listener);@param;Action<Request,Response,RequestBuilder> action;Action<Request,Response,RequestBuilder> action;The action type to execute.;true
org.elasticsearch.client.ElasticsearchClient;ActionFuture execute(Action action, Request request);void execute(Action action, Request request, ActionListener listener);@param;Request request;Request request;The action request.;true
org.elasticsearch.client.ElasticsearchClient;ActionFuture execute(Action action, Request request);RequestBuilder prepareExecute(Action action);@param;Action<Request,Response,RequestBuilder> action;Action<Request,Response,RequestBuilder> action;The action type to execute.;true
org.elasticsearch.client.ElasticsearchClient;void execute(Action action, Request request, ActionListener listener);RequestBuilder prepareExecute(Action action);@param;Action<Request,Response,RequestBuilder> action;Action<Request,Response,RequestBuilder> action;The action type to execute.;true
org.elasticsearch.client.Client;ActionFuture index(IndexRequest request);void index(IndexRequest request, ActionListener listener);@param;IndexRequest request;IndexRequest request;The index request;true
org.elasticsearch.client.Client;ActionFuture index(IndexRequest request);ActionFuture update(UpdateRequest request);@return;;;The result future;false
org.elasticsearch.client.Client;ActionFuture index(IndexRequest request);ActionFuture delete(DeleteRequest request);@return;;;The result future;false
org.elasticsearch.client.Client;ActionFuture index(IndexRequest request);ActionFuture bulk(BulkRequest request);@return;;;The result future;false
org.elasticsearch.client.Client;ActionFuture index(IndexRequest request);ActionFuture get(GetRequest request);@return;;;The result future;false
org.elasticsearch.client.Client;ActionFuture index(IndexRequest request);ActionFuture search(SearchRequest request);@return;;;The result future;false
org.elasticsearch.client.Client;ActionFuture index(IndexRequest request);ActionFuture searchScroll(SearchScrollRequest request);@return;;;The result future;false
org.elasticsearch.client.Client;void index(IndexRequest request, ActionListener listener);IndexRequestBuilder prepareIndex();Free text;;;Index a document associated with a given index and type. <p> The id is optional, if it is not provided, one will be generated automatically. ;false
org.elasticsearch.client.Client;void index(IndexRequest request, ActionListener listener);void update(UpdateRequest request, ActionListener listener);@param;ActionListener<IndexResponse> listener;ActionListener<UpdateResponse> listener;A listener to be notified with a result;true
org.elasticsearch.client.Client;void index(IndexRequest request, ActionListener listener);IndexRequestBuilder prepareIndex(String index, String type);Free text;;;Index a document associated with a given index and type. <p> The id is optional, if it is not provided, one will be generated automatically. ;false
org.elasticsearch.client.Client;void index(IndexRequest request, ActionListener listener);IndexRequestBuilder prepareIndex(String index, String type, String id);Free text;;;Index a document associated with a given index and type. <p> The id is optional, if it is not provided, one will be generated automatically. ;false
org.elasticsearch.client.Client;void index(IndexRequest request, ActionListener listener);void delete(DeleteRequest request, ActionListener listener);@param;ActionListener<IndexResponse> listener;ActionListener<DeleteResponse> listener;A listener to be notified with a result;true
org.elasticsearch.client.Client;void index(IndexRequest request, ActionListener listener);void bulk(BulkRequest request, ActionListener listener);@param;ActionListener<IndexResponse> listener;ActionListener<BulkResponse> listener;A listener to be notified with a result;true
org.elasticsearch.client.Client;void index(IndexRequest request, ActionListener listener);void get(GetRequest request, ActionListener listener);@param;ActionListener<IndexResponse> listener;ActionListener<GetResponse> listener;A listener to be notified with a result;true
org.elasticsearch.client.Client;IndexRequestBuilder prepareIndex();IndexRequestBuilder prepareIndex(String index, String type);Free text;;;Index a document associated with a given index and type. <p> The id is optional, if it is not provided, one will be generated automatically. ;true
org.elasticsearch.client.Client;IndexRequestBuilder prepareIndex();IndexRequestBuilder prepareIndex(String index, String type, String id);Free text;;;Index a document associated with a given index and type. <p> The id is optional, if it is not provided, one will be generated automatically. ;true
org.elasticsearch.client.Client;ActionFuture update(UpdateRequest request);void update(UpdateRequest request, ActionListener listener);Free text;;;Updates a document based on a script. ;true
org.elasticsearch.client.Client;ActionFuture update(UpdateRequest request);void update(UpdateRequest request, ActionListener listener);@param;UpdateRequest request;UpdateRequest request;The update request;true
org.elasticsearch.client.Client;ActionFuture update(UpdateRequest request);UpdateRequestBuilder prepareUpdate();Free text;;;Updates a document based on a script. ;false
org.elasticsearch.client.Client;ActionFuture update(UpdateRequest request);UpdateRequestBuilder prepareUpdate(String index, String type, String id);Free text;;;Updates a document based on a script. ;false
org.elasticsearch.client.Client;ActionFuture update(UpdateRequest request);ActionFuture delete(DeleteRequest request);@return;;;The result future;false
org.elasticsearch.client.Client;ActionFuture update(UpdateRequest request);ActionFuture bulk(BulkRequest request);@return;;;The result future;false
org.elasticsearch.client.Client;ActionFuture update(UpdateRequest request);ActionFuture get(GetRequest request);@return;;;The result future;false
org.elasticsearch.client.Client;ActionFuture update(UpdateRequest request);ActionFuture search(SearchRequest request);@return;;;The result future;false
org.elasticsearch.client.Client;ActionFuture update(UpdateRequest request);ActionFuture searchScroll(SearchScrollRequest request);@return;;;The result future;false
org.elasticsearch.client.Client;void update(UpdateRequest request, ActionListener listener);UpdateRequestBuilder prepareUpdate();Free text;;;Updates a document based on a script. ;false
org.elasticsearch.client.Client;void update(UpdateRequest request, ActionListener listener);UpdateRequestBuilder prepareUpdate(String index, String type, String id);Free text;;;Updates a document based on a script. ;false
org.elasticsearch.client.Client;void update(UpdateRequest request, ActionListener listener);void delete(DeleteRequest request, ActionListener listener);@param;ActionListener<UpdateResponse> listener;ActionListener<DeleteResponse> listener;A listener to be notified with a result;true
org.elasticsearch.client.Client;void update(UpdateRequest request, ActionListener listener);void bulk(BulkRequest request, ActionListener listener);@param;ActionListener<UpdateResponse> listener;ActionListener<BulkResponse> listener;A listener to be notified with a result;true
org.elasticsearch.client.Client;void update(UpdateRequest request, ActionListener listener);void get(GetRequest request, ActionListener listener);@param;ActionListener<UpdateResponse> listener;ActionListener<GetResponse> listener;A listener to be notified with a result;true
org.elasticsearch.client.Client;UpdateRequestBuilder prepareUpdate();UpdateRequestBuilder prepareUpdate(String index, String type, String id);Whole;;;Updates a document based on a script.    ;false
org.elasticsearch.client.Client;IndexRequestBuilder prepareIndex(String index, String type);IndexRequestBuilder prepareIndex(String index, String type, String id);Free text;;;Index a document associated with a given index and type. <p> The id is optional, if it is not provided, one will be generated automatically. ;true
org.elasticsearch.client.Client;IndexRequestBuilder prepareIndex(String index, String type);IndexRequestBuilder prepareIndex(String index, String type, String id);@param;String index;String index;The index to index the document to;true
org.elasticsearch.client.Client;IndexRequestBuilder prepareIndex(String index, String type);IndexRequestBuilder prepareIndex(String index, String type, String id);@param;String type;String type;The type to index the document to;true
org.elasticsearch.client.Client;IndexRequestBuilder prepareIndex(String index, String type, String id);TermVectorsRequestBuilder prepareTermVectors(String index, String type, String id);@param;String id;String id;The id of the document;true
org.elasticsearch.client.Client;IndexRequestBuilder prepareIndex(String index, String type, String id);TermVectorsRequestBuilder prepareTermVector(String index, String type, String id);@param;String id;String id;The id of the document;true
org.elasticsearch.client.Client;ActionFuture delete(DeleteRequest request);void delete(DeleteRequest request, ActionListener listener);Free text;;;Deletes a document from the index based on the index, type and id. ;true
org.elasticsearch.client.Client;ActionFuture delete(DeleteRequest request);void delete(DeleteRequest request, ActionListener listener);@param;DeleteRequest request;DeleteRequest request;The delete request;true
org.elasticsearch.client.Client;ActionFuture delete(DeleteRequest request);DeleteRequestBuilder prepareDelete();Free text;;;Deletes a document from the index based on the index, type and id. ;false
org.elasticsearch.client.Client;ActionFuture delete(DeleteRequest request);DeleteRequestBuilder prepareDelete(String index, String type, String id);Free text;;;Deletes a document from the index based on the index, type and id. ;false
org.elasticsearch.client.Client;ActionFuture delete(DeleteRequest request);ActionFuture bulk(BulkRequest request);@return;;;The result future;false
org.elasticsearch.client.Client;ActionFuture delete(DeleteRequest request);ActionFuture get(GetRequest request);@return;;;The result future;false
org.elasticsearch.client.Client;ActionFuture delete(DeleteRequest request);ActionFuture search(SearchRequest request);@return;;;The result future;false
org.elasticsearch.client.Client;ActionFuture delete(DeleteRequest request);ActionFuture searchScroll(SearchScrollRequest request);@return;;;The result future;false
org.elasticsearch.client.Client;void delete(DeleteRequest request, ActionListener listener);DeleteRequestBuilder prepareDelete();Free text;;;Deletes a document from the index based on the index, type and id. ;false
org.elasticsearch.client.Client;void delete(DeleteRequest request, ActionListener listener);DeleteRequestBuilder prepareDelete(String index, String type, String id);Free text;;;Deletes a document from the index based on the index, type and id. ;false
org.elasticsearch.client.Client;void delete(DeleteRequest request, ActionListener listener);void bulk(BulkRequest request, ActionListener listener);@param;ActionListener<DeleteResponse> listener;ActionListener<BulkResponse> listener;A listener to be notified with a result;true
org.elasticsearch.client.Client;void delete(DeleteRequest request, ActionListener listener);void get(GetRequest request, ActionListener listener);@param;ActionListener<DeleteResponse> listener;ActionListener<GetResponse> listener;A listener to be notified with a result;true
org.elasticsearch.client.Client;DeleteRequestBuilder prepareDelete();DeleteRequestBuilder prepareDelete(String index, String type, String id);Free text;;;Deletes a document from the index based on the index, type and id. ;true
org.elasticsearch.client.Client;ActionFuture bulk(BulkRequest request);void bulk(BulkRequest request, ActionListener listener);Free text;;;Executes a bulk of index / delete operations. ;true
org.elasticsearch.client.Client;ActionFuture bulk(BulkRequest request);void bulk(BulkRequest request, ActionListener listener);@param;BulkRequest request;BulkRequest request;The bulk request;true
org.elasticsearch.client.Client;ActionFuture bulk(BulkRequest request);BulkRequestBuilder prepareBulk();Free text;;;Executes a bulk of index / delete operations. ;false
org.elasticsearch.client.Client;ActionFuture bulk(BulkRequest request);ActionFuture get(GetRequest request);@return;;;The result future;false
org.elasticsearch.client.Client;ActionFuture bulk(BulkRequest request);ActionFuture search(SearchRequest request);@return;;;The result future;false
org.elasticsearch.client.Client;ActionFuture bulk(BulkRequest request);ActionFuture searchScroll(SearchScrollRequest request);@return;;;The result future;false
org.elasticsearch.client.Client;void bulk(BulkRequest request, ActionListener listener);BulkRequestBuilder prepareBulk();Free text;;;Executes a bulk of index / delete operations. ;false
org.elasticsearch.client.Client;void bulk(BulkRequest request, ActionListener listener);void get(GetRequest request, ActionListener listener);@param;ActionListener<BulkResponse> listener;ActionListener<GetResponse> listener;A listener to be notified with a result;true
org.elasticsearch.client.Client;ActionFuture get(GetRequest request);void get(GetRequest request, ActionListener listener);Free text;;;Gets the document that was indexed from an index with a type and id. ;true
org.elasticsearch.client.Client;ActionFuture get(GetRequest request);void get(GetRequest request, ActionListener listener);@param;GetRequest request;GetRequest request;The get request;true
org.elasticsearch.client.Client;ActionFuture get(GetRequest request);GetRequestBuilder prepareGet();Free text;;;Gets the document that was indexed from an index with a type and id. ;false
org.elasticsearch.client.Client;ActionFuture get(GetRequest request);ActionFuture search(SearchRequest request);@return;;;The result future;false
org.elasticsearch.client.Client;ActionFuture get(GetRequest request);ActionFuture searchScroll(SearchScrollRequest request);@return;;;The result future;false
org.elasticsearch.client.Client;void get(GetRequest request, ActionListener listener);GetRequestBuilder prepareGet();Free text;;;Gets the document that was indexed from an index with a type and id. ;false
org.elasticsearch.client.Client;ActionFuture multiGet(MultiGetRequest request);void multiGet(MultiGetRequest request, ActionListener listener);Whole;;;Multi get documents.    ;false
org.elasticsearch.client.Client;ActionFuture multiGet(MultiGetRequest request);MultiGetRequestBuilder prepareMultiGet();Whole;;;Multi get documents.    ;false
org.elasticsearch.client.Client;void multiGet(MultiGetRequest request, ActionListener listener);MultiGetRequestBuilder prepareMultiGet();Whole;;;Multi get documents.    ;false
org.elasticsearch.client.Client;ActionFuture search(SearchRequest request);void search(SearchRequest request, ActionListener listener);Free text;;;Search across one or more indices and one or more types with a query. ;true
org.elasticsearch.client.Client;ActionFuture search(SearchRequest request);void search(SearchRequest request, ActionListener listener);@param;SearchRequest request;SearchRequest request;The search request;true
org.elasticsearch.client.Client;ActionFuture search(SearchRequest request);SearchRequestBuilder prepareSearch(String indices);Free text;;;Search across one or more indices and one or more types with a query. ;false
org.elasticsearch.client.Client;ActionFuture search(SearchRequest request);ActionFuture searchScroll(SearchScrollRequest request);@return;;;The result future;false
org.elasticsearch.client.Client;void search(SearchRequest request, ActionListener listener);SearchRequestBuilder prepareSearch(String indices);Free text;;;Search across one or more indices and one or more types with a query. ;false
org.elasticsearch.client.Client;void search(SearchRequest request, ActionListener listener);void searchScroll(SearchScrollRequest request, ActionListener listener);@param;ActionListener<SearchResponse> listener;ActionListener<SearchResponse> listener;A listener to be notified of the result;true
org.elasticsearch.client.Client;void search(SearchRequest request, ActionListener listener);void explain(ExplainRequest request, ActionListener listener);@param;ActionListener<SearchResponse> listener;ActionListener<ExplainResponse> listener;A listener to be notified of the result;true
org.elasticsearch.client.Client;ActionFuture searchScroll(SearchScrollRequest request);void searchScroll(SearchScrollRequest request, ActionListener listener);Free text;;;A search scroll request to continue searching a previous scrollable search request. ;true
org.elasticsearch.client.Client;ActionFuture searchScroll(SearchScrollRequest request);void searchScroll(SearchScrollRequest request, ActionListener listener);@param;SearchScrollRequest request;SearchScrollRequest request;The search scroll request;true
org.elasticsearch.client.Client;ActionFuture searchScroll(SearchScrollRequest request);SearchScrollRequestBuilder prepareSearchScroll(String scrollId);Free text;;;A search scroll request to continue searching a previous scrollable search request. ;false
org.elasticsearch.client.Client;void searchScroll(SearchScrollRequest request, ActionListener listener);SearchScrollRequestBuilder prepareSearchScroll(String scrollId);Free text;;;A search scroll request to continue searching a previous scrollable search request. ;false
org.elasticsearch.client.Client;void searchScroll(SearchScrollRequest request, ActionListener listener);void explain(ExplainRequest request, ActionListener listener);@param;ActionListener<SearchResponse> listener;ActionListener<ExplainResponse> listener;A listener to be notified of the result;true
org.elasticsearch.client.Client;ActionFuture multiSearch(MultiSearchRequest request);void multiSearch(MultiSearchRequest request, ActionListener listener);Whole;;;Performs multiple search requests.    ;false
org.elasticsearch.client.Client;ActionFuture multiSearch(MultiSearchRequest request);MultiSearchRequestBuilder prepareMultiSearch();Whole;;;Performs multiple search requests.    ;false
org.elasticsearch.client.Client;void multiSearch(MultiSearchRequest request, ActionListener listener);MultiSearchRequestBuilder prepareMultiSearch();Whole;;;Performs multiple search requests.    ;false
org.elasticsearch.client.Client;ActionFuture termVectors(TermVectorsRequest request);void termVectors(TermVectorsRequest request, ActionListener listener);Free text;;;An action that returns the term vectors for a specific document. ;true
org.elasticsearch.client.Client;ActionFuture termVectors(TermVectorsRequest request);void termVectors(TermVectorsRequest request, ActionListener listener);@param;TermVectorsRequest request;TermVectorsRequest request;The term vector request;true
org.elasticsearch.client.Client;ActionFuture termVectors(TermVectorsRequest request);ActionFuture termVector(TermVectorsRequest request);Whole;;;An action that returns the term vectors for a specific document.  @param The term vector request @return The response future ;false
org.elasticsearch.client.Client;ActionFuture termVectors(TermVectorsRequest request);void termVector(TermVectorsRequest request, ActionListener listener);Free text;;;An action that returns the term vectors for a specific document. ;false
org.elasticsearch.client.Client;ActionFuture termVectors(TermVectorsRequest request);void termVector(TermVectorsRequest request, ActionListener listener);@param;TermVectorsRequest request;TermVectorsRequest request;The term vector request;true
org.elasticsearch.client.Client;void termVectors(TermVectorsRequest request, ActionListener listener);ActionFuture termVector(TermVectorsRequest request);Free text;;;An action that returns the term vectors for a specific document. ;false
org.elasticsearch.client.Client;void termVectors(TermVectorsRequest request, ActionListener listener);ActionFuture termVector(TermVectorsRequest request);@param;TermVectorsRequest request;TermVectorsRequest request;The term vector request;true
org.elasticsearch.client.Client;void termVectors(TermVectorsRequest request, ActionListener listener);void termVector(TermVectorsRequest request, ActionListener listener);Whole;;;An action that returns the term vectors for a specific document.  @param The term vector request  ;false
org.elasticsearch.client.Client;TermVectorsRequestBuilder prepareTermVectors();TermVectorsRequestBuilder prepareTermVectors(String index, String type, String id);Free text;;;Builder for the term vector request. ;true
org.elasticsearch.client.Client;TermVectorsRequestBuilder prepareTermVectors();TermVectorsRequestBuilder prepareTermVector();Whole;;;Builder for the term vector request.    ;false
org.elasticsearch.client.Client;TermVectorsRequestBuilder prepareTermVectors();TermVectorsRequestBuilder prepareTermVector(String index, String type, String id);Free text;;;Builder for the term vector request. ;false
org.elasticsearch.client.Client;TermVectorsRequestBuilder prepareTermVectors(String index, String type, String id);TermVectorsRequestBuilder prepareTermVector();Free text;;;Builder for the term vector request. ;false
org.elasticsearch.client.Client;TermVectorsRequestBuilder prepareTermVectors(String index, String type, String id);TermVectorsRequestBuilder prepareTermVector(String index, String type, String id);Whole;;;Builder for the term vector request.  @param The index to load the document from@param The type of the document@param The id of the document  ;false
org.elasticsearch.client.Client;ActionFuture termVector(TermVectorsRequest request);void termVector(TermVectorsRequest request, ActionListener listener);Free text;;;An action that returns the term vectors for a specific document. ;true
org.elasticsearch.client.Client;ActionFuture termVector(TermVectorsRequest request);void termVector(TermVectorsRequest request, ActionListener listener);@param;TermVectorsRequest request;TermVectorsRequest request;The term vector request;true
org.elasticsearch.client.Client;TermVectorsRequestBuilder prepareTermVector();TermVectorsRequestBuilder prepareTermVector(String index, String type, String id);Free text;;;Builder for the term vector request. ;true
org.elasticsearch.client.Client;ActionFuture multiTermVectors(MultiTermVectorsRequest request);void multiTermVectors(MultiTermVectorsRequest request, ActionListener listener);Whole;;;Multi get term vectors.    ;false
org.elasticsearch.client.Client;ActionFuture multiTermVectors(MultiTermVectorsRequest request);MultiTermVectorsRequestBuilder prepareMultiTermVectors();Whole;;;Multi get term vectors.    ;false
org.elasticsearch.client.Client;void multiTermVectors(MultiTermVectorsRequest request, ActionListener listener);MultiTermVectorsRequestBuilder prepareMultiTermVectors();Whole;;;Multi get term vectors.    ;false
org.elasticsearch.client.Client;ExplainRequestBuilder prepareExplain(String index, String type, String id);ActionFuture explain(ExplainRequest request);Free text;;;Computes a score explanation for the specified request. ;false
org.elasticsearch.client.Client;ExplainRequestBuilder prepareExplain(String index, String type, String id);void explain(ExplainRequest request, ActionListener listener);Free text;;;Computes a score explanation for the specified request. ;false
org.elasticsearch.client.Client;ActionFuture explain(ExplainRequest request);void explain(ExplainRequest request, ActionListener listener);Free text;;;Computes a score explanation for the specified request. ;true
org.elasticsearch.client.Client;ActionFuture explain(ExplainRequest request);void explain(ExplainRequest request, ActionListener listener);@param;ExplainRequest request;ExplainRequest request;The request encapsulating the query and document identifier to compute a score explanation for;true
org.elasticsearch.client.Client;ClearScrollRequestBuilder prepareClearScroll();ActionFuture clearScroll(ClearScrollRequest request);Whole;;;Clears the search contexts associated with specified scroll ids.    ;false
org.elasticsearch.client.Client;ClearScrollRequestBuilder prepareClearScroll();void clearScroll(ClearScrollRequest request, ActionListener listener);Whole;;;Clears the search contexts associated with specified scroll ids.    ;false
org.elasticsearch.client.Client;ActionFuture clearScroll(ClearScrollRequest request);void clearScroll(ClearScrollRequest request, ActionListener listener);Whole;;;Clears the search contexts associated with specified scroll ids.    ;false
org.elasticsearch.client.Client;ActionFuture fieldCaps(FieldCapabilitiesRequest request);void fieldCaps(FieldCapabilitiesRequest request, ActionListener listener);Whole;;;An action that returns the field capabilities from the provided request    ;false
org.elasticsearch.client.Requests;DeleteIndexRequest deleteIndexRequest(String index);CloseIndexRequest closeIndexRequest(String index);@return;;;The delete index request;false
org.elasticsearch.client.Requests;DeleteIndexRequest deleteIndexRequest(String index);OpenIndexRequest openIndexRequest(String index);@return;;;The delete index request;false
org.elasticsearch.client.Requests;CloseIndexRequest closeIndexRequest(String index);OpenIndexRequest openIndexRequest(String index);@return;;;The delete index request;false
org.elasticsearch.client.Requests;ClearIndicesCacheRequest clearIndicesCacheRequest(String indices);UpdateSettingsRequest updateSettingsRequest(String indices);@return;;;The request;false
org.elasticsearch.client.Requests;ClusterSearchShardsRequest clusterSearchShardsRequest();ClusterSearchShardsRequest clusterSearchShardsRequest(String indices);Whole;;;List all shards for the give search    ;false
org.elasticsearch.client.Requests;NodesInfoRequest nodesInfoRequest();NodesInfoRequest nodesInfoRequest(String nodesIds);@return;;;The nodes info request;true
org.elasticsearch.client.Requests;NodesInfoRequest nodesInfoRequest();NodesStatsRequest nodesStatsRequest(String nodesIds);@return;;;The nodes info request;false
org.elasticsearch.client.Requests;NodesInfoRequest nodesInfoRequest(String nodesIds);NodesStatsRequest nodesStatsRequest(String nodesIds);@return;;;The nodes info request;false
org.elasticsearch.client.Requests;ListTasksRequest listTasksRequest();GetTaskRequest getTaskRequest();@return;;;The nodes tasks request;false
org.elasticsearch.client.Requests;ListTasksRequest listTasksRequest();CancelTasksRequest cancelTasksRequest();@return;;;The nodes tasks request;false
org.elasticsearch.client.Requests;GetTaskRequest getTaskRequest();CancelTasksRequest cancelTasksRequest();@return;;;The nodes tasks request;false
org.elasticsearch.client.Requests;PutRepositoryRequest putRepositoryRequest(String name);DeleteRepositoryRequest deleteRepositoryRequest(String name);@param;String name;String name;repository name;true
org.elasticsearch.client.Requests;PutRepositoryRequest putRepositoryRequest(String name);VerifyRepositoryRequest verifyRepositoryRequest(String name);@param;String name;String name;repository name;true
org.elasticsearch.client.Requests;PutRepositoryRequest putRepositoryRequest(String name);CreateSnapshotRequest createSnapshotRequest(String repository, String snapshot);@param;String name;String repository;repository name;false
org.elasticsearch.client.Requests;PutRepositoryRequest putRepositoryRequest(String name);GetSnapshotsRequest getSnapshotsRequest(String repository);@param;String name;String repository;repository name;false
org.elasticsearch.client.Requests;PutRepositoryRequest putRepositoryRequest(String name);RestoreSnapshotRequest restoreSnapshotRequest(String repository, String snapshot);@param;String name;String repository;repository name;false
org.elasticsearch.client.Requests;PutRepositoryRequest putRepositoryRequest(String name);DeleteSnapshotRequest deleteSnapshotRequest(String repository, String snapshot);@param;String name;String repository;repository name;false
org.elasticsearch.client.Requests;PutRepositoryRequest putRepositoryRequest(String name);SnapshotsStatusRequest snapshotsStatusRequest(String repository);@param;String name;String repository;repository name;false
org.elasticsearch.client.Requests;DeleteRepositoryRequest deleteRepositoryRequest(String name);VerifyRepositoryRequest verifyRepositoryRequest(String name);@param;String name;String name;repository name;true
org.elasticsearch.client.Requests;DeleteRepositoryRequest deleteRepositoryRequest(String name);CreateSnapshotRequest createSnapshotRequest(String repository, String snapshot);@param;String name;String repository;repository name;false
org.elasticsearch.client.Requests;DeleteRepositoryRequest deleteRepositoryRequest(String name);GetSnapshotsRequest getSnapshotsRequest(String repository);@param;String name;String repository;repository name;false
org.elasticsearch.client.Requests;DeleteRepositoryRequest deleteRepositoryRequest(String name);RestoreSnapshotRequest restoreSnapshotRequest(String repository, String snapshot);@param;String name;String repository;repository name;false
org.elasticsearch.client.Requests;DeleteRepositoryRequest deleteRepositoryRequest(String name);DeleteSnapshotRequest deleteSnapshotRequest(String repository, String snapshot);@param;String name;String repository;repository name;false
org.elasticsearch.client.Requests;DeleteRepositoryRequest deleteRepositoryRequest(String name);SnapshotsStatusRequest snapshotsStatusRequest(String repository);@param;String name;String repository;repository name;false
org.elasticsearch.client.Requests;VerifyRepositoryRequest verifyRepositoryRequest(String name);CreateSnapshotRequest createSnapshotRequest(String repository, String snapshot);@param;String name;String repository;repository name;false
org.elasticsearch.client.Requests;VerifyRepositoryRequest verifyRepositoryRequest(String name);GetSnapshotsRequest getSnapshotsRequest(String repository);@param;String name;String repository;repository name;false
org.elasticsearch.client.Requests;VerifyRepositoryRequest verifyRepositoryRequest(String name);RestoreSnapshotRequest restoreSnapshotRequest(String repository, String snapshot);@param;String name;String repository;repository name;false
org.elasticsearch.client.Requests;VerifyRepositoryRequest verifyRepositoryRequest(String name);DeleteSnapshotRequest deleteSnapshotRequest(String repository, String snapshot);@param;String name;String repository;repository name;false
org.elasticsearch.client.Requests;VerifyRepositoryRequest verifyRepositoryRequest(String name);SnapshotsStatusRequest snapshotsStatusRequest(String repository);@param;String name;String repository;repository name;false
org.elasticsearch.client.Requests;CreateSnapshotRequest createSnapshotRequest(String repository, String snapshot);GetSnapshotsRequest getSnapshotsRequest(String repository);@param;String repository;String repository;repository name;true
org.elasticsearch.client.Requests;CreateSnapshotRequest createSnapshotRequest(String repository, String snapshot);RestoreSnapshotRequest restoreSnapshotRequest(String repository, String snapshot);@param;String repository;String repository;repository name;true
org.elasticsearch.client.Requests;CreateSnapshotRequest createSnapshotRequest(String repository, String snapshot);RestoreSnapshotRequest restoreSnapshotRequest(String repository, String snapshot);@param;String snapshot;String snapshot;snapshot name;true
org.elasticsearch.client.Requests;CreateSnapshotRequest createSnapshotRequest(String repository, String snapshot);DeleteSnapshotRequest deleteSnapshotRequest(String repository, String snapshot);@param;String repository;String repository;repository name;true
org.elasticsearch.client.Requests;CreateSnapshotRequest createSnapshotRequest(String repository, String snapshot);DeleteSnapshotRequest deleteSnapshotRequest(String repository, String snapshot);@param;String snapshot;String snapshot;snapshot name;true
org.elasticsearch.client.Requests;CreateSnapshotRequest createSnapshotRequest(String repository, String snapshot);SnapshotsStatusRequest snapshotsStatusRequest(String repository);@param;String repository;String repository;repository name;true
org.elasticsearch.client.Requests;GetSnapshotsRequest getSnapshotsRequest(String repository);RestoreSnapshotRequest restoreSnapshotRequest(String repository, String snapshot);@param;String repository;String repository;repository name;true
org.elasticsearch.client.Requests;GetSnapshotsRequest getSnapshotsRequest(String repository);DeleteSnapshotRequest deleteSnapshotRequest(String repository, String snapshot);@param;String repository;String repository;repository name;true
org.elasticsearch.client.Requests;GetSnapshotsRequest getSnapshotsRequest(String repository);SnapshotsStatusRequest snapshotsStatusRequest(String repository);@param;String repository;String repository;repository name;true
org.elasticsearch.client.Requests;RestoreSnapshotRequest restoreSnapshotRequest(String repository, String snapshot);DeleteSnapshotRequest deleteSnapshotRequest(String repository, String snapshot);@param;String repository;String repository;repository name;true
org.elasticsearch.client.Requests;RestoreSnapshotRequest restoreSnapshotRequest(String repository, String snapshot);DeleteSnapshotRequest deleteSnapshotRequest(String repository, String snapshot);@param;String snapshot;String snapshot;snapshot name;true
org.elasticsearch.client.Requests;RestoreSnapshotRequest restoreSnapshotRequest(String repository, String snapshot);SnapshotsStatusRequest snapshotsStatusRequest(String repository);@param;String repository;String repository;repository name;true
org.elasticsearch.client.Requests;DeleteSnapshotRequest deleteSnapshotRequest(String repository, String snapshot);SnapshotsStatusRequest snapshotsStatusRequest(String repository);@param;String repository;String repository;repository name;true
org.elasticsearch.client.ClusterAdminClient;ActionFuture health(ClusterHealthRequest request);void health(ClusterHealthRequest request, ActionListener listener);Free text;;;The health of the cluster. ;true
org.elasticsearch.client.ClusterAdminClient;ActionFuture health(ClusterHealthRequest request);void health(ClusterHealthRequest request, ActionListener listener);@param;ClusterHealthRequest request;ClusterHealthRequest request;The cluster state request;true
org.elasticsearch.client.ClusterAdminClient;ActionFuture health(ClusterHealthRequest request);ClusterHealthRequestBuilder prepareHealth(String indices);Free text;;;The health of the cluster. ;false
org.elasticsearch.client.ClusterAdminClient;ActionFuture health(ClusterHealthRequest request);ActionFuture state(ClusterStateRequest request);@return;;;The result future;false
org.elasticsearch.client.ClusterAdminClient;ActionFuture health(ClusterHealthRequest request);ActionFuture nodesInfo(NodesInfoRequest request);@return;;;The result future;false
org.elasticsearch.client.ClusterAdminClient;ActionFuture health(ClusterHealthRequest request);ActionFuture clusterStats(ClusterStatsRequest request);@return;;;The result future;false
org.elasticsearch.client.ClusterAdminClient;ActionFuture health(ClusterHealthRequest request);ActionFuture nodesStats(NodesStatsRequest request);@return;;;The result future;false
org.elasticsearch.client.ClusterAdminClient;ActionFuture health(ClusterHealthRequest request);ActionFuture nodesUsage(NodesUsageRequest request);@return;;;The result future;false
org.elasticsearch.client.ClusterAdminClient;ActionFuture health(ClusterHealthRequest request);ActionFuture listTasks(ListTasksRequest request);@return;;;The result future;false
org.elasticsearch.client.ClusterAdminClient;ActionFuture health(ClusterHealthRequest request);ActionFuture cancelTasks(CancelTasksRequest request);@return;;;The result future;false
org.elasticsearch.client.ClusterAdminClient;void health(ClusterHealthRequest request, ActionListener listener);ClusterHealthRequestBuilder prepareHealth(String indices);Free text;;;The health of the cluster. ;false
org.elasticsearch.client.ClusterAdminClient;void health(ClusterHealthRequest request, ActionListener listener);void state(ClusterStateRequest request, ActionListener listener);@param;ActionListener<ClusterHealthResponse> listener;ActionListener<ClusterStateResponse> listener;A listener to be notified with a result;true
org.elasticsearch.client.ClusterAdminClient;void health(ClusterHealthRequest request, ActionListener listener);void nodesInfo(NodesInfoRequest request, ActionListener listener);@param;ActionListener<ClusterHealthResponse> listener;ActionListener<NodesInfoResponse> listener;A listener to be notified with a result;true
org.elasticsearch.client.ClusterAdminClient;void health(ClusterHealthRequest request, ActionListener listener);void clusterStats(ClusterStatsRequest request, ActionListener listener);@param;ActionListener<ClusterHealthResponse> listener;ActionListener<ClusterStatsResponse> listener;A listener to be notified with a result;true
org.elasticsearch.client.ClusterAdminClient;void health(ClusterHealthRequest request, ActionListener listener);void nodesStats(NodesStatsRequest request, ActionListener listener);@param;ActionListener<ClusterHealthResponse> listener;ActionListener<NodesStatsResponse> listener;A listener to be notified with a result;true
org.elasticsearch.client.ClusterAdminClient;void health(ClusterHealthRequest request, ActionListener listener);void nodesUsage(NodesUsageRequest request, ActionListener listener);@param;ActionListener<ClusterHealthResponse> listener;ActionListener<NodesUsageResponse> listener;A listener to be notified with a result;true
org.elasticsearch.client.ClusterAdminClient;void health(ClusterHealthRequest request, ActionListener listener);void listTasks(ListTasksRequest request, ActionListener listener);@param;ActionListener<ClusterHealthResponse> listener;ActionListener<ListTasksResponse> listener;A listener to be notified with a result;true
org.elasticsearch.client.ClusterAdminClient;void health(ClusterHealthRequest request, ActionListener listener);void cancelTasks(CancelTasksRequest request, ActionListener listener);@param;ActionListener<ClusterHealthResponse> listener;ActionListener<CancelTasksResponse> listener;A listener to be notified with a result;true
org.elasticsearch.client.ClusterAdminClient;ActionFuture state(ClusterStateRequest request);void state(ClusterStateRequest request, ActionListener listener);Free text;;;The state of the cluster. ;true
org.elasticsearch.client.ClusterAdminClient;ActionFuture state(ClusterStateRequest request);void state(ClusterStateRequest request, ActionListener listener);@param;ClusterStateRequest request;ClusterStateRequest request;The cluster state request.;true
org.elasticsearch.client.ClusterAdminClient;ActionFuture state(ClusterStateRequest request);ClusterStateRequestBuilder prepareState();Free text;;;The state of the cluster. ;false
org.elasticsearch.client.ClusterAdminClient;ActionFuture state(ClusterStateRequest request);ActionFuture nodesInfo(NodesInfoRequest request);@return;;;The result future;false
org.elasticsearch.client.ClusterAdminClient;ActionFuture state(ClusterStateRequest request);ActionFuture clusterStats(ClusterStatsRequest request);@return;;;The result future;false
org.elasticsearch.client.ClusterAdminClient;ActionFuture state(ClusterStateRequest request);ActionFuture nodesStats(NodesStatsRequest request);@return;;;The result future;false
org.elasticsearch.client.ClusterAdminClient;ActionFuture state(ClusterStateRequest request);ActionFuture nodesUsage(NodesUsageRequest request);@return;;;The result future;false
org.elasticsearch.client.ClusterAdminClient;ActionFuture state(ClusterStateRequest request);ActionFuture listTasks(ListTasksRequest request);@return;;;The result future;false
org.elasticsearch.client.ClusterAdminClient;ActionFuture state(ClusterStateRequest request);ActionFuture cancelTasks(CancelTasksRequest request);@return;;;The result future;false
org.elasticsearch.client.ClusterAdminClient;void state(ClusterStateRequest request, ActionListener listener);ClusterStateRequestBuilder prepareState();Free text;;;The state of the cluster. ;false
org.elasticsearch.client.ClusterAdminClient;void state(ClusterStateRequest request, ActionListener listener);void nodesInfo(NodesInfoRequest request, ActionListener listener);@param;ActionListener<ClusterStateResponse> listener;ActionListener<NodesInfoResponse> listener;A listener to be notified with a result;true
org.elasticsearch.client.ClusterAdminClient;void state(ClusterStateRequest request, ActionListener listener);void clusterStats(ClusterStatsRequest request, ActionListener listener);@param;ActionListener<ClusterStateResponse> listener;ActionListener<ClusterStatsResponse> listener;A listener to be notified with a result;true
org.elasticsearch.client.ClusterAdminClient;void state(ClusterStateRequest request, ActionListener listener);void nodesStats(NodesStatsRequest request, ActionListener listener);@param;ActionListener<ClusterStateResponse> listener;ActionListener<NodesStatsResponse> listener;A listener to be notified with a result;true
org.elasticsearch.client.ClusterAdminClient;void state(ClusterStateRequest request, ActionListener listener);void nodesUsage(NodesUsageRequest request, ActionListener listener);@param;ActionListener<ClusterStateResponse> listener;ActionListener<NodesUsageResponse> listener;A listener to be notified with a result;true
org.elasticsearch.client.ClusterAdminClient;void state(ClusterStateRequest request, ActionListener listener);void listTasks(ListTasksRequest request, ActionListener listener);@param;ActionListener<ClusterStateResponse> listener;ActionListener<ListTasksResponse> listener;A listener to be notified with a result;true
org.elasticsearch.client.ClusterAdminClient;void state(ClusterStateRequest request, ActionListener listener);void cancelTasks(CancelTasksRequest request, ActionListener listener);@param;ActionListener<ClusterStateResponse> listener;ActionListener<CancelTasksResponse> listener;A listener to be notified with a result;true
org.elasticsearch.client.ClusterAdminClient;void updateSettings(ClusterUpdateSettingsRequest request, ActionListener listener);ClusterUpdateSettingsRequestBuilder prepareUpdateSettings();Whole;;;Update settings in the cluster.    ;false
org.elasticsearch.client.ClusterAdminClient;void updateSettings(ClusterUpdateSettingsRequest request, ActionListener listener);ClusterRerouteRequestBuilder prepareReroute();Whole;;;Update settings in the cluster.    ;false
org.elasticsearch.client.ClusterAdminClient;ClusterUpdateSettingsRequestBuilder prepareUpdateSettings();ClusterRerouteRequestBuilder prepareReroute();Whole;;;Update settings in the cluster.    ;false
org.elasticsearch.client.ClusterAdminClient;ActionFuture reroute(ClusterRerouteRequest request);void reroute(ClusterRerouteRequest request, ActionListener listener);Whole;;;Reroutes allocation of shards. Advance API.    ;false
org.elasticsearch.client.ClusterAdminClient;ActionFuture nodesInfo(NodesInfoRequest request);void nodesInfo(NodesInfoRequest request, ActionListener listener);Free text;;;Nodes info of the cluster. ;true
org.elasticsearch.client.ClusterAdminClient;ActionFuture nodesInfo(NodesInfoRequest request);void nodesInfo(NodesInfoRequest request, ActionListener listener);@param;NodesInfoRequest request;NodesInfoRequest request;The nodes info request;true
org.elasticsearch.client.ClusterAdminClient;ActionFuture nodesInfo(NodesInfoRequest request);NodesInfoRequestBuilder prepareNodesInfo(String nodesIds);Free text;;;Nodes info of the cluster. ;false
org.elasticsearch.client.ClusterAdminClient;ActionFuture nodesInfo(NodesInfoRequest request);ActionFuture clusterStats(ClusterStatsRequest request);@return;;;The result future;false
org.elasticsearch.client.ClusterAdminClient;ActionFuture nodesInfo(NodesInfoRequest request);ActionFuture nodesStats(NodesStatsRequest request);@return;;;The result future;false
org.elasticsearch.client.ClusterAdminClient;ActionFuture nodesInfo(NodesInfoRequest request);void nodesStats(NodesStatsRequest request, ActionListener listener);@param;NodesInfoRequest request;NodesStatsRequest request;The nodes info request;true
org.elasticsearch.client.ClusterAdminClient;ActionFuture nodesInfo(NodesInfoRequest request);ActionFuture nodesUsage(NodesUsageRequest request);@return;;;The result future;false
org.elasticsearch.client.ClusterAdminClient;ActionFuture nodesInfo(NodesInfoRequest request);ActionFuture listTasks(ListTasksRequest request);@return;;;The result future;false
org.elasticsearch.client.ClusterAdminClient;ActionFuture nodesInfo(NodesInfoRequest request);ActionFuture cancelTasks(CancelTasksRequest request);@return;;;The result future;false
org.elasticsearch.client.ClusterAdminClient;void nodesInfo(NodesInfoRequest request, ActionListener listener);NodesInfoRequestBuilder prepareNodesInfo(String nodesIds);Free text;;;Nodes info of the cluster. ;false
org.elasticsearch.client.ClusterAdminClient;void nodesInfo(NodesInfoRequest request, ActionListener listener);void clusterStats(ClusterStatsRequest request, ActionListener listener);@param;ActionListener<NodesInfoResponse> listener;ActionListener<ClusterStatsResponse> listener;A listener to be notified with a result;true
org.elasticsearch.client.ClusterAdminClient;void nodesInfo(NodesInfoRequest request, ActionListener listener);void nodesStats(NodesStatsRequest request, ActionListener listener);@param;NodesInfoRequest request;NodesStatsRequest request;The nodes info request;true
org.elasticsearch.client.ClusterAdminClient;void nodesInfo(NodesInfoRequest request, ActionListener listener);void nodesStats(NodesStatsRequest request, ActionListener listener);@param;ActionListener<NodesInfoResponse> listener;ActionListener<NodesStatsResponse> listener;A listener to be notified with a result;true
org.elasticsearch.client.ClusterAdminClient;void nodesInfo(NodesInfoRequest request, ActionListener listener);void nodesUsage(NodesUsageRequest request, ActionListener listener);@param;ActionListener<NodesInfoResponse> listener;ActionListener<NodesUsageResponse> listener;A listener to be notified with a result;true
org.elasticsearch.client.ClusterAdminClient;void nodesInfo(NodesInfoRequest request, ActionListener listener);void listTasks(ListTasksRequest request, ActionListener listener);@param;ActionListener<NodesInfoResponse> listener;ActionListener<ListTasksResponse> listener;A listener to be notified with a result;true
org.elasticsearch.client.ClusterAdminClient;void nodesInfo(NodesInfoRequest request, ActionListener listener);void cancelTasks(CancelTasksRequest request, ActionListener listener);@param;ActionListener<NodesInfoResponse> listener;ActionListener<CancelTasksResponse> listener;A listener to be notified with a result;true
org.elasticsearch.client.ClusterAdminClient;ActionFuture clusterStats(ClusterStatsRequest request);void clusterStats(ClusterStatsRequest request, ActionListener listener);@param;ClusterStatsRequest request;ClusterStatsRequest request;The cluster stats request;true
org.elasticsearch.client.ClusterAdminClient;ActionFuture clusterStats(ClusterStatsRequest request);ActionFuture nodesStats(NodesStatsRequest request);@return;;;The result future;false
org.elasticsearch.client.ClusterAdminClient;ActionFuture clusterStats(ClusterStatsRequest request);ActionFuture nodesUsage(NodesUsageRequest request);@return;;;The result future;false
org.elasticsearch.client.ClusterAdminClient;ActionFuture clusterStats(ClusterStatsRequest request);ActionFuture listTasks(ListTasksRequest request);@return;;;The result future;false
org.elasticsearch.client.ClusterAdminClient;ActionFuture clusterStats(ClusterStatsRequest request);ActionFuture cancelTasks(CancelTasksRequest request);@return;;;The result future;false
org.elasticsearch.client.ClusterAdminClient;void clusterStats(ClusterStatsRequest request, ActionListener listener);void nodesStats(NodesStatsRequest request, ActionListener listener);@param;ActionListener<ClusterStatsResponse> listener;ActionListener<NodesStatsResponse> listener;A listener to be notified with a result;true
org.elasticsearch.client.ClusterAdminClient;void clusterStats(ClusterStatsRequest request, ActionListener listener);void nodesUsage(NodesUsageRequest request, ActionListener listener);@param;ActionListener<ClusterStatsResponse> listener;ActionListener<NodesUsageResponse> listener;A listener to be notified with a result;true
org.elasticsearch.client.ClusterAdminClient;void clusterStats(ClusterStatsRequest request, ActionListener listener);void listTasks(ListTasksRequest request, ActionListener listener);@param;ActionListener<ClusterStatsResponse> listener;ActionListener<ListTasksResponse> listener;A listener to be notified with a result;true
org.elasticsearch.client.ClusterAdminClient;void clusterStats(ClusterStatsRequest request, ActionListener listener);void cancelTasks(CancelTasksRequest request, ActionListener listener);@param;ActionListener<ClusterStatsResponse> listener;ActionListener<CancelTasksResponse> listener;A listener to be notified with a result;true
org.elasticsearch.client.ClusterAdminClient;ActionFuture nodesStats(NodesStatsRequest request);void nodesStats(NodesStatsRequest request, ActionListener listener);Free text;;;Nodes stats of the cluster. ;true
org.elasticsearch.client.ClusterAdminClient;ActionFuture nodesStats(NodesStatsRequest request);NodesStatsRequestBuilder prepareNodesStats(String nodesIds);Free text;;;Nodes stats of the cluster. ;false
org.elasticsearch.client.ClusterAdminClient;ActionFuture nodesStats(NodesStatsRequest request);ActionFuture nodesUsage(NodesUsageRequest request);@return;;;The result future;false
org.elasticsearch.client.ClusterAdminClient;ActionFuture nodesStats(NodesStatsRequest request);ActionFuture listTasks(ListTasksRequest request);@return;;;The result future;false
org.elasticsearch.client.ClusterAdminClient;ActionFuture nodesStats(NodesStatsRequest request);ActionFuture cancelTasks(CancelTasksRequest request);@return;;;The result future;false
org.elasticsearch.client.ClusterAdminClient;void nodesStats(NodesStatsRequest request, ActionListener listener);NodesStatsRequestBuilder prepareNodesStats(String nodesIds);Free text;;;Nodes stats of the cluster. ;false
org.elasticsearch.client.ClusterAdminClient;void nodesStats(NodesStatsRequest request, ActionListener listener);void nodesUsage(NodesUsageRequest request, ActionListener listener);@param;ActionListener<NodesStatsResponse> listener;ActionListener<NodesUsageResponse> listener;A listener to be notified with a result;true
org.elasticsearch.client.ClusterAdminClient;void nodesStats(NodesStatsRequest request, ActionListener listener);void listTasks(ListTasksRequest request, ActionListener listener);@param;ActionListener<NodesStatsResponse> listener;ActionListener<ListTasksResponse> listener;A listener to be notified with a result;true
org.elasticsearch.client.ClusterAdminClient;void nodesStats(NodesStatsRequest request, ActionListener listener);void cancelTasks(CancelTasksRequest request, ActionListener listener);@param;ActionListener<NodesStatsResponse> listener;ActionListener<CancelTasksResponse> listener;A listener to be notified with a result;true
org.elasticsearch.client.ClusterAdminClient;ActionFuture nodesUsage(NodesUsageRequest request);void nodesUsage(NodesUsageRequest request, ActionListener listener);@param;NodesUsageRequest request;NodesUsageRequest request;The nodes usage request;true
org.elasticsearch.client.ClusterAdminClient;ActionFuture nodesUsage(NodesUsageRequest request);ActionFuture listTasks(ListTasksRequest request);@return;;;The result future;false
org.elasticsearch.client.ClusterAdminClient;ActionFuture nodesUsage(NodesUsageRequest request);ActionFuture cancelTasks(CancelTasksRequest request);@return;;;The result future;false
org.elasticsearch.client.ClusterAdminClient;void nodesUsage(NodesUsageRequest request, ActionListener listener);NodesUsageRequestBuilder prepareNodesUsage(String nodesIds);Free text;;;Nodes usage of the cluster. ;false
org.elasticsearch.client.ClusterAdminClient;void nodesUsage(NodesUsageRequest request, ActionListener listener);void listTasks(ListTasksRequest request, ActionListener listener);@param;ActionListener<NodesUsageResponse> listener;ActionListener<ListTasksResponse> listener;A listener to be notified with a result;true
org.elasticsearch.client.ClusterAdminClient;void nodesUsage(NodesUsageRequest request, ActionListener listener);void cancelTasks(CancelTasksRequest request, ActionListener listener);@param;ActionListener<NodesUsageResponse> listener;ActionListener<CancelTasksResponse> listener;A listener to be notified with a result;true
org.elasticsearch.client.ClusterAdminClient;ActionFuture nodesHotThreads(NodesHotThreadsRequest request);void nodesHotThreads(NodesHotThreadsRequest request, ActionListener listener);Whole;;;Returns top N hot-threads samples per node. The hot-threads are only sampled for the node ids specified in the request.    ;false
org.elasticsearch.client.ClusterAdminClient;ActionFuture listTasks(ListTasksRequest request);void listTasks(ListTasksRequest request, ActionListener listener);@param;ListTasksRequest request;ListTasksRequest request;The nodes tasks request;true
org.elasticsearch.client.ClusterAdminClient;ActionFuture listTasks(ListTasksRequest request);ActionFuture cancelTasks(CancelTasksRequest request);@return;;;The result future;false
org.elasticsearch.client.ClusterAdminClient;ActionFuture listTasks(ListTasksRequest request);ActionFuture cancelTasks(CancelTasksRequest request);@param;ListTasksRequest request;CancelTasksRequest request;The nodes tasks request;true
org.elasticsearch.client.ClusterAdminClient;ActionFuture listTasks(ListTasksRequest request);void cancelTasks(CancelTasksRequest request, ActionListener listener);@param;ListTasksRequest request;CancelTasksRequest request;The nodes tasks request;true
org.elasticsearch.client.ClusterAdminClient;void listTasks(ListTasksRequest request, ActionListener listener);ListTasksRequestBuilder prepareListTasks(String nodesIds);Free text;;;List active tasks ;false
org.elasticsearch.client.ClusterAdminClient;void listTasks(ListTasksRequest request, ActionListener listener);ActionFuture cancelTasks(CancelTasksRequest request);@param;ListTasksRequest request;CancelTasksRequest request;The nodes tasks request;true
org.elasticsearch.client.ClusterAdminClient;void listTasks(ListTasksRequest request, ActionListener listener);void cancelTasks(CancelTasksRequest request, ActionListener listener);@param;ListTasksRequest request;CancelTasksRequest request;The nodes tasks request;true
org.elasticsearch.client.ClusterAdminClient;void listTasks(ListTasksRequest request, ActionListener listener);void cancelTasks(CancelTasksRequest request, ActionListener listener);@param;ActionListener<ListTasksResponse> listener;ActionListener<CancelTasksResponse> listener;A listener to be notified with a result;true
org.elasticsearch.client.ClusterAdminClient;ActionFuture getTask(GetTaskRequest request);void getTask(GetTaskRequest request, ActionListener listener);Free text;;;Get a task. ;true
org.elasticsearch.client.ClusterAdminClient;ActionFuture getTask(GetTaskRequest request);void getTask(GetTaskRequest request, ActionListener listener);@param;GetTaskRequest request;GetTaskRequest request;the request;true
org.elasticsearch.client.ClusterAdminClient;GetTaskRequestBuilder prepareGetTask(String taskId);GetTaskRequestBuilder prepareGetTask(TaskId taskId);Whole;;;Fetch a task by id.    ;false
org.elasticsearch.client.ClusterAdminClient;ActionFuture cancelTasks(CancelTasksRequest request);void cancelTasks(CancelTasksRequest request, ActionListener listener);@param;CancelTasksRequest request;CancelTasksRequest request;The nodes tasks request;true
org.elasticsearch.client.ClusterAdminClient;void cancelTasks(CancelTasksRequest request, ActionListener listener);CancelTasksRequestBuilder prepareCancelTasks(String nodesIds);Free text;;;Cancel active tasks ;false
org.elasticsearch.client.ClusterAdminClient;ActionFuture searchShards(ClusterSearchShardsRequest request);void searchShards(ClusterSearchShardsRequest request, ActionListener listener);Whole;;;Returns list of shards the given search would be executed on.    ;false
org.elasticsearch.client.ClusterAdminClient;ActionFuture searchShards(ClusterSearchShardsRequest request);ClusterSearchShardsRequestBuilder prepareSearchShards();Whole;;;Returns list of shards the given search would be executed on.    ;false
org.elasticsearch.client.ClusterAdminClient;ActionFuture searchShards(ClusterSearchShardsRequest request);ClusterSearchShardsRequestBuilder prepareSearchShards(String indices);Whole;;;Returns list of shards the given search would be executed on.    ;false
org.elasticsearch.client.ClusterAdminClient;void searchShards(ClusterSearchShardsRequest request, ActionListener listener);ClusterSearchShardsRequestBuilder prepareSearchShards();Whole;;;Returns list of shards the given search would be executed on.    ;false
org.elasticsearch.client.ClusterAdminClient;void searchShards(ClusterSearchShardsRequest request, ActionListener listener);ClusterSearchShardsRequestBuilder prepareSearchShards(String indices);Whole;;;Returns list of shards the given search would be executed on.    ;false
org.elasticsearch.client.ClusterAdminClient;ClusterSearchShardsRequestBuilder prepareSearchShards();ClusterSearchShardsRequestBuilder prepareSearchShards(String indices);Whole;;;Returns list of shards the given search would be executed on.    ;false
org.elasticsearch.client.ClusterAdminClient;ActionFuture putRepository(PutRepositoryRequest request);void putRepository(PutRepositoryRequest request, ActionListener listener);Whole;;;Registers a snapshot repository.    ;false
org.elasticsearch.client.ClusterAdminClient;ActionFuture putRepository(PutRepositoryRequest request);PutRepositoryRequestBuilder preparePutRepository(String name);Whole;;;Registers a snapshot repository.    ;false
org.elasticsearch.client.ClusterAdminClient;void putRepository(PutRepositoryRequest request, ActionListener listener);PutRepositoryRequestBuilder preparePutRepository(String name);Whole;;;Registers a snapshot repository.    ;false
org.elasticsearch.client.ClusterAdminClient;ActionFuture deleteRepository(DeleteRepositoryRequest request);void deleteRepository(DeleteRepositoryRequest request, ActionListener listener);Whole;;;Unregisters a repository.    ;false
org.elasticsearch.client.ClusterAdminClient;ActionFuture deleteRepository(DeleteRepositoryRequest request);DeleteRepositoryRequestBuilder prepareDeleteRepository(String name);Whole;;;Unregisters a repository.    ;false
org.elasticsearch.client.ClusterAdminClient;void deleteRepository(DeleteRepositoryRequest request, ActionListener listener);DeleteRepositoryRequestBuilder prepareDeleteRepository(String name);Whole;;;Unregisters a repository.    ;false
org.elasticsearch.client.ClusterAdminClient;ActionFuture getRepositories(GetRepositoriesRequest request);void getRepositories(GetRepositoriesRequest request, ActionListener listener);Whole;;;Gets repositories.    ;false
org.elasticsearch.client.ClusterAdminClient;ActionFuture getRepositories(GetRepositoriesRequest request);GetRepositoriesRequestBuilder prepareGetRepositories(String name);Whole;;;Gets repositories.    ;false
org.elasticsearch.client.ClusterAdminClient;void getRepositories(GetRepositoriesRequest request, ActionListener listener);GetRepositoriesRequestBuilder prepareGetRepositories(String name);Whole;;;Gets repositories.    ;false
org.elasticsearch.client.ClusterAdminClient;ActionFuture verifyRepository(VerifyRepositoryRequest request);void verifyRepository(VerifyRepositoryRequest request, ActionListener listener);Whole;;;Verifies a repository.    ;false
org.elasticsearch.client.ClusterAdminClient;ActionFuture verifyRepository(VerifyRepositoryRequest request);VerifyRepositoryRequestBuilder prepareVerifyRepository(String name);Whole;;;Verifies a repository.    ;false
org.elasticsearch.client.ClusterAdminClient;void verifyRepository(VerifyRepositoryRequest request, ActionListener listener);VerifyRepositoryRequestBuilder prepareVerifyRepository(String name);Whole;;;Verifies a repository.    ;false
org.elasticsearch.client.ClusterAdminClient;ActionFuture createSnapshot(CreateSnapshotRequest request);void createSnapshot(CreateSnapshotRequest request, ActionListener listener);Whole;;;Creates a new snapshot.    ;false
org.elasticsearch.client.ClusterAdminClient;ActionFuture createSnapshot(CreateSnapshotRequest request);CreateSnapshotRequestBuilder prepareCreateSnapshot(String repository, String name);Whole;;;Creates a new snapshot.    ;false
org.elasticsearch.client.ClusterAdminClient;void createSnapshot(CreateSnapshotRequest request, ActionListener listener);CreateSnapshotRequestBuilder prepareCreateSnapshot(String repository, String name);Whole;;;Creates a new snapshot.    ;false
org.elasticsearch.client.ClusterAdminClient;ActionFuture getSnapshots(GetSnapshotsRequest request);void getSnapshots(GetSnapshotsRequest request, ActionListener listener);Whole;;;Get snapshot.    ;false
org.elasticsearch.client.ClusterAdminClient;ActionFuture getSnapshots(GetSnapshotsRequest request);GetSnapshotsRequestBuilder prepareGetSnapshots(String repository);Whole;;;Get snapshot.    ;false
org.elasticsearch.client.ClusterAdminClient;void getSnapshots(GetSnapshotsRequest request, ActionListener listener);GetSnapshotsRequestBuilder prepareGetSnapshots(String repository);Whole;;;Get snapshot.    ;false
org.elasticsearch.client.ClusterAdminClient;ActionFuture deleteSnapshot(DeleteSnapshotRequest request);void deleteSnapshot(DeleteSnapshotRequest request, ActionListener listener);Whole;;;Delete snapshot.    ;false
org.elasticsearch.client.ClusterAdminClient;ActionFuture deleteSnapshot(DeleteSnapshotRequest request);DeleteSnapshotRequestBuilder prepareDeleteSnapshot(String repository, String snapshot);Whole;;;Delete snapshot.    ;false
org.elasticsearch.client.ClusterAdminClient;void deleteSnapshot(DeleteSnapshotRequest request, ActionListener listener);DeleteSnapshotRequestBuilder prepareDeleteSnapshot(String repository, String snapshot);Whole;;;Delete snapshot.    ;false
org.elasticsearch.client.ClusterAdminClient;ActionFuture restoreSnapshot(RestoreSnapshotRequest request);void restoreSnapshot(RestoreSnapshotRequest request, ActionListener listener);Whole;;;Restores a snapshot.    ;false
org.elasticsearch.client.ClusterAdminClient;ActionFuture restoreSnapshot(RestoreSnapshotRequest request);RestoreSnapshotRequestBuilder prepareRestoreSnapshot(String repository, String snapshot);Whole;;;Restores a snapshot.    ;false
org.elasticsearch.client.ClusterAdminClient;void restoreSnapshot(RestoreSnapshotRequest request, ActionListener listener);RestoreSnapshotRequestBuilder prepareRestoreSnapshot(String repository, String snapshot);Whole;;;Restores a snapshot.    ;false
org.elasticsearch.client.ClusterAdminClient;void pendingClusterTasks(PendingClusterTasksRequest request, ActionListener listener);ActionFuture pendingClusterTasks(PendingClusterTasksRequest request);Whole;;;Returns a list of the pending cluster tasks, that are scheduled to be executed. This includes operations that update the cluster state (for example, a create index operation)    ;false
org.elasticsearch.client.ClusterAdminClient;void pendingClusterTasks(PendingClusterTasksRequest request, ActionListener listener);PendingClusterTasksRequestBuilder preparePendingClusterTasks();Whole;;;Returns a list of the pending cluster tasks, that are scheduled to be executed. This includes operations that update the cluster state (for example, a create index operation)    ;false
org.elasticsearch.client.ClusterAdminClient;ActionFuture pendingClusterTasks(PendingClusterTasksRequest request);PendingClusterTasksRequestBuilder preparePendingClusterTasks();Whole;;;Returns a list of the pending cluster tasks, that are scheduled to be executed. This includes operations that update the cluster state (for example, a create index operation)    ;false
org.elasticsearch.client.ClusterAdminClient;ActionFuture snapshotsStatus(SnapshotsStatusRequest request);void snapshotsStatus(SnapshotsStatusRequest request, ActionListener listener);Whole;;;Get snapshot status.    ;false
org.elasticsearch.client.ClusterAdminClient;ActionFuture snapshotsStatus(SnapshotsStatusRequest request);SnapshotsStatusRequestBuilder prepareSnapshotStatus(String repository);Whole;;;Get snapshot status.    ;false
org.elasticsearch.client.ClusterAdminClient;ActionFuture snapshotsStatus(SnapshotsStatusRequest request);SnapshotsStatusRequestBuilder prepareSnapshotStatus();Whole;;;Get snapshot status.    ;false
org.elasticsearch.client.ClusterAdminClient;void snapshotsStatus(SnapshotsStatusRequest request, ActionListener listener);SnapshotsStatusRequestBuilder prepareSnapshotStatus(String repository);Whole;;;Get snapshot status.    ;false
org.elasticsearch.client.ClusterAdminClient;void snapshotsStatus(SnapshotsStatusRequest request, ActionListener listener);SnapshotsStatusRequestBuilder prepareSnapshotStatus();Whole;;;Get snapshot status.    ;false
org.elasticsearch.client.ClusterAdminClient;SnapshotsStatusRequestBuilder prepareSnapshotStatus(String repository);SnapshotsStatusRequestBuilder prepareSnapshotStatus();Whole;;;Get snapshot status.    ;false
org.elasticsearch.client.ClusterAdminClient;void putPipeline(PutPipelineRequest request, ActionListener listener);ActionFuture putPipeline(PutPipelineRequest request);Whole;;;Stores an ingest pipeline    ;false
org.elasticsearch.client.ClusterAdminClient;void putPipeline(PutPipelineRequest request, ActionListener listener);PutPipelineRequestBuilder preparePutPipeline(String id, BytesReference source, XContentType xContentType);Whole;;;Stores an ingest pipeline    ;false
org.elasticsearch.client.ClusterAdminClient;ActionFuture putPipeline(PutPipelineRequest request);PutPipelineRequestBuilder preparePutPipeline(String id, BytesReference source, XContentType xContentType);Whole;;;Stores an ingest pipeline    ;false
org.elasticsearch.client.ClusterAdminClient;void deletePipeline(DeletePipelineRequest request, ActionListener listener);ActionFuture deletePipeline(DeletePipelineRequest request);Whole;;;Deletes a stored ingest pipeline    ;false
org.elasticsearch.client.ClusterAdminClient;void deletePipeline(DeletePipelineRequest request, ActionListener listener);DeletePipelineRequestBuilder prepareDeletePipeline();Whole;;;Deletes a stored ingest pipeline    ;false
org.elasticsearch.client.ClusterAdminClient;void deletePipeline(DeletePipelineRequest request, ActionListener listener);DeletePipelineRequestBuilder prepareDeletePipeline(String id);Whole;;;Deletes a stored ingest pipeline    ;false
org.elasticsearch.client.ClusterAdminClient;ActionFuture deletePipeline(DeletePipelineRequest request);DeletePipelineRequestBuilder prepareDeletePipeline();Whole;;;Deletes a stored ingest pipeline    ;false
org.elasticsearch.client.ClusterAdminClient;ActionFuture deletePipeline(DeletePipelineRequest request);DeletePipelineRequestBuilder prepareDeletePipeline(String id);Whole;;;Deletes a stored ingest pipeline    ;false
org.elasticsearch.client.ClusterAdminClient;DeletePipelineRequestBuilder prepareDeletePipeline();DeletePipelineRequestBuilder prepareDeletePipeline(String id);Whole;;;Deletes a stored ingest pipeline    ;false
org.elasticsearch.client.ClusterAdminClient;void getPipeline(GetPipelineRequest request, ActionListener listener);ActionFuture getPipeline(GetPipelineRequest request);Whole;;;Returns a stored ingest pipeline    ;false
org.elasticsearch.client.ClusterAdminClient;void getPipeline(GetPipelineRequest request, ActionListener listener);GetPipelineRequestBuilder prepareGetPipeline(String ids);Whole;;;Returns a stored ingest pipeline    ;false
org.elasticsearch.client.ClusterAdminClient;ActionFuture getPipeline(GetPipelineRequest request);GetPipelineRequestBuilder prepareGetPipeline(String ids);Whole;;;Returns a stored ingest pipeline    ;false
org.elasticsearch.client.ClusterAdminClient;void simulatePipeline(SimulatePipelineRequest request, ActionListener listener);ActionFuture simulatePipeline(SimulatePipelineRequest request);Whole;;;Simulates an ingest pipeline    ;false
org.elasticsearch.client.ClusterAdminClient;void simulatePipeline(SimulatePipelineRequest request, ActionListener listener);SimulatePipelineRequestBuilder prepareSimulatePipeline(BytesReference source);Whole;;;Simulates an ingest pipeline    ;false
org.elasticsearch.client.ClusterAdminClient;void simulatePipeline(SimulatePipelineRequest request, ActionListener listener);SimulatePipelineRequestBuilder prepareSimulatePipeline(BytesReference source, XContentType xContentType);Whole;;;Simulates an ingest pipeline    ;false
org.elasticsearch.client.ClusterAdminClient;ActionFuture simulatePipeline(SimulatePipelineRequest request);SimulatePipelineRequestBuilder prepareSimulatePipeline(BytesReference source);Whole;;;Simulates an ingest pipeline    ;false
org.elasticsearch.client.ClusterAdminClient;ActionFuture simulatePipeline(SimulatePipelineRequest request);SimulatePipelineRequestBuilder prepareSimulatePipeline(BytesReference source, XContentType xContentType);Whole;;;Simulates an ingest pipeline    ;false
org.elasticsearch.client.ClusterAdminClient;SimulatePipelineRequestBuilder prepareSimulatePipeline(BytesReference source);SimulatePipelineRequestBuilder prepareSimulatePipeline(BytesReference source, XContentType xContentType);Whole;;;Simulates an ingest pipeline    ;false
org.elasticsearch.client.ClusterAdminClient;void allocationExplain(ClusterAllocationExplainRequest request, ActionListener listener);ActionFuture allocationExplain(ClusterAllocationExplainRequest request);Whole;;;Explain the allocation of a shard    ;false
org.elasticsearch.client.ClusterAdminClient;void allocationExplain(ClusterAllocationExplainRequest request, ActionListener listener);ClusterAllocationExplainRequestBuilder prepareAllocationExplain();Whole;;;Explain the allocation of a shard    ;false
org.elasticsearch.client.ClusterAdminClient;ActionFuture allocationExplain(ClusterAllocationExplainRequest request);ClusterAllocationExplainRequestBuilder prepareAllocationExplain();Whole;;;Explain the allocation of a shard    ;false
org.elasticsearch.client.ClusterAdminClient;PutStoredScriptRequestBuilder preparePutStoredScript();void putStoredScript(PutStoredScriptRequest request, ActionListener listener);Whole;;;Store a script in the cluster state    ;false
org.elasticsearch.client.ClusterAdminClient;PutStoredScriptRequestBuilder preparePutStoredScript();ActionFuture putStoredScript(PutStoredScriptRequest request);Whole;;;Store a script in the cluster state    ;false
org.elasticsearch.client.ClusterAdminClient;void deleteStoredScript(DeleteStoredScriptRequest request, ActionListener listener);ActionFuture deleteStoredScript(DeleteStoredScriptRequest request);Whole;;;Delete a script from the cluster state    ;false
org.elasticsearch.client.ClusterAdminClient;void deleteStoredScript(DeleteStoredScriptRequest request, ActionListener listener);DeleteStoredScriptRequestBuilder prepareDeleteStoredScript();Whole;;;Delete a script from the cluster state    ;false
org.elasticsearch.client.ClusterAdminClient;void deleteStoredScript(DeleteStoredScriptRequest request, ActionListener listener);DeleteStoredScriptRequestBuilder prepareDeleteStoredScript(String id);Whole;;;Delete a script from the cluster state    ;false
org.elasticsearch.client.ClusterAdminClient;ActionFuture deleteStoredScript(DeleteStoredScriptRequest request);DeleteStoredScriptRequestBuilder prepareDeleteStoredScript();Whole;;;Delete a script from the cluster state    ;false
org.elasticsearch.client.ClusterAdminClient;ActionFuture deleteStoredScript(DeleteStoredScriptRequest request);DeleteStoredScriptRequestBuilder prepareDeleteStoredScript(String id);Whole;;;Delete a script from the cluster state    ;false
org.elasticsearch.client.ClusterAdminClient;DeleteStoredScriptRequestBuilder prepareDeleteStoredScript();DeleteStoredScriptRequestBuilder prepareDeleteStoredScript(String id);Whole;;;Delete a script from the cluster state    ;false
org.elasticsearch.client.ClusterAdminClient;void putStoredScript(PutStoredScriptRequest request, ActionListener listener);ActionFuture putStoredScript(PutStoredScriptRequest request);Whole;;;Store a script in the cluster state    ;false
org.elasticsearch.client.ClusterAdminClient;GetStoredScriptRequestBuilder prepareGetStoredScript();GetStoredScriptRequestBuilder prepareGetStoredScript(String id);Whole;;;Get a script from the cluster state    ;false
org.elasticsearch.client.ClusterAdminClient;GetStoredScriptRequestBuilder prepareGetStoredScript();void getStoredScript(GetStoredScriptRequest request, ActionListener listener);Whole;;;Get a script from the cluster state    ;false
org.elasticsearch.client.ClusterAdminClient;GetStoredScriptRequestBuilder prepareGetStoredScript();ActionFuture getStoredScript(GetStoredScriptRequest request);Whole;;;Get a script from the cluster state    ;false
org.elasticsearch.client.ClusterAdminClient;GetStoredScriptRequestBuilder prepareGetStoredScript(String id);void getStoredScript(GetStoredScriptRequest request, ActionListener listener);Whole;;;Get a script from the cluster state    ;false
org.elasticsearch.client.ClusterAdminClient;GetStoredScriptRequestBuilder prepareGetStoredScript(String id);ActionFuture getStoredScript(GetStoredScriptRequest request);Whole;;;Get a script from the cluster state    ;false
org.elasticsearch.client.ClusterAdminClient;void getStoredScript(GetStoredScriptRequest request, ActionListener listener);ActionFuture getStoredScript(GetStoredScriptRequest request);Whole;;;Get a script from the cluster state    ;false
org.elasticsearch.client.IndicesAdminClient;ActionFuture exists(IndicesExistsRequest request);ActionFuture typesExists(TypesExistsRequest request);@return;;;The result future;false
org.elasticsearch.client.IndicesAdminClient;ActionFuture exists(IndicesExistsRequest request);ActionFuture segments(IndicesSegmentsRequest request);@return;;;The result future;false
org.elasticsearch.client.IndicesAdminClient;ActionFuture exists(IndicesExistsRequest request);ActionFuture shardStores(IndicesShardStoresRequest request);@return;;;The result future;false
org.elasticsearch.client.IndicesAdminClient;ActionFuture exists(IndicesExistsRequest request);ActionFuture create(CreateIndexRequest request);@return;;;The result future;false
org.elasticsearch.client.IndicesAdminClient;ActionFuture exists(IndicesExistsRequest request);ActionFuture delete(DeleteIndexRequest request);@return;;;The result future;false
org.elasticsearch.client.IndicesAdminClient;ActionFuture exists(IndicesExistsRequest request);ActionFuture close(CloseIndexRequest request);@return;;;The result future;false
org.elasticsearch.client.IndicesAdminClient;ActionFuture exists(IndicesExistsRequest request);ActionFuture open(OpenIndexRequest request);@return;;;The result future;false
org.elasticsearch.client.IndicesAdminClient;ActionFuture exists(IndicesExistsRequest request);ActionFuture refresh(RefreshRequest request);@return;;;The result future;false
org.elasticsearch.client.IndicesAdminClient;ActionFuture exists(IndicesExistsRequest request);ActionFuture aliases(IndicesAliasesRequest request);@return;;;The result future;false
org.elasticsearch.client.IndicesAdminClient;ActionFuture exists(IndicesExistsRequest request);ActionFuture clearCache(ClearIndicesCacheRequest request);@return;;;The result future;false
org.elasticsearch.client.IndicesAdminClient;ActionFuture exists(IndicesExistsRequest request);ActionFuture updateSettings(UpdateSettingsRequest request);@return;;;The result future;false
org.elasticsearch.client.IndicesAdminClient;ActionFuture exists(IndicesExistsRequest request);ActionFuture validateQuery(ValidateQueryRequest request);@return;;;The result future;false
org.elasticsearch.client.IndicesAdminClient;void exists(IndicesExistsRequest request, ActionListener listener);void typesExists(TypesExistsRequest request, ActionListener listener);@param;ActionListener<IndicesExistsResponse> listener;ActionListener<TypesExistsResponse> listener;A listener to be notified with a result;true
org.elasticsearch.client.IndicesAdminClient;void exists(IndicesExistsRequest request, ActionListener listener);void segments(IndicesSegmentsRequest request, ActionListener listener);@param;ActionListener<IndicesExistsResponse> listener;ActionListener<IndicesSegmentResponse> listener;A listener to be notified with a result;true
org.elasticsearch.client.IndicesAdminClient;void exists(IndicesExistsRequest request, ActionListener listener);void shardStores(IndicesShardStoresRequest request, ActionListener listener);@param;ActionListener<IndicesExistsResponse> listener;ActionListener<IndicesShardStoresResponse> listener;A listener to be notified with a result;true
org.elasticsearch.client.IndicesAdminClient;void exists(IndicesExistsRequest request, ActionListener listener);void create(CreateIndexRequest request, ActionListener listener);@param;ActionListener<IndicesExistsResponse> listener;ActionListener<CreateIndexResponse> listener;A listener to be notified with a result;true
org.elasticsearch.client.IndicesAdminClient;void exists(IndicesExistsRequest request, ActionListener listener);void delete(DeleteIndexRequest request, ActionListener listener);@param;ActionListener<IndicesExistsResponse> listener;ActionListener<DeleteIndexResponse> listener;A listener to be notified with a result;true
org.elasticsearch.client.IndicesAdminClient;void exists(IndicesExistsRequest request, ActionListener listener);void close(CloseIndexRequest request, ActionListener listener);@param;ActionListener<IndicesExistsResponse> listener;ActionListener<CloseIndexResponse> listener;A listener to be notified with a result;true
org.elasticsearch.client.IndicesAdminClient;void exists(IndicesExistsRequest request, ActionListener listener);void open(OpenIndexRequest request, ActionListener listener);@param;ActionListener<IndicesExistsResponse> listener;ActionListener<OpenIndexResponse> listener;A listener to be notified with a result;true
org.elasticsearch.client.IndicesAdminClient;void exists(IndicesExistsRequest request, ActionListener listener);void refresh(RefreshRequest request, ActionListener listener);@param;ActionListener<IndicesExistsResponse> listener;ActionListener<RefreshResponse> listener;A listener to be notified with a result;true
org.elasticsearch.client.IndicesAdminClient;void exists(IndicesExistsRequest request, ActionListener listener);void flush(FlushRequest request, ActionListener listener);@param;ActionListener<IndicesExistsResponse> listener;ActionListener<FlushResponse> listener;A listener to be notified with a result;true
org.elasticsearch.client.IndicesAdminClient;void exists(IndicesExistsRequest request, ActionListener listener);void syncedFlush(SyncedFlushRequest request, ActionListener listener);@param;ActionListener<IndicesExistsResponse> listener;ActionListener<SyncedFlushResponse> listener;A listener to be notified with a result;true
org.elasticsearch.client.IndicesAdminClient;void exists(IndicesExistsRequest request, ActionListener listener);void forceMerge(ForceMergeRequest request, ActionListener listener);@param;ActionListener<IndicesExistsResponse> listener;ActionListener<ForceMergeResponse> listener;A listener to be notified with a result;true
org.elasticsearch.client.IndicesAdminClient;void exists(IndicesExistsRequest request, ActionListener listener);void upgrade(UpgradeRequest request, ActionListener listener);@param;ActionListener<IndicesExistsResponse> listener;ActionListener<UpgradeResponse> listener;A listener to be notified with a result;true
org.elasticsearch.client.IndicesAdminClient;void exists(IndicesExistsRequest request, ActionListener listener);void upgradeStatus(UpgradeStatusRequest request, ActionListener listener);@param;ActionListener<IndicesExistsResponse> listener;ActionListener<UpgradeStatusResponse> listener;A listener to be notified with a result;true
org.elasticsearch.client.IndicesAdminClient;void exists(IndicesExistsRequest request, ActionListener listener);void putMapping(PutMappingRequest request, ActionListener listener);@param;ActionListener<IndicesExistsResponse> listener;ActionListener<PutMappingResponse> listener;A listener to be notified with a result;true
org.elasticsearch.client.IndicesAdminClient;void exists(IndicesExistsRequest request, ActionListener listener);void aliases(IndicesAliasesRequest request, ActionListener listener);@param;ActionListener<IndicesExistsResponse> listener;ActionListener<IndicesAliasesResponse> listener;A listener to be notified with a result;true
org.elasticsearch.client.IndicesAdminClient;void exists(IndicesExistsRequest request, ActionListener listener);void getAliases(GetAliasesRequest request, ActionListener listener);@param;ActionListener<IndicesExistsResponse> listener;ActionListener<GetAliasesResponse> listener;A listener to be notified with a result;true
org.elasticsearch.client.IndicesAdminClient;void exists(IndicesExistsRequest request, ActionListener listener);void aliasesExist(GetAliasesRequest request, ActionListener listener);@param;ActionListener<IndicesExistsResponse> listener;ActionListener<AliasesExistResponse> listener;A listener to be notified with a result;true
org.elasticsearch.client.IndicesAdminClient;void exists(IndicesExistsRequest request, ActionListener listener);void getIndex(GetIndexRequest request, ActionListener listener);@param;ActionListener<IndicesExistsResponse> listener;ActionListener<GetIndexResponse> listener;A listener to be notified with a result;true
org.elasticsearch.client.IndicesAdminClient;void exists(IndicesExistsRequest request, ActionListener listener);void clearCache(ClearIndicesCacheRequest request, ActionListener listener);@param;ActionListener<IndicesExistsResponse> listener;ActionListener<ClearIndicesCacheResponse> listener;A listener to be notified with a result;true
org.elasticsearch.client.IndicesAdminClient;IndicesExistsRequestBuilder prepareExists(String indices);TypesExistsRequestBuilder prepareTypesExists(String index);Whole;;;Indices exists.    ;false
org.elasticsearch.client.IndicesAdminClient;ActionFuture typesExists(TypesExistsRequest request);ActionFuture segments(IndicesSegmentsRequest request);@return;;;The result future;false
org.elasticsearch.client.IndicesAdminClient;ActionFuture typesExists(TypesExistsRequest request);ActionFuture shardStores(IndicesShardStoresRequest request);@return;;;The result future;false
org.elasticsearch.client.IndicesAdminClient;ActionFuture typesExists(TypesExistsRequest request);ActionFuture create(CreateIndexRequest request);@return;;;The result future;false
org.elasticsearch.client.IndicesAdminClient;ActionFuture typesExists(TypesExistsRequest request);ActionFuture delete(DeleteIndexRequest request);@return;;;The result future;false
org.elasticsearch.client.IndicesAdminClient;ActionFuture typesExists(TypesExistsRequest request);ActionFuture close(CloseIndexRequest request);@return;;;The result future;false
org.elasticsearch.client.IndicesAdminClient;ActionFuture typesExists(TypesExistsRequest request);ActionFuture open(OpenIndexRequest request);@return;;;The result future;false
org.elasticsearch.client.IndicesAdminClient;ActionFuture typesExists(TypesExistsRequest request);ActionFuture refresh(RefreshRequest request);@return;;;The result future;false
org.elasticsearch.client.IndicesAdminClient;ActionFuture typesExists(TypesExistsRequest request);ActionFuture aliases(IndicesAliasesRequest request);@return;;;The result future;false
org.elasticsearch.client.IndicesAdminClient;ActionFuture typesExists(TypesExistsRequest request);ActionFuture clearCache(ClearIndicesCacheRequest request);@return;;;The result future;false
org.elasticsearch.client.IndicesAdminClient;ActionFuture typesExists(TypesExistsRequest request);ActionFuture updateSettings(UpdateSettingsRequest request);@return;;;The result future;false
org.elasticsearch.client.IndicesAdminClient;ActionFuture typesExists(TypesExistsRequest request);ActionFuture validateQuery(ValidateQueryRequest request);@return;;;The result future;false
org.elasticsearch.client.IndicesAdminClient;void typesExists(TypesExistsRequest request, ActionListener listener);void segments(IndicesSegmentsRequest request, ActionListener listener);@param;ActionListener<TypesExistsResponse> listener;ActionListener<IndicesSegmentResponse> listener;A listener to be notified with a result;true
org.elasticsearch.client.IndicesAdminClient;void typesExists(TypesExistsRequest request, ActionListener listener);void shardStores(IndicesShardStoresRequest request, ActionListener listener);@param;ActionListener<TypesExistsResponse> listener;ActionListener<IndicesShardStoresResponse> listener;A listener to be notified with a result;true
org.elasticsearch.client.IndicesAdminClient;void typesExists(TypesExistsRequest request, ActionListener listener);void create(CreateIndexRequest request, ActionListener listener);@param;ActionListener<TypesExistsResponse> listener;ActionListener<CreateIndexResponse> listener;A listener to be notified with a result;true
org.elasticsearch.client.IndicesAdminClient;void typesExists(TypesExistsRequest request, ActionListener listener);void delete(DeleteIndexRequest request, ActionListener listener);@param;ActionListener<TypesExistsResponse> listener;ActionListener<DeleteIndexResponse> listener;A listener to be notified with a result;true
org.elasticsearch.client.IndicesAdminClient;void typesExists(TypesExistsRequest request, ActionListener listener);void close(CloseIndexRequest request, ActionListener listener);@param;ActionListener<TypesExistsResponse> listener;ActionListener<CloseIndexResponse> listener;A listener to be notified with a result;true
org.elasticsearch.client.IndicesAdminClient;void typesExists(TypesExistsRequest request, ActionListener listener);void open(OpenIndexRequest request, ActionListener listener);@param;ActionListener<TypesExistsResponse> listener;ActionListener<OpenIndexResponse> listener;A listener to be notified with a result;true
org.elasticsearch.client.IndicesAdminClient;void typesExists(TypesExistsRequest request, ActionListener listener);void refresh(RefreshRequest request, ActionListener listener);@param;ActionListener<TypesExistsResponse> listener;ActionListener<RefreshResponse> listener;A listener to be notified with a result;true
org.elasticsearch.client.IndicesAdminClient;void typesExists(TypesExistsRequest request, ActionListener listener);void flush(FlushRequest request, ActionListener listener);@param;ActionListener<TypesExistsResponse> listener;ActionListener<FlushResponse> listener;A listener to be notified with a result;true
org.elasticsearch.client.IndicesAdminClient;void typesExists(TypesExistsRequest request, ActionListener listener);void syncedFlush(SyncedFlushRequest request, ActionListener listener);@param;ActionListener<TypesExistsResponse> listener;ActionListener<SyncedFlushResponse> listener;A listener to be notified with a result;true
org.elasticsearch.client.IndicesAdminClient;void typesExists(TypesExistsRequest request, ActionListener listener);void forceMerge(ForceMergeRequest request, ActionListener listener);@param;ActionListener<TypesExistsResponse> listener;ActionListener<ForceMergeResponse> listener;A listener to be notified with a result;true
org.elasticsearch.client.IndicesAdminClient;void typesExists(TypesExistsRequest request, ActionListener listener);void upgrade(UpgradeRequest request, ActionListener listener);@param;ActionListener<TypesExistsResponse> listener;ActionListener<UpgradeResponse> listener;A listener to be notified with a result;true
org.elasticsearch.client.IndicesAdminClient;void typesExists(TypesExistsRequest request, ActionListener listener);void upgradeStatus(UpgradeStatusRequest request, ActionListener listener);@param;ActionListener<TypesExistsResponse> listener;ActionListener<UpgradeStatusResponse> listener;A listener to be notified with a result;true
org.elasticsearch.client.IndicesAdminClient;void typesExists(TypesExistsRequest request, ActionListener listener);void putMapping(PutMappingRequest request, ActionListener listener);@param;ActionListener<TypesExistsResponse> listener;ActionListener<PutMappingResponse> listener;A listener to be notified with a result;true
org.elasticsearch.client.IndicesAdminClient;void typesExists(TypesExistsRequest request, ActionListener listener);void aliases(IndicesAliasesRequest request, ActionListener listener);@param;ActionListener<TypesExistsResponse> listener;ActionListener<IndicesAliasesResponse> listener;A listener to be notified with a result;true
org.elasticsearch.client.IndicesAdminClient;void typesExists(TypesExistsRequest request, ActionListener listener);void getAliases(GetAliasesRequest request, ActionListener listener);@param;ActionListener<TypesExistsResponse> listener;ActionListener<GetAliasesResponse> listener;A listener to be notified with a result;true
org.elasticsearch.client.IndicesAdminClient;void typesExists(TypesExistsRequest request, ActionListener listener);void aliasesExist(GetAliasesRequest request, ActionListener listener);@param;ActionListener<TypesExistsResponse> listener;ActionListener<AliasesExistResponse> listener;A listener to be notified with a result;true
org.elasticsearch.client.IndicesAdminClient;void typesExists(TypesExistsRequest request, ActionListener listener);void getIndex(GetIndexRequest request, ActionListener listener);@param;ActionListener<TypesExistsResponse> listener;ActionListener<GetIndexResponse> listener;A listener to be notified with a result;true
org.elasticsearch.client.IndicesAdminClient;void typesExists(TypesExistsRequest request, ActionListener listener);void clearCache(ClearIndicesCacheRequest request, ActionListener listener);@param;ActionListener<TypesExistsResponse> listener;ActionListener<ClearIndicesCacheResponse> listener;A listener to be notified with a result;true
org.elasticsearch.client.IndicesAdminClient;ActionFuture stats(IndicesStatsRequest request);void stats(IndicesStatsRequest request, ActionListener listener);Whole;;;Indices stats.    ;false
org.elasticsearch.client.IndicesAdminClient;ActionFuture stats(IndicesStatsRequest request);IndicesStatsRequestBuilder prepareStats(String indices);Whole;;;Indices stats.    ;false
org.elasticsearch.client.IndicesAdminClient;void stats(IndicesStatsRequest request, ActionListener listener);IndicesStatsRequestBuilder prepareStats(String indices);Whole;;;Indices stats.    ;false
org.elasticsearch.client.IndicesAdminClient;ActionFuture recoveries(RecoveryRequest request);RecoveryRequestBuilder prepareRecoveries(String indices);Whole;;;Indices recoveries    ;false
org.elasticsearch.client.IndicesAdminClient;ActionFuture segments(IndicesSegmentsRequest request);void segments(IndicesSegmentsRequest request, ActionListener listener);Free text;;;The segments of one or more indices. ;true
org.elasticsearch.client.IndicesAdminClient;ActionFuture segments(IndicesSegmentsRequest request);void segments(IndicesSegmentsRequest request, ActionListener listener);@param;IndicesSegmentsRequest request;IndicesSegmentsRequest request;The indices segments request;true
org.elasticsearch.client.IndicesAdminClient;ActionFuture segments(IndicesSegmentsRequest request);IndicesSegmentsRequestBuilder prepareSegments(String indices);Free text;;;The segments of one or more indices. ;false
org.elasticsearch.client.IndicesAdminClient;ActionFuture segments(IndicesSegmentsRequest request);ActionFuture shardStores(IndicesShardStoresRequest request);@return;;;The result future;false
org.elasticsearch.client.IndicesAdminClient;ActionFuture segments(IndicesSegmentsRequest request);ActionFuture create(CreateIndexRequest request);@return;;;The result future;false
org.elasticsearch.client.IndicesAdminClient;ActionFuture segments(IndicesSegmentsRequest request);ActionFuture delete(DeleteIndexRequest request);@return;;;The result future;false
org.elasticsearch.client.IndicesAdminClient;ActionFuture segments(IndicesSegmentsRequest request);ActionFuture close(CloseIndexRequest request);@return;;;The result future;false
org.elasticsearch.client.IndicesAdminClient;ActionFuture segments(IndicesSegmentsRequest request);ActionFuture open(OpenIndexRequest request);@return;;;The result future;false
org.elasticsearch.client.IndicesAdminClient;ActionFuture segments(IndicesSegmentsRequest request);ActionFuture refresh(RefreshRequest request);@return;;;The result future;false
org.elasticsearch.client.IndicesAdminClient;ActionFuture segments(IndicesSegmentsRequest request);ActionFuture aliases(IndicesAliasesRequest request);@return;;;The result future;false
org.elasticsearch.client.IndicesAdminClient;ActionFuture segments(IndicesSegmentsRequest request);ActionFuture clearCache(ClearIndicesCacheRequest request);@return;;;The result future;false
org.elasticsearch.client.IndicesAdminClient;ActionFuture segments(IndicesSegmentsRequest request);ActionFuture updateSettings(UpdateSettingsRequest request);@return;;;The result future;false
org.elasticsearch.client.IndicesAdminClient;ActionFuture segments(IndicesSegmentsRequest request);ActionFuture validateQuery(ValidateQueryRequest request);@return;;;The result future;false
org.elasticsearch.client.IndicesAdminClient;void segments(IndicesSegmentsRequest request, ActionListener listener);IndicesSegmentsRequestBuilder prepareSegments(String indices);Free text;;;The segments of one or more indices. ;false
org.elasticsearch.client.IndicesAdminClient;void segments(IndicesSegmentsRequest request, ActionListener listener);void shardStores(IndicesShardStoresRequest request, ActionListener listener);@param;ActionListener<IndicesSegmentResponse> listener;ActionListener<IndicesShardStoresResponse> listener;A listener to be notified with a result;true
org.elasticsearch.client.IndicesAdminClient;void segments(IndicesSegmentsRequest request, ActionListener listener);void create(CreateIndexRequest request, ActionListener listener);@param;ActionListener<IndicesSegmentResponse> listener;ActionListener<CreateIndexResponse> listener;A listener to be notified with a result;true
org.elasticsearch.client.IndicesAdminClient;void segments(IndicesSegmentsRequest request, ActionListener listener);void delete(DeleteIndexRequest request, ActionListener listener);@param;ActionListener<IndicesSegmentResponse> listener;ActionListener<DeleteIndexResponse> listener;A listener to be notified with a result;true
org.elasticsearch.client.IndicesAdminClient;void segments(IndicesSegmentsRequest request, ActionListener listener);void close(CloseIndexRequest request, ActionListener listener);@param;ActionListener<IndicesSegmentResponse> listener;ActionListener<CloseIndexResponse> listener;A listener to be notified with a result;true
org.elasticsearch.client.IndicesAdminClient;void segments(IndicesSegmentsRequest request, ActionListener listener);void open(OpenIndexRequest request, ActionListener listener);@param;ActionListener<IndicesSegmentResponse> listener;ActionListener<OpenIndexResponse> listener;A listener to be notified with a result;true
org.elasticsearch.client.IndicesAdminClient;void segments(IndicesSegmentsRequest request, ActionListener listener);void refresh(RefreshRequest request, ActionListener listener);@param;ActionListener<IndicesSegmentResponse> listener;ActionListener<RefreshResponse> listener;A listener to be notified with a result;true
org.elasticsearch.client.IndicesAdminClient;void segments(IndicesSegmentsRequest request, ActionListener listener);void flush(FlushRequest request, ActionListener listener);@param;ActionListener<IndicesSegmentResponse> listener;ActionListener<FlushResponse> listener;A listener to be notified with a result;true
org.elasticsearch.client.IndicesAdminClient;void segments(IndicesSegmentsRequest request, ActionListener listener);void syncedFlush(SyncedFlushRequest request, ActionListener listener);@param;ActionListener<IndicesSegmentResponse> listener;ActionListener<SyncedFlushResponse> listener;A listener to be notified with a result;true
org.elasticsearch.client.IndicesAdminClient;void segments(IndicesSegmentsRequest request, ActionListener listener);void forceMerge(ForceMergeRequest request, ActionListener listener);@param;ActionListener<IndicesSegmentResponse> listener;ActionListener<ForceMergeResponse> listener;A listener to be notified with a result;true
org.elasticsearch.client.IndicesAdminClient;void segments(IndicesSegmentsRequest request, ActionListener listener);void upgrade(UpgradeRequest request, ActionListener listener);@param;ActionListener<IndicesSegmentResponse> listener;ActionListener<UpgradeResponse> listener;A listener to be notified with a result;true
org.elasticsearch.client.IndicesAdminClient;void segments(IndicesSegmentsRequest request, ActionListener listener);void upgradeStatus(UpgradeStatusRequest request, ActionListener listener);@param;ActionListener<IndicesSegmentResponse> listener;ActionListener<UpgradeStatusResponse> listener;A listener to be notified with a result;true
org.elasticsearch.client.IndicesAdminClient;void segments(IndicesSegmentsRequest request, ActionListener listener);void putMapping(PutMappingRequest request, ActionListener listener);@param;ActionListener<IndicesSegmentResponse> listener;ActionListener<PutMappingResponse> listener;A listener to be notified with a result;true
org.elasticsearch.client.IndicesAdminClient;void segments(IndicesSegmentsRequest request, ActionListener listener);void aliases(IndicesAliasesRequest request, ActionListener listener);@param;ActionListener<IndicesSegmentResponse> listener;ActionListener<IndicesAliasesResponse> listener;A listener to be notified with a result;true
org.elasticsearch.client.IndicesAdminClient;void segments(IndicesSegmentsRequest request, ActionListener listener);void getAliases(GetAliasesRequest request, ActionListener listener);@param;ActionListener<IndicesSegmentResponse> listener;ActionListener<GetAliasesResponse> listener;A listener to be notified with a result;true
org.elasticsearch.client.IndicesAdminClient;void segments(IndicesSegmentsRequest request, ActionListener listener);void aliasesExist(GetAliasesRequest request, ActionListener listener);@param;ActionListener<IndicesSegmentResponse> listener;ActionListener<AliasesExistResponse> listener;A listener to be notified with a result;true
org.elasticsearch.client.IndicesAdminClient;void segments(IndicesSegmentsRequest request, ActionListener listener);void getIndex(GetIndexRequest request, ActionListener listener);@param;ActionListener<IndicesSegmentResponse> listener;ActionListener<GetIndexResponse> listener;A listener to be notified with a result;true
org.elasticsearch.client.IndicesAdminClient;void segments(IndicesSegmentsRequest request, ActionListener listener);void clearCache(ClearIndicesCacheRequest request, ActionListener listener);@param;ActionListener<IndicesSegmentResponse> listener;ActionListener<ClearIndicesCacheResponse> listener;A listener to be notified with a result;true
org.elasticsearch.client.IndicesAdminClient;ActionFuture shardStores(IndicesShardStoresRequest request);void shardStores(IndicesShardStoresRequest request, ActionListener listener);Free text;;;The shard stores info of one or more indices. ;true
org.elasticsearch.client.IndicesAdminClient;ActionFuture shardStores(IndicesShardStoresRequest request);void shardStores(IndicesShardStoresRequest request, ActionListener listener);@param;IndicesShardStoresRequest request;IndicesShardStoresRequest request;The indices shard stores request;true
org.elasticsearch.client.IndicesAdminClient;ActionFuture shardStores(IndicesShardStoresRequest request);IndicesShardStoreRequestBuilder prepareShardStores(String indices);Free text;;;The shard stores info of one or more indices. ;false
org.elasticsearch.client.IndicesAdminClient;ActionFuture shardStores(IndicesShardStoresRequest request);ActionFuture create(CreateIndexRequest request);@return;;;The result future;false
org.elasticsearch.client.IndicesAdminClient;ActionFuture shardStores(IndicesShardStoresRequest request);ActionFuture delete(DeleteIndexRequest request);@return;;;The result future;false
org.elasticsearch.client.IndicesAdminClient;ActionFuture shardStores(IndicesShardStoresRequest request);ActionFuture close(CloseIndexRequest request);@return;;;The result future;false
org.elasticsearch.client.IndicesAdminClient;ActionFuture shardStores(IndicesShardStoresRequest request);ActionFuture open(OpenIndexRequest request);@return;;;The result future;false
org.elasticsearch.client.IndicesAdminClient;ActionFuture shardStores(IndicesShardStoresRequest request);ActionFuture refresh(RefreshRequest request);@return;;;The result future;false
org.elasticsearch.client.IndicesAdminClient;ActionFuture shardStores(IndicesShardStoresRequest request);ActionFuture aliases(IndicesAliasesRequest request);@return;;;The result future;false
org.elasticsearch.client.IndicesAdminClient;ActionFuture shardStores(IndicesShardStoresRequest request);ActionFuture clearCache(ClearIndicesCacheRequest request);@return;;;The result future;false
org.elasticsearch.client.IndicesAdminClient;ActionFuture shardStores(IndicesShardStoresRequest request);ActionFuture updateSettings(UpdateSettingsRequest request);@return;;;The result future;false
org.elasticsearch.client.IndicesAdminClient;ActionFuture shardStores(IndicesShardStoresRequest request);ActionFuture validateQuery(ValidateQueryRequest request);@return;;;The result future;false
org.elasticsearch.client.IndicesAdminClient;void shardStores(IndicesShardStoresRequest request, ActionListener listener);IndicesShardStoreRequestBuilder prepareShardStores(String indices);Free text;;;The shard stores info of one or more indices. ;false
org.elasticsearch.client.IndicesAdminClient;void shardStores(IndicesShardStoresRequest request, ActionListener listener);void create(CreateIndexRequest request, ActionListener listener);@param;ActionListener<IndicesShardStoresResponse> listener;ActionListener<CreateIndexResponse> listener;A listener to be notified with a result;true
org.elasticsearch.client.IndicesAdminClient;void shardStores(IndicesShardStoresRequest request, ActionListener listener);void delete(DeleteIndexRequest request, ActionListener listener);@param;ActionListener<IndicesShardStoresResponse> listener;ActionListener<DeleteIndexResponse> listener;A listener to be notified with a result;true
org.elasticsearch.client.IndicesAdminClient;void shardStores(IndicesShardStoresRequest request, ActionListener listener);void close(CloseIndexRequest request, ActionListener listener);@param;ActionListener<IndicesShardStoresResponse> listener;ActionListener<CloseIndexResponse> listener;A listener to be notified with a result;true
org.elasticsearch.client.IndicesAdminClient;void shardStores(IndicesShardStoresRequest request, ActionListener listener);void open(OpenIndexRequest request, ActionListener listener);@param;ActionListener<IndicesShardStoresResponse> listener;ActionListener<OpenIndexResponse> listener;A listener to be notified with a result;true
org.elasticsearch.client.IndicesAdminClient;void shardStores(IndicesShardStoresRequest request, ActionListener listener);void refresh(RefreshRequest request, ActionListener listener);@param;ActionListener<IndicesShardStoresResponse> listener;ActionListener<RefreshResponse> listener;A listener to be notified with a result;true
org.elasticsearch.client.IndicesAdminClient;void shardStores(IndicesShardStoresRequest request, ActionListener listener);void flush(FlushRequest request, ActionListener listener);@param;ActionListener<IndicesShardStoresResponse> listener;ActionListener<FlushResponse> listener;A listener to be notified with a result;true
org.elasticsearch.client.IndicesAdminClient;void shardStores(IndicesShardStoresRequest request, ActionListener listener);void syncedFlush(SyncedFlushRequest request, ActionListener listener);@param;ActionListener<IndicesShardStoresResponse> listener;ActionListener<SyncedFlushResponse> listener;A listener to be notified with a result;true
org.elasticsearch.client.IndicesAdminClient;void shardStores(IndicesShardStoresRequest request, ActionListener listener);void forceMerge(ForceMergeRequest request, ActionListener listener);@param;ActionListener<IndicesShardStoresResponse> listener;ActionListener<ForceMergeResponse> listener;A listener to be notified with a result;true
org.elasticsearch.client.IndicesAdminClient;void shardStores(IndicesShardStoresRequest request, ActionListener listener);void upgrade(UpgradeRequest request, ActionListener listener);@param;ActionListener<IndicesShardStoresResponse> listener;ActionListener<UpgradeResponse> listener;A listener to be notified with a result;true
org.elasticsearch.client.IndicesAdminClient;void shardStores(IndicesShardStoresRequest request, ActionListener listener);void upgradeStatus(UpgradeStatusRequest request, ActionListener listener);@param;ActionListener<IndicesShardStoresResponse> listener;ActionListener<UpgradeStatusResponse> listener;A listener to be notified with a result;true
org.elasticsearch.client.IndicesAdminClient;void shardStores(IndicesShardStoresRequest request, ActionListener listener);void putMapping(PutMappingRequest request, ActionListener listener);@param;ActionListener<IndicesShardStoresResponse> listener;ActionListener<PutMappingResponse> listener;A listener to be notified with a result;true
org.elasticsearch.client.IndicesAdminClient;void shardStores(IndicesShardStoresRequest request, ActionListener listener);void aliases(IndicesAliasesRequest request, ActionListener listener);@param;ActionListener<IndicesShardStoresResponse> listener;ActionListener<IndicesAliasesResponse> listener;A listener to be notified with a result;true
org.elasticsearch.client.IndicesAdminClient;void shardStores(IndicesShardStoresRequest request, ActionListener listener);void getAliases(GetAliasesRequest request, ActionListener listener);@param;ActionListener<IndicesShardStoresResponse> listener;ActionListener<GetAliasesResponse> listener;A listener to be notified with a result;true
org.elasticsearch.client.IndicesAdminClient;void shardStores(IndicesShardStoresRequest request, ActionListener listener);void aliasesExist(GetAliasesRequest request, ActionListener listener);@param;ActionListener<IndicesShardStoresResponse> listener;ActionListener<AliasesExistResponse> listener;A listener to be notified with a result;true
org.elasticsearch.client.IndicesAdminClient;void shardStores(IndicesShardStoresRequest request, ActionListener listener);void getIndex(GetIndexRequest request, ActionListener listener);@param;ActionListener<IndicesShardStoresResponse> listener;ActionListener<GetIndexResponse> listener;A listener to be notified with a result;true
org.elasticsearch.client.IndicesAdminClient;void shardStores(IndicesShardStoresRequest request, ActionListener listener);void clearCache(ClearIndicesCacheRequest request, ActionListener listener);@param;ActionListener<IndicesShardStoresResponse> listener;ActionListener<ClearIndicesCacheResponse> listener;A listener to be notified with a result;true
org.elasticsearch.client.IndicesAdminClient;ActionFuture create(CreateIndexRequest request);void create(CreateIndexRequest request, ActionListener listener);Free text;;;Creates an index using an explicit request allowing to specify the settings of the index. ;true
org.elasticsearch.client.IndicesAdminClient;ActionFuture create(CreateIndexRequest request);void create(CreateIndexRequest request, ActionListener listener);@param;CreateIndexRequest request;CreateIndexRequest request;The create index request;true
org.elasticsearch.client.IndicesAdminClient;ActionFuture create(CreateIndexRequest request);CreateIndexRequestBuilder prepareCreate(String index);Free text;;;Creates an index using an explicit request allowing to specify the settings of the index. ;false
org.elasticsearch.client.IndicesAdminClient;ActionFuture create(CreateIndexRequest request);ActionFuture delete(DeleteIndexRequest request);@return;;;The result future;false
org.elasticsearch.client.IndicesAdminClient;ActionFuture create(CreateIndexRequest request);ActionFuture close(CloseIndexRequest request);@return;;;The result future;false
org.elasticsearch.client.IndicesAdminClient;ActionFuture create(CreateIndexRequest request);ActionFuture open(OpenIndexRequest request);@return;;;The result future;false
org.elasticsearch.client.IndicesAdminClient;ActionFuture create(CreateIndexRequest request);ActionFuture refresh(RefreshRequest request);@return;;;The result future;false
org.elasticsearch.client.IndicesAdminClient;ActionFuture create(CreateIndexRequest request);ActionFuture aliases(IndicesAliasesRequest request);@return;;;The result future;false
org.elasticsearch.client.IndicesAdminClient;ActionFuture create(CreateIndexRequest request);ActionFuture clearCache(ClearIndicesCacheRequest request);@return;;;The result future;false
org.elasticsearch.client.IndicesAdminClient;ActionFuture create(CreateIndexRequest request);ActionFuture updateSettings(UpdateSettingsRequest request);@return;;;The result future;false
org.elasticsearch.client.IndicesAdminClient;ActionFuture create(CreateIndexRequest request);ActionFuture validateQuery(ValidateQueryRequest request);@return;;;The result future;false
org.elasticsearch.client.IndicesAdminClient;void create(CreateIndexRequest request, ActionListener listener);CreateIndexRequestBuilder prepareCreate(String index);Free text;;;Creates an index using an explicit request allowing to specify the settings of the index. ;false
org.elasticsearch.client.IndicesAdminClient;void create(CreateIndexRequest request, ActionListener listener);void delete(DeleteIndexRequest request, ActionListener listener);@param;ActionListener<CreateIndexResponse> listener;ActionListener<DeleteIndexResponse> listener;A listener to be notified with a result;true
org.elasticsearch.client.IndicesAdminClient;void create(CreateIndexRequest request, ActionListener listener);void close(CloseIndexRequest request, ActionListener listener);@param;ActionListener<CreateIndexResponse> listener;ActionListener<CloseIndexResponse> listener;A listener to be notified with a result;true
org.elasticsearch.client.IndicesAdminClient;void create(CreateIndexRequest request, ActionListener listener);void open(OpenIndexRequest request, ActionListener listener);@param;ActionListener<CreateIndexResponse> listener;ActionListener<OpenIndexResponse> listener;A listener to be notified with a result;true
org.elasticsearch.client.IndicesAdminClient;void create(CreateIndexRequest request, ActionListener listener);void refresh(RefreshRequest request, ActionListener listener);@param;ActionListener<CreateIndexResponse> listener;ActionListener<RefreshResponse> listener;A listener to be notified with a result;true
org.elasticsearch.client.IndicesAdminClient;void create(CreateIndexRequest request, ActionListener listener);void flush(FlushRequest request, ActionListener listener);@param;ActionListener<CreateIndexResponse> listener;ActionListener<FlushResponse> listener;A listener to be notified with a result;true
org.elasticsearch.client.IndicesAdminClient;void create(CreateIndexRequest request, ActionListener listener);void syncedFlush(SyncedFlushRequest request, ActionListener listener);@param;ActionListener<CreateIndexResponse> listener;ActionListener<SyncedFlushResponse> listener;A listener to be notified with a result;true
org.elasticsearch.client.IndicesAdminClient;void create(CreateIndexRequest request, ActionListener listener);void forceMerge(ForceMergeRequest request, ActionListener listener);@param;ActionListener<CreateIndexResponse> listener;ActionListener<ForceMergeResponse> listener;A listener to be notified with a result;true
org.elasticsearch.client.IndicesAdminClient;void create(CreateIndexRequest request, ActionListener listener);void upgrade(UpgradeRequest request, ActionListener listener);@param;ActionListener<CreateIndexResponse> listener;ActionListener<UpgradeResponse> listener;A listener to be notified with a result;true
org.elasticsearch.client.IndicesAdminClient;void create(CreateIndexRequest request, ActionListener listener);void upgradeStatus(UpgradeStatusRequest request, ActionListener listener);@param;ActionListener<CreateIndexResponse> listener;ActionListener<UpgradeStatusResponse> listener;A listener to be notified with a result;true
org.elasticsearch.client.IndicesAdminClient;void create(CreateIndexRequest request, ActionListener listener);void putMapping(PutMappingRequest request, ActionListener listener);@param;ActionListener<CreateIndexResponse> listener;ActionListener<PutMappingResponse> listener;A listener to be notified with a result;true
org.elasticsearch.client.IndicesAdminClient;void create(CreateIndexRequest request, ActionListener listener);void aliases(IndicesAliasesRequest request, ActionListener listener);@param;ActionListener<CreateIndexResponse> listener;ActionListener<IndicesAliasesResponse> listener;A listener to be notified with a result;true
org.elasticsearch.client.IndicesAdminClient;void create(CreateIndexRequest request, ActionListener listener);void getAliases(GetAliasesRequest request, ActionListener listener);@param;ActionListener<CreateIndexResponse> listener;ActionListener<GetAliasesResponse> listener;A listener to be notified with a result;true
org.elasticsearch.client.IndicesAdminClient;void create(CreateIndexRequest request, ActionListener listener);void aliasesExist(GetAliasesRequest request, ActionListener listener);@param;ActionListener<CreateIndexResponse> listener;ActionListener<AliasesExistResponse> listener;A listener to be notified with a result;true
org.elasticsearch.client.IndicesAdminClient;void create(CreateIndexRequest request, ActionListener listener);void getIndex(GetIndexRequest request, ActionListener listener);@param;ActionListener<CreateIndexResponse> listener;ActionListener<GetIndexResponse> listener;A listener to be notified with a result;true
org.elasticsearch.client.IndicesAdminClient;void create(CreateIndexRequest request, ActionListener listener);void clearCache(ClearIndicesCacheRequest request, ActionListener listener);@param;ActionListener<CreateIndexResponse> listener;ActionListener<ClearIndicesCacheResponse> listener;A listener to be notified with a result;true
org.elasticsearch.client.IndicesAdminClient;ActionFuture delete(DeleteIndexRequest request);void delete(DeleteIndexRequest request, ActionListener listener);Free text;;;Deletes an index based on the index name. ;true
org.elasticsearch.client.IndicesAdminClient;ActionFuture delete(DeleteIndexRequest request);void delete(DeleteIndexRequest request, ActionListener listener);@param;DeleteIndexRequest request;DeleteIndexRequest request;The delete index request;true
org.elasticsearch.client.IndicesAdminClient;ActionFuture delete(DeleteIndexRequest request);DeleteIndexRequestBuilder prepareDelete(String indices);Free text;;;Deletes an index based on the index name. ;false
org.elasticsearch.client.IndicesAdminClient;ActionFuture delete(DeleteIndexRequest request);ActionFuture close(CloseIndexRequest request);@return;;;The result future;false
org.elasticsearch.client.IndicesAdminClient;ActionFuture delete(DeleteIndexRequest request);ActionFuture open(OpenIndexRequest request);@return;;;The result future;false
org.elasticsearch.client.IndicesAdminClient;ActionFuture delete(DeleteIndexRequest request);ActionFuture refresh(RefreshRequest request);@return;;;The result future;false
org.elasticsearch.client.IndicesAdminClient;ActionFuture delete(DeleteIndexRequest request);ActionFuture aliases(IndicesAliasesRequest request);@return;;;The result future;false
org.elasticsearch.client.IndicesAdminClient;ActionFuture delete(DeleteIndexRequest request);ActionFuture clearCache(ClearIndicesCacheRequest request);@return;;;The result future;false
org.elasticsearch.client.IndicesAdminClient;ActionFuture delete(DeleteIndexRequest request);ActionFuture updateSettings(UpdateSettingsRequest request);@return;;;The result future;false
org.elasticsearch.client.IndicesAdminClient;ActionFuture delete(DeleteIndexRequest request);ActionFuture validateQuery(ValidateQueryRequest request);@return;;;The result future;false
org.elasticsearch.client.IndicesAdminClient;void delete(DeleteIndexRequest request, ActionListener listener);DeleteIndexRequestBuilder prepareDelete(String indices);Free text;;;Deletes an index based on the index name. ;false
org.elasticsearch.client.IndicesAdminClient;void delete(DeleteIndexRequest request, ActionListener listener);void close(CloseIndexRequest request, ActionListener listener);@param;ActionListener<DeleteIndexResponse> listener;ActionListener<CloseIndexResponse> listener;A listener to be notified with a result;true
org.elasticsearch.client.IndicesAdminClient;void delete(DeleteIndexRequest request, ActionListener listener);void open(OpenIndexRequest request, ActionListener listener);@param;ActionListener<DeleteIndexResponse> listener;ActionListener<OpenIndexResponse> listener;A listener to be notified with a result;true
org.elasticsearch.client.IndicesAdminClient;void delete(DeleteIndexRequest request, ActionListener listener);void refresh(RefreshRequest request, ActionListener listener);@param;ActionListener<DeleteIndexResponse> listener;ActionListener<RefreshResponse> listener;A listener to be notified with a result;true
org.elasticsearch.client.IndicesAdminClient;void delete(DeleteIndexRequest request, ActionListener listener);void flush(FlushRequest request, ActionListener listener);@param;ActionListener<DeleteIndexResponse> listener;ActionListener<FlushResponse> listener;A listener to be notified with a result;true
org.elasticsearch.client.IndicesAdminClient;void delete(DeleteIndexRequest request, ActionListener listener);void syncedFlush(SyncedFlushRequest request, ActionListener listener);@param;ActionListener<DeleteIndexResponse> listener;ActionListener<SyncedFlushResponse> listener;A listener to be notified with a result;true
org.elasticsearch.client.IndicesAdminClient;void delete(DeleteIndexRequest request, ActionListener listener);void forceMerge(ForceMergeRequest request, ActionListener listener);@param;ActionListener<DeleteIndexResponse> listener;ActionListener<ForceMergeResponse> listener;A listener to be notified with a result;true
org.elasticsearch.client.IndicesAdminClient;void delete(DeleteIndexRequest request, ActionListener listener);void upgrade(UpgradeRequest request, ActionListener listener);@param;ActionListener<DeleteIndexResponse> listener;ActionListener<UpgradeResponse> listener;A listener to be notified with a result;true
org.elasticsearch.client.IndicesAdminClient;void delete(DeleteIndexRequest request, ActionListener listener);void upgradeStatus(UpgradeStatusRequest request, ActionListener listener);@param;ActionListener<DeleteIndexResponse> listener;ActionListener<UpgradeStatusResponse> listener;A listener to be notified with a result;true
org.elasticsearch.client.IndicesAdminClient;void delete(DeleteIndexRequest request, ActionListener listener);void putMapping(PutMappingRequest request, ActionListener listener);@param;ActionListener<DeleteIndexResponse> listener;ActionListener<PutMappingResponse> listener;A listener to be notified with a result;true
org.elasticsearch.client.IndicesAdminClient;void delete(DeleteIndexRequest request, ActionListener listener);void aliases(IndicesAliasesRequest request, ActionListener listener);@param;ActionListener<DeleteIndexResponse> listener;ActionListener<IndicesAliasesResponse> listener;A listener to be notified with a result;true
org.elasticsearch.client.IndicesAdminClient;void delete(DeleteIndexRequest request, ActionListener listener);void getAliases(GetAliasesRequest request, ActionListener listener);@param;ActionListener<DeleteIndexResponse> listener;ActionListener<GetAliasesResponse> listener;A listener to be notified with a result;true
org.elasticsearch.client.IndicesAdminClient;void delete(DeleteIndexRequest request, ActionListener listener);void aliasesExist(GetAliasesRequest request, ActionListener listener);@param;ActionListener<DeleteIndexResponse> listener;ActionListener<AliasesExistResponse> listener;A listener to be notified with a result;true
org.elasticsearch.client.IndicesAdminClient;void delete(DeleteIndexRequest request, ActionListener listener);void getIndex(GetIndexRequest request, ActionListener listener);@param;ActionListener<DeleteIndexResponse> listener;ActionListener<GetIndexResponse> listener;A listener to be notified with a result;true
org.elasticsearch.client.IndicesAdminClient;void delete(DeleteIndexRequest request, ActionListener listener);void clearCache(ClearIndicesCacheRequest request, ActionListener listener);@param;ActionListener<DeleteIndexResponse> listener;ActionListener<ClearIndicesCacheResponse> listener;A listener to be notified with a result;true
org.elasticsearch.client.IndicesAdminClient;ActionFuture close(CloseIndexRequest request);void close(CloseIndexRequest request, ActionListener listener);Free text;;;Closes an index based on the index name. ;true
org.elasticsearch.client.IndicesAdminClient;ActionFuture close(CloseIndexRequest request);void close(CloseIndexRequest request, ActionListener listener);@param;CloseIndexRequest request;CloseIndexRequest request;The close index request;true
org.elasticsearch.client.IndicesAdminClient;ActionFuture close(CloseIndexRequest request);ActionFuture open(OpenIndexRequest request);@return;;;The result future;false
org.elasticsearch.client.IndicesAdminClient;ActionFuture close(CloseIndexRequest request);ActionFuture open(OpenIndexRequest request);@param;CloseIndexRequest request;OpenIndexRequest request;The close index request;true
org.elasticsearch.client.IndicesAdminClient;ActionFuture close(CloseIndexRequest request);void open(OpenIndexRequest request, ActionListener listener);@param;CloseIndexRequest request;OpenIndexRequest request;The close index request;true
org.elasticsearch.client.IndicesAdminClient;ActionFuture close(CloseIndexRequest request);ActionFuture refresh(RefreshRequest request);@return;;;The result future;false
org.elasticsearch.client.IndicesAdminClient;ActionFuture close(CloseIndexRequest request);ActionFuture aliases(IndicesAliasesRequest request);@return;;;The result future;false
org.elasticsearch.client.IndicesAdminClient;ActionFuture close(CloseIndexRequest request);ActionFuture clearCache(ClearIndicesCacheRequest request);@return;;;The result future;false
org.elasticsearch.client.IndicesAdminClient;ActionFuture close(CloseIndexRequest request);ActionFuture updateSettings(UpdateSettingsRequest request);@return;;;The result future;false
org.elasticsearch.client.IndicesAdminClient;ActionFuture close(CloseIndexRequest request);ActionFuture validateQuery(ValidateQueryRequest request);@return;;;The result future;false
org.elasticsearch.client.IndicesAdminClient;void close(CloseIndexRequest request, ActionListener listener);ActionFuture open(OpenIndexRequest request);@param;CloseIndexRequest request;OpenIndexRequest request;The close index request;true
org.elasticsearch.client.IndicesAdminClient;void close(CloseIndexRequest request, ActionListener listener);void open(OpenIndexRequest request, ActionListener listener);@param;CloseIndexRequest request;OpenIndexRequest request;The close index request;true
org.elasticsearch.client.IndicesAdminClient;void close(CloseIndexRequest request, ActionListener listener);void open(OpenIndexRequest request, ActionListener listener);@param;ActionListener<CloseIndexResponse> listener;ActionListener<OpenIndexResponse> listener;A listener to be notified with a result;true
org.elasticsearch.client.IndicesAdminClient;void close(CloseIndexRequest request, ActionListener listener);void refresh(RefreshRequest request, ActionListener listener);@param;ActionListener<CloseIndexResponse> listener;ActionListener<RefreshResponse> listener;A listener to be notified with a result;true
org.elasticsearch.client.IndicesAdminClient;void close(CloseIndexRequest request, ActionListener listener);void flush(FlushRequest request, ActionListener listener);@param;ActionListener<CloseIndexResponse> listener;ActionListener<FlushResponse> listener;A listener to be notified with a result;true
org.elasticsearch.client.IndicesAdminClient;void close(CloseIndexRequest request, ActionListener listener);void syncedFlush(SyncedFlushRequest request, ActionListener listener);@param;ActionListener<CloseIndexResponse> listener;ActionListener<SyncedFlushResponse> listener;A listener to be notified with a result;true
org.elasticsearch.client.IndicesAdminClient;void close(CloseIndexRequest request, ActionListener listener);void forceMerge(ForceMergeRequest request, ActionListener listener);@param;ActionListener<CloseIndexResponse> listener;ActionListener<ForceMergeResponse> listener;A listener to be notified with a result;true
org.elasticsearch.client.IndicesAdminClient;void close(CloseIndexRequest request, ActionListener listener);void upgrade(UpgradeRequest request, ActionListener listener);@param;ActionListener<CloseIndexResponse> listener;ActionListener<UpgradeResponse> listener;A listener to be notified with a result;true
org.elasticsearch.client.IndicesAdminClient;void close(CloseIndexRequest request, ActionListener listener);void upgradeStatus(UpgradeStatusRequest request, ActionListener listener);@param;ActionListener<CloseIndexResponse> listener;ActionListener<UpgradeStatusResponse> listener;A listener to be notified with a result;true
org.elasticsearch.client.IndicesAdminClient;void close(CloseIndexRequest request, ActionListener listener);void putMapping(PutMappingRequest request, ActionListener listener);@param;ActionListener<CloseIndexResponse> listener;ActionListener<PutMappingResponse> listener;A listener to be notified with a result;true
org.elasticsearch.client.IndicesAdminClient;void close(CloseIndexRequest request, ActionListener listener);void aliases(IndicesAliasesRequest request, ActionListener listener);@param;ActionListener<CloseIndexResponse> listener;ActionListener<IndicesAliasesResponse> listener;A listener to be notified with a result;true
org.elasticsearch.client.IndicesAdminClient;void close(CloseIndexRequest request, ActionListener listener);void getAliases(GetAliasesRequest request, ActionListener listener);@param;ActionListener<CloseIndexResponse> listener;ActionListener<GetAliasesResponse> listener;A listener to be notified with a result;true
org.elasticsearch.client.IndicesAdminClient;void close(CloseIndexRequest request, ActionListener listener);void aliasesExist(GetAliasesRequest request, ActionListener listener);@param;ActionListener<CloseIndexResponse> listener;ActionListener<AliasesExistResponse> listener;A listener to be notified with a result;true
org.elasticsearch.client.IndicesAdminClient;void close(CloseIndexRequest request, ActionListener listener);void getIndex(GetIndexRequest request, ActionListener listener);@param;ActionListener<CloseIndexResponse> listener;ActionListener<GetIndexResponse> listener;A listener to be notified with a result;true
org.elasticsearch.client.IndicesAdminClient;void close(CloseIndexRequest request, ActionListener listener);void clearCache(ClearIndicesCacheRequest request, ActionListener listener);@param;ActionListener<CloseIndexResponse> listener;ActionListener<ClearIndicesCacheResponse> listener;A listener to be notified with a result;true
org.elasticsearch.client.IndicesAdminClient;CloseIndexRequestBuilder prepareClose(String indices);OpenIndexRequestBuilder prepareOpen(String indices);@param;String indices;String indices;The name of the indices to close;true
org.elasticsearch.client.IndicesAdminClient;ActionFuture open(OpenIndexRequest request);void open(OpenIndexRequest request, ActionListener listener);Free text;;;Open an index based on the index name. ;true
org.elasticsearch.client.IndicesAdminClient;ActionFuture open(OpenIndexRequest request);void open(OpenIndexRequest request, ActionListener listener);@param;OpenIndexRequest request;OpenIndexRequest request;The close index request;true
org.elasticsearch.client.IndicesAdminClient;ActionFuture open(OpenIndexRequest request);ActionFuture refresh(RefreshRequest request);@return;;;The result future;false
org.elasticsearch.client.IndicesAdminClient;ActionFuture open(OpenIndexRequest request);ActionFuture aliases(IndicesAliasesRequest request);@return;;;The result future;false
org.elasticsearch.client.IndicesAdminClient;ActionFuture open(OpenIndexRequest request);ActionFuture clearCache(ClearIndicesCacheRequest request);@return;;;The result future;false
org.elasticsearch.client.IndicesAdminClient;ActionFuture open(OpenIndexRequest request);ActionFuture updateSettings(UpdateSettingsRequest request);@return;;;The result future;false
org.elasticsearch.client.IndicesAdminClient;ActionFuture open(OpenIndexRequest request);ActionFuture validateQuery(ValidateQueryRequest request);@return;;;The result future;false
org.elasticsearch.client.IndicesAdminClient;void open(OpenIndexRequest request, ActionListener listener);void refresh(RefreshRequest request, ActionListener listener);@param;ActionListener<OpenIndexResponse> listener;ActionListener<RefreshResponse> listener;A listener to be notified with a result;true
org.elasticsearch.client.IndicesAdminClient;void open(OpenIndexRequest request, ActionListener listener);void flush(FlushRequest request, ActionListener listener);@param;ActionListener<OpenIndexResponse> listener;ActionListener<FlushResponse> listener;A listener to be notified with a result;true
org.elasticsearch.client.IndicesAdminClient;void open(OpenIndexRequest request, ActionListener listener);void syncedFlush(SyncedFlushRequest request, ActionListener listener);@param;ActionListener<OpenIndexResponse> listener;ActionListener<SyncedFlushResponse> listener;A listener to be notified with a result;true
org.elasticsearch.client.IndicesAdminClient;void open(OpenIndexRequest request, ActionListener listener);void forceMerge(ForceMergeRequest request, ActionListener listener);@param;ActionListener<OpenIndexResponse> listener;ActionListener<ForceMergeResponse> listener;A listener to be notified with a result;true
org.elasticsearch.client.IndicesAdminClient;void open(OpenIndexRequest request, ActionListener listener);void upgrade(UpgradeRequest request, ActionListener listener);@param;ActionListener<OpenIndexResponse> listener;ActionListener<UpgradeResponse> listener;A listener to be notified with a result;true
org.elasticsearch.client.IndicesAdminClient;void open(OpenIndexRequest request, ActionListener listener);void upgradeStatus(UpgradeStatusRequest request, ActionListener listener);@param;ActionListener<OpenIndexResponse> listener;ActionListener<UpgradeStatusResponse> listener;A listener to be notified with a result;true
org.elasticsearch.client.IndicesAdminClient;void open(OpenIndexRequest request, ActionListener listener);void putMapping(PutMappingRequest request, ActionListener listener);@param;ActionListener<OpenIndexResponse> listener;ActionListener<PutMappingResponse> listener;A listener to be notified with a result;true
org.elasticsearch.client.IndicesAdminClient;void open(OpenIndexRequest request, ActionListener listener);void aliases(IndicesAliasesRequest request, ActionListener listener);@param;ActionListener<OpenIndexResponse> listener;ActionListener<IndicesAliasesResponse> listener;A listener to be notified with a result;true
org.elasticsearch.client.IndicesAdminClient;void open(OpenIndexRequest request, ActionListener listener);void getAliases(GetAliasesRequest request, ActionListener listener);@param;ActionListener<OpenIndexResponse> listener;ActionListener<GetAliasesResponse> listener;A listener to be notified with a result;true
org.elasticsearch.client.IndicesAdminClient;void open(OpenIndexRequest request, ActionListener listener);void aliasesExist(GetAliasesRequest request, ActionListener listener);@param;ActionListener<OpenIndexResponse> listener;ActionListener<AliasesExistResponse> listener;A listener to be notified with a result;true
org.elasticsearch.client.IndicesAdminClient;void open(OpenIndexRequest request, ActionListener listener);void getIndex(GetIndexRequest request, ActionListener listener);@param;ActionListener<OpenIndexResponse> listener;ActionListener<GetIndexResponse> listener;A listener to be notified with a result;true
org.elasticsearch.client.IndicesAdminClient;void open(OpenIndexRequest request, ActionListener listener);void clearCache(ClearIndicesCacheRequest request, ActionListener listener);@param;ActionListener<OpenIndexResponse> listener;ActionListener<ClearIndicesCacheResponse> listener;A listener to be notified with a result;true
org.elasticsearch.client.IndicesAdminClient;ActionFuture refresh(RefreshRequest request);void refresh(RefreshRequest request, ActionListener listener);Free text;;;Explicitly refresh one or more indices (making the content indexed since the last refresh searchable). ;true
org.elasticsearch.client.IndicesAdminClient;ActionFuture refresh(RefreshRequest request);void refresh(RefreshRequest request, ActionListener listener);@param;RefreshRequest request;RefreshRequest request;The refresh request;true
org.elasticsearch.client.IndicesAdminClient;ActionFuture refresh(RefreshRequest request);RefreshRequestBuilder prepareRefresh(String indices);Free text;;;Explicitly refresh one or more indices (making the content indexed since the last refresh searchable). ;false
org.elasticsearch.client.IndicesAdminClient;ActionFuture refresh(RefreshRequest request);ActionFuture aliases(IndicesAliasesRequest request);@return;;;The result future;false
org.elasticsearch.client.IndicesAdminClient;ActionFuture refresh(RefreshRequest request);ActionFuture clearCache(ClearIndicesCacheRequest request);@return;;;The result future;false
org.elasticsearch.client.IndicesAdminClient;ActionFuture refresh(RefreshRequest request);ActionFuture updateSettings(UpdateSettingsRequest request);@return;;;The result future;false
org.elasticsearch.client.IndicesAdminClient;ActionFuture refresh(RefreshRequest request);ActionFuture validateQuery(ValidateQueryRequest request);@return;;;The result future;false
org.elasticsearch.client.IndicesAdminClient;void refresh(RefreshRequest request, ActionListener listener);RefreshRequestBuilder prepareRefresh(String indices);Free text;;;Explicitly refresh one or more indices (making the content indexed since the last refresh searchable). ;false
org.elasticsearch.client.IndicesAdminClient;void refresh(RefreshRequest request, ActionListener listener);void flush(FlushRequest request, ActionListener listener);@param;ActionListener<RefreshResponse> listener;ActionListener<FlushResponse> listener;A listener to be notified with a result;true
org.elasticsearch.client.IndicesAdminClient;void refresh(RefreshRequest request, ActionListener listener);void syncedFlush(SyncedFlushRequest request, ActionListener listener);@param;ActionListener<RefreshResponse> listener;ActionListener<SyncedFlushResponse> listener;A listener to be notified with a result;true
org.elasticsearch.client.IndicesAdminClient;void refresh(RefreshRequest request, ActionListener listener);void forceMerge(ForceMergeRequest request, ActionListener listener);@param;ActionListener<RefreshResponse> listener;ActionListener<ForceMergeResponse> listener;A listener to be notified with a result;true
org.elasticsearch.client.IndicesAdminClient;void refresh(RefreshRequest request, ActionListener listener);void upgrade(UpgradeRequest request, ActionListener listener);@param;ActionListener<RefreshResponse> listener;ActionListener<UpgradeResponse> listener;A listener to be notified with a result;true
org.elasticsearch.client.IndicesAdminClient;void refresh(RefreshRequest request, ActionListener listener);void upgradeStatus(UpgradeStatusRequest request, ActionListener listener);@param;ActionListener<RefreshResponse> listener;ActionListener<UpgradeStatusResponse> listener;A listener to be notified with a result;true
org.elasticsearch.client.IndicesAdminClient;void refresh(RefreshRequest request, ActionListener listener);void putMapping(PutMappingRequest request, ActionListener listener);@param;ActionListener<RefreshResponse> listener;ActionListener<PutMappingResponse> listener;A listener to be notified with a result;true
org.elasticsearch.client.IndicesAdminClient;void refresh(RefreshRequest request, ActionListener listener);void aliases(IndicesAliasesRequest request, ActionListener listener);@param;ActionListener<RefreshResponse> listener;ActionListener<IndicesAliasesResponse> listener;A listener to be notified with a result;true
org.elasticsearch.client.IndicesAdminClient;void refresh(RefreshRequest request, ActionListener listener);void getAliases(GetAliasesRequest request, ActionListener listener);@param;ActionListener<RefreshResponse> listener;ActionListener<GetAliasesResponse> listener;A listener to be notified with a result;true
org.elasticsearch.client.IndicesAdminClient;void refresh(RefreshRequest request, ActionListener listener);void aliasesExist(GetAliasesRequest request, ActionListener listener);@param;ActionListener<RefreshResponse> listener;ActionListener<AliasesExistResponse> listener;A listener to be notified with a result;true
org.elasticsearch.client.IndicesAdminClient;void refresh(RefreshRequest request, ActionListener listener);void getIndex(GetIndexRequest request, ActionListener listener);@param;ActionListener<RefreshResponse> listener;ActionListener<GetIndexResponse> listener;A listener to be notified with a result;true
org.elasticsearch.client.IndicesAdminClient;void refresh(RefreshRequest request, ActionListener listener);void clearCache(ClearIndicesCacheRequest request, ActionListener listener);@param;ActionListener<RefreshResponse> listener;ActionListener<ClearIndicesCacheResponse> listener;A listener to be notified with a result;true
org.elasticsearch.client.IndicesAdminClient;ActionFuture flush(FlushRequest request);void flush(FlushRequest request, ActionListener listener);Free text;;;Explicitly flush one or more indices (releasing memory from the node). ;true
org.elasticsearch.client.IndicesAdminClient;ActionFuture flush(FlushRequest request);void flush(FlushRequest request, ActionListener listener);@param;FlushRequest request;FlushRequest request;The flush request;true
org.elasticsearch.client.IndicesAdminClient;ActionFuture flush(FlushRequest request);FlushRequestBuilder prepareFlush(String indices);Free text;;;Explicitly flush one or more indices (releasing memory from the node). ;false
org.elasticsearch.client.IndicesAdminClient;ActionFuture flush(FlushRequest request);ActionFuture syncedFlush(SyncedFlushRequest request);@return;;;A result future;false
org.elasticsearch.client.IndicesAdminClient;ActionFuture flush(FlushRequest request);ActionFuture forceMerge(ForceMergeRequest request);@return;;;A result future;false
org.elasticsearch.client.IndicesAdminClient;ActionFuture flush(FlushRequest request);ActionFuture upgrade(UpgradeRequest request);@return;;;A result future;false
org.elasticsearch.client.IndicesAdminClient;ActionFuture flush(FlushRequest request);ActionFuture upgradeStatus(UpgradeStatusRequest request);@return;;;A result future;false
org.elasticsearch.client.IndicesAdminClient;ActionFuture flush(FlushRequest request);ActionFuture putMapping(PutMappingRequest request);@return;;;A result future;false
org.elasticsearch.client.IndicesAdminClient;void flush(FlushRequest request, ActionListener listener);FlushRequestBuilder prepareFlush(String indices);Free text;;;Explicitly flush one or more indices (releasing memory from the node). ;false
org.elasticsearch.client.IndicesAdminClient;void flush(FlushRequest request, ActionListener listener);void syncedFlush(SyncedFlushRequest request, ActionListener listener);@param;ActionListener<FlushResponse> listener;ActionListener<SyncedFlushResponse> listener;A listener to be notified with a result;true
org.elasticsearch.client.IndicesAdminClient;void flush(FlushRequest request, ActionListener listener);void forceMerge(ForceMergeRequest request, ActionListener listener);@param;ActionListener<FlushResponse> listener;ActionListener<ForceMergeResponse> listener;A listener to be notified with a result;true
org.elasticsearch.client.IndicesAdminClient;void flush(FlushRequest request, ActionListener listener);void upgrade(UpgradeRequest request, ActionListener listener);@param;ActionListener<FlushResponse> listener;ActionListener<UpgradeResponse> listener;A listener to be notified with a result;true
org.elasticsearch.client.IndicesAdminClient;void flush(FlushRequest request, ActionListener listener);void upgradeStatus(UpgradeStatusRequest request, ActionListener listener);@param;ActionListener<FlushResponse> listener;ActionListener<UpgradeStatusResponse> listener;A listener to be notified with a result;true
org.elasticsearch.client.IndicesAdminClient;void flush(FlushRequest request, ActionListener listener);void putMapping(PutMappingRequest request, ActionListener listener);@param;ActionListener<FlushResponse> listener;ActionListener<PutMappingResponse> listener;A listener to be notified with a result;true
org.elasticsearch.client.IndicesAdminClient;void flush(FlushRequest request, ActionListener listener);void aliases(IndicesAliasesRequest request, ActionListener listener);@param;ActionListener<FlushResponse> listener;ActionListener<IndicesAliasesResponse> listener;A listener to be notified with a result;true
org.elasticsearch.client.IndicesAdminClient;void flush(FlushRequest request, ActionListener listener);void getAliases(GetAliasesRequest request, ActionListener listener);@param;ActionListener<FlushResponse> listener;ActionListener<GetAliasesResponse> listener;A listener to be notified with a result;true
org.elasticsearch.client.IndicesAdminClient;void flush(FlushRequest request, ActionListener listener);void aliasesExist(GetAliasesRequest request, ActionListener listener);@param;ActionListener<FlushResponse> listener;ActionListener<AliasesExistResponse> listener;A listener to be notified with a result;true
org.elasticsearch.client.IndicesAdminClient;void flush(FlushRequest request, ActionListener listener);void getIndex(GetIndexRequest request, ActionListener listener);@param;ActionListener<FlushResponse> listener;ActionListener<GetIndexResponse> listener;A listener to be notified with a result;true
org.elasticsearch.client.IndicesAdminClient;void flush(FlushRequest request, ActionListener listener);void clearCache(ClearIndicesCacheRequest request, ActionListener listener);@param;ActionListener<FlushResponse> listener;ActionListener<ClearIndicesCacheResponse> listener;A listener to be notified with a result;true
org.elasticsearch.client.IndicesAdminClient;ActionFuture syncedFlush(SyncedFlushRequest request);void syncedFlush(SyncedFlushRequest request, ActionListener listener);Free text;;;Explicitly sync flush one or more indices (write sync id to shards for faster recovery). ;true
org.elasticsearch.client.IndicesAdminClient;ActionFuture syncedFlush(SyncedFlushRequest request);void syncedFlush(SyncedFlushRequest request, ActionListener listener);@param;SyncedFlushRequest request;SyncedFlushRequest request;The sync flush request;true
org.elasticsearch.client.IndicesAdminClient;ActionFuture syncedFlush(SyncedFlushRequest request);SyncedFlushRequestBuilder prepareSyncedFlush(String indices);Free text;;;Explicitly sync flush one or more indices (write sync id to shards for faster recovery). ;false
org.elasticsearch.client.IndicesAdminClient;ActionFuture syncedFlush(SyncedFlushRequest request);ActionFuture forceMerge(ForceMergeRequest request);@return;;;A result future;false
org.elasticsearch.client.IndicesAdminClient;ActionFuture syncedFlush(SyncedFlushRequest request);ActionFuture upgrade(UpgradeRequest request);@return;;;A result future;false
org.elasticsearch.client.IndicesAdminClient;ActionFuture syncedFlush(SyncedFlushRequest request);ActionFuture upgradeStatus(UpgradeStatusRequest request);@return;;;A result future;false
org.elasticsearch.client.IndicesAdminClient;ActionFuture syncedFlush(SyncedFlushRequest request);ActionFuture putMapping(PutMappingRequest request);@return;;;A result future;false
org.elasticsearch.client.IndicesAdminClient;void syncedFlush(SyncedFlushRequest request, ActionListener listener);SyncedFlushRequestBuilder prepareSyncedFlush(String indices);Free text;;;Explicitly sync flush one or more indices (write sync id to shards for faster recovery). ;false
org.elasticsearch.client.IndicesAdminClient;void syncedFlush(SyncedFlushRequest request, ActionListener listener);void forceMerge(ForceMergeRequest request, ActionListener listener);@param;ActionListener<SyncedFlushResponse> listener;ActionListener<ForceMergeResponse> listener;A listener to be notified with a result;true
org.elasticsearch.client.IndicesAdminClient;void syncedFlush(SyncedFlushRequest request, ActionListener listener);void upgrade(UpgradeRequest request, ActionListener listener);@param;ActionListener<SyncedFlushResponse> listener;ActionListener<UpgradeResponse> listener;A listener to be notified with a result;true
org.elasticsearch.client.IndicesAdminClient;void syncedFlush(SyncedFlushRequest request, ActionListener listener);void upgradeStatus(UpgradeStatusRequest request, ActionListener listener);@param;ActionListener<SyncedFlushResponse> listener;ActionListener<UpgradeStatusResponse> listener;A listener to be notified with a result;true
org.elasticsearch.client.IndicesAdminClient;void syncedFlush(SyncedFlushRequest request, ActionListener listener);void putMapping(PutMappingRequest request, ActionListener listener);@param;ActionListener<SyncedFlushResponse> listener;ActionListener<PutMappingResponse> listener;A listener to be notified with a result;true
org.elasticsearch.client.IndicesAdminClient;void syncedFlush(SyncedFlushRequest request, ActionListener listener);void aliases(IndicesAliasesRequest request, ActionListener listener);@param;ActionListener<SyncedFlushResponse> listener;ActionListener<IndicesAliasesResponse> listener;A listener to be notified with a result;true
org.elasticsearch.client.IndicesAdminClient;void syncedFlush(SyncedFlushRequest request, ActionListener listener);void getAliases(GetAliasesRequest request, ActionListener listener);@param;ActionListener<SyncedFlushResponse> listener;ActionListener<GetAliasesResponse> listener;A listener to be notified with a result;true
org.elasticsearch.client.IndicesAdminClient;void syncedFlush(SyncedFlushRequest request, ActionListener listener);void aliasesExist(GetAliasesRequest request, ActionListener listener);@param;ActionListener<SyncedFlushResponse> listener;ActionListener<AliasesExistResponse> listener;A listener to be notified with a result;true
org.elasticsearch.client.IndicesAdminClient;void syncedFlush(SyncedFlushRequest request, ActionListener listener);void getIndex(GetIndexRequest request, ActionListener listener);@param;ActionListener<SyncedFlushResponse> listener;ActionListener<GetIndexResponse> listener;A listener to be notified with a result;true
org.elasticsearch.client.IndicesAdminClient;void syncedFlush(SyncedFlushRequest request, ActionListener listener);void clearCache(ClearIndicesCacheRequest request, ActionListener listener);@param;ActionListener<SyncedFlushResponse> listener;ActionListener<ClearIndicesCacheResponse> listener;A listener to be notified with a result;true
org.elasticsearch.client.IndicesAdminClient;ActionFuture forceMerge(ForceMergeRequest request);void forceMerge(ForceMergeRequest request, ActionListener listener);Free text;;;Explicitly force merge one or more indices into a the number of segments. ;true
org.elasticsearch.client.IndicesAdminClient;ActionFuture forceMerge(ForceMergeRequest request);ForceMergeRequestBuilder prepareForceMerge(String indices);Free text;;;Explicitly force merge one or more indices into a the number of segments. ;false
org.elasticsearch.client.IndicesAdminClient;ActionFuture forceMerge(ForceMergeRequest request);ActionFuture upgrade(UpgradeRequest request);@return;;;A result future;false
org.elasticsearch.client.IndicesAdminClient;ActionFuture forceMerge(ForceMergeRequest request);ActionFuture upgradeStatus(UpgradeStatusRequest request);@return;;;A result future;false
org.elasticsearch.client.IndicesAdminClient;ActionFuture forceMerge(ForceMergeRequest request);ActionFuture putMapping(PutMappingRequest request);@return;;;A result future;false
org.elasticsearch.client.IndicesAdminClient;void forceMerge(ForceMergeRequest request, ActionListener listener);ForceMergeRequestBuilder prepareForceMerge(String indices);Free text;;;Explicitly force merge one or more indices into a the number of segments. ;false
org.elasticsearch.client.IndicesAdminClient;void forceMerge(ForceMergeRequest request, ActionListener listener);void upgrade(UpgradeRequest request, ActionListener listener);@param;ActionListener<ForceMergeResponse> listener;ActionListener<UpgradeResponse> listener;A listener to be notified with a result;true
org.elasticsearch.client.IndicesAdminClient;void forceMerge(ForceMergeRequest request, ActionListener listener);void upgradeStatus(UpgradeStatusRequest request, ActionListener listener);@param;ActionListener<ForceMergeResponse> listener;ActionListener<UpgradeStatusResponse> listener;A listener to be notified with a result;true
org.elasticsearch.client.IndicesAdminClient;void forceMerge(ForceMergeRequest request, ActionListener listener);void putMapping(PutMappingRequest request, ActionListener listener);@param;ActionListener<ForceMergeResponse> listener;ActionListener<PutMappingResponse> listener;A listener to be notified with a result;true
org.elasticsearch.client.IndicesAdminClient;void forceMerge(ForceMergeRequest request, ActionListener listener);void aliases(IndicesAliasesRequest request, ActionListener listener);@param;ActionListener<ForceMergeResponse> listener;ActionListener<IndicesAliasesResponse> listener;A listener to be notified with a result;true
org.elasticsearch.client.IndicesAdminClient;void forceMerge(ForceMergeRequest request, ActionListener listener);void getAliases(GetAliasesRequest request, ActionListener listener);@param;ActionListener<ForceMergeResponse> listener;ActionListener<GetAliasesResponse> listener;A listener to be notified with a result;true
org.elasticsearch.client.IndicesAdminClient;void forceMerge(ForceMergeRequest request, ActionListener listener);void aliasesExist(GetAliasesRequest request, ActionListener listener);@param;ActionListener<ForceMergeResponse> listener;ActionListener<AliasesExistResponse> listener;A listener to be notified with a result;true
org.elasticsearch.client.IndicesAdminClient;void forceMerge(ForceMergeRequest request, ActionListener listener);void getIndex(GetIndexRequest request, ActionListener listener);@param;ActionListener<ForceMergeResponse> listener;ActionListener<GetIndexResponse> listener;A listener to be notified with a result;true
org.elasticsearch.client.IndicesAdminClient;void forceMerge(ForceMergeRequest request, ActionListener listener);void clearCache(ClearIndicesCacheRequest request, ActionListener listener);@param;ActionListener<ForceMergeResponse> listener;ActionListener<ClearIndicesCacheResponse> listener;A listener to be notified with a result;true
org.elasticsearch.client.IndicesAdminClient;ActionFuture upgrade(UpgradeRequest request);void upgrade(UpgradeRequest request, ActionListener listener);Free text;;;Explicitly upgrade one or more indices ;true
org.elasticsearch.client.IndicesAdminClient;ActionFuture upgrade(UpgradeRequest request);void upgrade(UpgradeRequest request, ActionListener listener);@param;UpgradeRequest request;UpgradeRequest request;The upgrade request;true
org.elasticsearch.client.IndicesAdminClient;ActionFuture upgrade(UpgradeRequest request);UpgradeStatusRequestBuilder prepareUpgradeStatus(String indices);Free text;;;Explicitly upgrade one or more indices ;false
org.elasticsearch.client.IndicesAdminClient;ActionFuture upgrade(UpgradeRequest request);ActionFuture upgradeStatus(UpgradeStatusRequest request);@return;;;A result future;false
org.elasticsearch.client.IndicesAdminClient;ActionFuture upgrade(UpgradeRequest request);ActionFuture upgradeStatus(UpgradeStatusRequest request);@param;UpgradeRequest request;UpgradeStatusRequest request;The upgrade request;true
org.elasticsearch.client.IndicesAdminClient;ActionFuture upgrade(UpgradeRequest request);void upgradeStatus(UpgradeStatusRequest request, ActionListener listener);@param;UpgradeRequest request;UpgradeStatusRequest request;The upgrade request;true
org.elasticsearch.client.IndicesAdminClient;ActionFuture upgrade(UpgradeRequest request);ActionFuture putMapping(PutMappingRequest request);@return;;;A result future;false
org.elasticsearch.client.IndicesAdminClient;void upgrade(UpgradeRequest request, ActionListener listener);UpgradeStatusRequestBuilder prepareUpgradeStatus(String indices);Free text;;;Explicitly upgrade one or more indices ;false
org.elasticsearch.client.IndicesAdminClient;void upgrade(UpgradeRequest request, ActionListener listener);ActionFuture upgradeStatus(UpgradeStatusRequest request);@param;UpgradeRequest request;UpgradeStatusRequest request;The upgrade request;true
org.elasticsearch.client.IndicesAdminClient;void upgrade(UpgradeRequest request, ActionListener listener);void upgradeStatus(UpgradeStatusRequest request, ActionListener listener);@param;UpgradeRequest request;UpgradeStatusRequest request;The upgrade request;true
org.elasticsearch.client.IndicesAdminClient;void upgrade(UpgradeRequest request, ActionListener listener);void upgradeStatus(UpgradeStatusRequest request, ActionListener listener);@param;ActionListener<UpgradeResponse> listener;ActionListener<UpgradeStatusResponse> listener;A listener to be notified with a result;true
org.elasticsearch.client.IndicesAdminClient;void upgrade(UpgradeRequest request, ActionListener listener);void putMapping(PutMappingRequest request, ActionListener listener);@param;ActionListener<UpgradeResponse> listener;ActionListener<PutMappingResponse> listener;A listener to be notified with a result;true
org.elasticsearch.client.IndicesAdminClient;void upgrade(UpgradeRequest request, ActionListener listener);void aliases(IndicesAliasesRequest request, ActionListener listener);@param;ActionListener<UpgradeResponse> listener;ActionListener<IndicesAliasesResponse> listener;A listener to be notified with a result;true
org.elasticsearch.client.IndicesAdminClient;void upgrade(UpgradeRequest request, ActionListener listener);void getAliases(GetAliasesRequest request, ActionListener listener);@param;ActionListener<UpgradeResponse> listener;ActionListener<GetAliasesResponse> listener;A listener to be notified with a result;true
org.elasticsearch.client.IndicesAdminClient;void upgrade(UpgradeRequest request, ActionListener listener);void aliasesExist(GetAliasesRequest request, ActionListener listener);@param;ActionListener<UpgradeResponse> listener;ActionListener<AliasesExistResponse> listener;A listener to be notified with a result;true
org.elasticsearch.client.IndicesAdminClient;void upgrade(UpgradeRequest request, ActionListener listener);void getIndex(GetIndexRequest request, ActionListener listener);@param;ActionListener<UpgradeResponse> listener;ActionListener<GetIndexResponse> listener;A listener to be notified with a result;true
org.elasticsearch.client.IndicesAdminClient;void upgrade(UpgradeRequest request, ActionListener listener);void clearCache(ClearIndicesCacheRequest request, ActionListener listener);@param;ActionListener<UpgradeResponse> listener;ActionListener<ClearIndicesCacheResponse> listener;A listener to be notified with a result;true
org.elasticsearch.client.IndicesAdminClient;ActionFuture upgradeStatus(UpgradeStatusRequest request);void upgradeStatus(UpgradeStatusRequest request, ActionListener listener);Free text;;;Check upgrade status of one or more indices ;true
org.elasticsearch.client.IndicesAdminClient;ActionFuture upgradeStatus(UpgradeStatusRequest request);void upgradeStatus(UpgradeStatusRequest request, ActionListener listener);@param;UpgradeStatusRequest request;UpgradeStatusRequest request;The upgrade request;true
org.elasticsearch.client.IndicesAdminClient;ActionFuture upgradeStatus(UpgradeStatusRequest request);UpgradeRequestBuilder prepareUpgrade(String indices);Free text;;;Check upgrade status of one or more indices ;false
org.elasticsearch.client.IndicesAdminClient;ActionFuture upgradeStatus(UpgradeStatusRequest request);ActionFuture putMapping(PutMappingRequest request);@return;;;A result future;false
org.elasticsearch.client.IndicesAdminClient;void upgradeStatus(UpgradeStatusRequest request, ActionListener listener);UpgradeRequestBuilder prepareUpgrade(String indices);Free text;;;Check upgrade status of one or more indices ;false
org.elasticsearch.client.IndicesAdminClient;void upgradeStatus(UpgradeStatusRequest request, ActionListener listener);void putMapping(PutMappingRequest request, ActionListener listener);@param;ActionListener<UpgradeStatusResponse> listener;ActionListener<PutMappingResponse> listener;A listener to be notified with a result;true
org.elasticsearch.client.IndicesAdminClient;void upgradeStatus(UpgradeStatusRequest request, ActionListener listener);void aliases(IndicesAliasesRequest request, ActionListener listener);@param;ActionListener<UpgradeStatusResponse> listener;ActionListener<IndicesAliasesResponse> listener;A listener to be notified with a result;true
org.elasticsearch.client.IndicesAdminClient;void upgradeStatus(UpgradeStatusRequest request, ActionListener listener);void getAliases(GetAliasesRequest request, ActionListener listener);@param;ActionListener<UpgradeStatusResponse> listener;ActionListener<GetAliasesResponse> listener;A listener to be notified with a result;true
org.elasticsearch.client.IndicesAdminClient;void upgradeStatus(UpgradeStatusRequest request, ActionListener listener);void aliasesExist(GetAliasesRequest request, ActionListener listener);@param;ActionListener<UpgradeStatusResponse> listener;ActionListener<AliasesExistResponse> listener;A listener to be notified with a result;true
org.elasticsearch.client.IndicesAdminClient;void upgradeStatus(UpgradeStatusRequest request, ActionListener listener);void getIndex(GetIndexRequest request, ActionListener listener);@param;ActionListener<UpgradeStatusResponse> listener;ActionListener<GetIndexResponse> listener;A listener to be notified with a result;true
org.elasticsearch.client.IndicesAdminClient;void upgradeStatus(UpgradeStatusRequest request, ActionListener listener);void clearCache(ClearIndicesCacheRequest request, ActionListener listener);@param;ActionListener<UpgradeStatusResponse> listener;ActionListener<ClearIndicesCacheResponse> listener;A listener to be notified with a result;true
org.elasticsearch.client.IndicesAdminClient;void getMappings(GetMappingsRequest request, ActionListener listener);ActionFuture getMappings(GetMappingsRequest request);Whole;;;Get the complete mappings of one or more types    ;false
org.elasticsearch.client.IndicesAdminClient;void getMappings(GetMappingsRequest request, ActionListener listener);GetMappingsRequestBuilder prepareGetMappings(String indices);Whole;;;Get the complete mappings of one or more types    ;false
org.elasticsearch.client.IndicesAdminClient;ActionFuture getMappings(GetMappingsRequest request);GetMappingsRequestBuilder prepareGetMappings(String indices);Whole;;;Get the complete mappings of one or more types    ;false
org.elasticsearch.client.IndicesAdminClient;void getFieldMappings(GetFieldMappingsRequest request, ActionListener listener);GetFieldMappingsRequestBuilder prepareGetFieldMappings(String indices);Whole;;;Get the mappings of specific fields    ;false
org.elasticsearch.client.IndicesAdminClient;void getFieldMappings(GetFieldMappingsRequest request, ActionListener listener);ActionFuture getFieldMappings(GetFieldMappingsRequest request);Whole;;;Get the mappings of specific fields    ;false
org.elasticsearch.client.IndicesAdminClient;GetFieldMappingsRequestBuilder prepareGetFieldMappings(String indices);ActionFuture getFieldMappings(GetFieldMappingsRequest request);Whole;;;Get the mappings of specific fields    ;false
org.elasticsearch.client.IndicesAdminClient;ActionFuture putMapping(PutMappingRequest request);void putMapping(PutMappingRequest request, ActionListener listener);Free text;;;Add mapping definition for a type into one or more indices. ;true
org.elasticsearch.client.IndicesAdminClient;ActionFuture putMapping(PutMappingRequest request);void putMapping(PutMappingRequest request, ActionListener listener);@param;PutMappingRequest request;PutMappingRequest request;The create mapping request;true
org.elasticsearch.client.IndicesAdminClient;ActionFuture putMapping(PutMappingRequest request);PutMappingRequestBuilder preparePutMapping(String indices);Free text;;;Add mapping definition for a type into one or more indices. ;false
org.elasticsearch.client.IndicesAdminClient;void putMapping(PutMappingRequest request, ActionListener listener);PutMappingRequestBuilder preparePutMapping(String indices);Free text;;;Add mapping definition for a type into one or more indices. ;false
org.elasticsearch.client.IndicesAdminClient;void putMapping(PutMappingRequest request, ActionListener listener);void aliases(IndicesAliasesRequest request, ActionListener listener);@param;ActionListener<PutMappingResponse> listener;ActionListener<IndicesAliasesResponse> listener;A listener to be notified with a result;true
org.elasticsearch.client.IndicesAdminClient;void putMapping(PutMappingRequest request, ActionListener listener);void getAliases(GetAliasesRequest request, ActionListener listener);@param;ActionListener<PutMappingResponse> listener;ActionListener<GetAliasesResponse> listener;A listener to be notified with a result;true
org.elasticsearch.client.IndicesAdminClient;void putMapping(PutMappingRequest request, ActionListener listener);void aliasesExist(GetAliasesRequest request, ActionListener listener);@param;ActionListener<PutMappingResponse> listener;ActionListener<AliasesExistResponse> listener;A listener to be notified with a result;true
org.elasticsearch.client.IndicesAdminClient;void putMapping(PutMappingRequest request, ActionListener listener);void getIndex(GetIndexRequest request, ActionListener listener);@param;ActionListener<PutMappingResponse> listener;ActionListener<GetIndexResponse> listener;A listener to be notified with a result;true
org.elasticsearch.client.IndicesAdminClient;void putMapping(PutMappingRequest request, ActionListener listener);void clearCache(ClearIndicesCacheRequest request, ActionListener listener);@param;ActionListener<PutMappingResponse> listener;ActionListener<ClearIndicesCacheResponse> listener;A listener to be notified with a result;true
org.elasticsearch.client.IndicesAdminClient;ActionFuture aliases(IndicesAliasesRequest request);void aliases(IndicesAliasesRequest request, ActionListener listener);Free text;;;Allows to add/remove aliases from indices. ;true
org.elasticsearch.client.IndicesAdminClient;ActionFuture aliases(IndicesAliasesRequest request);void aliases(IndicesAliasesRequest request, ActionListener listener);@param;IndicesAliasesRequest request;IndicesAliasesRequest request;The index aliases request;true
org.elasticsearch.client.IndicesAdminClient;ActionFuture aliases(IndicesAliasesRequest request);IndicesAliasesRequestBuilder prepareAliases();Free text;;;Allows to add/remove aliases from indices. ;false
org.elasticsearch.client.IndicesAdminClient;ActionFuture aliases(IndicesAliasesRequest request);void getAliases(GetAliasesRequest request, ActionListener listener);@param;IndicesAliasesRequest request;GetAliasesRequest request;The index aliases request;true
org.elasticsearch.client.IndicesAdminClient;ActionFuture aliases(IndicesAliasesRequest request);void aliasesExist(GetAliasesRequest request, ActionListener listener);@param;IndicesAliasesRequest request;GetAliasesRequest request;The index aliases request;true
org.elasticsearch.client.IndicesAdminClient;ActionFuture aliases(IndicesAliasesRequest request);void getIndex(GetIndexRequest request, ActionListener listener);@param;IndicesAliasesRequest request;GetIndexRequest request;The index aliases request;true
org.elasticsearch.client.IndicesAdminClient;ActionFuture aliases(IndicesAliasesRequest request);ActionFuture clearCache(ClearIndicesCacheRequest request);@return;;;The result future;false
org.elasticsearch.client.IndicesAdminClient;ActionFuture aliases(IndicesAliasesRequest request);ActionFuture updateSettings(UpdateSettingsRequest request);@return;;;The result future;false
org.elasticsearch.client.IndicesAdminClient;ActionFuture aliases(IndicesAliasesRequest request);ActionFuture validateQuery(ValidateQueryRequest request);@return;;;The result future;false
org.elasticsearch.client.IndicesAdminClient;void aliases(IndicesAliasesRequest request, ActionListener listener);IndicesAliasesRequestBuilder prepareAliases();Free text;;;Allows to add/remove aliases from indices. ;false
org.elasticsearch.client.IndicesAdminClient;void aliases(IndicesAliasesRequest request, ActionListener listener);void getAliases(GetAliasesRequest request, ActionListener listener);@param;IndicesAliasesRequest request;GetAliasesRequest request;The index aliases request;true
org.elasticsearch.client.IndicesAdminClient;void aliases(IndicesAliasesRequest request, ActionListener listener);void getAliases(GetAliasesRequest request, ActionListener listener);@param;ActionListener<IndicesAliasesResponse> listener;ActionListener<GetAliasesResponse> listener;A listener to be notified with a result;true
org.elasticsearch.client.IndicesAdminClient;void aliases(IndicesAliasesRequest request, ActionListener listener);void aliasesExist(GetAliasesRequest request, ActionListener listener);@param;IndicesAliasesRequest request;GetAliasesRequest request;The index aliases request;true
org.elasticsearch.client.IndicesAdminClient;void aliases(IndicesAliasesRequest request, ActionListener listener);void aliasesExist(GetAliasesRequest request, ActionListener listener);@param;ActionListener<IndicesAliasesResponse> listener;ActionListener<AliasesExistResponse> listener;A listener to be notified with a result;true
org.elasticsearch.client.IndicesAdminClient;void aliases(IndicesAliasesRequest request, ActionListener listener);void getIndex(GetIndexRequest request, ActionListener listener);@param;IndicesAliasesRequest request;GetIndexRequest request;The index aliases request;true
org.elasticsearch.client.IndicesAdminClient;void aliases(IndicesAliasesRequest request, ActionListener listener);void getIndex(GetIndexRequest request, ActionListener listener);@param;ActionListener<IndicesAliasesResponse> listener;ActionListener<GetIndexResponse> listener;A listener to be notified with a result;true
org.elasticsearch.client.IndicesAdminClient;void aliases(IndicesAliasesRequest request, ActionListener listener);void clearCache(ClearIndicesCacheRequest request, ActionListener listener);@param;ActionListener<IndicesAliasesResponse> listener;ActionListener<ClearIndicesCacheResponse> listener;A listener to be notified with a result;true
org.elasticsearch.client.IndicesAdminClient;ActionFuture getAliases(GetAliasesRequest request);void getAliases(GetAliasesRequest request, ActionListener listener);Free text;;;Get specific index aliases that exists in particular indices and / or by name. ;true
org.elasticsearch.client.IndicesAdminClient;ActionFuture getAliases(GetAliasesRequest request);GetAliasesRequestBuilder prepareGetAliases(String aliases);Free text;;;Get specific index aliases that exists in particular indices and / or by name. ;false
org.elasticsearch.client.IndicesAdminClient;ActionFuture getAliases(GetAliasesRequest request);ActionFuture aliasesExist(GetAliasesRequest request);@param;GetAliasesRequest request;GetAliasesRequest request;The result future;true
org.elasticsearch.client.IndicesAdminClient;ActionFuture getAliases(GetAliasesRequest request);ActionFuture getIndex(GetIndexRequest request);@param;GetAliasesRequest request;GetIndexRequest request;The result future;true
org.elasticsearch.client.IndicesAdminClient;void getAliases(GetAliasesRequest request, ActionListener listener);GetAliasesRequestBuilder prepareGetAliases(String aliases);Free text;;;Get specific index aliases that exists in particular indices and / or by name. ;false
org.elasticsearch.client.IndicesAdminClient;void getAliases(GetAliasesRequest request, ActionListener listener);void aliasesExist(GetAliasesRequest request, ActionListener listener);@param;GetAliasesRequest request;GetAliasesRequest request;The index aliases request;true
org.elasticsearch.client.IndicesAdminClient;void getAliases(GetAliasesRequest request, ActionListener listener);void aliasesExist(GetAliasesRequest request, ActionListener listener);@param;ActionListener<GetAliasesResponse> listener;ActionListener<AliasesExistResponse> listener;A listener to be notified with a result;true
org.elasticsearch.client.IndicesAdminClient;void getAliases(GetAliasesRequest request, ActionListener listener);void getIndex(GetIndexRequest request, ActionListener listener);@param;GetAliasesRequest request;GetIndexRequest request;The index aliases request;true
org.elasticsearch.client.IndicesAdminClient;void getAliases(GetAliasesRequest request, ActionListener listener);void getIndex(GetIndexRequest request, ActionListener listener);@param;ActionListener<GetAliasesResponse> listener;ActionListener<GetIndexResponse> listener;A listener to be notified with a result;true
org.elasticsearch.client.IndicesAdminClient;void getAliases(GetAliasesRequest request, ActionListener listener);void clearCache(ClearIndicesCacheRequest request, ActionListener listener);@param;ActionListener<GetAliasesResponse> listener;ActionListener<ClearIndicesCacheResponse> listener;A listener to be notified with a result;true
org.elasticsearch.client.IndicesAdminClient;ActionFuture aliasesExist(GetAliasesRequest request);ActionFuture getIndex(GetIndexRequest request);@param;GetAliasesRequest request;GetIndexRequest request;The result future;true
org.elasticsearch.client.IndicesAdminClient;void aliasesExist(GetAliasesRequest request, ActionListener listener);void getIndex(GetIndexRequest request, ActionListener listener);@param;GetAliasesRequest request;GetIndexRequest request;The index aliases request;true
org.elasticsearch.client.IndicesAdminClient;void aliasesExist(GetAliasesRequest request, ActionListener listener);void getIndex(GetIndexRequest request, ActionListener listener);@param;ActionListener<AliasesExistResponse> listener;ActionListener<GetIndexResponse> listener;A listener to be notified with a result;true
org.elasticsearch.client.IndicesAdminClient;void aliasesExist(GetAliasesRequest request, ActionListener listener);void clearCache(ClearIndicesCacheRequest request, ActionListener listener);@param;ActionListener<AliasesExistResponse> listener;ActionListener<ClearIndicesCacheResponse> listener;A listener to be notified with a result;true
org.elasticsearch.client.IndicesAdminClient;ActionFuture getIndex(GetIndexRequest request);void getIndex(GetIndexRequest request, ActionListener listener);Free text;;;Get index metadata for particular indices. ;true
org.elasticsearch.client.IndicesAdminClient;ActionFuture getIndex(GetIndexRequest request);GetIndexRequestBuilder prepareGetIndex();Free text;;;Get index metadata for particular indices. ;false
org.elasticsearch.client.IndicesAdminClient;void getIndex(GetIndexRequest request, ActionListener listener);GetIndexRequestBuilder prepareGetIndex();Free text;;;Get index metadata for particular indices. ;false
org.elasticsearch.client.IndicesAdminClient;void getIndex(GetIndexRequest request, ActionListener listener);void clearCache(ClearIndicesCacheRequest request, ActionListener listener);@param;ActionListener<GetIndexResponse> listener;ActionListener<ClearIndicesCacheResponse> listener;A listener to be notified with a result;true
org.elasticsearch.client.IndicesAdminClient;ActionFuture clearCache(ClearIndicesCacheRequest request);void clearCache(ClearIndicesCacheRequest request, ActionListener listener);Free text;;;Clear indices cache. ;true
org.elasticsearch.client.IndicesAdminClient;ActionFuture clearCache(ClearIndicesCacheRequest request);void clearCache(ClearIndicesCacheRequest request, ActionListener listener);@param;ClearIndicesCacheRequest request;ClearIndicesCacheRequest request;The clear indices cache request;true
org.elasticsearch.client.IndicesAdminClient;ActionFuture clearCache(ClearIndicesCacheRequest request);ClearIndicesCacheRequestBuilder prepareClearCache(String indices);Free text;;;Clear indices cache. ;false
org.elasticsearch.client.IndicesAdminClient;ActionFuture clearCache(ClearIndicesCacheRequest request);ActionFuture updateSettings(UpdateSettingsRequest request);@return;;;The result future;false
org.elasticsearch.client.IndicesAdminClient;ActionFuture clearCache(ClearIndicesCacheRequest request);ActionFuture validateQuery(ValidateQueryRequest request);@return;;;The result future;false
org.elasticsearch.client.IndicesAdminClient;void clearCache(ClearIndicesCacheRequest request, ActionListener listener);ClearIndicesCacheRequestBuilder prepareClearCache(String indices);Free text;;;Clear indices cache. ;false
org.elasticsearch.client.IndicesAdminClient;ActionFuture updateSettings(UpdateSettingsRequest request);void updateSettings(UpdateSettingsRequest request, ActionListener listener);Free text;;;Updates settings of one or more indices. ;true
org.elasticsearch.client.IndicesAdminClient;ActionFuture updateSettings(UpdateSettingsRequest request);void updateSettings(UpdateSettingsRequest request, ActionListener listener);@param;UpdateSettingsRequest request;UpdateSettingsRequest request;the update settings request;true
org.elasticsearch.client.IndicesAdminClient;ActionFuture updateSettings(UpdateSettingsRequest request);ActionFuture validateQuery(ValidateQueryRequest request);@return;;;The result future;false
org.elasticsearch.client.IndicesAdminClient;ActionFuture analyze(AnalyzeRequest request);void analyze(AnalyzeRequest request, ActionListener listener);Whole;;;Analyze text under the provided index.    ;false
org.elasticsearch.client.IndicesAdminClient;ActionFuture analyze(AnalyzeRequest request);AnalyzeRequestBuilder prepareAnalyze(String index, String text);Free text;;;Analyze text under the provided index. ;false
org.elasticsearch.client.IndicesAdminClient;void analyze(AnalyzeRequest request, ActionListener listener);AnalyzeRequestBuilder prepareAnalyze(String index, String text);Free text;;;Analyze text under the provided index. ;false
org.elasticsearch.client.IndicesAdminClient;AnalyzeRequestBuilder prepareAnalyze(String index, String text);AnalyzeRequestBuilder prepareAnalyze(String text);@param;String text;String text;The text to analyze;true
org.elasticsearch.client.IndicesAdminClient;ActionFuture putTemplate(PutIndexTemplateRequest request);void putTemplate(PutIndexTemplateRequest request, ActionListener listener);Whole;;;Puts an index template.    ;false
org.elasticsearch.client.IndicesAdminClient;ActionFuture putTemplate(PutIndexTemplateRequest request);PutIndexTemplateRequestBuilder preparePutTemplate(String name);Free text;;;Puts an index template. ;false
org.elasticsearch.client.IndicesAdminClient;void putTemplate(PutIndexTemplateRequest request, ActionListener listener);PutIndexTemplateRequestBuilder preparePutTemplate(String name);Free text;;;Puts an index template. ;false
org.elasticsearch.client.IndicesAdminClient;PutIndexTemplateRequestBuilder preparePutTemplate(String name);DeleteIndexTemplateRequestBuilder prepareDeleteTemplate(String name);@param;String name;String name;The name of the template.;true
org.elasticsearch.client.IndicesAdminClient;void deleteTemplate(DeleteIndexTemplateRequest request, ActionListener listener);DeleteIndexTemplateRequestBuilder prepareDeleteTemplate(String name);Free text;;;Deletes an index template. ;false
org.elasticsearch.client.IndicesAdminClient;ActionFuture validateQuery(ValidateQueryRequest request);void validateQuery(ValidateQueryRequest request, ActionListener listener);Free text;;;Validate a query for correctness. ;true
org.elasticsearch.client.IndicesAdminClient;ActionFuture validateQuery(ValidateQueryRequest request);void validateQuery(ValidateQueryRequest request, ActionListener listener);@param;ValidateQueryRequest request;ValidateQueryRequest request;The count request;true
org.elasticsearch.client.IndicesAdminClient;ActionFuture validateQuery(ValidateQueryRequest request);ValidateQueryRequestBuilder prepareValidateQuery(String indices);Free text;;;Validate a query for correctness. ;false
org.elasticsearch.client.IndicesAdminClient;void validateQuery(ValidateQueryRequest request, ActionListener listener);ValidateQueryRequestBuilder prepareValidateQuery(String indices);Free text;;;Validate a query for correctness. ;false
org.elasticsearch.client.IndicesAdminClient;ResizeRequestBuilder prepareResizeIndex(String sourceIndex, String targetIndex);ActionFuture resizeIndex(ResizeRequest request);Whole;;;Resize an index using an explicit request allowing to specify the settings, mappings and aliases of the target index of the index.    ;false
org.elasticsearch.client.IndicesAdminClient;RolloverRequestBuilder prepareRolloverIndex(String sourceAlias);ActionFuture rolloversIndex(RolloverRequest request);Whole;;;Swaps the index pointed to by an alias given all provided conditions are satisfied    ;false
org.elasticsearch.client.IndicesAdminClient;RolloverRequestBuilder prepareRolloverIndex(String sourceAlias);void rolloverIndex(RolloverRequest request, ActionListener listener);Whole;;;Swaps the index pointed to by an alias given all provided conditions are satisfied    ;false
org.elasticsearch.client.IndicesAdminClient;ActionFuture rolloversIndex(RolloverRequest request);void rolloverIndex(RolloverRequest request, ActionListener listener);Whole;;;Swaps the index pointed to by an alias given all provided conditions are satisfied    ;false
org.elasticsearch.rest.DeprecationRestHandler;boolean validHeaderValue(String value);String requireValidHeader(String value);@param;String value;String value;The header value to check;true
org.elasticsearch.rest.RestUtils;String decodeComponent(String s);String decodeComponent(String s, Charset charset);@return;;;The decoded string, or s if there's nothing to decode. If the string to decode is null, returns an empty string.;true
org.elasticsearch.rest.RestUtils;String decodeComponent(String s);String decodeComponent(String s, Charset charset);@param;String s;String s;The string to decode (can be empty).;true
org.elasticsearch.rest.RestUtils;String decodeComponent(String s);String decodeComponent(String s, Charset charset);@throws;;;if the string contains a malformed escape sequence.;true
org.elasticsearch.rest.BytesRestResponse; BytesRestResponse(RestStatus status, String content); BytesRestResponse(RestStatus status, String contentType, String content);Whole;;;Creates a new plain text response.    ;false
org.elasticsearch.rest.BytesRestResponse; BytesRestResponse(RestStatus status, String contentType, byte[] content); BytesRestResponse(RestStatus status, String contentType, BytesReference content);Whole;;;Creates a binary response.    ;false
org.elasticsearch.rest.action.RestActions;void buildNodesHeader(XContentBuilder builder, Params params, BaseNodesResponse response);void buildNodesHeader(XContentBuilder builder, Params params, int total, int successful, int failed, List failures);@param;XContentBuilder builder;XContentBuilder builder;XContent builder.;true
org.elasticsearch.rest.action.RestActions;void buildNodesHeader(XContentBuilder builder, Params params, BaseNodesResponse response);void buildNodesHeader(XContentBuilder builder, Params params, int total, int successful, int failed, List failures);@param;Params params;Params params;XContent parameters.;true
org.elasticsearch.rest.action.RestActions;void buildNodesHeader(XContentBuilder builder, Params params, BaseNodesResponse response);BytesRestResponse nodesResponse(XContentBuilder builder, Params params, NodesResponse response);@param;XContentBuilder builder;XContentBuilder builder;XContent builder.;true
org.elasticsearch.rest.action.RestActions;void buildNodesHeader(XContentBuilder builder, Params params, BaseNodesResponse response);BytesRestResponse nodesResponse(XContentBuilder builder, Params params, NodesResponse response);@param;Params params;Params params;XContent parameters.;true
org.elasticsearch.rest.action.RestActions;void buildNodesHeader(XContentBuilder builder, Params params, int total, int successful, int failed, List failures);BytesRestResponse nodesResponse(XContentBuilder builder, Params params, NodesResponse response);@param;XContentBuilder builder;XContentBuilder builder;XContent builder.;true
org.elasticsearch.rest.action.RestActions;void buildNodesHeader(XContentBuilder builder, Params params, int total, int successful, int failed, List failures);BytesRestResponse nodesResponse(XContentBuilder builder, Params params, NodesResponse response);@param;Params params;Params params;XContent parameters.;true
org.elasticsearch.rest.RestRequest; RestRequest(NamedXContentRegistry xContentRegistry, String uri, Map headers); RestRequest(NamedXContentRegistry xContentRegistry, Map params, String path, Map headers);Free text;;;Creates a new RestRequest ;true
org.elasticsearch.rest.RestRequest; RestRequest(NamedXContentRegistry xContentRegistry, String uri, Map headers); RestRequest(NamedXContentRegistry xContentRegistry, Map params, String path, Map headers);@param;NamedXContentRegistry xContentRegistry;NamedXContentRegistry xContentRegistry;the xContentRegistry to use when parsing XContent;true
org.elasticsearch.rest.RestRequest; RestRequest(NamedXContentRegistry xContentRegistry, String uri, Map headers); RestRequest(NamedXContentRegistry xContentRegistry, Map params, String path, Map headers);@param;Map<String,List<String>> headers;Map<String,List<String>> headers;a map of the headers. This map should implement a Case-Insensitive hashing for keys as HTTP header names are case insensitive;true
org.elasticsearch.rest.RestController;void registerAsDeprecatedHandler(RestRequest.Method method, String path, RestHandler handler, String deprecationMessage, DeprecationLogger logger);void registerWithDeprecatedHandler(RestRequest.Method method, String path, RestHandler handler, RestRequest.Method deprecatedMethod, String deprecatedPath, DeprecationLogger logger);@param;RestRequest.Method method;RestRequest.Method method;GET, POST, etc.;true
org.elasticsearch.rest.RestController;void registerAsDeprecatedHandler(RestRequest.Method method, String path, RestHandler handler, String deprecationMessage, DeprecationLogger logger);void registerWithDeprecatedHandler(RestRequest.Method method, String path, RestHandler handler, RestRequest.Method deprecatedMethod, String deprecatedPath, DeprecationLogger logger);@param;RestRequest.Method method;RestRequest.Method deprecatedMethod;GET, POST, etc.;false
org.elasticsearch.rest.RestController;void registerAsDeprecatedHandler(RestRequest.Method method, String path, RestHandler handler, String deprecationMessage, DeprecationLogger logger);void registerWithDeprecatedHandler(RestRequest.Method method, String path, RestHandler handler, RestRequest.Method deprecatedMethod, String deprecatedPath, DeprecationLogger logger);@param;RestHandler handler;RestHandler handler;The handler to actually execute;true
org.elasticsearch.rest.RestController;void registerAsDeprecatedHandler(RestRequest.Method method, String path, RestHandler handler, String deprecationMessage, DeprecationLogger logger);void registerWithDeprecatedHandler(RestRequest.Method method, String path, RestHandler handler, RestRequest.Method deprecatedMethod, String deprecatedPath, DeprecationLogger logger);@param;DeprecationLogger logger;DeprecationLogger logger;The existing deprecation logger to use;true
org.elasticsearch.rest.RestController;void registerAsDeprecatedHandler(RestRequest.Method method, String path, RestHandler handler, String deprecationMessage, DeprecationLogger logger);void registerHandler(RestRequest.Method method, String path, RestHandler handler);@param;RestRequest.Method method;RestRequest.Method method;GET, POST, etc.;true
org.elasticsearch.rest.RestController;void registerAsDeprecatedHandler(RestRequest.Method method, String path, RestHandler handler, String deprecationMessage, DeprecationLogger logger);void registerHandler(RestRequest.Method method, String path, RestHandler handler);@param;String path;String path;Path to handle (e.g., "/{index}/{type}/_bulk");true
org.elasticsearch.rest.RestController;void registerAsDeprecatedHandler(RestRequest.Method method, String path, RestHandler handler, String deprecationMessage, DeprecationLogger logger);void registerHandler(RestRequest.Method method, String path, RestHandler handler);@param;RestHandler handler;RestHandler handler;The handler to actually execute;true
org.elasticsearch.rest.RestController;void registerWithDeprecatedHandler(RestRequest.Method method, String path, RestHandler handler, RestRequest.Method deprecatedMethod, String deprecatedPath, DeprecationLogger logger);void registerHandler(RestRequest.Method method, String path, RestHandler handler);@param;RestRequest.Method method;RestRequest.Method method;GET, POST, etc.;true
org.elasticsearch.rest.RestController;void registerWithDeprecatedHandler(RestRequest.Method method, String path, RestHandler handler, RestRequest.Method deprecatedMethod, String deprecatedPath, DeprecationLogger logger);void registerHandler(RestRequest.Method method, String path, RestHandler handler);@param;RestHandler handler;RestHandler handler;The handler to actually execute;true
org.elasticsearch.rest.RestController;void registerWithDeprecatedHandler(RestRequest.Method method, String path, RestHandler handler, RestRequest.Method deprecatedMethod, String deprecatedPath, DeprecationLogger logger);void registerHandler(RestRequest.Method method, String path, RestHandler handler);@param;RestRequest.Method deprecatedMethod;RestRequest.Method method;GET, POST, etc.;false
org.elasticsearch.ElasticsearchException; ElasticsearchException(String msg, Object args); ElasticsearchException(String msg, Throwable cause, Object args);@param;String msg;String msg;the detail message;true
org.elasticsearch.ElasticsearchException; ElasticsearchException(String msg, Object args); ElasticsearchException(String msg, Throwable cause, Object args);@param;Object args;Object args;the arguments for the message;true
org.elasticsearch.ElasticsearchException;void addMetadata(String key, String values);void addMetadata(String key, List values);Whole;;;Adds a new piece of metadata with the given key. If the provided key is already present, the corresponding metadata will be replaced    ;false
org.elasticsearch.ElasticsearchException;void addHeader(String key, List value);void addHeader(String key, String value);Whole;;;Adds a new header with the given key. This method will replace existing header if a header with the same key already exists    ;false
org.apache.lucene.document.BinaryRange; BinaryRange(String name, byte[] encodedRange);Query newIntersectsQuery(String field, byte[] encodedRange);@param;String name;String field;field name. must not be null.;false
org.apache.lucene.document.BinaryRange; BinaryRange(String name, byte[] encodedRange);Query newIntersectsQuery(String field, byte[] encodedRange);@param;byte[] encodedRange;byte[] encodedRange;Encoded range;true
